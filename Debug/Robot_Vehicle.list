
Robot_Vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eccc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800ee70  0800ee70  0001ee70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f220  0800f220  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f220  0800f220  0001f220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f228  0800f228  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f228  0800f228  0001f228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f22c  0800f22c  0001f22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ecc  20000074  0800f2a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002f40  0800f2a4  00022f40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d850  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004159  00000000  00000000  0003d8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  00041a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001870  00000000  00000000  00043440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b027  00000000  00000000  00044cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001efbb  00000000  00000000  0005fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6dc2  00000000  00000000  0007ec92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125a54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aa4  00000000  00000000  00125aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee54 	.word	0x0800ee54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800ee54 	.word	0x0800ee54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <vApplicationGetIdleTaskMemory+0x30>)
 8000f12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000090 	.word	0x20000090
 8000f2c:	200000ec 	.word	0x200000ec

08000f30 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <vApplicationGetTimerTaskMemory+0x2c>)
 8000f40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <vApplicationGetTimerTaskMemory+0x30>)
 8000f46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200002ec 	.word	0x200002ec
 8000f60:	20000348 	.word	0x20000348

08000f64 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f68:	f3bf 8f4f 	dsb	sy
}
 8000f6c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <__NVIC_SystemReset+0x24>)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f76:	4904      	ldr	r1, [pc, #16]	; (8000f88 <__NVIC_SystemReset+0x24>)
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_SystemReset+0x28>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f7e:	f3bf 8f4f 	dsb	sy
}
 8000f82:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <__NVIC_SystemReset+0x20>
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	05fa0004 	.word	0x05fa0004

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b0ba      	sub	sp, #232	; 0xe8
 8000f94:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	buffer.x = 50;
 8000f96:	4bbc      	ldr	r3, [pc, #752]	; (8001288 <main+0x2f8>)
 8000f98:	2232      	movs	r2, #50	; 0x32
 8000f9a:	61da      	str	r2, [r3, #28]
    buffer.y = 50;
 8000f9c:	4bba      	ldr	r3, [pc, #744]	; (8001288 <main+0x2f8>)
 8000f9e:	2232      	movs	r2, #50	; 0x32
 8000fa0:	621a      	str	r2, [r3, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f002 fa2b 	bl	80033fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 f9b5 	bl	8001314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 fc93 	bl	80018d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fae:	f000 fc5b 	bl	8001868 <MX_DMA_Init>
  MX_TIM10_Init();
 8000fb2:	f000 fb93 	bl	80016dc <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8000fb6:	f000 fc27 	bl	8001808 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8000fba:	f000 fbd7 	bl	800176c <MX_TIM11_Init>
  MX_TIM3_Init();
 8000fbe:	f000 fa95 	bl	80014ec <MX_TIM3_Init>
  MX_I2C1_Init();
 8000fc2:	f000 fa65 	bl	8001490 <MX_I2C1_Init>
  MX_TIM5_Init();
 8000fc6:	f000 fb29 	bl	800161c <MX_TIM5_Init>
  MX_ADC1_Init();
 8000fca:	f000 fa0d 	bl	80013e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_DeInit(&hi2c1);
 8000fce:	48af      	ldr	r0, [pc, #700]	; (800128c <main+0x2fc>)
 8000fd0:	f004 fa16 	bl	8005400 <HAL_I2C_DeInit>
  HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	48ae      	ldr	r0, [pc, #696]	; (8001290 <main+0x300>)
 8000fd8:	f006 f968 	bl	80072ac <HAL_TIM_IC_Start_IT>
  GPIOC->ODR |= GPIO_ODR_OD10;
 8000fdc:	4bad      	ldr	r3, [pc, #692]	; (8001294 <main+0x304>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	4aac      	ldr	r2, [pc, #688]	; (8001294 <main+0x304>)
 8000fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe6:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD12;
 8000fe8:	4baa      	ldr	r3, [pc, #680]	; (8001294 <main+0x304>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	4aa9      	ldr	r2, [pc, #676]	; (8001294 <main+0x304>)
 8000fee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff2:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD11;
 8000ff4:	4ba7      	ldr	r3, [pc, #668]	; (8001294 <main+0x304>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	4aa6      	ldr	r2, [pc, #664]	; (8001294 <main+0x304>)
 8000ffa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ffe:	6153      	str	r3, [r2, #20]
  GPIOD->ODR |= GPIO_ODR_OD2;
 8001000:	4ba5      	ldr	r3, [pc, #660]	; (8001298 <main+0x308>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	4aa4      	ldr	r2, [pc, #656]	; (8001298 <main+0x308>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6153      	str	r3, [r2, #20]
  GPIOB->ODR |= GPIO_ODR_OD15;
 800100c:	4ba3      	ldr	r3, [pc, #652]	; (800129c <main+0x30c>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	4aa2      	ldr	r2, [pc, #648]	; (800129c <main+0x30c>)
 8001012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001016:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD6;
 8001018:	4b9e      	ldr	r3, [pc, #632]	; (8001294 <main+0x304>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a9d      	ldr	r2, [pc, #628]	; (8001294 <main+0x304>)
 800101e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001022:	6153      	str	r3, [r2, #20]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001024:	489e      	ldr	r0, [pc, #632]	; (80012a0 <main+0x310>)
 8001026:	f002 ff23 	bl	8003e70 <HAL_DMA_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <main+0xa4>
  {
    Error_Handler();
 8001030:	f001 fac7 	bl	80025c2 <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1,DMA_Handle,hdma_adc1);
 8001034:	4b9b      	ldr	r3, [pc, #620]	; (80012a4 <main+0x314>)
 8001036:	4a9a      	ldr	r2, [pc, #616]	; (80012a0 <main+0x310>)
 8001038:	639a      	str	r2, [r3, #56]	; 0x38
 800103a:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <main+0x310>)
 800103c:	4a99      	ldr	r2, [pc, #612]	; (80012a4 <main+0x314>)
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&buffer.line_data, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	4999      	ldr	r1, [pc, #612]	; (80012a8 <main+0x318>)
 8001044:	4897      	ldr	r0, [pc, #604]	; (80012a4 <main+0x314>)
 8001046:	f002 fa83 	bl	8003550 <HAL_ADC_Start_DMA>

  SCB->CCR |= (1<<1); //Bit 1 USERSETMPEND Enables unprivileged software access to the STIR, see Software trigger interrupt register (NVIC_STIR)
 800104a:	4b98      	ldr	r3, [pc, #608]	; (80012ac <main+0x31c>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	4a97      	ldr	r2, [pc, #604]	; (80012ac <main+0x31c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6153      	str	r3, [r2, #20]

  HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_1, &buffer.encod_dataA, sizeof(buffer.encod_dataA));
 8001056:	2304      	movs	r3, #4
 8001058:	4a95      	ldr	r2, [pc, #596]	; (80012b0 <main+0x320>)
 800105a:	2100      	movs	r1, #0
 800105c:	4895      	ldr	r0, [pc, #596]	; (80012b4 <main+0x324>)
 800105e:	f006 fa3f 	bl	80074e0 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_2, &buffer.encod_dataB, sizeof(buffer.encod_dataB));
 8001062:	2304      	movs	r3, #4
 8001064:	4a94      	ldr	r2, [pc, #592]	; (80012b8 <main+0x328>)
 8001066:	2104      	movs	r1, #4
 8001068:	4892      	ldr	r0, [pc, #584]	; (80012b4 <main+0x324>)
 800106a:	f006 fa39 	bl	80074e0 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800106e:	2104      	movs	r1, #4
 8001070:	4892      	ldr	r0, [pc, #584]	; (80012bc <main+0x32c>)
 8001072:	f005 fe07 	bl	8006c84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001076:	210c      	movs	r1, #12
 8001078:	4890      	ldr	r0, [pc, #576]	; (80012bc <main+0x32c>)
 800107a:	f005 fe03 	bl	8006c84 <HAL_TIM_PWM_Start>

  while((FLASH->SR & FLASH_SR_BSY) == (1<<16))
 800107e:	e002      	b.n	8001086 <main+0xf6>
  {
	  HAL_Delay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f002 f9fd 	bl	8003480 <HAL_Delay>
  while((FLASH->SR & FLASH_SR_BSY) == (1<<16))
 8001086:	4b8e      	ldr	r3, [pc, #568]	; (80012c0 <main+0x330>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001092:	d0f5      	beq.n	8001080 <main+0xf0>
  }
  HAL_FLASH_Unlock();
 8001094:	f003 fb42 	bl	800471c <HAL_FLASH_Unlock>
  //Sector 6 0x0804 0000 - 0x0805 FFFF 128 Kbytes
  FLASH_EraseInitTypeDef pEraseInit =
 8001098:	4b8a      	ldr	r3, [pc, #552]	; (80012c4 <main+0x334>)
 800109a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800109e:	461d      	mov	r5, r3
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	6023      	str	r3, [r4, #0]
				  FLASH_BANK_1,
				  FLASH_SECTOR_6,
				  1,
				  FLASH_VOLTAGE_RANGE_2
		  };
  uint32_t SectorError = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  //HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
  uint8_t* reset_state = 0x08040000; // Start of Sector 6 in FLASH
 80010ae:	4b86      	ldr	r3, [pc, #536]	; (80012c8 <main+0x338>)
 80010b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if(*reset_state == 0xFF)
 80010b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2bff      	cmp	r3, #255	; 0xff
 80010bc:	d10a      	bne.n	80010d4 <main+0x144>
  {
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (uint32_t)reset_state, 0x00);
 80010be:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	2000      	movs	r0, #0
 80010cc:	f003 fad2 	bl	8004674 <HAL_FLASH_Program>
	  // Perform software reset
	  NVIC_SystemReset();
 80010d0:	f7ff ff48 	bl	8000f64 <__NVIC_SystemReset>
  }
  HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80010d4:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80010d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fc8e 	bl	8004a00 <HAL_FLASHEx_Erase>
  HAL_Delay(1500);
 80010e4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010e8:	f002 f9ca 	bl	8003480 <HAL_Delay>
  HAL_FLASH_Lock();
 80010ec:	f003 fb38 	bl	8004760 <HAL_FLASH_Lock>

  buffer.xEventGroup1 = xEventGroupCreate();
 80010f0:	f008 fcb3 	bl	8009a5a <xEventGroupCreate>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a64      	ldr	r2, [pc, #400]	; (8001288 <main+0x2f8>)
 80010f8:	6593      	str	r3, [r2, #88]	; 0x58
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  buffer.xTimer1_ultrs = xTimerCreate("Timer ultrs trigger", pdMS_TO_TICKS( 40 ), pdTRUE, ( void * ) 0, vCallbackFunctionTimer1);
 80010fa:	4b74      	ldr	r3, [pc, #464]	; (80012cc <main+0x33c>)
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	2201      	movs	r2, #1
 8001102:	2128      	movs	r1, #40	; 0x28
 8001104:	4872      	ldr	r0, [pc, #456]	; (80012d0 <main+0x340>)
 8001106:	f00a fe63 	bl	800bdd0 <xTimerCreate>
 800110a:	4603      	mov	r3, r0
 800110c:	4a5e      	ldr	r2, [pc, #376]	; (8001288 <main+0x2f8>)
 800110e:	6093      	str	r3, [r2, #8]
  xTimerStart(buffer.xTimer1_ultrs, portMAX_DELAY);
 8001110:	4b5d      	ldr	r3, [pc, #372]	; (8001288 <main+0x2f8>)
 8001112:	689c      	ldr	r4, [r3, #8]
 8001114:	f00a f922 	bl	800b35c <xTaskGetTickCount>
 8001118:	4602      	mov	r2, r0
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	2101      	movs	r1, #1
 8001124:	4620      	mov	r0, r4
 8001126:	f00a feaf 	bl	800be88 <xTimerGenericCommand>

  buffer.xTimer2_encod = xTimerCreate("Timer encoder", pdMS_TO_TICKS( 10 ), pdTRUE, ( void * ) 0, vCallbackFunctionTimer2);
 800112a:	4b6a      	ldr	r3, [pc, #424]	; (80012d4 <main+0x344>)
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2300      	movs	r3, #0
 8001130:	2201      	movs	r2, #1
 8001132:	210a      	movs	r1, #10
 8001134:	4868      	ldr	r0, [pc, #416]	; (80012d8 <main+0x348>)
 8001136:	f00a fe4b 	bl	800bdd0 <xTimerCreate>
 800113a:	4603      	mov	r3, r0
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <main+0x2f8>)
 800113e:	64d3      	str	r3, [r2, #76]	; 0x4c
  xTimerStart(buffer.xTimer2_encod, portMAX_DELAY);
 8001140:	4b51      	ldr	r3, [pc, #324]	; (8001288 <main+0x2f8>)
 8001142:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001144:	f00a f90a 	bl	800b35c <xTaskGetTickCount>
 8001148:	4602      	mov	r2, r0
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2300      	movs	r3, #0
 8001152:	2101      	movs	r1, #1
 8001154:	4620      	mov	r0, r4
 8001156:	f00a fe97 	bl	800be88 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  buffer.xQueue1_ultrs = xQueueCreate(10, sizeof(uint16_t));
 800115a:	2200      	movs	r2, #0
 800115c:	2102      	movs	r1, #2
 800115e:	200a      	movs	r0, #10
 8001160:	f008 ffde 	bl	800a120 <xQueueGenericCreate>
 8001164:	4603      	mov	r3, r0
 8001166:	4a48      	ldr	r2, [pc, #288]	; (8001288 <main+0x2f8>)
 8001168:	6013      	str	r3, [r2, #0]
  buffer.xQueue2_instr4m = xQueueCreate(40, sizeof(uint8_t));
 800116a:	2200      	movs	r2, #0
 800116c:	2101      	movs	r1, #1
 800116e:	2028      	movs	r0, #40	; 0x28
 8001170:	f008 ffd6 	bl	800a120 <xQueueGenericCreate>
 8001174:	4603      	mov	r3, r0
 8001176:	4a44      	ldr	r2, [pc, #272]	; (8001288 <main+0x2f8>)
 8001178:	6193      	str	r3, [r2, #24]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UltrasonicDistance */
  osThreadDef(UltrasonicDistance, ultrasonic_dis, osPriorityNormal, 0, 128);
 800117a:	4b58      	ldr	r3, [pc, #352]	; (80012dc <main+0x34c>)
 800117c:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001180:	461d      	mov	r5, r3
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001186:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800118a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UltrasonicDistanceHandle = osThreadCreate(osThread(UltrasonicDistance), NULL);
 800118e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f008 fc14 	bl	80099c2 <osThreadCreate>
 800119a:	4603      	mov	r3, r0
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <main+0x350>)
 800119e:	6013      	str	r3, [r2, #0]

  /* definition and creation of LineTracking */
  osThreadDef(LineTracking, line_tracking, osPriorityNormal, 0, 128);
 80011a0:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <main+0x354>)
 80011a2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80011a6:	461d      	mov	r5, r3
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LineTrackingHandle = osThreadCreate(osThread(LineTracking), NULL);
 80011b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f008 fc01 	bl	80099c2 <osThreadCreate>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a49      	ldr	r2, [pc, #292]	; (80012e8 <main+0x358>)
 80011c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Accelerometer */
  osThreadDef(Accelerometer, accelerometer, osPriorityNormal, 0, 160);
 80011c6:	4b49      	ldr	r3, [pc, #292]	; (80012ec <main+0x35c>)
 80011c8:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80011cc:	461d      	mov	r5, r3
 80011ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelerometerHandle = osThreadCreate(osThread(Accelerometer), NULL);
 80011da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f008 fbee 	bl	80099c2 <osThreadCreate>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a41      	ldr	r2, [pc, #260]	; (80012f0 <main+0x360>)
 80011ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motors */
  osThreadDef(Motors, motors, osPriorityNormal, 0, 400);
 80011ec:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <main+0x364>)
 80011ee:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80011f2:	461d      	mov	r5, r3
 80011f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorsHandle = osThreadCreate(osThread(Motors), NULL);
 8001200:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f008 fbdb 	bl	80099c2 <osThreadCreate>
 800120c:	4603      	mov	r3, r0
 800120e:	4a3a      	ldr	r2, [pc, #232]	; (80012f8 <main+0x368>)
 8001210:	6013      	str	r3, [r2, #0]

  /* definition and creation of Encoders */
  osThreadDef(Encoders, encoders, osPriorityNormal, 0, 200);
 8001212:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <main+0x36c>)
 8001214:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001218:	461d      	mov	r5, r3
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001222:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncodersHandle = osThreadCreate(osThread(Encoders), NULL);
 8001226:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f008 fbc8 	bl	80099c2 <osThreadCreate>
 8001232:	4603      	mov	r3, r0
 8001234:	4a32      	ldr	r2, [pc, #200]	; (8001300 <main+0x370>)
 8001236:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_task */
  osThreadDef(UART_task, uart_task, osPriorityNormal, 0, 128);
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <main+0x374>)
 800123a:	f107 041c 	add.w	r4, r7, #28
 800123e:	461d      	mov	r5, r3
 8001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001244:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_taskHandle = osThreadCreate(osThread(UART_task), NULL);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f008 fbb5 	bl	80099c2 <osThreadCreate>
 8001258:	4603      	mov	r3, r0
 800125a:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <main+0x378>)
 800125c:	6013      	str	r3, [r2, #0]

  /* definition and creation of PID_regulation */
  osThreadDef(PID_regulation, pid, osPriorityNormal, 0, 200);
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <main+0x37c>)
 8001260:	463c      	mov	r4, r7
 8001262:	461d      	mov	r5, r3
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PID_regulationHandle = osThreadCreate(osThread(PID_regulation), NULL);
 8001270:	463b      	mov	r3, r7
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f008 fba4 	bl	80099c2 <osThreadCreate>
 800127a:	4603      	mov	r3, r0
 800127c:	4a24      	ldr	r2, [pc, #144]	; (8001310 <main+0x380>)
 800127e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001280:	f008 fb98 	bl	80099b4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001284:	e7fe      	b.n	8001284 <main+0x2f4>
 8001286:	bf00      	nop
 8001288:	20000884 	.word	0x20000884
 800128c:	200005f0 	.word	0x200005f0
 8001290:	200006d4 	.word	0x200006d4
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40020400 	.word	0x40020400
 80012a0:	20000590 	.word	0x20000590
 80012a4:	20000548 	.word	0x20000548
 80012a8:	200008d4 	.word	0x200008d4
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	200008b0 	.word	0x200008b0
 80012b4:	2000068c 	.word	0x2000068c
 80012b8:	200008b4 	.word	0x200008b4
 80012bc:	20000644 	.word	0x20000644
 80012c0:	40023c00 	.word	0x40023c00
 80012c4:	0800eef8 	.word	0x0800eef8
 80012c8:	08040000 	.word	0x08040000
 80012cc:	08001ab9 	.word	0x08001ab9
 80012d0:	0800eed4 	.word	0x0800eed4
 80012d4:	08001ae5 	.word	0x08001ae5
 80012d8:	0800eee8 	.word	0x0800eee8
 80012dc:	0800ef0c 	.word	0x0800ef0c
 80012e0:	20000868 	.word	0x20000868
 80012e4:	0800ef28 	.word	0x0800ef28
 80012e8:	2000086c 	.word	0x2000086c
 80012ec:	0800ef44 	.word	0x0800ef44
 80012f0:	20000870 	.word	0x20000870
 80012f4:	0800ef60 	.word	0x0800ef60
 80012f8:	20000874 	.word	0x20000874
 80012fc:	0800ef7c 	.word	0x0800ef7c
 8001300:	20000878 	.word	0x20000878
 8001304:	0800ef98 	.word	0x0800ef98
 8001308:	2000087c 	.word	0x2000087c
 800130c:	0800efb4 	.word	0x0800efb4
 8001310:	20000880 	.word	0x20000880

08001314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b094      	sub	sp, #80	; 0x50
 8001318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2230      	movs	r2, #48	; 0x30
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f00b fd2a 	bl	800cd7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <SystemClock_Config+0xcc>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <SystemClock_Config+0xcc>)
 8001342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001346:	6413      	str	r3, [r2, #64]	; 0x40
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <SystemClock_Config+0xcc>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <SystemClock_Config+0xd0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001360:	4a20      	ldr	r2, [pc, #128]	; (80013e4 <SystemClock_Config+0xd0>)
 8001362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <SystemClock_Config+0xd0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001374:	2302      	movs	r3, #2
 8001376:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800137c:	2310      	movs	r3, #16
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001380:	2302      	movs	r3, #2
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001384:	2300      	movs	r3, #0
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001388:	2308      	movs	r3, #8
 800138a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800138c:	2354      	movs	r3, #84	; 0x54
 800138e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001394:	2304      	movs	r3, #4
 8001396:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001398:	f107 0320 	add.w	r3, r7, #32
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fedb 	bl	8006158 <HAL_RCC_OscConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013a8:	f001 f90b 	bl	80025c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ac:	230f      	movs	r3, #15
 80013ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b0:	2302      	movs	r3, #2
 80013b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	2102      	movs	r1, #2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f005 f93d 	bl	8006648 <HAL_RCC_ClockConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013d4:	f001 f8f5 	bl	80025c2 <Error_Handler>
  }
}
 80013d8:	bf00      	nop
 80013da:	3750      	adds	r7, #80	; 0x50
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40007000 	.word	0x40007000

080013e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_ADC1_Init+0x9c>)
 80013fc:	4a22      	ldr	r2, [pc, #136]	; (8001488 <MX_ADC1_Init+0xa0>)
 80013fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_ADC1_Init+0x9c>)
 8001402:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001406:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <MX_ADC1_Init+0x9c>)
 800140a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800140e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_ADC1_Init+0x9c>)
 8001412:	2201      	movs	r2, #1
 8001414:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_ADC1_Init+0x9c>)
 8001418:	2201      	movs	r2, #1
 800141a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_ADC1_Init+0x9c>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_ADC1_Init+0x9c>)
 8001426:	2200      	movs	r2, #0
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_ADC1_Init+0x9c>)
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <MX_ADC1_Init+0xa4>)
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_ADC1_Init+0x9c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_ADC1_Init+0x9c>)
 8001438:	2201      	movs	r2, #1
 800143a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_ADC1_Init+0x9c>)
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_ADC1_Init+0x9c>)
 8001446:	2201      	movs	r2, #1
 8001448:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800144a:	480e      	ldr	r0, [pc, #56]	; (8001484 <MX_ADC1_Init+0x9c>)
 800144c:	f002 f83c 	bl	80034c8 <HAL_ADC_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001456:	f001 f8b4 	bl	80025c2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800145a:	230f      	movs	r3, #15
 800145c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_ADC1_Init+0x9c>)
 800146c:	f002 f97e 	bl	800376c <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001476:	f001 f8a4 	bl	80025c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000548 	.word	0x20000548
 8001488:	40012000 	.word	0x40012000
 800148c:	0f000001 	.word	0x0f000001

08001490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <MX_I2C1_Init+0x50>)
 8001496:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <MX_I2C1_Init+0x54>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_I2C1_Init+0x50>)
 800149c:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <MX_I2C1_Init+0x58>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_I2C1_Init+0x50>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <MX_I2C1_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_I2C1_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <MX_I2C1_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_I2C1_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <MX_I2C1_Init+0x50>)
 80014ce:	f003 fe53 	bl	8005178 <HAL_I2C_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d8:	f001 f873 	bl	80025c2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200005f0 	.word	0x200005f0
 80014e4:	40005400 	.word	0x40005400
 80014e8:	000186a0 	.word	0x000186a0

080014ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	; 0x38
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800151c:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <MX_TIM3_Init+0x128>)
 800151e:	4a3e      	ldr	r2, [pc, #248]	; (8001618 <MX_TIM3_Init+0x12c>)
 8001520:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <MX_TIM3_Init+0x128>)
 8001524:	2253      	movs	r2, #83	; 0x53
 8001526:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <MX_TIM3_Init+0x128>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <MX_TIM3_Init+0x128>)
 8001530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001534:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <MX_TIM3_Init+0x128>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800153c:	4b35      	ldr	r3, [pc, #212]	; (8001614 <MX_TIM3_Init+0x128>)
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001542:	4834      	ldr	r0, [pc, #208]	; (8001614 <MX_TIM3_Init+0x128>)
 8001544:	f005 fa92 	bl	8006a6c <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800154e:	f001 f838 	bl	80025c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155c:	4619      	mov	r1, r3
 800155e:	482d      	ldr	r0, [pc, #180]	; (8001614 <MX_TIM3_Init+0x128>)
 8001560:	f006 fbc0 	bl	8007ce4 <HAL_TIM_ConfigClockSource>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800156a:	f001 f82a 	bl	80025c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800156e:	4829      	ldr	r0, [pc, #164]	; (8001614 <MX_TIM3_Init+0x128>)
 8001570:	f005 fb2e 	bl	8006bd0 <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800157a:	f001 f822 	bl	80025c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	4619      	mov	r1, r3
 800158c:	4821      	ldr	r0, [pc, #132]	; (8001614 <MX_TIM3_Init+0x128>)
 800158e:	f007 f963 	bl	8008858 <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001598:	f001 f813 	bl	80025c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800159c:	2370      	movs	r3, #112	; 0x70
 800159e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	4818      	ldr	r0, [pc, #96]	; (8001614 <MX_TIM3_Init+0x128>)
 80015b4:	f006 fad4 	bl	8007b60 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015be:	f001 f800 	bl	80025c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2204      	movs	r2, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4812      	ldr	r0, [pc, #72]	; (8001614 <MX_TIM3_Init+0x128>)
 80015ca:	f006 fac9 	bl	8007b60 <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80015d4:	f000 fff5 	bl	80025c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2208      	movs	r2, #8
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_TIM3_Init+0x128>)
 80015e0:	f006 fabe 	bl	8007b60 <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80015ea:	f000 ffea 	bl	80025c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	220c      	movs	r2, #12
 80015f2:	4619      	mov	r1, r3
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <MX_TIM3_Init+0x128>)
 80015f6:	f006 fab3 	bl	8007b60 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001600:	f000 ffdf 	bl	80025c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <MX_TIM3_Init+0x128>)
 8001606:	f001 fcc9 	bl	8002f9c <HAL_TIM_MspPostInit>

}
 800160a:	bf00      	nop
 800160c:	3738      	adds	r7, #56	; 0x38
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000644 	.word	0x20000644
 8001618:	40000400 	.word	0x40000400

0800161c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800162c:	463b      	mov	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <MX_TIM5_Init+0xb8>)
 800163a:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <MX_TIM5_Init+0xbc>)
 800163c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8399;
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <MX_TIM5_Init+0xb8>)
 8001640:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001644:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <MX_TIM5_Init+0xb8>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <MX_TIM5_Init+0xb8>)
 800164e:	f04f 32ff 	mov.w	r2, #4294967295
 8001652:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <MX_TIM5_Init+0xb8>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <MX_TIM5_Init+0xb8>)
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001660:	481c      	ldr	r0, [pc, #112]	; (80016d4 <MX_TIM5_Init+0xb8>)
 8001662:	f005 fdd3 	bl	800720c <HAL_TIM_IC_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800166c:	f000 ffa9 	bl	80025c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4619      	mov	r1, r3
 800167e:	4815      	ldr	r0, [pc, #84]	; (80016d4 <MX_TIM5_Init+0xb8>)
 8001680:	f007 f8ea 	bl	8008858 <HAL_TIMEx_MasterConfigSynchronization>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800168a:	f000 ff9a 	bl	80025c2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800168e:	230a      	movs	r3, #10
 8001690:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001692:	2301      	movs	r3, #1
 8001694:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800169e:	463b      	mov	r3, r7
 80016a0:	2200      	movs	r2, #0
 80016a2:	4619      	mov	r1, r3
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <MX_TIM5_Init+0xb8>)
 80016a6:	f006 f9bf 	bl	8007a28 <HAL_TIM_IC_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80016b0:	f000 ff87 	bl	80025c2 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	2204      	movs	r2, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <MX_TIM5_Init+0xb8>)
 80016bc:	f006 f9b4 	bl	8007a28 <HAL_TIM_IC_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80016c6:	f000 ff7c 	bl	80025c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000068c 	.word	0x2000068c
 80016d8:	40000c00 	.word	0x40000c00

080016dc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80016e2:	463b      	mov	r3, r7
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_TIM10_Init+0x88>)
 80016f0:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <MX_TIM10_Init+0x8c>)
 80016f2:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 194;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_TIM10_Init+0x88>)
 80016f6:	22c2      	movs	r2, #194	; 0xc2
 80016f8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_TIM10_Init+0x88>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_TIM10_Init+0x88>)
 8001702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001706:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_TIM10_Init+0x88>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_TIM10_Init+0x88>)
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001714:	4813      	ldr	r0, [pc, #76]	; (8001764 <MX_TIM10_Init+0x88>)
 8001716:	f005 f9a9 	bl	8006a6c <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8001720:	f000 ff4f 	bl	80025c2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8001724:	480f      	ldr	r0, [pc, #60]	; (8001764 <MX_TIM10_Init+0x88>)
 8001726:	f005 fd71 	bl	800720c <HAL_TIM_IC_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8001730:	f000 ff47 	bl	80025c2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001734:	230a      	movs	r3, #10
 8001736:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001738:	2301      	movs	r3, #1
 800173a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <MX_TIM10_Init+0x88>)
 800174c:	f006 f96c 	bl	8007a28 <HAL_TIM_IC_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8001756:	f000 ff34 	bl	80025c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200006d4 	.word	0x200006d4
 8001768:	40014400 	.word	0x40014400

0800176c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	615a      	str	r2, [r3, #20]
 8001782:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <MX_TIM11_Init+0x94>)
 8001786:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <MX_TIM11_Init+0x98>)
 8001788:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 31;
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <MX_TIM11_Init+0x94>)
 800178c:	221f      	movs	r2, #31
 800178e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_TIM11_Init+0x94>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_TIM11_Init+0x94>)
 8001798:	f242 7210 	movw	r2, #10000	; 0x2710
 800179c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MX_TIM11_Init+0x94>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_TIM11_Init+0x94>)
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017aa:	4815      	ldr	r0, [pc, #84]	; (8001800 <MX_TIM11_Init+0x94>)
 80017ac:	f005 f95e 	bl	8006a6c <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80017b6:	f000 ff04 	bl	80025c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <MX_TIM11_Init+0x94>)
 80017bc:	f005 fa08 	bl	8006bd0 <HAL_TIM_PWM_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80017c6:	f000 fefc 	bl	80025c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ca:	2360      	movs	r3, #96	; 0x60
 80017cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 80017ce:	2314      	movs	r3, #20
 80017d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	4619      	mov	r1, r3
 80017e0:	4807      	ldr	r0, [pc, #28]	; (8001800 <MX_TIM11_Init+0x94>)
 80017e2:	f006 f9bd 	bl	8007b60 <HAL_TIM_PWM_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80017ec:	f000 fee9 	bl	80025c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <MX_TIM11_Init+0x94>)
 80017f2:	f001 fbd3 	bl	8002f9c <HAL_TIM_MspPostInit>

}
 80017f6:	bf00      	nop
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000071c 	.word	0x2000071c
 8001804:	40014800 	.word	0x40014800

08001808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_USART1_UART_Init+0x58>)
 800180e:	4a15      	ldr	r2, [pc, #84]	; (8001864 <MX_USART1_UART_Init+0x5c>)
 8001810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001814:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART1_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART1_UART_Init+0x58>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART1_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001840:	f007 f88c 	bl	800895c <HAL_UART_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800184a:	f000 feba 	bl	80025c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <MX_USART1_UART_Init+0x5c>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <MX_USART1_UART_Init+0x5c>)
 8001854:	f043 0320 	orr.w	r3, r3, #32
 8001858:	60d3      	str	r3, [r2, #12]
  /* USER CODE END USART1_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000824 	.word	0x20000824
 8001864:	40011000 	.word	0x40011000

08001868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_DMA_Init+0x68>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <MX_DMA_Init+0x68>)
 8001878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_DMA_Init+0x68>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_DMA_Init+0x68>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <MX_DMA_Init+0x68>)
 8001894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <MX_DMA_Init+0x68>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2105      	movs	r1, #5
 80018aa:	200d      	movs	r0, #13
 80018ac:	f002 fab6 	bl	8003e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80018b0:	200d      	movs	r0, #13
 80018b2:	f002 facf 	bl	8003e54 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2105      	movs	r1, #5
 80018ba:	200f      	movs	r0, #15
 80018bc:	f002 faae 	bl	8003e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018c0:	200f      	movs	r0, #15
 80018c2:	f002 fac7 	bl	8003e54 <HAL_NVIC_EnableIRQ>

}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <MX_GPIO_Init+0x178>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a56      	ldr	r2, [pc, #344]	; (8001a4c <MX_GPIO_Init+0x178>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <MX_GPIO_Init+0x178>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <MX_GPIO_Init+0x178>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <MX_GPIO_Init+0x178>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <MX_GPIO_Init+0x178>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <MX_GPIO_Init+0x178>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a48      	ldr	r2, [pc, #288]	; (8001a4c <MX_GPIO_Init+0x178>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <MX_GPIO_Init+0x178>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <MX_GPIO_Init+0x178>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a41      	ldr	r2, [pc, #260]	; (8001a4c <MX_GPIO_Init+0x178>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <MX_GPIO_Init+0x178>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <MX_GPIO_Init+0x178>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <MX_GPIO_Init+0x178>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <MX_GPIO_Init+0x178>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11
 8001976:	2200      	movs	r2, #0
 8001978:	f649 4140 	movw	r1, #40000	; 0x9c40
 800197c:	4834      	ldr	r0, [pc, #208]	; (8001a50 <MX_GPIO_Init+0x17c>)
 800197e:	f003 fbc9 	bl	8005114 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	2101      	movs	r1, #1
 8001986:	4833      	ldr	r0, [pc, #204]	; (8001a54 <MX_GPIO_Init+0x180>)
 8001988:	f003 fbc4 	bl	8005114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001992:	4831      	ldr	r0, [pc, #196]	; (8001a58 <MX_GPIO_Init+0x184>)
 8001994:	f003 fbbe 	bl	8005114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2104      	movs	r1, #4
 800199c:	482f      	ldr	r0, [pc, #188]	; (8001a5c <MX_GPIO_Init+0x188>)
 800199e:	f003 fbb9 	bl	8005114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC15 PC6 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11
 80019a2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80019a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	4825      	ldr	r0, [pc, #148]	; (8001a50 <MX_GPIO_Init+0x17c>)
 80019bc:	f003 f942 	bl	8004c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019c0:	2301      	movs	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	481f      	ldr	r0, [pc, #124]	; (8001a54 <MX_GPIO_Init+0x180>)
 80019d8:	f003 f934 	bl	8004c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80019dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	4819      	ldr	r0, [pc, #100]	; (8001a58 <MX_GPIO_Init+0x184>)
 80019f4:	f003 f926 	bl	8004c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4811      	ldr	r0, [pc, #68]	; (8001a58 <MX_GPIO_Init+0x184>)
 8001a12:	f003 f917 	bl	8004c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a16:	2304      	movs	r3, #4
 8001a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480b      	ldr	r0, [pc, #44]	; (8001a5c <MX_GPIO_Init+0x188>)
 8001a2e:	f003 f909 	bl	8004c44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2105      	movs	r1, #5
 8001a36:	2028      	movs	r0, #40	; 0x28
 8001a38:	f002 f9f0 	bl	8003e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a3c:	2028      	movs	r0, #40	; 0x28
 8001a3e:	f002 fa09 	bl	8003e54 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40021c00 	.word	0x40021c00
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	40020c00 	.word	0x40020c00

08001a60 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	if(htim == &htim10 )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d106      	bne.n	8001a7e <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		xQueueSendToBackFromISR(buffer.xQueue1_ultrs, (void*)(&(TIM10->CCR1)) ,NULL);
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	2300      	movs	r3, #0
 8001a76:	2200      	movs	r2, #0
 8001a78:	4905      	ldr	r1, [pc, #20]	; (8001a90 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001a7a:	f008 fca9 	bl	800a3d0 <xQueueGenericSendFromISR>
	}
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200006d4 	.word	0x200006d4
 8001a8c:	20000884 	.word	0x20000884
 8001a90:	40014434 	.word	0x40014434

08001a94 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d103      	bne.n	8001aac <HAL_TIM_PWM_PulseFinishedCallback+0x18>
	{
		HAL_TIM_PWM_Stop_IT(&htim11, TIM_CHANNEL_1);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001aa8:	f005 fafe 	bl	80070a8 <HAL_TIM_PWM_Stop_IT>
	}
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2000071c 	.word	0x2000071c

08001ab8 <vCallbackFunctionTimer1>:

void vCallbackFunctionTimer1( TimerHandle_t xTimer )
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_IT(&htim11, TIM_CHANNEL_1);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4806      	ldr	r0, [pc, #24]	; (8001adc <vCallbackFunctionTimer1+0x24>)
 8001ac4:	f005 f9f2 	bl	8006eac <HAL_TIM_PWM_Start_IT>
//	xTaskNotifyGive(LineTrackingHandle);
	xEventGroupSetBits(buffer.xEventGroup1, 0x40);
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <vCallbackFunctionTimer1+0x28>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	2140      	movs	r1, #64	; 0x40
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f008 f8e4 	bl	8009c9c <xEventGroupSetBits>

}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	2000071c 	.word	0x2000071c
 8001ae0:	20000884 	.word	0x20000884

08001ae4 <vCallbackFunctionTimer2>:

void vCallbackFunctionTimer2( TimerHandle_t xTimer )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	//xTaskNotifyGive(EncodersHandle);
	xEventGroupSetBits(buffer.xEventGroup1, 0x2);
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <vCallbackFunctionTimer2+0x1c>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	2102      	movs	r1, #2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f008 f8d2 	bl	8009c9c <xEventGroupSetBits>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000884 	.word	0x20000884

08001b04 <vApplicationIdleHook>:

void vApplicationIdleHook(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8001b08:	bf00      	nop
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af04      	add	r7, sp, #16
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) // Freefall/Motion interrupt
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b24:	d10d      	bne.n	8001b42 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		uint8_t result;
		HAL_I2C_Mem_Read(&hi2c1, (0x1D<<1), FF_MT_SRC, 1, &result, sizeof(uint8_t), 100);
 8001b26:	2364      	movs	r3, #100	; 0x64
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	f107 030f 	add.w	r3, r7, #15
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	2216      	movs	r2, #22
 8001b38:	213a      	movs	r1, #58	; 0x3a
 8001b3a:	4808      	ldr	r0, [pc, #32]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x48>)
 8001b3c:	f003 fd8a 	bl	8005654 <HAL_I2C_Mem_Read>
		__asm__ volatile("NOP");
 8001b40:	bf00      	nop
	}
	if(GPIO_Pin == GPIO_PIN_14) //Data ready
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b48:	d104      	bne.n	8001b54 <HAL_GPIO_EXTI_Callback+0x40>
	{
		mma8452x_ReadData(&hi2c1, MMA8452X_I2C_ADDRESS, buffer.accelerm_data);
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001b4c:	213a      	movs	r1, #58	; 0x3a
 8001b4e:	4803      	ldr	r0, [pc, #12]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x48>)
 8001b50:	f000 ffb5 	bl	8002abe <mma8452x_ReadData>
	}
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200005f0 	.word	0x200005f0
 8001b60:	200008d5 	.word	0x200008d5

08001b64 <UART_RxCallback>:

void UART_RxCallback (UART_HandleTypeDef * huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	xQueueSendToBackFromISR(buffer.xQueue2_instr4m, (void*)(&(USART1->DR)) ,NULL);
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <UART_RxCallback+0x20>)
 8001b6e:	6998      	ldr	r0, [r3, #24]
 8001b70:	2300      	movs	r3, #0
 8001b72:	2200      	movs	r2, #0
 8001b74:	4904      	ldr	r1, [pc, #16]	; (8001b88 <UART_RxCallback+0x24>)
 8001b76:	f008 fc2b 	bl	800a3d0 <xQueueGenericSendFromISR>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000884 	.word	0x20000884
 8001b88:	40011004 	.word	0x40011004

08001b8c <DMA1_Stream2_Callback>:

void DMA1_Stream2_Callback(DMA_HandleTypeDef* hdma)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	buffer.encod_timeA = buffer.encod_dataA - buffer.encod_olddataA;
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <DMA1_Stream2_Callback+0x58>)
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <DMA1_Stream2_Callback+0x58>)
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <DMA1_Stream2_Callback+0x58>)
 8001ba0:	63d3      	str	r3, [r2, #60]	; 0x3c
	buffer.angular_speedA = WHEEL_PERIMETER/(40*buffer.encod_timeA); // nm/(10^-4 * s)=10^-5 *m/s
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <DMA1_Stream2_Callback+0x58>)
 8001ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <DMA1_Stream2_Callback+0x5c>)
 8001bb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <DMA1_Stream2_Callback+0x58>)
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
	buffer.angular_speedA = buffer.angular_speedA/10; // 10^-1*mm/s or 10^-4 m/s
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <DMA1_Stream2_Callback+0x58>)
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <DMA1_Stream2_Callback+0x60>)
 8001bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc6:	1092      	asrs	r2, r2, #2
 8001bc8:	17db      	asrs	r3, r3, #31
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <DMA1_Stream2_Callback+0x58>)
 8001bce:	6453      	str	r3, [r2, #68]	; 0x44
	buffer.encod_olddataA =buffer.encod_dataA;
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <DMA1_Stream2_Callback+0x58>)
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <DMA1_Stream2_Callback+0x58>)
 8001bd6:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	20000884 	.word	0x20000884
 8001be8:	0c28cb00 	.word	0x0c28cb00
 8001bec:	66666667 	.word	0x66666667

08001bf0 <DMA1_Stream4_Callback>:

void DMA1_Stream4_Callback(DMA_HandleTypeDef* hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	buffer.encod_timeB = buffer.encod_dataB - buffer.encod_olddataB;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <DMA1_Stream4_Callback+0x58>)
 8001bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <DMA1_Stream4_Callback+0x58>)
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <DMA1_Stream4_Callback+0x58>)
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
	buffer.angular_speedB = WHEEL_PERIMETER/(40*buffer.encod_timeB);
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <DMA1_Stream4_Callback+0x58>)
 8001c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <DMA1_Stream4_Callback+0x5c>)
 8001c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <DMA1_Stream4_Callback+0x58>)
 8001c1e:	649a      	str	r2, [r3, #72]	; 0x48
	buffer.angular_speedB = buffer.angular_speedB/10;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <DMA1_Stream4_Callback+0x58>)
 8001c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c24:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <DMA1_Stream4_Callback+0x60>)
 8001c26:	fb82 1203 	smull	r1, r2, r2, r3
 8001c2a:	1092      	asrs	r2, r2, #2
 8001c2c:	17db      	asrs	r3, r3, #31
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <DMA1_Stream4_Callback+0x58>)
 8001c32:	6493      	str	r3, [r2, #72]	; 0x48
	buffer.encod_olddataB =buffer.encod_dataB;
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <DMA1_Stream4_Callback+0x58>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <DMA1_Stream4_Callback+0x58>)
 8001c3a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	20000884 	.word	0x20000884
 8001c4c:	0c28cb00 	.word	0x0c28cb00
 8001c50:	66666667 	.word	0x66666667

08001c54 <ultrasonic_dis>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ultrasonic_dis */
void ultrasonic_dis(void const * argument)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8001c5c:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <ultrasonic_dis+0x10c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	493f      	ldr	r1, [pc, #252]	; (8001d64 <ultrasonic_dis+0x110>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f008 fc4e 	bl	800a508 <xQueueReceive>
	  uint16_t temp1 = buffer.distance_ultrs;
 8001c6c:	4b3c      	ldr	r3, [pc, #240]	; (8001d60 <ultrasonic_dis+0x10c>)
 8001c6e:	889b      	ldrh	r3, [r3, #4]
 8001c70:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <ultrasonic_dis+0x10c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7a:	493a      	ldr	r1, [pc, #232]	; (8001d64 <ultrasonic_dis+0x110>)
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f008 fc43 	bl	800a508 <xQueueReceive>
	  uint16_t temp2 = buffer.distance_ultrs;
 8001c82:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <ultrasonic_dis+0x10c>)
 8001c84:	889b      	ldrh	r3, [r3, #4]
 8001c86:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  uint16_t temp3 = temp2 - temp1;
 8001c88:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001c8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	857b      	strh	r3, [r7, #42]	; 0x2a
	  char string_buff[30] = {0};
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	831a      	strh	r2, [r3, #24]
      sprintf(string_buff, "%d \r\n", temp3);
 8001ca8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	492e      	ldr	r1, [pc, #184]	; (8001d68 <ultrasonic_dis+0x114>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00b f86b 	bl	800cd8c <siprintf>
	  //HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
	  xQueueReset(buffer.xQueue1_ultrs);
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <ultrasonic_dis+0x10c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f008 f94f 	bl	8009f60 <xQueueGenericReset>
	  if(temp3 <150)
 8001cc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cc4:	2b95      	cmp	r3, #149	; 0x95
 8001cc6:	d842      	bhi.n	8001d4e <ultrasonic_dis+0xfa>
	  {
		  xEventGroupClearBits(buffer.xEventGroup1, 0x1);
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <ultrasonic_dis+0x10c>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f007 ffac 	bl	8009c2c <xEventGroupClearBits>
		  vTaskSuspend(MotorsHandle);
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <ultrasonic_dis+0x118>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f009 f90d 	bl	800aef8 <vTaskSuspend>
		  vTaskSuspend(PID_regulationHandle);
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <ultrasonic_dis+0x11c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f009 f908 	bl	800aef8 <vTaskSuspend>
		TIM3->CCR2 = 0;
 8001ce8:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <ultrasonic_dis+0x120>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR4 = 0;
 8001cee:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <ultrasonic_dis+0x120>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
		TIM3->CCR1 = 1000;
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <ultrasonic_dis+0x120>)
 8001cf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cfa:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = 1000;
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <ultrasonic_dis+0x120>)
 8001cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d02:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d04:	2100      	movs	r1, #0
 8001d06:	481c      	ldr	r0, [pc, #112]	; (8001d78 <ultrasonic_dis+0x124>)
 8001d08:	f004 ffbc 	bl	8006c84 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001d0c:	2108      	movs	r1, #8
 8001d0e:	481a      	ldr	r0, [pc, #104]	; (8001d78 <ultrasonic_dis+0x124>)
 8001d10:	f004 ffb8 	bl	8006c84 <HAL_TIM_PWM_Start>
		vTaskDelay(350);
 8001d14:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001d18:	f009 f8ba 	bl	800ae90 <vTaskDelay>
		TIM3->CCR1 = 0;
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <ultrasonic_dis+0x120>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = 0;
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <ultrasonic_dis+0x120>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c
		 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4813      	ldr	r0, [pc, #76]	; (8001d78 <ultrasonic_dis+0x124>)
 8001d2c:	f005 f85a 	bl	8006de4 <HAL_TIM_PWM_Stop>
		 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001d30:	2108      	movs	r1, #8
 8001d32:	4811      	ldr	r0, [pc, #68]	; (8001d78 <ultrasonic_dis+0x124>)
 8001d34:	f005 f856 	bl	8006de4 <HAL_TIM_PWM_Stop>
		 vTaskResume(MotorsHandle);
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <ultrasonic_dis+0x118>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f009 f99f 	bl	800b080 <vTaskResume>
		 vTaskResume(PID_regulationHandle);
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <ultrasonic_dis+0x11c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f009 f99a 	bl	800b080 <vTaskResume>
 8001d4c:	e005      	b.n	8001d5a <ultrasonic_dis+0x106>
	  }
	  else
	  {
		  xEventGroupSetBits(buffer.xEventGroup1, 0x1);
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <ultrasonic_dis+0x10c>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	2101      	movs	r1, #1
 8001d54:	4618      	mov	r0, r3
 8001d56:	f007 ffa1 	bl	8009c9c <xEventGroupSetBits>
	  }
	  __asm__ volatile("NOP");
 8001d5a:	bf00      	nop
  {
 8001d5c:	e77e      	b.n	8001c5c <ultrasonic_dis+0x8>
 8001d5e:	bf00      	nop
 8001d60:	20000884 	.word	0x20000884
 8001d64:	20000888 	.word	0x20000888
 8001d68:	0800efd0 	.word	0x0800efd0
 8001d6c:	20000874 	.word	0x20000874
 8001d70:	20000880 	.word	0x20000880
 8001d74:	40000400 	.word	0x40000400
 8001d78:	20000644 	.word	0x20000644

08001d7c <line_tracking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_line_tracking */
void line_tracking(void const * argument)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN line_tracking */
  /* Infinite loop */
  for(;;)
  {
//	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
	  xEventGroupWaitBits(buffer.xEventGroup1, 0x40, pdTRUE, pdTRUE, portMAX_DELAY);
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <line_tracking+0xc4>)
 8001d86:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	2301      	movs	r3, #1
 8001d90:	2201      	movs	r2, #1
 8001d92:	2140      	movs	r1, #64	; 0x40
 8001d94:	f007 fe7c 	bl	8009a90 <xEventGroupWaitBits>
	  uint8_t result = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
	  result = buffer.line_data;
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <line_tracking+0xc4>)
 8001d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001da2:	73fb      	strb	r3, [r7, #15]
	  if(result > 100)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d942      	bls.n	8001e30 <line_tracking+0xb4>
	  {
		  xEventGroupClearBits(buffer.xEventGroup1, 0x1);
 8001daa:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <line_tracking+0xc4>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	2101      	movs	r1, #1
 8001db0:	4618      	mov	r0, r3
 8001db2:	f007 ff3b 	bl	8009c2c <xEventGroupClearBits>
		  vTaskSuspend(MotorsHandle);
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <line_tracking+0xc8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f009 f89c 	bl	800aef8 <vTaskSuspend>
		  vTaskSuspend(PID_regulationHandle);
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <line_tracking+0xcc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f009 f897 	bl	800aef8 <vTaskSuspend>
		TIM3->CCR2 = 0;
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <line_tracking+0xd0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR4 = 0;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <line_tracking+0xd0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
		TIM3->CCR1 = 1000;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <line_tracking+0xd0>)
 8001dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = 1000;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <line_tracking+0xd0>)
 8001de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001de4:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001de6:	2100      	movs	r1, #0
 8001de8:	4819      	ldr	r0, [pc, #100]	; (8001e50 <line_tracking+0xd4>)
 8001dea:	f004 ff4b 	bl	8006c84 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001dee:	2108      	movs	r1, #8
 8001df0:	4817      	ldr	r0, [pc, #92]	; (8001e50 <line_tracking+0xd4>)
 8001df2:	f004 ff47 	bl	8006c84 <HAL_TIM_PWM_Start>
		vTaskDelay(400);
 8001df6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001dfa:	f009 f849 	bl	800ae90 <vTaskDelay>
		TIM3->CCR1 = 0;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <line_tracking+0xd0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = 0;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <line_tracking+0xd0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	63da      	str	r2, [r3, #60]	; 0x3c
		 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4810      	ldr	r0, [pc, #64]	; (8001e50 <line_tracking+0xd4>)
 8001e0e:	f004 ffe9 	bl	8006de4 <HAL_TIM_PWM_Stop>
		 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001e12:	2108      	movs	r1, #8
 8001e14:	480e      	ldr	r0, [pc, #56]	; (8001e50 <line_tracking+0xd4>)
 8001e16:	f004 ffe5 	bl	8006de4 <HAL_TIM_PWM_Stop>
		 vTaskResume(MotorsHandle);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <line_tracking+0xc8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f009 f92e 	bl	800b080 <vTaskResume>
		 vTaskResume(PID_regulationHandle);
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <line_tracking+0xcc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f009 f929 	bl	800b080 <vTaskResume>
 8001e2e:	e005      	b.n	8001e3c <line_tracking+0xc0>
	  }
	  else
	  {
		  xEventGroupSetBits(buffer.xEventGroup1, 0x1);
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <line_tracking+0xc4>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	2101      	movs	r1, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f007 ff30 	bl	8009c9c <xEventGroupSetBits>
	  }
	  __asm__ volatile("NOP");
 8001e3c:	bf00      	nop
  {
 8001e3e:	e7a1      	b.n	8001d84 <line_tracking+0x8>
 8001e40:	20000884 	.word	0x20000884
 8001e44:	20000874 	.word	0x20000874
 8001e48:	20000880 	.word	0x20000880
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	20000644 	.word	0x20000644

08001e54 <accelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_accelerometer */
void accelerometer(void const * argument)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accelerometer */
	  HAL_StatusTypeDef result;
	  HAL_StatusTypeDef result2;
	  HAL_I2C_Init(&hi2c1);
 8001e5c:	481e      	ldr	r0, [pc, #120]	; (8001ed8 <accelerometer+0x84>)
 8001e5e:	f003 f98b 	bl	8005178 <HAL_I2C_Init>
	  mma8452x_Standby(&hi2c1, MMA8452X_I2C_ADDRESS);
 8001e62:	213a      	movs	r1, #58	; 0x3a
 8001e64:	481c      	ldr	r0, [pc, #112]	; (8001ed8 <accelerometer+0x84>)
 8001e66:	f000 fbb1 	bl	80025cc <mma8452x_Standby>
	  mma8452x_DataFormat(&hi2c1, MMA8452X_I2C_ADDRESS, 1);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	213a      	movs	r1, #58	; 0x3a
 8001e6e:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <accelerometer+0x84>)
 8001e70:	f000 fc02 	bl	8002678 <mma8452x_DataFormat>
	  mma8452x_DataRateSelection(&hi2c1, MMA8452X_I2C_ADDRESS, 4); //Output Data Rate (ODR) 50Hz
 8001e74:	2204      	movs	r2, #4
 8001e76:	213a      	movs	r1, #58	; 0x3a
 8001e78:	4817      	ldr	r0, [pc, #92]	; (8001ed8 <accelerometer+0x84>)
 8001e7a:	f000 fc3d 	bl	80026f8 <mma8452x_DataRateSelection>
	  mma8452x_InterruptPolarityConfig(&hi2c1, MMA8452X_I2C_ADDRESS, 1);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	213a      	movs	r1, #58	; 0x3a
 8001e82:	4815      	ldr	r0, [pc, #84]	; (8001ed8 <accelerometer+0x84>)
 8001e84:	f000 fc85 	bl	8002792 <mma8452x_InterruptPolarityConfig>
	  mma8452x_InterruptEnable(&hi2c1, MMA8452X_I2C_ADDRESS, EN_FF_MT, CFG_FF_MT);
 8001e88:	2302      	movs	r3, #2
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	213a      	movs	r1, #58	; 0x3a
 8001e8e:	4812      	ldr	r0, [pc, #72]	; (8001ed8 <accelerometer+0x84>)
 8001e90:	f000 fcc0 	bl	8002814 <mma8452x_InterruptEnable>
	  mma8452x_InterruptEnable(&hi2c1, MMA8452X_I2C_ADDRESS, EN_DRDY, CFG_DEFAULT);
 8001e94:	2300      	movs	r3, #0
 8001e96:	2201      	movs	r2, #1
 8001e98:	213a      	movs	r1, #58	; 0x3a
 8001e9a:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <accelerometer+0x84>)
 8001e9c:	f000 fcba 	bl	8002814 <mma8452x_InterruptEnable>
	  mma8452x_MotionDetectionConfig(&hi2c1, MMA8452X_I2C_ADDRESS, 0xF8, 0, 20, 2);
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2314      	movs	r3, #20
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	22f8      	movs	r2, #248	; 0xf8
 8001eac:	213a      	movs	r1, #58	; 0x3a
 8001eae:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <accelerometer+0x84>)
 8001eb0:	f000 fd74 	bl	800299c <mma8452x_MotionDetectionConfig>
	  mma8452x_Active(&hi2c1, MMA8452X_I2C_ADDRESS);
 8001eb4:	213a      	movs	r1, #58	; 0x3a
 8001eb6:	4808      	ldr	r0, [pc, #32]	; (8001ed8 <accelerometer+0x84>)
 8001eb8:	f000 fbb3 	bl	8002622 <mma8452x_Active>
	  taskYIELD();
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <accelerometer+0x88>)
 8001ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	f3bf 8f6f 	isb	sy
//	  HAL_I2C_Mem_Read(&hi2c1, (0x1D<<1), FF_MT_SRC, 1, buffer.accelerm_data, sizeof(uint8_t), 100);
//	  vTaskDelay(5);
//	  mma8452x_ReadData(&hi2c1, MMA8452X_I2C_ADDRESS, buffer.accelerm_data);
//	  vTaskDelay(30);
//	  taskYIELD();
	  vTaskSuspend(AccelerometerHandle);
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <accelerometer+0x8c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f009 f811 	bl	800aef8 <vTaskSuspend>
 8001ed6:	e7f9      	b.n	8001ecc <accelerometer+0x78>
 8001ed8:	200005f0 	.word	0x200005f0
 8001edc:	e000ed04 	.word	0xe000ed04
 8001ee0:	20000870 	.word	0x20000870
 8001ee4:	00000000 	.word	0x00000000

08001ee8 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void const * argument)
{
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  char buff;
	  xQueuePeek(buffer.xQueue2_instr4m, (void*)&buff, portMAX_DELAY);
 8001ef0:	4b8d      	ldr	r3, [pc, #564]	; (8002128 <motors+0x240>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f107 010e 	add.w	r1, r7, #14
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	4618      	mov	r0, r3
 8001efe:	f008 fbe3 	bl	800a6c8 <xQueuePeek>
	  xEventGroupWaitBits(buffer.xEventGroup1, 0x1, pdFALSE, pdTRUE, portMAX_DELAY);
 8001f02:	4b89      	ldr	r3, [pc, #548]	; (8002128 <motors+0x240>)
 8001f04:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2101      	movs	r1, #1
 8001f12:	f007 fdbd 	bl	8009a90 <xEventGroupWaitBits>
	  if(buff == 'I')
 8001f16:	7bbb      	ldrb	r3, [r7, #14]
 8001f18:	2b49      	cmp	r3, #73	; 0x49
 8001f1a:	d12b      	bne.n	8001f74 <motors+0x8c>
	  {
		  uint8_t i = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
		  while(buff != 'i')
 8001f20:	e01c      	b.n	8001f5c <motors+0x74>
		  {
			  xQueuePeek(buffer.xQueue2_instr4m, (void*)&buff, 50);
 8001f22:	4b81      	ldr	r3, [pc, #516]	; (8002128 <motors+0x240>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f107 010e 	add.w	r1, r7, #14
 8001f2a:	2232      	movs	r2, #50	; 0x32
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f008 fbcb 	bl	800a6c8 <xQueuePeek>
			  xQueueReceive(buffer.xQueue2_instr4m, (void*)(&(buffer.instruction_for_motors[i])), portMAX_DELAY);
 8001f32:	4b7d      	ldr	r3, [pc, #500]	; (8002128 <motors+0x240>)
 8001f34:	6998      	ldr	r0, [r3, #24]
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	3308      	adds	r3, #8
 8001f3a:	4a7b      	ldr	r2, [pc, #492]	; (8002128 <motors+0x240>)
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3304      	adds	r3, #4
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	4619      	mov	r1, r3
 8001f46:	f008 fadf 	bl	800a508 <xQueueReceive>
			  i == 10 ? i = 0 : i++;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	2b0a      	cmp	r3, #10
 8001f4e:	d102      	bne.n	8001f56 <motors+0x6e>
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	e002      	b.n	8001f5c <motors+0x74>
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
		  while(buff != 'i')
 8001f5c:	7bbb      	ldrb	r3, [r7, #14]
 8001f5e:	2b69      	cmp	r3, #105	; 0x69
 8001f60:	d1df      	bne.n	8001f22 <motors+0x3a>
		  }
		  sscanf(buffer.instruction_for_motors, "IX%dY%di", &buffer.x, &buffer.y);
 8001f62:	4b72      	ldr	r3, [pc, #456]	; (800212c <motors+0x244>)
 8001f64:	4a72      	ldr	r2, [pc, #456]	; (8002130 <motors+0x248>)
 8001f66:	4973      	ldr	r1, [pc, #460]	; (8002134 <motors+0x24c>)
 8001f68:	4873      	ldr	r0, [pc, #460]	; (8002138 <motors+0x250>)
 8001f6a:	f00a ff2f 	bl	800cdcc <siscanf>
		  buff = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73bb      	strb	r3, [r7, #14]
 8001f72:	e007      	b.n	8001f84 <motors+0x9c>
	  }
	  else
	  {
		  char trash;
		  xQueueReceive(buffer.xQueue2_instr4m, (void*)(&(trash)), 1);
 8001f74:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <motors+0x240>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f107 010d 	add.w	r1, r7, #13
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f008 fac2 	bl	800a508 <xQueueReceive>
	  }

	  buffer.x = buffer.x - 50;
 8001f84:	4b68      	ldr	r3, [pc, #416]	; (8002128 <motors+0x240>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	3b32      	subs	r3, #50	; 0x32
 8001f8a:	4a67      	ldr	r2, [pc, #412]	; (8002128 <motors+0x240>)
 8001f8c:	61d3      	str	r3, [r2, #28]
	  buffer.y = (buffer.y - 50)*-1;
 8001f8e:	4b66      	ldr	r3, [pc, #408]	; (8002128 <motors+0x240>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001f96:	4a64      	ldr	r2, [pc, #400]	; (8002128 <motors+0x240>)
 8001f98:	6213      	str	r3, [r2, #32]
	  buffer.pw = (int)(sqrt(pow(buffer.x,2) + pow(buffer.y,2)));
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <motors+0x240>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fac8 	bl	8000534 <__aeabi_i2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002120 <motors+0x238>
 8001fac:	ec43 2b10 	vmov	d0, r2, r3
 8001fb0:	f00c f808 	bl	800dfc4 <pow>
 8001fb4:	ec55 4b10 	vmov	r4, r5, d0
 8001fb8:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <motors+0x240>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fab9 	bl	8000534 <__aeabi_i2d>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002120 <motors+0x238>
 8001fca:	ec43 2b10 	vmov	d0, r2, r3
 8001fce:	f00b fff9 	bl	800dfc4 <pow>
 8001fd2:	ec53 2b10 	vmov	r2, r3, d0
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	4629      	mov	r1, r5
 8001fda:	f7fe f95f 	bl	800029c <__adddf3>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	ec43 2b17 	vmov	d7, r2, r3
 8001fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8001fea:	eef0 0a67 	vmov.f32	s1, s15
 8001fee:	f00c f859 	bl	800e0a4 <sqrt>
 8001ff2:	ec53 2b10 	vmov	r2, r3, d0
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f7fe fdb5 	bl	8000b68 <__aeabi_d2iz>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4a49      	ldr	r2, [pc, #292]	; (8002128 <motors+0x240>)
 8002002:	6253      	str	r3, [r2, #36]	; 0x24
	  if(buffer.pw > 50) buffer.pw = 50;
 8002004:	4b48      	ldr	r3, [pc, #288]	; (8002128 <motors+0x240>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2b32      	cmp	r3, #50	; 0x32
 800200a:	dd02      	ble.n	8002012 <motors+0x12a>
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <motors+0x240>)
 800200e:	2232      	movs	r2, #50	; 0x32
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
	  __asm__ volatile("NOP");
 8002012:	bf00      	nop

	  if(buffer.y>=0)  // A motor CH3,CH4,  B motor CH1, CH2 encodCH2 B
 8002014:	4b44      	ldr	r3, [pc, #272]	; (8002128 <motors+0x240>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db78      	blt.n	800210e <motors+0x226>
	  {
		  if(buffer.x>=0)
 800201c:	4b42      	ldr	r3, [pc, #264]	; (8002128 <motors+0x240>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db36      	blt.n	8002092 <motors+0x1aa>
		  {
			  buffer.wanted_speedB = (400/50)*buffer.pw-(400/50)*buffer.x+600;
 8002024:	4b40      	ldr	r3, [pc, #256]	; (8002128 <motors+0x240>)
 8002026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002028:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <motors+0x240>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	334b      	adds	r3, #75	; 0x4b
 8002030:	b29b      	uxth	r3, r3
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <motors+0x240>)
 8002038:	855a      	strh	r2, [r3, #42]	; 0x2a
			  buffer.wanted_speedA = (400/50)*buffer.pw+600;
 800203a:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <motors+0x240>)
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	334b      	adds	r3, #75	; 0x4b
 8002040:	b29b      	uxth	r3, r3
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <motors+0x240>)
 8002048:	851a      	strh	r2, [r3, #40]	; 0x28
			  if(buffer.x >= 40)
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <motors+0x240>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b27      	cmp	r3, #39	; 0x27
 8002050:	dd03      	ble.n	800205a <motors+0x172>
			  {
				  buffer.wanted_speedB = 0;
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <motors+0x240>)
 8002054:	2200      	movs	r2, #0
 8002056:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002058:	e00f      	b.n	800207a <motors+0x192>
			  }
			  else if(buffer.x <=8 && buffer.pw >=45)
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <motors+0x240>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b08      	cmp	r3, #8
 8002060:	dc0b      	bgt.n	800207a <motors+0x192>
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <motors+0x240>)
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	2b2c      	cmp	r3, #44	; 0x2c
 8002068:	dd07      	ble.n	800207a <motors+0x192>
			  {
				  buffer.wanted_speedB = 1000;
 800206a:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <motors+0x240>)
 800206c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002070:	855a      	strh	r2, [r3, #42]	; 0x2a
				  buffer.wanted_speedA = 1000;
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <motors+0x240>)
 8002074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002078:	851a      	strh	r2, [r3, #40]	; 0x28
			  }
			 if(buffer.pw <=5)
 800207a:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <motors+0x240>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	2b05      	cmp	r3, #5
 8002080:	f73f af36 	bgt.w	8001ef0 <motors+0x8>
			 {
				 buffer.wanted_speedB = 0;
 8002084:	4b28      	ldr	r3, [pc, #160]	; (8002128 <motors+0x240>)
 8002086:	2200      	movs	r2, #0
 8002088:	855a      	strh	r2, [r3, #42]	; 0x2a
				 buffer.wanted_speedA = 0;
 800208a:	4b27      	ldr	r3, [pc, #156]	; (8002128 <motors+0x240>)
 800208c:	2200      	movs	r2, #0
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
 8002090:	e72e      	b.n	8001ef0 <motors+0x8>
			 }
		  }
		  else if(buffer.x<0)
 8002092:	4b25      	ldr	r3, [pc, #148]	; (8002128 <motors+0x240>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f6bf af2a 	bge.w	8001ef0 <motors+0x8>
		  {
			 buffer.wanted_speedB = (400/50)*buffer.pw+600;
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <motors+0x240>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	334b      	adds	r3, #75	; 0x4b
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <motors+0x240>)
 80020aa:	855a      	strh	r2, [r3, #42]	; 0x2a
			 buffer.wanted_speedA = (400/50)*buffer.pw+(400/50)*buffer.x+600;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <motors+0x240>)
 80020ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <motors+0x240>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	4413      	add	r3, r2
 80020b6:	334b      	adds	r3, #75	; 0x4b
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <motors+0x240>)
 80020c0:	851a      	strh	r2, [r3, #40]	; 0x28
			 if(buffer.x <= -40)
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <motors+0x240>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f113 0f27 	cmn.w	r3, #39	; 0x27
 80020ca:	da03      	bge.n	80020d4 <motors+0x1ec>
			 {
				 buffer.wanted_speedA = 0;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <motors+0x240>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80020d2:	e010      	b.n	80020f6 <motors+0x20e>
			 }
			  else if(buffer.x >=-8 && buffer.pw >=45)
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <motors+0x240>)
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f113 0f08 	cmn.w	r3, #8
 80020dc:	db0b      	blt.n	80020f6 <motors+0x20e>
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <motors+0x240>)
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2b2c      	cmp	r3, #44	; 0x2c
 80020e4:	dd07      	ble.n	80020f6 <motors+0x20e>
			  {
				  buffer.wanted_speedB = 1000;
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <motors+0x240>)
 80020e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ec:	855a      	strh	r2, [r3, #42]	; 0x2a
				  buffer.wanted_speedA = 1000;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <motors+0x240>)
 80020f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020f4:	851a      	strh	r2, [r3, #40]	; 0x28
			  }
			 if(buffer.pw <=5)
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <motors+0x240>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	f73f aef8 	bgt.w	8001ef0 <motors+0x8>
			 {
				 buffer.wanted_speedB = 0;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <motors+0x240>)
 8002102:	2200      	movs	r2, #0
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a
				 buffer.wanted_speedA = 0;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <motors+0x240>)
 8002108:	2200      	movs	r2, #0
 800210a:	851a      	strh	r2, [r3, #40]	; 0x28
 800210c:	e6f0      	b.n	8001ef0 <motors+0x8>
			 }
		  }
	  }
	  else if(buffer.y<0)
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <motors+0x240>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f6bf aeec 	bge.w	8001ef0 <motors+0x8>
	  {
		  if(buffer.x>=0)
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <motors+0x240>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b00      	cmp	r3, #0
  {
 800211e:	e6e7      	b.n	8001ef0 <motors+0x8>
 8002120:	00000000 	.word	0x00000000
 8002124:	40000000 	.word	0x40000000
 8002128:	20000884 	.word	0x20000884
 800212c:	200008a4 	.word	0x200008a4
 8002130:	200008a0 	.word	0x200008a0
 8002134:	0800efd8 	.word	0x0800efd8
 8002138:	20000890 	.word	0x20000890

0800213c <encoders>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoders */
void encoders(void const * argument)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af02      	add	r7, sp, #8
 8002142:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  //ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
	  xEventGroupWaitBits(buffer.xEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <encoders+0x4c>)
 8002146:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2301      	movs	r3, #1
 8002150:	2201      	movs	r2, #1
 8002152:	2102      	movs	r1, #2
 8002154:	f007 fc9c 	bl	8009a90 <xEventGroupWaitBits>
	  if(TIM5->CNT - buffer.encod_dataA >= 1000)  //100ms
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <encoders+0x50>)
 800215a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <encoders+0x4c>)
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002166:	d302      	bcc.n	800216e <encoders+0x32>
	  {
		  buffer.angular_speedA = 0;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <encoders+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
	  }
	  if(TIM5->CNT - buffer.encod_dataB >= 1000) //100ms
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <encoders+0x50>)
 8002170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <encoders+0x4c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800217c:	d3e2      	bcc.n	8002144 <encoders+0x8>
	  {
		  buffer.angular_speedB = 0;
 800217e:	4b02      	ldr	r3, [pc, #8]	; (8002188 <encoders+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	649a      	str	r2, [r3, #72]	; 0x48
	  xEventGroupWaitBits(buffer.xEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
 8002184:	e7de      	b.n	8002144 <encoders+0x8>
 8002186:	bf00      	nop
 8002188:	20000884 	.word	0x20000884
 800218c:	40000c00 	.word	0x40000c00

08002190 <uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_task */
void uart_task(void const * argument)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	; 0x38
 8002194:	af02      	add	r7, sp, #8
 8002196:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  char string_buff[20] = {0};
//	  sprintf(string_buff, " %d %d ", buffer.encod_data[0], buffer.encod_data[1]);
//	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
	  char string_buff2[20] = {0};
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	f107 0320 	add.w	r3, r7, #32
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
	  sprintf(string_buff2, " %d %d %d ", buffer.accelerm_data[0], buffer.accelerm_data[1], buffer.accelerm_data[2]);
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <uart_task+0x88>)
 80021ac:	f993 3051 	ldrsb.w	r3, [r3, #81]	; 0x51
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <uart_task+0x88>)
 80021b4:	f993 3052 	ldrsb.w	r3, [r3, #82]	; 0x52
 80021b8:	4619      	mov	r1, r3
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <uart_task+0x88>)
 80021bc:	f993 3053 	ldrsb.w	r3, [r3, #83]	; 0x53
 80021c0:	f107 001c 	add.w	r0, r7, #28
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	460b      	mov	r3, r1
 80021c8:	4914      	ldr	r1, [pc, #80]	; (800221c <uart_task+0x8c>)
 80021ca:	f00a fddf 	bl	800cd8c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff2, sizeof(string_buff2), 100);
 80021ce:	f107 011c 	add.w	r1, r7, #28
 80021d2:	2364      	movs	r3, #100	; 0x64
 80021d4:	2214      	movs	r2, #20
 80021d6:	4812      	ldr	r0, [pc, #72]	; (8002220 <uart_task+0x90>)
 80021d8:	f006 fc0d 	bl	80089f6 <HAL_UART_Transmit>
	  char string_buff3[20] = {0};
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
	  sprintf(string_buff3, " %d %d \n", buffer.angular_speedA, buffer.angular_speedB);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <uart_task+0x88>)
 80021f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <uart_task+0x88>)
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	f107 0008 	add.w	r0, r7, #8
 80021fa:	490a      	ldr	r1, [pc, #40]	; (8002224 <uart_task+0x94>)
 80021fc:	f00a fdc6 	bl	800cd8c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff3, sizeof(string_buff3), 100);
 8002200:	f107 0108 	add.w	r1, r7, #8
 8002204:	2364      	movs	r3, #100	; 0x64
 8002206:	2214      	movs	r2, #20
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <uart_task+0x90>)
 800220a:	f006 fbf4 	bl	80089f6 <HAL_UART_Transmit>
	  vTaskDelay(160);
 800220e:	20a0      	movs	r0, #160	; 0xa0
 8002210:	f008 fe3e 	bl	800ae90 <vTaskDelay>
  {
 8002214:	e7c0      	b.n	8002198 <uart_task+0x8>
 8002216:	bf00      	nop
 8002218:	20000884 	.word	0x20000884
 800221c:	0800efe4 	.word	0x0800efe4
 8002220:	20000824 	.word	0x20000824
 8002224:	0800eff0 	.word	0x0800eff0

08002228 <pid>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pid */
void pid(void const * argument)
{
 8002228:	b5b0      	push	{r4, r5, r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af02      	add	r7, sp, #8
 800222e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pid */
	int16_t errorA = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	81fb      	strh	r3, [r7, #14]
	int16_t errorB = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	81bb      	strh	r3, [r7, #12]
	int16_t processed_speedA = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	83fb      	strh	r3, [r7, #30]
	int16_t processed_speedB = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	83bb      	strh	r3, [r7, #28]
	int32_t I_errorA = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
	int32_t I_errorB = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
	int16_t D_errorA = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	817b      	strh	r3, [r7, #10]
	int16_t D_errorB = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	813b      	strh	r3, [r7, #8]
	int16_t olderrorA = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	827b      	strh	r3, [r7, #18]
	int16_t olderrorB = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	823b      	strh	r3, [r7, #16]
  /* Infinite loop */
  for(;;)  //210 mm/s or 2100 10^-4*m/s is max speed --- 1000 in CCRx register
  {
	  xEventGroupWaitBits(buffer.xEventGroup1, 0x1, pdFALSE, pdTRUE, portMAX_DELAY);
 8002258:	4bc1      	ldr	r3, [pc, #772]	; (8002560 <pid+0x338>)
 800225a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	2200      	movs	r2, #0
 8002266:	2101      	movs	r1, #1
 8002268:	f007 fc12 	bl	8009a90 <xEventGroupWaitBits>
	  errorA = ((uint16_t)(buffer.wanted_speedA*2.1)) -buffer.angular_speedA;
 800226c:	4bbc      	ldr	r3, [pc, #752]	; (8002560 <pid+0x338>)
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f95f 	bl	8000534 <__aeabi_i2d>
 8002276:	a3b0      	add	r3, pc, #704	; (adr r3, 8002538 <pid+0x310>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fe f9c4 	bl	8000608 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f7fe fc96 	bl	8000bb8 <__aeabi_d2uiz>
 800228c:	4603      	mov	r3, r0
 800228e:	b29a      	uxth	r2, r3
 8002290:	4bb3      	ldr	r3, [pc, #716]	; (8002560 <pid+0x338>)
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	b29b      	uxth	r3, r3
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	81fb      	strh	r3, [r7, #14]
	  I_errorA += errorA;
 800229c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4413      	add	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
	  if(KI*I_errorA >1000) I_errorA = (int32_t) 1000/KI;
 80022a6:	69b8      	ldr	r0, [r7, #24]
 80022a8:	f7fe f944 	bl	8000534 <__aeabi_i2d>
 80022ac:	a3a4      	add	r3, pc, #656	; (adr r3, 8002540 <pid+0x318>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	f7fe f9a9 	bl	8000608 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	4ba8      	ldr	r3, [pc, #672]	; (8002564 <pid+0x33c>)
 80022c4:	f7fe fc30 	bl	8000b28 <__aeabi_dcmpgt>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <pid+0xac>
 80022ce:	4ba6      	ldr	r3, [pc, #664]	; (8002568 <pid+0x340>)
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e015      	b.n	8002300 <pid+0xd8>
	  else if (KI*I_errorA < -1000) I_errorA = (int32_t) -1000/KI;
 80022d4:	69b8      	ldr	r0, [r7, #24]
 80022d6:	f7fe f92d 	bl	8000534 <__aeabi_i2d>
 80022da:	a399      	add	r3, pc, #612	; (adr r3, 8002540 <pid+0x318>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fe f992 	bl	8000608 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	a396      	add	r3, pc, #600	; (adr r3, 8002548 <pid+0x320>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe fbfb 	bl	8000aec <__aeabi_dcmplt>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <pid+0xd8>
 80022fc:	4b9b      	ldr	r3, [pc, #620]	; (800256c <pid+0x344>)
 80022fe:	61bb      	str	r3, [r7, #24]
	  D_errorA = errorA - olderrorA;
 8002300:	89fa      	ldrh	r2, [r7, #14]
 8002302:	8a7b      	ldrh	r3, [r7, #18]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	b29b      	uxth	r3, r3
 8002308:	817b      	strh	r3, [r7, #10]
	  errorB = ((uint16_t)(buffer.wanted_speedB*2.1)) -buffer.angular_speedB;
 800230a:	4b95      	ldr	r3, [pc, #596]	; (8002560 <pid+0x338>)
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f910 	bl	8000534 <__aeabi_i2d>
 8002314:	a388      	add	r3, pc, #544	; (adr r3, 8002538 <pid+0x310>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fe f975 	bl	8000608 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f7fe fc47 	bl	8000bb8 <__aeabi_d2uiz>
 800232a:	4603      	mov	r3, r0
 800232c:	b29a      	uxth	r2, r3
 800232e:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <pid+0x338>)
 8002330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002332:	b29b      	uxth	r3, r3
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	b29b      	uxth	r3, r3
 8002338:	81bb      	strh	r3, [r7, #12]
	  I_errorB += errorB;
 800233a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4413      	add	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
	  if(KI*I_errorB >1000) I_errorB = (int32_t) 1000/KI;
 8002344:	6978      	ldr	r0, [r7, #20]
 8002346:	f7fe f8f5 	bl	8000534 <__aeabi_i2d>
 800234a:	a37d      	add	r3, pc, #500	; (adr r3, 8002540 <pid+0x318>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe f95a 	bl	8000608 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b80      	ldr	r3, [pc, #512]	; (8002564 <pid+0x33c>)
 8002362:	f7fe fbe1 	bl	8000b28 <__aeabi_dcmpgt>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <pid+0x14a>
 800236c:	4b7e      	ldr	r3, [pc, #504]	; (8002568 <pid+0x340>)
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e015      	b.n	800239e <pid+0x176>
	  else if (KI*I_errorB < -1000) I_errorB = (int32_t) -1000/KI;
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7fe f8de 	bl	8000534 <__aeabi_i2d>
 8002378:	a371      	add	r3, pc, #452	; (adr r3, 8002540 <pid+0x318>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	f7fe f943 	bl	8000608 <__aeabi_dmul>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	a36f      	add	r3, pc, #444	; (adr r3, 8002548 <pid+0x320>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe fbac 	bl	8000aec <__aeabi_dcmplt>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <pid+0x176>
 800239a:	4b74      	ldr	r3, [pc, #464]	; (800256c <pid+0x344>)
 800239c:	617b      	str	r3, [r7, #20]
	  D_errorB = errorB - olderrorB;
 800239e:	89ba      	ldrh	r2, [r7, #12]
 80023a0:	8a3b      	ldrh	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	813b      	strh	r3, [r7, #8]
	  processed_speedA = KP*errorA + KI*I_errorA + KD*D_errorA;
 80023a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8c1 	bl	8000534 <__aeabi_i2d>
 80023b2:	a367      	add	r3, pc, #412	; (adr r3, 8002550 <pid+0x328>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f926 	bl	8000608 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4614      	mov	r4, r2
 80023c2:	461d      	mov	r5, r3
 80023c4:	69b8      	ldr	r0, [r7, #24]
 80023c6:	f7fe f8b5 	bl	8000534 <__aeabi_i2d>
 80023ca:	a35d      	add	r3, pc, #372	; (adr r3, 8002540 <pid+0x318>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fe f91a 	bl	8000608 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fd ff5e 	bl	800029c <__adddf3>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4614      	mov	r4, r2
 80023e6:	461d      	mov	r5, r3
 80023e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8a1 	bl	8000534 <__aeabi_i2d>
 80023f2:	a359      	add	r3, pc, #356	; (adr r3, 8002558 <pid+0x330>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fe f906 	bl	8000608 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4620      	mov	r0, r4
 8002402:	4629      	mov	r1, r5
 8002404:	f7fd ff4a 	bl	800029c <__adddf3>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	f7fe fbaa 	bl	8000b68 <__aeabi_d2iz>
 8002414:	4603      	mov	r3, r0
 8002416:	83fb      	strh	r3, [r7, #30]
	  processed_speedB = KP*errorB + KI*I_errorB + KD*D_errorB;
 8002418:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f889 	bl	8000534 <__aeabi_i2d>
 8002422:	a34b      	add	r3, pc, #300	; (adr r3, 8002550 <pid+0x328>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f8ee 	bl	8000608 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4614      	mov	r4, r2
 8002432:	461d      	mov	r5, r3
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f7fe f87d 	bl	8000534 <__aeabi_i2d>
 800243a:	a341      	add	r3, pc, #260	; (adr r3, 8002540 <pid+0x318>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f7fe f8e2 	bl	8000608 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fd ff26 	bl	800029c <__adddf3>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4614      	mov	r4, r2
 8002456:	461d      	mov	r5, r3
 8002458:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f869 	bl	8000534 <__aeabi_i2d>
 8002462:	a33d      	add	r3, pc, #244	; (adr r3, 8002558 <pid+0x330>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f7fe f8ce 	bl	8000608 <__aeabi_dmul>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4620      	mov	r0, r4
 8002472:	4629      	mov	r1, r5
 8002474:	f7fd ff12 	bl	800029c <__adddf3>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	f7fe fb72 	bl	8000b68 <__aeabi_d2iz>
 8002484:	4603      	mov	r3, r0
 8002486:	83bb      	strh	r3, [r7, #28]
	  if(errorB>10)
 8002488:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800248c:	2b0a      	cmp	r3, #10
 800248e:	dd00      	ble.n	8002492 <pid+0x26a>
	  {
		  __asm__ volatile("NOP");
 8002490:	bf00      	nop
	  }
	  olderrorA = errorA;
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	827b      	strh	r3, [r7, #18]
	  olderrorB = errorB;
 8002496:	89bb      	ldrh	r3, [r7, #12]
 8002498:	823b      	strh	r3, [r7, #16]

	  if(processed_speedA > 1000)
 800249a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800249e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024a2:	dd03      	ble.n	80024ac <pid+0x284>
	  {
		  processed_speedA = 1000;
 80024a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a8:	83fb      	strh	r3, [r7, #30]
 80024aa:	e007      	b.n	80024bc <pid+0x294>
	  }
	  else if(processed_speedA < -1000)
 80024ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80024b0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80024b4:	da02      	bge.n	80024bc <pid+0x294>
	  {
		  processed_speedA = -1000;
 80024b6:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80024ba:	83fb      	strh	r3, [r7, #30]
	  }
	  if(processed_speedB > 1000)
 80024bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c4:	dd03      	ble.n	80024ce <pid+0x2a6>
	  {
		  processed_speedB = 1000;
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	83bb      	strh	r3, [r7, #28]
 80024cc:	e007      	b.n	80024de <pid+0x2b6>
	  }
	  else if(processed_speedB < -1000)
 80024ce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024d2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80024d6:	da02      	bge.n	80024de <pid+0x2b6>
	  {
		  processed_speedB = -1000;
 80024d8:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80024dc:	83bb      	strh	r3, [r7, #28]
	  }

	  if((int)(TIM3->CCR2 + processed_speedB) > 1000)
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <pid+0x348>)
 80024e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ec:	dd04      	ble.n	80024f8 <pid+0x2d0>
	  {
		  TIM3->CCR2 = 1000;
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <pid+0x348>)
 80024f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38
 80024f6:	e011      	b.n	800251c <pid+0x2f4>
	  }
	  else if((int)(TIM3->CCR2 + processed_speedB) < 0)
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <pid+0x348>)
 80024fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	da03      	bge.n	800250e <pid+0x2e6>
	  {
		  TIM3->CCR2 = 0;
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <pid+0x348>)
 8002508:	2200      	movs	r2, #0
 800250a:	639a      	str	r2, [r3, #56]	; 0x38
 800250c:	e006      	b.n	800251c <pid+0x2f4>
	  }
	  else
	  {
		  TIM3->CCR2 += processed_speedB;
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <pid+0x348>)
 8002510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002512:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002516:	4916      	ldr	r1, [pc, #88]	; (8002570 <pid+0x348>)
 8002518:	4413      	add	r3, r2
 800251a:	638b      	str	r3, [r1, #56]	; 0x38
	  }
	  if((int)(TIM3->CCR4 + processed_speedB) > 1000)
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <pid+0x348>)
 800251e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002520:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800252a:	dd23      	ble.n	8002574 <pid+0x34c>
	  {
		  TIM3->CCR4 = 1000;
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <pid+0x348>)
 800252e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
 8002534:	e030      	b.n	8002598 <pid+0x370>
 8002536:	bf00      	nop
 8002538:	cccccccd 	.word	0xcccccccd
 800253c:	4000cccc 	.word	0x4000cccc
 8002540:	bc6a7efa 	.word	0xbc6a7efa
 8002544:	3f689374 	.word	0x3f689374
 8002548:	00000000 	.word	0x00000000
 800254c:	c08f4000 	.word	0xc08f4000
 8002550:	9999999a 	.word	0x9999999a
 8002554:	3fd99999 	.word	0x3fd99999
 8002558:	9999999a 	.word	0x9999999a
 800255c:	3fb99999 	.word	0x3fb99999
 8002560:	20000884 	.word	0x20000884
 8002564:	408f4000 	.word	0x408f4000
 8002568:	00051615 	.word	0x00051615
 800256c:	fffae9eb 	.word	0xfffae9eb
 8002570:	40000400 	.word	0x40000400
	  }
	  else if((int)(TIM3->CCR4 + processed_speedB) < 0)
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <pid+0x378>)
 8002576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002578:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	da03      	bge.n	800258a <pid+0x362>
	  {
		  TIM3->CCR4 = 0;
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <pid+0x378>)
 8002584:	2200      	movs	r2, #0
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
 8002588:	e006      	b.n	8002598 <pid+0x370>
	  }
	  else
	  {
		  TIM3->CCR4 += processed_speedA;
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <pid+0x378>)
 800258c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002592:	4903      	ldr	r1, [pc, #12]	; (80025a0 <pid+0x378>)
 8002594:	4413      	add	r3, r2
 8002596:	640b      	str	r3, [r1, #64]	; 0x40
	  }
	  vTaskDelay(10);
 8002598:	200a      	movs	r0, #10
 800259a:	f008 fc79 	bl	800ae90 <vTaskDelay>
	  xEventGroupWaitBits(buffer.xEventGroup1, 0x1, pdFALSE, pdTRUE, portMAX_DELAY);
 800259e:	e65b      	b.n	8002258 <pid+0x30>
 80025a0:	40000400 	.word	0x40000400

080025a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b4:	d101      	bne.n	80025ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025b6:	f000 ff43 	bl	8003440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025c6:	b672      	cpsid	i
}
 80025c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025ca:	e7fe      	b.n	80025ca <Error_Handler+0x8>

080025cc <mma8452x_Standby>:
 *                the configuration information for the specified I2C.
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 */
void mma8452x_Standby(I2C_HandleTypeDef * hi2c, uint16_t DevAddress)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af04      	add	r7, sp, #16
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
	uint8_t register_value = 0x0;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80025dc:	8879      	ldrh	r1, [r7, #2]
 80025de:	2364      	movs	r3, #100	; 0x64
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	2301      	movs	r3, #1
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	f107 030f 	add.w	r3, r7, #15
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2301      	movs	r3, #1
 80025ee:	222a      	movs	r2, #42	; 0x2a
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f003 f82f 	bl	8005654 <HAL_I2C_Mem_Read>
	register_value &= ~CTRL_REG1_ACTIVE;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002600:	8879      	ldrh	r1, [r7, #2]
 8002602:	2364      	movs	r3, #100	; 0x64
 8002604:	9302      	str	r3, [sp, #8]
 8002606:	2301      	movs	r3, #1
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	f107 030f 	add.w	r3, r7, #15
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2301      	movs	r3, #1
 8002612:	222a      	movs	r2, #42	; 0x2a
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f002 ff23 	bl	8005460 <HAL_I2C_Mem_Write>
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <mma8452x_Active>:
 *                the configuration information for the specified I2C.
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 */
void mma8452x_Active(I2C_HandleTypeDef * hi2c, uint16_t DevAddress)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b088      	sub	sp, #32
 8002626:	af04      	add	r7, sp, #16
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	807b      	strh	r3, [r7, #2]
	uint8_t register_value = 0x0;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002632:	8879      	ldrh	r1, [r7, #2]
 8002634:	2364      	movs	r3, #100	; 0x64
 8002636:	9302      	str	r3, [sp, #8]
 8002638:	2301      	movs	r3, #1
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	f107 030f 	add.w	r3, r7, #15
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2301      	movs	r3, #1
 8002644:	222a      	movs	r2, #42	; 0x2a
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f003 f804 	bl	8005654 <HAL_I2C_Mem_Read>
	register_value |= CTRL_REG1_ACTIVE;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002656:	8879      	ldrh	r1, [r7, #2]
 8002658:	2364      	movs	r3, #100	; 0x64
 800265a:	9302      	str	r3, [sp, #8]
 800265c:	2301      	movs	r3, #1
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	f107 030f 	add.w	r3, r7, #15
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	2301      	movs	r3, #1
 8002668:	222a      	movs	r2, #42	; 0x2a
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f002 fef8 	bl	8005460 <HAL_I2C_Mem_Write>
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <mma8452x_DataFormat>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  d_format If d_format is 1 then Data format limited to single Byte.
 * 		   If d_format is 0 then Data format limited to 12 Bits.
 */
void mma8452x_DataFormat(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t d_format)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af04      	add	r7, sp, #16
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
 8002684:	4613      	mov	r3, r2
 8002686:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	4619      	mov	r1, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff9d 	bl	80025cc <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002696:	8879      	ldrh	r1, [r7, #2]
 8002698:	2364      	movs	r3, #100	; 0x64
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	2301      	movs	r3, #1
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	f107 030f 	add.w	r3, r7, #15
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2301      	movs	r3, #1
 80026a8:	222a      	movs	r2, #42	; 0x2a
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f002 ffd2 	bl	8005654 <HAL_I2C_Mem_Read>
	if(d_format == 1)
 80026b0:	787b      	ldrb	r3, [r7, #1]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <mma8452x_DataFormat+0x4a>
	{
		register_value |= CTRL_REG1_F_READ;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e004      	b.n	80026cc <mma8452x_DataFormat+0x54>
	}
	else
	{
		register_value &= ~CTRL_REG1_F_READ;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	f023 0302 	bic.w	r3, r3, #2
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80026cc:	8879      	ldrh	r1, [r7, #2]
 80026ce:	2364      	movs	r3, #100	; 0x64
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	2301      	movs	r3, #1
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	f107 030f 	add.w	r3, r7, #15
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	222a      	movs	r2, #42	; 0x2a
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f002 febd 	bl	8005460 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	4619      	mov	r1, r3
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ff99 	bl	8002622 <mma8452x_Active>
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <mma8452x_DataRateSelection>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  d_rate Value from 0 to 7 for selection output data rate for acceleration samples.
 * 		   The default value is 000 for a data rate of 800 Hz.
 */
void mma8452x_DataRateSelection(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t d_rate)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af04      	add	r7, sp, #16
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff5d 	bl	80025cc <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002716:	8879      	ldrh	r1, [r7, #2]
 8002718:	2364      	movs	r3, #100	; 0x64
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	2301      	movs	r3, #1
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	f107 030f 	add.w	r3, r7, #15
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2301      	movs	r3, #1
 8002728:	222a      	movs	r2, #42	; 0x2a
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f002 ff92 	bl	8005654 <HAL_I2C_Mem_Read>
	register_value &= ~((7<<3));
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002736:	b2db      	uxtb	r3, r3
 8002738:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800273a:	8879      	ldrh	r1, [r7, #2]
 800273c:	2364      	movs	r3, #100	; 0x64
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	2301      	movs	r3, #1
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	f107 030f 	add.w	r3, r7, #15
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2301      	movs	r3, #1
 800274c:	222a      	movs	r2, #42	; 0x2a
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f002 fe86 	bl	8005460 <HAL_I2C_Mem_Write>
	register_value |= (d_rate<<3);
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	b25a      	sxtb	r2, r3
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	b25b      	sxtb	r3, r3
 800275e:	4313      	orrs	r3, r2
 8002760:	b25b      	sxtb	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002766:	8879      	ldrh	r1, [r7, #2]
 8002768:	2364      	movs	r3, #100	; 0x64
 800276a:	9302      	str	r3, [sp, #8]
 800276c:	2301      	movs	r3, #1
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	f107 030f 	add.w	r3, r7, #15
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2301      	movs	r3, #1
 8002778:	222a      	movs	r2, #42	; 0x2a
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f002 fe70 	bl	8005460 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	4619      	mov	r1, r3
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff4c 	bl	8002622 <mma8452x_Active>
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <mma8452x_InterruptPolarityConfig>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  ipol Interrupt polarity ACTIVE high, or ACTIVE low. Default value: 0.
 *         0: ACTIVE low; 1: ACTIVE high
 */
void mma8452x_InterruptPolarityConfig(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t ipol)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b088      	sub	sp, #32
 8002796:	af04      	add	r7, sp, #16
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	807b      	strh	r3, [r7, #2]
 800279e:	4613      	mov	r3, r2
 80027a0:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	4619      	mov	r1, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff10 	bl	80025cc <mma8452x_Standby>
	uint8_t register_value = 0x0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG3, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80027b0:	8879      	ldrh	r1, [r7, #2]
 80027b2:	2364      	movs	r3, #100	; 0x64
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	2301      	movs	r3, #1
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	f107 030f 	add.w	r3, r7, #15
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2301      	movs	r3, #1
 80027c2:	222c      	movs	r2, #44	; 0x2c
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f002 ff45 	bl	8005654 <HAL_I2C_Mem_Read>
	if(ipol == 1)
 80027ca:	787b      	ldrb	r3, [r7, #1]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <mma8452x_InterruptPolarityConfig+0x4a>
	{
		register_value |= CTRL_REG3_IPOL;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e004      	b.n	80027e6 <mma8452x_InterruptPolarityConfig+0x54>
	}
	else
	{
		register_value &= ~CTRL_REG3_IPOL;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	f023 0302 	bic.w	r3, r3, #2
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG3, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80027e6:	8879      	ldrh	r1, [r7, #2]
 80027e8:	2364      	movs	r3, #100	; 0x64
 80027ea:	9302      	str	r3, [sp, #8]
 80027ec:	2301      	movs	r3, #1
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	f107 030f 	add.w	r3, r7, #15
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	222c      	movs	r2, #44	; 0x2c
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f002 fe30 	bl	8005460 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	4619      	mov	r1, r3
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff0c 	bl	8002622 <mma8452x_Active>
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <mma8452x_InterruptEnable>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  int_en The corresponding interrupt
 * @param  int_cfg The corresponding interrupt pin
 */
void mma8452x_InterruptEnable(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t int_en, uint8_t int_cfg)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af04      	add	r7, sp, #16
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	807b      	strh	r3, [r7, #2]
 8002826:	460b      	mov	r3, r1
 8002828:	707b      	strb	r3, [r7, #1]
 800282a:	4613      	mov	r3, r2
 800282c:	703b      	strb	r3, [r7, #0]
	mma8452x_Standby(hi2c, DevAddress);
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff feca 	bl	80025cc <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG4, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800283c:	8879      	ldrh	r1, [r7, #2]
 800283e:	2364      	movs	r3, #100	; 0x64
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2301      	movs	r3, #1
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	f107 030f 	add.w	r3, r7, #15
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2301      	movs	r3, #1
 800284e:	222d      	movs	r2, #45	; 0x2d
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f002 feff 	bl	8005654 <HAL_I2C_Mem_Read>
	switch (int_en)
 8002856:	787b      	ldrb	r3, [r7, #1]
 8002858:	3b01      	subs	r3, #1
 800285a:	2b05      	cmp	r3, #5
 800285c:	d832      	bhi.n	80028c4 <mma8452x_InterruptEnable+0xb0>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <mma8452x_InterruptEnable+0x50>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	080028b9 	.word	0x080028b9
 8002868:	080028ad 	.word	0x080028ad
 800286c:	080028a1 	.word	0x080028a1
 8002870:	08002895 	.word	0x08002895
 8002874:	08002889 	.word	0x08002889
 8002878:	0800287d 	.word	0x0800287d
	{
		 case EN_ASLP:
			 register_value |= CTRL_REG4_ASLP;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002882:	b2db      	uxtb	r3, r3
 8002884:	73fb      	strb	r3, [r7, #15]
			 break;
 8002886:	e01e      	b.n	80028c6 <mma8452x_InterruptEnable+0xb2>
		 case EN_TRANS:
			 register_value |= CTRL_REG4_TRANS;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	f043 0320 	orr.w	r3, r3, #32
 800288e:	b2db      	uxtb	r3, r3
 8002890:	73fb      	strb	r3, [r7, #15]
			 break;
 8002892:	e018      	b.n	80028c6 <mma8452x_InterruptEnable+0xb2>
		 case EN_LNDPRT:
			 register_value |= CTRL_REG4_LNDPRT;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	f043 0310 	orr.w	r3, r3, #16
 800289a:	b2db      	uxtb	r3, r3
 800289c:	73fb      	strb	r3, [r7, #15]
			 break;
 800289e:	e012      	b.n	80028c6 <mma8452x_InterruptEnable+0xb2>
		 case EN_PULSE:
			 register_value |= CTRL_REG4_PULSE;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	f043 0308 	orr.w	r3, r3, #8
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	73fb      	strb	r3, [r7, #15]
			 break;
 80028aa:	e00c      	b.n	80028c6 <mma8452x_InterruptEnable+0xb2>
		 case EN_FF_MT:
			 register_value |= CTRL_REG4_FF_MT;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	73fb      	strb	r3, [r7, #15]
			 break;
 80028b6:	e006      	b.n	80028c6 <mma8452x_InterruptEnable+0xb2>
		 case EN_DRDY:
			 register_value |= CTRL_REG4_DRDY;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	73fb      	strb	r3, [r7, #15]
			 break;
 80028c2:	e000      	b.n	80028c6 <mma8452x_InterruptEnable+0xb2>
		 default:
        	 __asm__ volatile("NOP");
 80028c4:	bf00      	nop
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG4, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80028c6:	8879      	ldrh	r1, [r7, #2]
 80028c8:	2364      	movs	r3, #100	; 0x64
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	2301      	movs	r3, #1
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	f107 030f 	add.w	r3, r7, #15
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2301      	movs	r3, #1
 80028d8:	222d      	movs	r2, #45	; 0x2d
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f002 fdc0 	bl	8005460 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG5, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80028e4:	8879      	ldrh	r1, [r7, #2]
 80028e6:	2364      	movs	r3, #100	; 0x64
 80028e8:	9302      	str	r3, [sp, #8]
 80028ea:	2301      	movs	r3, #1
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	f107 030f 	add.w	r3, r7, #15
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2301      	movs	r3, #1
 80028f6:	222e      	movs	r2, #46	; 0x2e
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f002 feab 	bl	8005654 <HAL_I2C_Mem_Read>
	switch (int_cfg)
 80028fe:	783b      	ldrb	r3, [r7, #0]
 8002900:	3b01      	subs	r3, #1
 8002902:	2b05      	cmp	r3, #5
 8002904:	d832      	bhi.n	800296c <mma8452x_InterruptEnable+0x158>
 8002906:	a201      	add	r2, pc, #4	; (adr r2, 800290c <mma8452x_InterruptEnable+0xf8>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	08002961 	.word	0x08002961
 8002910:	08002955 	.word	0x08002955
 8002914:	08002949 	.word	0x08002949
 8002918:	0800293d 	.word	0x0800293d
 800291c:	08002931 	.word	0x08002931
 8002920:	08002925 	.word	0x08002925
	{
		 case CFG_ASLP:
			 register_value |= CTRL_REG5_ASLP;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800292a:	b2db      	uxtb	r3, r3
 800292c:	73fb      	strb	r3, [r7, #15]
			 break;
 800292e:	e01e      	b.n	800296e <mma8452x_InterruptEnable+0x15a>
		 case CFG_TRANS:
			 register_value |= CTRL_REG5_TRANS;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	f043 0320 	orr.w	r3, r3, #32
 8002936:	b2db      	uxtb	r3, r3
 8002938:	73fb      	strb	r3, [r7, #15]
			 break;
 800293a:	e018      	b.n	800296e <mma8452x_InterruptEnable+0x15a>
		 case CFG_LNDPRT:
			 register_value |= CTRL_REG5_LNDPRT;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	f043 0310 	orr.w	r3, r3, #16
 8002942:	b2db      	uxtb	r3, r3
 8002944:	73fb      	strb	r3, [r7, #15]
			 break;
 8002946:	e012      	b.n	800296e <mma8452x_InterruptEnable+0x15a>
		 case CFG_PULSE:
			 register_value |= CTRL_REG5_PULSE;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	f043 0308 	orr.w	r3, r3, #8
 800294e:	b2db      	uxtb	r3, r3
 8002950:	73fb      	strb	r3, [r7, #15]
			 break;
 8002952:	e00c      	b.n	800296e <mma8452x_InterruptEnable+0x15a>
		 case CFG_FF_MT:
			 register_value |= CTRL_REG5_FF_MT;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	b2db      	uxtb	r3, r3
 800295c:	73fb      	strb	r3, [r7, #15]
			 break;
 800295e:	e006      	b.n	800296e <mma8452x_InterruptEnable+0x15a>
		 case CFG_DRDY:
			 register_value |= CTRL_REG5_DRDY;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	73fb      	strb	r3, [r7, #15]
			 break;
 800296a:	e000      	b.n	800296e <mma8452x_InterruptEnable+0x15a>
		 default:
			 __asm__ volatile("NOP");
 800296c:	bf00      	nop
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG5, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800296e:	8879      	ldrh	r1, [r7, #2]
 8002970:	2364      	movs	r3, #100	; 0x64
 8002972:	9302      	str	r3, [sp, #8]
 8002974:	2301      	movs	r3, #1
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	f107 030f 	add.w	r3, r7, #15
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2301      	movs	r3, #1
 8002980:	222e      	movs	r2, #46	; 0x2e
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f002 fd6c 	bl	8005460 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff fe48 	bl	8002622 <mma8452x_Active>
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop

0800299c <mma8452x_MotionDetectionConfig>:
									uint16_t DevAddress,
									uint8_t byte_cfg,
									uint8_t dbcntm,
									uint8_t threshold,
									uint8_t d_count)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af04      	add	r7, sp, #16
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	807b      	strh	r3, [r7, #2]
 80029ae:	460b      	mov	r3, r1
 80029b0:	707b      	strb	r3, [r7, #1]
 80029b2:	4613      	mov	r3, r2
 80029b4:	703b      	strb	r3, [r7, #0]
	mma8452x_Standby(hi2c, DevAddress);
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fe06 	bl	80025cc <mma8452x_Standby>
	uint8_t register_value = 0x0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_CFG, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80029c4:	8879      	ldrh	r1, [r7, #2]
 80029c6:	2364      	movs	r3, #100	; 0x64
 80029c8:	9302      	str	r3, [sp, #8]
 80029ca:	2301      	movs	r3, #1
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	f107 030f 	add.w	r3, r7, #15
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2301      	movs	r3, #1
 80029d6:	2215      	movs	r2, #21
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f002 fe3b 	bl	8005654 <HAL_I2C_Mem_Read>
	register_value |= byte_cfg;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_CFG, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80029e8:	8879      	ldrh	r1, [r7, #2]
 80029ea:	2364      	movs	r3, #100	; 0x64
 80029ec:	9302      	str	r3, [sp, #8]
 80029ee:	2301      	movs	r3, #1
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	f107 030f 	add.w	r3, r7, #15
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2301      	movs	r3, #1
 80029fa:	2215      	movs	r2, #21
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f002 fd2f 	bl	8005460 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_THS, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002a06:	8879      	ldrh	r1, [r7, #2]
 8002a08:	2364      	movs	r3, #100	; 0x64
 8002a0a:	9302      	str	r3, [sp, #8]
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	f107 030f 	add.w	r3, r7, #15
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2301      	movs	r3, #1
 8002a18:	2217      	movs	r2, #23
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f002 fe1a 	bl	8005654 <HAL_I2C_Mem_Read>
	if(dbcntm == 1)
 8002a20:	783b      	ldrb	r3, [r7, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d105      	bne.n	8002a32 <mma8452x_MotionDetectionConfig+0x96>
	{
		register_value |= FF_MT_THS_DBCNTM;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	e007      	b.n	8002a42 <mma8452x_MotionDetectionConfig+0xa6>
	}
	else if(dbcntm == 0)
 8002a32:	783b      	ldrb	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d104      	bne.n	8002a42 <mma8452x_MotionDetectionConfig+0xa6>
	{
		register_value &= ~FF_MT_THS_DBCNTM;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	73fb      	strb	r3, [r7, #15]
	}
	register_value &= ~127;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	73fb      	strb	r3, [r7, #15]
	register_value |= threshold;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	7e3b      	ldrb	r3, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_THS, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002a56:	8879      	ldrh	r1, [r7, #2]
 8002a58:	2364      	movs	r3, #100	; 0x64
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	f107 030f 	add.w	r3, r7, #15
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2301      	movs	r3, #1
 8002a68:	2217      	movs	r2, #23
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f002 fcf8 	bl	8005460 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_COUNT, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002a74:	8879      	ldrh	r1, [r7, #2]
 8002a76:	2364      	movs	r3, #100	; 0x64
 8002a78:	9302      	str	r3, [sp, #8]
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	f107 030f 	add.w	r3, r7, #15
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2301      	movs	r3, #1
 8002a86:	2218      	movs	r2, #24
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f002 fde3 	bl	8005654 <HAL_I2C_Mem_Read>
	register_value = d_count;
 8002a8e:	7f3b      	ldrb	r3, [r7, #28]
 8002a90:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_COUNT, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002a92:	8879      	ldrh	r1, [r7, #2]
 8002a94:	2364      	movs	r3, #100	; 0x64
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	f107 030f 	add.w	r3, r7, #15
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	2218      	movs	r2, #24
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f002 fcda 	bl	8005460 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff fdb6 	bl	8002622 <mma8452x_Active>
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <mma8452x_ReadData>:
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 * @param  pData Pointer to data buffer
 */
void mma8452x_ReadData(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, int8_t* pData)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b08a      	sub	sp, #40	; 0x28
 8002ac2:	af04      	add	r7, sp, #16
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	817b      	strh	r3, [r7, #10]
	uint8_t register_value = 0x0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	757b      	strb	r3, [r7, #21]
	uint16_t size_of_data;
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002ad0:	8979      	ldrh	r1, [r7, #10]
 8002ad2:	2364      	movs	r3, #100	; 0x64
 8002ad4:	9302      	str	r3, [sp, #8]
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	f107 0315 	add.w	r3, r7, #21
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	222a      	movs	r2, #42	; 0x2a
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f002 fdb5 	bl	8005654 <HAL_I2C_Mem_Read>
	if((register_value & CTRL_REG1_F_READ) == CTRL_REG1_F_READ)
 8002aea:	7d7b      	ldrb	r3, [r7, #21]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <mma8452x_ReadData+0x3c>
	{
		size_of_data = 3;
 8002af4:	2303      	movs	r3, #3
 8002af6:	82fb      	strh	r3, [r7, #22]
 8002af8:	e001      	b.n	8002afe <mma8452x_ReadData+0x40>
	}
	else
	{
		size_of_data = 6;
 8002afa:	2306      	movs	r3, #6
 8002afc:	82fb      	strh	r3, [r7, #22]
	}
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)OUT_X_MSB, 1, (uint8_t*)pData, size_of_data, 100);
 8002afe:	8979      	ldrh	r1, [r7, #10]
 8002b00:	2364      	movs	r3, #100	; 0x64
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	8afb      	ldrh	r3, [r7, #22]
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	2201      	movs	r2, #1
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f002 fd9f 	bl	8005654 <HAL_I2C_Mem_Read>
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_MspInit+0x54>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a11      	ldr	r2, [pc, #68]	; (8002b74 <HAL_MspInit+0x54>)
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_MspInit+0x54>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3e:	607b      	str	r3, [r7, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_MspInit+0x54>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <HAL_MspInit+0x54>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_MspInit+0x54>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	210f      	movs	r1, #15
 8002b62:	f06f 0001 	mvn.w	r0, #1
 8002b66:	f001 f959 	bl	8003e1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800

08002b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2d      	ldr	r2, [pc, #180]	; (8002c4c <HAL_ADC_MspInit+0xd4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d154      	bne.n	8002c44 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <HAL_ADC_MspInit+0xd8>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4a2b      	ldr	r2, [pc, #172]	; (8002c50 <HAL_ADC_MspInit+0xd8>)
 8002ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8002baa:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_ADC_MspInit+0xd8>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_ADC_MspInit+0xd8>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <HAL_ADC_MspInit+0xd8>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_ADC_MspInit+0xd8>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	4619      	mov	r1, r3
 8002be4:	481b      	ldr	r0, [pc, #108]	; (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002be6:	f002 f82d 	bl	8004c44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002bea:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002bec:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_ADC_MspInit+0xe4>)
 8002bee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c1a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c28:	480b      	ldr	r0, [pc, #44]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002c2a:	f001 f921 	bl	8003e70 <HAL_DMA_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002c34:	f7ff fcc5 	bl	80025c2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c3e:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c44:	bf00      	nop
 8002c46:	3728      	adds	r7, #40	; 0x28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40012000 	.word	0x40012000
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40020800 	.word	0x40020800
 8002c58:	20000590 	.word	0x20000590
 8002c5c:	40026410 	.word	0x40026410

08002c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <HAL_I2C_MspInit+0x84>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12b      	bne.n	8002cda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c9e:	23c0      	movs	r3, #192	; 0xc0
 8002ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca2:	2312      	movs	r3, #18
 8002ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cae:	2304      	movs	r3, #4
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480c      	ldr	r0, [pc, #48]	; (8002cec <HAL_I2C_MspInit+0x8c>)
 8002cba:	f001 ffc3 	bl	8004c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cda:	bf00      	nop
 8002cdc:	3728      	adds	r7, #40	; 0x28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40005400 	.word	0x40005400
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40020400 	.word	0x40020400

08002cf0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <HAL_I2C_MspDeInit+0x38>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d10d      	bne.n	8002d1e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_I2C_MspDeInit+0x3c>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <HAL_I2C_MspDeInit+0x3c>)
 8002d08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002d0e:	2140      	movs	r1, #64	; 0x40
 8002d10:	4807      	ldr	r0, [pc, #28]	; (8002d30 <HAL_I2C_MspDeInit+0x40>)
 8002d12:	f002 f91b 	bl	8004f4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	4805      	ldr	r0, [pc, #20]	; (8002d30 <HAL_I2C_MspDeInit+0x40>)
 8002d1a:	f002 f917 	bl	8004f4c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40005400 	.word	0x40005400
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020400 	.word	0x40020400

08002d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08c      	sub	sp, #48	; 0x30
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a35      	ldr	r2, [pc, #212]	; (8002e28 <HAL_TIM_Base_MspInit+0xf4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10e      	bne.n	8002d74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002d72:	e055      	b.n	8002e20 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM10)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2d      	ldr	r2, [pc, #180]	; (8002e30 <HAL_TIM_Base_MspInit+0xfc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d135      	bne.n	8002dea <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4818      	ldr	r0, [pc, #96]	; (8002e34 <HAL_TIM_Base_MspInit+0x100>)
 8002dd4:	f001 ff36 	bl	8004c44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2105      	movs	r1, #5
 8002ddc:	2019      	movs	r0, #25
 8002dde:	f001 f81d 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002de2:	2019      	movs	r0, #25
 8002de4:	f001 f836 	bl	8003e54 <HAL_NVIC_EnableIRQ>
}
 8002de8:	e01a      	b.n	8002e20 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM11)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_TIM_Base_MspInit+0x104>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d115      	bne.n	8002e20 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	4a0b      	ldr	r2, [pc, #44]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e02:	6453      	str	r3, [r2, #68]	; 0x44
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_TIM_Base_MspInit+0xf8>)
 8002e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2105      	movs	r1, #5
 8002e14:	201a      	movs	r0, #26
 8002e16:	f001 f801 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e1a:	201a      	movs	r0, #26
 8002e1c:	f001 f81a 	bl	8003e54 <HAL_NVIC_EnableIRQ>
}
 8002e20:	bf00      	nop
 8002e22:	3730      	adds	r7, #48	; 0x30
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40014400 	.word	0x40014400
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40014800 	.word	0x40014800

08002e3c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a49      	ldr	r2, [pc, #292]	; (8002f80 <HAL_TIM_IC_MspInit+0x144>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	f040 808c 	bne.w	8002f78 <HAL_TIM_IC_MspInit+0x13c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <HAL_TIM_IC_MspInit+0x148>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a46      	ldr	r2, [pc, #280]	; (8002f84 <HAL_TIM_IC_MspInit+0x148>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e70:	4b44      	ldr	r3, [pc, #272]	; (8002f84 <HAL_TIM_IC_MspInit+0x148>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <HAL_TIM_IC_MspInit+0x148>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	4a3f      	ldr	r2, [pc, #252]	; (8002f84 <HAL_TIM_IC_MspInit+0x148>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8c:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <HAL_TIM_IC_MspInit+0x148>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4835      	ldr	r0, [pc, #212]	; (8002f88 <HAL_TIM_IC_MspInit+0x14c>)
 8002eb4:	f001 fec6 	bl	8004c44 <HAL_GPIO_Init>

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8002eb8:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002eba:	4a35      	ldr	r2, [pc, #212]	; (8002f90 <HAL_TIM_IC_MspInit+0x154>)
 8002ebc:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8002ebe:	4b33      	ldr	r3, [pc, #204]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002ec0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002ec4:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ecc:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002ed2:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ed8:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ede:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ee6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8002ee8:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eee:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ef0:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ef6:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8002efc:	4823      	ldr	r0, [pc, #140]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002efe:	f000 ffb7 	bl	8003e70 <HAL_DMA_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_TIM_IC_MspInit+0xd0>
    {
      Error_Handler();
 8002f08:	f7ff fb5b 	bl	80025c2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a1f      	ldr	r2, [pc, #124]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24
 8002f12:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <HAL_TIM_IC_MspInit+0x150>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM5_CH2 Init */
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002f18:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f1a:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <HAL_TIM_IC_MspInit+0x15c>)
 8002f1c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f20:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002f24:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_DISABLE;
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f3e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f46:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_CIRCULAR;
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002f50:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002f5c:	480d      	ldr	r0, [pc, #52]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f5e:	f000 ff87 	bl	8003e70 <HAL_DMA_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_TIM_IC_MspInit+0x130>
    {
      Error_Handler();
 8002f68:	f7ff fb2b 	bl	80025c2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <HAL_TIM_IC_MspInit+0x158>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f78:	bf00      	nop
 8002f7a:	3728      	adds	r7, #40	; 0x28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40000c00 	.word	0x40000c00
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40020000 	.word	0x40020000
 8002f8c:	20000764 	.word	0x20000764
 8002f90:	40026040 	.word	0x40026040
 8002f94:	200007c4 	.word	0x200007c4
 8002f98:	40026070 	.word	0x40026070

08002f9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a33      	ldr	r2, [pc, #204]	; (8003088 <HAL_TIM_MspPostInit+0xec>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d13c      	bne.n	8003038 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	4b32      	ldr	r3, [pc, #200]	; (800308c <HAL_TIM_MspPostInit+0xf0>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a31      	ldr	r2, [pc, #196]	; (800308c <HAL_TIM_MspPostInit+0xf0>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <HAL_TIM_MspPostInit+0xf0>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_TIM_MspPostInit+0xf0>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_TIM_MspPostInit+0xf0>)
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_TIM_MspPostInit+0xf0>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ff6:	23c0      	movs	r3, #192	; 0xc0
 8002ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003002:	2302      	movs	r3, #2
 8003004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003006:	2302      	movs	r3, #2
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	481f      	ldr	r0, [pc, #124]	; (8003090 <HAL_TIM_MspPostInit+0xf4>)
 8003012:	f001 fe17 	bl	8004c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003016:	2303      	movs	r3, #3
 8003018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800301e:	2301      	movs	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003022:	2302      	movs	r3, #2
 8003024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003026:	2302      	movs	r3, #2
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	4818      	ldr	r0, [pc, #96]	; (8003094 <HAL_TIM_MspPostInit+0xf8>)
 8003032:	f001 fe07 	bl	8004c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003036:	e023      	b.n	8003080 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM11)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_TIM_MspPostInit+0xfc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d11e      	bne.n	8003080 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_TIM_MspPostInit+0xf0>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a10      	ldr	r2, [pc, #64]	; (800308c <HAL_TIM_MspPostInit+0xf0>)
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_TIM_MspPostInit+0xf0>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800305e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003068:	2302      	movs	r3, #2
 800306a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800306c:	2302      	movs	r3, #2
 800306e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003070:	2303      	movs	r3, #3
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4619      	mov	r1, r3
 800307a:	4806      	ldr	r0, [pc, #24]	; (8003094 <HAL_TIM_MspPostInit+0xf8>)
 800307c:	f001 fde2 	bl	8004c44 <HAL_GPIO_Init>
}
 8003080:	bf00      	nop
 8003082:	3728      	adds	r7, #40	; 0x28
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40000400 	.word	0x40000400
 800308c:	40023800 	.word	0x40023800
 8003090:	40020000 	.word	0x40020000
 8003094:	40020400 	.word	0x40020400
 8003098:	40014800 	.word	0x40014800

0800309c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_UART_MspInit+0x94>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d134      	bne.n	8003128 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <HAL_UART_MspInit+0x98>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <HAL_UART_MspInit+0x98>)
 80030c8:	f043 0310 	orr.w	r3, r3, #16
 80030cc:	6453      	str	r3, [r2, #68]	; 0x44
 80030ce:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_UART_MspInit+0x98>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_UART_MspInit+0x98>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a14      	ldr	r2, [pc, #80]	; (8003134 <HAL_UART_MspInit+0x98>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_UART_MspInit+0x98>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003104:	2303      	movs	r3, #3
 8003106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003108:	2307      	movs	r3, #7
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	4619      	mov	r1, r3
 8003112:	4809      	ldr	r0, [pc, #36]	; (8003138 <HAL_UART_MspInit+0x9c>)
 8003114:	f001 fd96 	bl	8004c44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	2105      	movs	r1, #5
 800311c:	2025      	movs	r0, #37	; 0x25
 800311e:	f000 fe7d 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003122:	2025      	movs	r0, #37	; 0x25
 8003124:	f000 fe96 	bl	8003e54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003128:	bf00      	nop
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40011000 	.word	0x40011000
 8003134:	40023800 	.word	0x40023800
 8003138:	40020000 	.word	0x40020000

0800313c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	; 0x38
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	4b34      	ldr	r3, [pc, #208]	; (8003224 <HAL_InitTick+0xe8>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	4a33      	ldr	r2, [pc, #204]	; (8003224 <HAL_InitTick+0xe8>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6413      	str	r3, [r2, #64]	; 0x40
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_InitTick+0xe8>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003168:	f107 0210 	add.w	r2, r7, #16
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f003 fc48 	bl	8006a08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003182:	f003 fc19 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8003186:	6378      	str	r0, [r7, #52]	; 0x34
 8003188:	e004      	b.n	8003194 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800318a:	f003 fc15 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800318e:	4603      	mov	r3, r0
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003196:	4a24      	ldr	r2, [pc, #144]	; (8003228 <HAL_InitTick+0xec>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	0c9b      	lsrs	r3, r3, #18
 800319e:	3b01      	subs	r3, #1
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80031a2:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_InitTick+0xf0>)
 80031a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_InitTick+0xf0>)
 80031ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031b0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80031b2:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_InitTick+0xf0>)
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80031b8:	4b1c      	ldr	r3, [pc, #112]	; (800322c <HAL_InitTick+0xf0>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_InitTick+0xf0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_InitTick+0xf0>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80031ca:	4818      	ldr	r0, [pc, #96]	; (800322c <HAL_InitTick+0xf0>)
 80031cc:	f003 fc4e 	bl	8006a6c <HAL_TIM_Base_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80031d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11b      	bne.n	8003216 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80031de:	4813      	ldr	r0, [pc, #76]	; (800322c <HAL_InitTick+0xf0>)
 80031e0:	f003 fc94 	bl	8006b0c <HAL_TIM_Base_Start_IT>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80031ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d111      	bne.n	8003216 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031f2:	201c      	movs	r0, #28
 80031f4:	f000 fe2e 	bl	8003e54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	d808      	bhi.n	8003210 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80031fe:	2200      	movs	r2, #0
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	201c      	movs	r0, #28
 8003204:	f000 fe0a 	bl	8003e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003208:	4a09      	ldr	r2, [pc, #36]	; (8003230 <HAL_InitTick+0xf4>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e002      	b.n	8003216 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003216:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800321a:	4618      	mov	r0, r3
 800321c:	3738      	adds	r7, #56	; 0x38
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	431bde83 	.word	0x431bde83
 800322c:	200008e0 	.word	0x200008e0
 8003230:	20000004 	.word	0x20000004

08003234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003238:	e7fe      	b.n	8003238 <NMI_Handler+0x4>

0800323a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800323e:	e7fe      	b.n	800323e <HardFault_Handler+0x4>

08003240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003244:	e7fe      	b.n	8003244 <MemManage_Handler+0x4>

08003246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800324a:	e7fe      	b.n	800324a <BusFault_Handler+0x4>

0800324c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003250:	e7fe      	b.n	8003250 <UsageFault_Handler+0x4>

08003252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	DMA1_Stream2_Callback(&hdma_tim5_ch1);
 8003264:	4803      	ldr	r0, [pc, #12]	; (8003274 <DMA1_Stream2_IRQHandler+0x14>)
 8003266:	f7fe fc91 	bl	8001b8c <DMA1_Stream2_Callback>
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 800326a:	4802      	ldr	r0, [pc, #8]	; (8003274 <DMA1_Stream2_IRQHandler+0x14>)
 800326c:	f000 ff98 	bl	80041a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003270:	bf00      	nop
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000764 	.word	0x20000764

08003278 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	DMA1_Stream4_Callback(&hdma_tim5_ch2);
 800327c:	4803      	ldr	r0, [pc, #12]	; (800328c <DMA1_Stream4_IRQHandler+0x14>)
 800327e:	f7fe fcb7 	bl	8001bf0 <DMA1_Stream4_Callback>
  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8003282:	4802      	ldr	r0, [pc, #8]	; (800328c <DMA1_Stream4_IRQHandler+0x14>)
 8003284:	f000 ff8c 	bl	80041a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}
 800328c:	200007c4 	.word	0x200007c4

08003290 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003294:	4802      	ldr	r0, [pc, #8]	; (80032a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003296:	f004 fabf 	bl	8007818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200006d4 	.word	0x200006d4

080032a4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80032aa:	f004 fab5 	bl	8007818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	2000071c 	.word	0x2000071c

080032b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032bc:	4802      	ldr	r0, [pc, #8]	; (80032c8 <TIM2_IRQHandler+0x10>)
 80032be:	f004 faab 	bl	8007818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200008e0 	.word	0x200008e0

080032cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if((USART1->SR & USART_SR_RXNE) == USART_SR_RXNE)
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <USART1_IRQHandler+0x2c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d108      	bne.n	80032ee <USART1_IRQHandler+0x22>
	{
		USART1->SR &= ~USART_SR_RXNE;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <USART1_IRQHandler+0x2c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a05      	ldr	r2, [pc, #20]	; (80032f8 <USART1_IRQHandler+0x2c>)
 80032e2:	f023 0320 	bic.w	r3, r3, #32
 80032e6:	6013      	str	r3, [r2, #0]
		UART_RxCallback(&huart1);
 80032e8:	4804      	ldr	r0, [pc, #16]	; (80032fc <USART1_IRQHandler+0x30>)
 80032ea:	f7fe fc3b 	bl	8001b64 <UART_RxCallback>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032ee:	4803      	ldr	r0, [pc, #12]	; (80032fc <USART1_IRQHandler+0x30>)
 80032f0:	f005 fc14 	bl	8008b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40011000 	.word	0x40011000
 80032fc:	20000824 	.word	0x20000824

08003300 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003304:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003308:	f001 ff1e 	bl	8005148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800330c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003310:	f001 ff1a 	bl	8005148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}

08003318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <_sbrk+0x5c>)
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <_sbrk+0x60>)
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <_sbrk+0x64>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <_sbrk+0x64>)
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <_sbrk+0x68>)
 8003338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <_sbrk+0x64>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	429a      	cmp	r2, r3
 8003346:	d207      	bcs.n	8003358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003348:	f009 fce0 	bl	800cd0c <__errno>
 800334c:	4603      	mov	r3, r0
 800334e:	220c      	movs	r2, #12
 8003350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	e009      	b.n	800336c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <_sbrk+0x64>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <_sbrk+0x64>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <_sbrk+0x64>)
 8003368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20018000 	.word	0x20018000
 8003378:	00000400 	.word	0x00000400
 800337c:	20000928 	.word	0x20000928
 8003380:	20002f40 	.word	0x20002f40

08003384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <SystemInit+0x20>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <SystemInit+0x20>)
 8003390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033ac:	480d      	ldr	r0, [pc, #52]	; (80033e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033ae:	490e      	ldr	r1, [pc, #56]	; (80033e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b4:	e002      	b.n	80033bc <LoopCopyDataInit>

080033b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ba:	3304      	adds	r3, #4

080033bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c0:	d3f9      	bcc.n	80033b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c2:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033c4:	4c0b      	ldr	r4, [pc, #44]	; (80033f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c8:	e001      	b.n	80033ce <LoopFillZerobss>

080033ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033cc:	3204      	adds	r2, #4

080033ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d0:	d3fb      	bcc.n	80033ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033d2:	f7ff ffd7 	bl	8003384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033d6:	f009 fc9f 	bl	800cd18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033da:	f7fd fdd9 	bl	8000f90 <main>
  bx  lr    
 80033de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80033ec:	0800f230 	.word	0x0800f230
  ldr r2, =_sbss
 80033f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80033f4:	20002f40 	.word	0x20002f40

080033f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f8:	e7fe      	b.n	80033f8 <ADC_IRQHandler>
	...

080033fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_Init+0x40>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0d      	ldr	r2, [pc, #52]	; (800343c <HAL_Init+0x40>)
 8003406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_Init+0x40>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_Init+0x40>)
 8003412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_Init+0x40>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a07      	ldr	r2, [pc, #28]	; (800343c <HAL_Init+0x40>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003424:	2003      	movs	r0, #3
 8003426:	f000 fcee 	bl	8003e06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800342a:	2001      	movs	r0, #1
 800342c:	f7ff fe86 	bl	800313c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003430:	f7ff fb76 	bl	8002b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023c00 	.word	0x40023c00

08003440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_IncTick+0x20>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_IncTick+0x24>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4413      	add	r3, r2
 8003450:	4a04      	ldr	r2, [pc, #16]	; (8003464 <HAL_IncTick+0x24>)
 8003452:	6013      	str	r3, [r2, #0]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000008 	.word	0x20000008
 8003464:	2000092c 	.word	0x2000092c

08003468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return uwTick;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_GetTick+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	2000092c 	.word	0x2000092c

08003480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003488:	f7ff ffee 	bl	8003468 <HAL_GetTick>
 800348c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d005      	beq.n	80034a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_Delay+0x44>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034a6:	bf00      	nop
 80034a8:	f7ff ffde 	bl	8003468 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d8f7      	bhi.n	80034a8 <HAL_Delay+0x28>
  {
  }
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000008 	.word	0x20000008

080034c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e033      	b.n	8003546 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff fb46 	bl	8002b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d118      	bne.n	8003538 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800350e:	f023 0302 	bic.w	r3, r3, #2
 8003512:	f043 0202 	orr.w	r2, r3, #2
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa48 	bl	80039b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
 8003536:	e001      	b.n	800353c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003544:	7bfb      	ldrb	r3, [r7, #15]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_ADC_Start_DMA+0x1e>
 800356a:	2302      	movs	r3, #2
 800356c:	e0ce      	b.n	800370c <HAL_ADC_Start_DMA+0x1bc>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d018      	beq.n	80035b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003594:	4b5f      	ldr	r3, [pc, #380]	; (8003714 <HAL_ADC_Start_DMA+0x1c4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a5f      	ldr	r2, [pc, #380]	; (8003718 <HAL_ADC_Start_DMA+0x1c8>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	0c9a      	lsrs	r2, r3, #18
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d107      	bne.n	80035d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	f040 8086 	bne.w	80036f2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003610:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003624:	d106      	bne.n	8003634 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f023 0206 	bic.w	r2, r3, #6
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
 8003632:	e002      	b.n	800363a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_ADC_Start_DMA+0x1cc>)
 8003644:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	4a35      	ldr	r2, [pc, #212]	; (8003720 <HAL_ADC_Start_DMA+0x1d0>)
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	4a34      	ldr	r2, [pc, #208]	; (8003724 <HAL_ADC_Start_DMA+0x1d4>)
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	4a33      	ldr	r2, [pc, #204]	; (8003728 <HAL_ADC_Start_DMA+0x1d8>)
 800365c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003666:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003676:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003686:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	334c      	adds	r3, #76	; 0x4c
 8003692:	4619      	mov	r1, r3
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f000 fc98 	bl	8003fcc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10f      	bne.n	80036c8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d129      	bne.n	800370a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	e020      	b.n	800370a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_ADC_Start_DMA+0x1dc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d11b      	bne.n	800370a <HAL_ADC_Start_DMA+0x1ba>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d114      	bne.n	800370a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	e00b      	b.n	800370a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f043 0201 	orr.w	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000000 	.word	0x20000000
 8003718:	431bde83 	.word	0x431bde83
 800371c:	40012300 	.word	0x40012300
 8003720:	08003ba9 	.word	0x08003ba9
 8003724:	08003c63 	.word	0x08003c63
 8003728:	08003c7f 	.word	0x08003c7f
 800372c:	40012000 	.word	0x40012000

08003730 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x1c>
 8003784:	2302      	movs	r3, #2
 8003786:	e105      	b.n	8003994 <HAL_ADC_ConfigChannel+0x228>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b09      	cmp	r3, #9
 8003796:	d925      	bls.n	80037e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68d9      	ldr	r1, [r3, #12]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	3b1e      	subs	r3, #30
 80037ae:	2207      	movs	r2, #7
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43da      	mvns	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	400a      	ands	r2, r1
 80037bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68d9      	ldr	r1, [r3, #12]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	4618      	mov	r0, r3
 80037d0:	4603      	mov	r3, r0
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4403      	add	r3, r0
 80037d6:	3b1e      	subs	r3, #30
 80037d8:	409a      	lsls	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	e022      	b.n	800382a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6919      	ldr	r1, [r3, #16]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	2207      	movs	r2, #7
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43da      	mvns	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	400a      	ands	r2, r1
 8003806:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6919      	ldr	r1, [r3, #16]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	4618      	mov	r0, r3
 800381a:	4603      	mov	r3, r0
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4403      	add	r3, r0
 8003820:	409a      	lsls	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b06      	cmp	r3, #6
 8003830:	d824      	bhi.n	800387c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	3b05      	subs	r3, #5
 8003844:	221f      	movs	r2, #31
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	400a      	ands	r2, r1
 8003852:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	4618      	mov	r0, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	3b05      	subs	r3, #5
 800386e:	fa00 f203 	lsl.w	r2, r0, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	635a      	str	r2, [r3, #52]	; 0x34
 800387a:	e04c      	b.n	8003916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d824      	bhi.n	80038ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	3b23      	subs	r3, #35	; 0x23
 8003896:	221f      	movs	r2, #31
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43da      	mvns	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	400a      	ands	r2, r1
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4618      	mov	r0, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	3b23      	subs	r3, #35	; 0x23
 80038c0:	fa00 f203 	lsl.w	r2, r0, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
 80038cc:	e023      	b.n	8003916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	3b41      	subs	r3, #65	; 0x41
 80038e0:	221f      	movs	r2, #31
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43da      	mvns	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	400a      	ands	r2, r1
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	4618      	mov	r0, r3
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	3b41      	subs	r3, #65	; 0x41
 800390a:	fa00 f203 	lsl.w	r2, r0, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003916:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <HAL_ADC_ConfigChannel+0x234>)
 8003918:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a21      	ldr	r2, [pc, #132]	; (80039a4 <HAL_ADC_ConfigChannel+0x238>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d109      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1cc>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b12      	cmp	r3, #18
 800392a:	d105      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_ADC_ConfigChannel+0x238>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d123      	bne.n	800398a <HAL_ADC_ConfigChannel+0x21e>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b10      	cmp	r3, #16
 8003948:	d003      	beq.n	8003952 <HAL_ADC_ConfigChannel+0x1e6>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b11      	cmp	r3, #17
 8003950:	d11b      	bne.n	800398a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b10      	cmp	r3, #16
 8003964:	d111      	bne.n	800398a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_ADC_ConfigChannel+0x23c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a10      	ldr	r2, [pc, #64]	; (80039ac <HAL_ADC_ConfigChannel+0x240>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	0c9a      	lsrs	r2, r3, #18
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800397c:	e002      	b.n	8003984 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3b01      	subs	r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f9      	bne.n	800397e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40012300 	.word	0x40012300
 80039a4:	40012000 	.word	0x40012000
 80039a8:	20000000 	.word	0x20000000
 80039ac:	431bde83 	.word	0x431bde83

080039b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039b8:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <ADC_Init+0x1f0>)
 80039ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	021a      	lsls	r2, r3, #8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6899      	ldr	r1, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <ADC_Init+0x1f4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6899      	ldr	r1, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6899      	ldr	r1, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	e00f      	b.n	8003aae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0202 	bic.w	r2, r2, #2
 8003abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6899      	ldr	r1, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	7e1b      	ldrb	r3, [r3, #24]
 8003ac8:	005a      	lsls	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01b      	beq.n	8003b14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003afa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	3b01      	subs	r3, #1
 8003b08:	035a      	lsls	r2, r3, #13
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	e007      	b.n	8003b24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	051a      	lsls	r2, r3, #20
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6899      	ldr	r1, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b66:	025a      	lsls	r2, r3, #9
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6899      	ldr	r1, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	029a      	lsls	r2, r3, #10
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40012300 	.word	0x40012300
 8003ba4:	0f000001 	.word	0x0f000001

08003ba8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d13c      	bne.n	8003c3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d12b      	bne.n	8003c34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d127      	bne.n	8003c34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d119      	bne.n	8003c34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0220 	bic.w	r2, r2, #32
 8003c0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff fd7b 	bl	8003730 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c3a:	e00e      	b.n	8003c5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff fd85 	bl	8003758 <HAL_ADC_ErrorCallback>
}
 8003c4e:	e004      	b.n	8003c5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff fd67 	bl	8003744 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2240      	movs	r2, #64	; 0x40
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f043 0204 	orr.w	r2, r3, #4
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f7ff fd5a 	bl	8003758 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <__NVIC_SetPriorityGrouping>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cde:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60d3      	str	r3, [r2, #12]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <__NVIC_GetPriorityGrouping>:
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <__NVIC_GetPriorityGrouping+0x18>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	f003 0307 	and.w	r3, r3, #7
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_EnableIRQ>:
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	db0b      	blt.n	8003d3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	f003 021f 	and.w	r2, r3, #31
 8003d28:	4907      	ldr	r1, [pc, #28]	; (8003d48 <__NVIC_EnableIRQ+0x38>)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2001      	movs	r0, #1
 8003d32:	fa00 f202 	lsl.w	r2, r0, r2
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000e100 	.word	0xe000e100

08003d4c <__NVIC_SetPriority>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	db0a      	blt.n	8003d76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	490c      	ldr	r1, [pc, #48]	; (8003d98 <__NVIC_SetPriority+0x4c>)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	0112      	lsls	r2, r2, #4
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	440b      	add	r3, r1
 8003d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d74:	e00a      	b.n	8003d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4908      	ldr	r1, [pc, #32]	; (8003d9c <__NVIC_SetPriority+0x50>)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	3b04      	subs	r3, #4
 8003d84:	0112      	lsls	r2, r2, #4
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	440b      	add	r3, r1
 8003d8a:	761a      	strb	r2, [r3, #24]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000e100 	.word	0xe000e100
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <NVIC_EncodePriority>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f1c3 0307 	rsb	r3, r3, #7
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	bf28      	it	cs
 8003dbe:	2304      	movcs	r3, #4
 8003dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2b06      	cmp	r3, #6
 8003dc8:	d902      	bls.n	8003dd0 <NVIC_EncodePriority+0x30>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3b03      	subs	r3, #3
 8003dce:	e000      	b.n	8003dd2 <NVIC_EncodePriority+0x32>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	401a      	ands	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	fa01 f303 	lsl.w	r3, r1, r3
 8003df2:	43d9      	mvns	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df8:	4313      	orrs	r3, r2
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ff4c 	bl	8003cac <__NVIC_SetPriorityGrouping>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e2e:	f7ff ff61 	bl	8003cf4 <__NVIC_GetPriorityGrouping>
 8003e32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	6978      	ldr	r0, [r7, #20]
 8003e3a:	f7ff ffb1 	bl	8003da0 <NVIC_EncodePriority>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ff80 	bl	8003d4c <__NVIC_SetPriority>
}
 8003e4c:	bf00      	nop
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ff54 	bl	8003d10 <__NVIC_EnableIRQ>
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e7c:	f7ff faf4 	bl	8003468 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e099      	b.n	8003fc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eac:	e00f      	b.n	8003ece <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eae:	f7ff fadb 	bl	8003468 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d908      	bls.n	8003ece <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e078      	b.n	8003fc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e8      	bne.n	8003eae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4b38      	ldr	r3, [pc, #224]	; (8003fc8 <HAL_DMA_Init+0x158>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d107      	bne.n	8003f38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	4313      	orrs	r3, r2
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 0307 	bic.w	r3, r3, #7
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d117      	bne.n	8003f92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00e      	beq.n	8003f92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fb01 	bl	800457c <DMA_CheckFifoParam>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2240      	movs	r2, #64	; 0x40
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e016      	b.n	8003fc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fab8 	bl	8004510 <DMA_CalcBaseAndBitshift>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	223f      	movs	r2, #63	; 0x3f
 8003faa:	409a      	lsls	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	f010803f 	.word	0xf010803f

08003fcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_DMA_Start_IT+0x26>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e040      	b.n	8004074 <HAL_DMA_Start_IT+0xa8>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d12f      	bne.n	8004066 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fa4a 	bl	80044b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	223f      	movs	r2, #63	; 0x3f
 8004026:	409a      	lsls	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0216 	orr.w	r2, r2, #22
 800403a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0208 	orr.w	r2, r2, #8
 8004052:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	e005      	b.n	8004072 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800406e:	2302      	movs	r3, #2
 8004070:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004072:	7dfb      	ldrb	r3, [r7, #23]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004088:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800408a:	f7ff f9ed 	bl	8003468 <HAL_GetTick>
 800408e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d008      	beq.n	80040ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e052      	b.n	8004154 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0216 	bic.w	r2, r2, #22
 80040bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <HAL_DMA_Abort+0x62>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0208 	bic.w	r2, r2, #8
 80040ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040fe:	e013      	b.n	8004128 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004100:	f7ff f9b2 	bl	8003468 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b05      	cmp	r3, #5
 800410c:	d90c      	bls.n	8004128 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2203      	movs	r2, #3
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e015      	b.n	8004154 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e4      	bne.n	8004100 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	223f      	movs	r2, #63	; 0x3f
 800413c:	409a      	lsls	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d004      	beq.n	800417a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2280      	movs	r2, #128	; 0x80
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e00c      	b.n	8004194 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2205      	movs	r2, #5
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041ac:	4b8e      	ldr	r3, [pc, #568]	; (80043e8 <HAL_DMA_IRQHandler+0x248>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a8e      	ldr	r2, [pc, #568]	; (80043ec <HAL_DMA_IRQHandler+0x24c>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	0a9b      	lsrs	r3, r3, #10
 80041b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	2208      	movs	r2, #8
 80041cc:	409a      	lsls	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01a      	beq.n	800420c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d013      	beq.n	800420c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0204 	bic.w	r2, r2, #4
 80041f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	2208      	movs	r2, #8
 80041fa:	409a      	lsls	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	2201      	movs	r2, #1
 8004212:	409a      	lsls	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d012      	beq.n	8004242 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	2201      	movs	r2, #1
 8004230:	409a      	lsls	r2, r3
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	f043 0202 	orr.w	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	2204      	movs	r2, #4
 8004248:	409a      	lsls	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	2204      	movs	r2, #4
 8004266:	409a      	lsls	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f043 0204 	orr.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	2210      	movs	r2, #16
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d043      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d03c      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	2210      	movs	r2, #16
 800429c:	409a      	lsls	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d018      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d108      	bne.n	80042d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d024      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
 80042ce:	e01f      	b.n	8004310 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4798      	blx	r3
 80042e0:	e016      	b.n	8004310 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d107      	bne.n	8004300 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0208 	bic.w	r2, r2, #8
 80042fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	2220      	movs	r2, #32
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 808f 	beq.w	8004440 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8087 	beq.w	8004440 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	2220      	movs	r2, #32
 8004338:	409a      	lsls	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b05      	cmp	r3, #5
 8004348:	d136      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0216 	bic.w	r2, r2, #22
 8004358:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004368:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_DMA_IRQHandler+0x1da>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0208 	bic.w	r2, r2, #8
 8004388:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438e:	223f      	movs	r2, #63	; 0x3f
 8004390:	409a      	lsls	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d07e      	beq.n	80044ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
        }
        return;
 80043b6:	e079      	b.n	80044ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d031      	beq.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
 80043e4:	e02c      	b.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
 80043e6:	bf00      	nop
 80043e8:	20000000 	.word	0x20000000
 80043ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d023      	beq.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e01e      	b.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10f      	bne.n	8004430 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0210 	bic.w	r2, r2, #16
 800441e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	2b00      	cmp	r3, #0
 8004446:	d032      	beq.n	80044ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d022      	beq.n	800449a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2205      	movs	r2, #5
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	3301      	adds	r3, #1
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	429a      	cmp	r2, r3
 8004476:	d307      	bcc.n	8004488 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f2      	bne.n	800446c <HAL_DMA_IRQHandler+0x2cc>
 8004486:	e000      	b.n	800448a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004488:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
 80044aa:	e000      	b.n	80044ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80044ac:	bf00      	nop
    }
  }
}
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d108      	bne.n	80044f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044f2:	e007      	b.n	8004504 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	60da      	str	r2, [r3, #12]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	3b10      	subs	r3, #16
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <DMA_CalcBaseAndBitshift+0x64>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800452a:	4a13      	ldr	r2, [pc, #76]	; (8004578 <DMA_CalcBaseAndBitshift+0x68>)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d909      	bls.n	8004552 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	1d1a      	adds	r2, r3, #4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	659a      	str	r2, [r3, #88]	; 0x58
 8004550:	e007      	b.n	8004562 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	aaaaaaab 	.word	0xaaaaaaab
 8004578:	0800f038 	.word	0x0800f038

0800457c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11f      	bne.n	80045d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d856      	bhi.n	800464a <DMA_CheckFifoParam+0xce>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <DMA_CheckFifoParam+0x28>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045c7 	.word	0x080045c7
 80045ac:	080045b5 	.word	0x080045b5
 80045b0:	0800464b 	.word	0x0800464b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d046      	beq.n	800464e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c4:	e043      	b.n	800464e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ce:	d140      	bne.n	8004652 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d4:	e03d      	b.n	8004652 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045de:	d121      	bne.n	8004624 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d837      	bhi.n	8004656 <DMA_CheckFifoParam+0xda>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <DMA_CheckFifoParam+0x70>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	08004603 	.word	0x08004603
 80045f4:	080045fd 	.word	0x080045fd
 80045f8:	08004615 	.word	0x08004615
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004600:	e030      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d025      	beq.n	800465a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004612:	e022      	b.n	800465a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800461c:	d11f      	bne.n	800465e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004622:	e01c      	b.n	800465e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d903      	bls.n	8004632 <DMA_CheckFifoParam+0xb6>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d003      	beq.n	8004638 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004630:	e018      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
      break;
 8004636:	e015      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00e      	beq.n	8004662 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      break;
 8004648:	e00b      	b.n	8004662 <DMA_CheckFifoParam+0xe6>
      break;
 800464a:	bf00      	nop
 800464c:	e00a      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
 8004650:	e008      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 8004652:	bf00      	nop
 8004654:	e006      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e004      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;   
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 8004662:	bf00      	nop
    }
  } 
  
  return status; 
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop

08004674 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004686:	4b23      	ldr	r3, [pc, #140]	; (8004714 <HAL_FLASH_Program+0xa0>)
 8004688:	7e1b      	ldrb	r3, [r3, #24]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_FLASH_Program+0x1e>
 800468e:	2302      	movs	r3, #2
 8004690:	e03b      	b.n	800470a <HAL_FLASH_Program+0x96>
 8004692:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_FLASH_Program+0xa0>)
 8004694:	2201      	movs	r2, #1
 8004696:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004698:	f24c 3050 	movw	r0, #50000	; 0xc350
 800469c:	f000 f870 	bl	8004780 <FLASH_WaitForLastOperation>
 80046a0:	4603      	mov	r3, r0
 80046a2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d12b      	bne.n	8004702 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d105      	bne.n	80046bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80046b0:	783b      	ldrb	r3, [r7, #0]
 80046b2:	4619      	mov	r1, r3
 80046b4:	68b8      	ldr	r0, [r7, #8]
 80046b6:	f000 f91b 	bl	80048f0 <FLASH_Program_Byte>
 80046ba:	e016      	b.n	80046ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d105      	bne.n	80046ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80046c2:	883b      	ldrh	r3, [r7, #0]
 80046c4:	4619      	mov	r1, r3
 80046c6:	68b8      	ldr	r0, [r7, #8]
 80046c8:	f000 f8ee 	bl	80048a8 <FLASH_Program_HalfWord>
 80046cc:	e00d      	b.n	80046ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d105      	bne.n	80046e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f000 f8c3 	bl	8004864 <FLASH_Program_Word>
 80046de:	e004      	b.n	80046ea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80046e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e4:	68b8      	ldr	r0, [r7, #8]
 80046e6:	f000 f88b 	bl	8004800 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80046ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046ee:	f000 f847 	bl	8004780 <FLASH_WaitForLastOperation>
 80046f2:	4603      	mov	r3, r0
 80046f4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <HAL_FLASH_Program+0xa4>)
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	4a07      	ldr	r2, [pc, #28]	; (8004718 <HAL_FLASH_Program+0xa4>)
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <HAL_FLASH_Program+0xa0>)
 8004704:	2200      	movs	r2, #0
 8004706:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004708:	7dfb      	ldrb	r3, [r7, #23]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000930 	.word	0x20000930
 8004718:	40023c00 	.word	0x40023c00

0800471c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_FLASH_Unlock+0x38>)
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	da0b      	bge.n	8004746 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_FLASH_Unlock+0x38>)
 8004730:	4a09      	ldr	r2, [pc, #36]	; (8004758 <HAL_FLASH_Unlock+0x3c>)
 8004732:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004734:	4b07      	ldr	r3, [pc, #28]	; (8004754 <HAL_FLASH_Unlock+0x38>)
 8004736:	4a09      	ldr	r2, [pc, #36]	; (800475c <HAL_FLASH_Unlock+0x40>)
 8004738:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_FLASH_Unlock+0x38>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	da01      	bge.n	8004746 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004746:	79fb      	ldrb	r3, [r7, #7]
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40023c00 	.word	0x40023c00
 8004758:	45670123 	.word	0x45670123
 800475c:	cdef89ab 	.word	0xcdef89ab

08004760 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_FLASH_Lock+0x1c>)
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	4a04      	ldr	r2, [pc, #16]	; (800477c <HAL_FLASH_Lock+0x1c>)
 800476a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800476e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40023c00 	.word	0x40023c00

08004780 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <FLASH_WaitForLastOperation+0x78>)
 800478e:	2200      	movs	r2, #0
 8004790:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004792:	f7fe fe69 	bl	8003468 <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004798:	e010      	b.n	80047bc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d00c      	beq.n	80047bc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <FLASH_WaitForLastOperation+0x38>
 80047a8:	f7fe fe5e 	bl	8003468 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d201      	bcs.n	80047bc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e019      	b.n	80047f0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <FLASH_WaitForLastOperation+0x7c>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e8      	bne.n	800479a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <FLASH_WaitForLastOperation+0x7c>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <FLASH_WaitForLastOperation+0x7c>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80047da:	4b08      	ldr	r3, [pc, #32]	; (80047fc <FLASH_WaitForLastOperation+0x7c>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80047e6:	f000 f8a5 	bl	8004934 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
  
}  
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000930 	.word	0x20000930
 80047fc:	40023c00 	.word	0x40023c00

08004800 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800480c:	4b14      	ldr	r3, [pc, #80]	; (8004860 <FLASH_Program_DoubleWord+0x60>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	4a13      	ldr	r2, [pc, #76]	; (8004860 <FLASH_Program_DoubleWord+0x60>)
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <FLASH_Program_DoubleWord+0x60>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	4a10      	ldr	r2, [pc, #64]	; (8004860 <FLASH_Program_DoubleWord+0x60>)
 800481e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004822:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004824:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <FLASH_Program_DoubleWord+0x60>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	4a0d      	ldr	r2, [pc, #52]	; (8004860 <FLASH_Program_DoubleWord+0x60>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004836:	f3bf 8f6f 	isb	sy
}
 800483a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800483c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	000a      	movs	r2, r1
 800484a:	2300      	movs	r3, #0
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	3104      	adds	r1, #4
 8004850:	4613      	mov	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	40023c00 	.word	0x40023c00

08004864 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800486e:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <FLASH_Program_Word+0x40>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	4a0c      	ldr	r2, [pc, #48]	; (80048a4 <FLASH_Program_Word+0x40>)
 8004874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004878:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <FLASH_Program_Word+0x40>)
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <FLASH_Program_Word+0x40>)
 8004880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004884:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004886:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <FLASH_Program_Word+0x40>)
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	4a06      	ldr	r2, [pc, #24]	; (80048a4 <FLASH_Program_Word+0x40>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	601a      	str	r2, [r3, #0]
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40023c00 	.word	0x40023c00

080048a8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048b4:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <FLASH_Program_HalfWord+0x44>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	4a0c      	ldr	r2, [pc, #48]	; (80048ec <FLASH_Program_HalfWord+0x44>)
 80048ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <FLASH_Program_HalfWord+0x44>)
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	4a09      	ldr	r2, [pc, #36]	; (80048ec <FLASH_Program_HalfWord+0x44>)
 80048c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <FLASH_Program_HalfWord+0x44>)
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	4a06      	ldr	r2, [pc, #24]	; (80048ec <FLASH_Program_HalfWord+0x44>)
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	887a      	ldrh	r2, [r7, #2]
 80048dc:	801a      	strh	r2, [r3, #0]
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40023c00 	.word	0x40023c00

080048f0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <FLASH_Program_Byte+0x40>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	4a0b      	ldr	r2, [pc, #44]	; (8004930 <FLASH_Program_Byte+0x40>)
 8004902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004906:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <FLASH_Program_Byte+0x40>)
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <FLASH_Program_Byte+0x40>)
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <FLASH_Program_Byte+0x40>)
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	4a06      	ldr	r2, [pc, #24]	; (8004930 <FLASH_Program_Byte+0x40>)
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	701a      	strb	r2, [r3, #0]
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40023c00 	.word	0x40023c00

08004934 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004938:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004944:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f043 0310 	orr.w	r3, r3, #16
 800494c:	4a2b      	ldr	r2, [pc, #172]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 800494e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004950:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 8004952:	2210      	movs	r2, #16
 8004954:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004956:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004962:	4b26      	ldr	r3, [pc, #152]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f043 0308 	orr.w	r3, r3, #8
 800496a:	4a24      	ldr	r2, [pc, #144]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 800496c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800496e:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 8004970:	2220      	movs	r2, #32
 8004972:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004974:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004980:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	4a1c      	ldr	r2, [pc, #112]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 800498a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800498c:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004992:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800499e:	4b17      	ldr	r3, [pc, #92]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f043 0302 	orr.w	r3, r3, #2
 80049a6:	4a15      	ldr	r2, [pc, #84]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 80049a8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 80049ac:	2280      	movs	r2, #128	; 0x80
 80049ae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80049b0:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 80049c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 80049ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f043 0320 	orr.w	r3, r3, #32
 80049e4:	4a05      	ldr	r2, [pc, #20]	; (80049fc <FLASH_SetErrorCode+0xc8>)
 80049e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <FLASH_SetErrorCode+0xc4>)
 80049ea:	2202      	movs	r2, #2
 80049ec:	60da      	str	r2, [r3, #12]
  }
}
 80049ee:	bf00      	nop
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40023c00 	.word	0x40023c00
 80049fc:	20000930 	.word	0x20000930

08004a00 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a12:	4b31      	ldr	r3, [pc, #196]	; (8004ad8 <HAL_FLASHEx_Erase+0xd8>)
 8004a14:	7e1b      	ldrb	r3, [r3, #24]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_FLASHEx_Erase+0x1e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e058      	b.n	8004ad0 <HAL_FLASHEx_Erase+0xd0>
 8004a1e:	4b2e      	ldr	r3, [pc, #184]	; (8004ad8 <HAL_FLASHEx_Erase+0xd8>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a28:	f7ff feaa 	bl	8004780 <FLASH_WaitForLastOperation>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d148      	bne.n	8004ac8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d115      	bne.n	8004a72 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 f844 	bl	8004ae0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a5c:	f7ff fe90 	bl	8004780 <FLASH_WaitForLastOperation>
 8004a60:	4603      	mov	r3, r0
 8004a62:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004a64:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <HAL_FLASHEx_Erase+0xdc>)
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	4a1c      	ldr	r2, [pc, #112]	; (8004adc <HAL_FLASHEx_Erase+0xdc>)
 8004a6a:	f023 0304 	bic.w	r3, r3, #4
 8004a6e:	6113      	str	r3, [r2, #16]
 8004a70:	e028      	b.n	8004ac4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	e01c      	b.n	8004ab4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	4619      	mov	r1, r3
 8004a82:	68b8      	ldr	r0, [r7, #8]
 8004a84:	f000 f850 	bl	8004b28 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a8c:	f7ff fe78 	bl	8004780 <FLASH_WaitForLastOperation>
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004a94:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_FLASHEx_Erase+0xdc>)
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	4a10      	ldr	r2, [pc, #64]	; (8004adc <HAL_FLASHEx_Erase+0xdc>)
 8004a9a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004a9e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	601a      	str	r2, [r3, #0]
          break;
 8004aac:	e00a      	b.n	8004ac4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4413      	add	r3, r2
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3da      	bcc.n	8004a7a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004ac4:	f000 f878 	bl	8004bb8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_FLASHEx_Erase+0xd8>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	761a      	strb	r2, [r3, #24]

  return status;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000930 	.word	0x20000930
 8004adc:	40023c00 	.word	0x40023c00

08004ae0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	6039      	str	r1, [r7, #0]
 8004aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004aec:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <FLASH_MassErase+0x44>)
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <FLASH_MassErase+0x44>)
 8004af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <FLASH_MassErase+0x44>)
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <FLASH_MassErase+0x44>)
 8004afe:	f043 0304 	orr.w	r3, r3, #4
 8004b02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004b04:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <FLASH_MassErase+0x44>)
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <FLASH_MassErase+0x44>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b14:	6113      	str	r3, [r2, #16]
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40023c00 	.word	0x40023c00

08004b28 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	e010      	b.n	8004b66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d103      	bne.n	8004b52 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e009      	b.n	8004b66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d103      	bne.n	8004b60 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e002      	b.n	8004b66 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004b60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b64:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b66:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <FLASH_Erase_Sector+0x8c>)
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	4a12      	ldr	r2, [pc, #72]	; (8004bb4 <FLASH_Erase_Sector+0x8c>)
 8004b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <FLASH_Erase_Sector+0x8c>)
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	490f      	ldr	r1, [pc, #60]	; (8004bb4 <FLASH_Erase_Sector+0x8c>)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <FLASH_Erase_Sector+0x8c>)
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4a0c      	ldr	r2, [pc, #48]	; (8004bb4 <FLASH_Erase_Sector+0x8c>)
 8004b84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004b88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <FLASH_Erase_Sector+0x8c>)
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4313      	orrs	r3, r2
 8004b94:	4a07      	ldr	r2, [pc, #28]	; (8004bb4 <FLASH_Erase_Sector+0x8c>)
 8004b96:	f043 0302 	orr.w	r3, r3, #2
 8004b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <FLASH_Erase_Sector+0x8c>)
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <FLASH_Erase_Sector+0x8c>)
 8004ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba6:	6113      	str	r3, [r2, #16]
}
 8004ba8:	bf00      	nop
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40023c00 	.word	0x40023c00

08004bb8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004bbc:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d017      	beq.n	8004bf8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004bc8:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004bce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004bda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	4b17      	ldr	r3, [pc, #92]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004be6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bec:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bf6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d017      	beq.n	8004c34 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004c04:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a0d      	ldr	r2, [pc, #52]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c0e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004c16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a07      	ldr	r2, [pc, #28]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c26:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <FLASH_FlushCaches+0x88>)
 8004c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c32:	6013      	str	r3, [r2, #0]
  }
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40023c00 	.word	0x40023c00

08004c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	; 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	e159      	b.n	8004f14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c60:	2201      	movs	r2, #1
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4013      	ands	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	f040 8148 	bne.w	8004f0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d005      	beq.n	8004c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d130      	bne.n	8004cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ccc:	2201      	movs	r2, #1
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	f003 0201 	and.w	r2, r3, #1
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d017      	beq.n	8004d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	2203      	movs	r2, #3
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	43db      	mvns	r3, r3
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d123      	bne.n	8004d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	08da      	lsrs	r2, r3, #3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3208      	adds	r2, #8
 8004d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	220f      	movs	r2, #15
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4013      	ands	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	08da      	lsrs	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3208      	adds	r2, #8
 8004d82:	69b9      	ldr	r1, [r7, #24]
 8004d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	2203      	movs	r2, #3
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 0203 	and.w	r2, r3, #3
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80a2 	beq.w	8004f0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	4b57      	ldr	r3, [pc, #348]	; (8004f2c <HAL_GPIO_Init+0x2e8>)
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd2:	4a56      	ldr	r2, [pc, #344]	; (8004f2c <HAL_GPIO_Init+0x2e8>)
 8004dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dda:	4b54      	ldr	r3, [pc, #336]	; (8004f2c <HAL_GPIO_Init+0x2e8>)
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004de6:	4a52      	ldr	r2, [pc, #328]	; (8004f30 <HAL_GPIO_Init+0x2ec>)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	089b      	lsrs	r3, r3, #2
 8004dec:	3302      	adds	r3, #2
 8004dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	220f      	movs	r2, #15
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4013      	ands	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a49      	ldr	r2, [pc, #292]	; (8004f34 <HAL_GPIO_Init+0x2f0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d019      	beq.n	8004e46 <HAL_GPIO_Init+0x202>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a48      	ldr	r2, [pc, #288]	; (8004f38 <HAL_GPIO_Init+0x2f4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_GPIO_Init+0x1fe>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a47      	ldr	r2, [pc, #284]	; (8004f3c <HAL_GPIO_Init+0x2f8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00d      	beq.n	8004e3e <HAL_GPIO_Init+0x1fa>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a46      	ldr	r2, [pc, #280]	; (8004f40 <HAL_GPIO_Init+0x2fc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <HAL_GPIO_Init+0x1f6>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a45      	ldr	r2, [pc, #276]	; (8004f44 <HAL_GPIO_Init+0x300>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d101      	bne.n	8004e36 <HAL_GPIO_Init+0x1f2>
 8004e32:	2304      	movs	r3, #4
 8004e34:	e008      	b.n	8004e48 <HAL_GPIO_Init+0x204>
 8004e36:	2307      	movs	r3, #7
 8004e38:	e006      	b.n	8004e48 <HAL_GPIO_Init+0x204>
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e004      	b.n	8004e48 <HAL_GPIO_Init+0x204>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e002      	b.n	8004e48 <HAL_GPIO_Init+0x204>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <HAL_GPIO_Init+0x204>
 8004e46:	2300      	movs	r3, #0
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	f002 0203 	and.w	r2, r2, #3
 8004e4e:	0092      	lsls	r2, r2, #2
 8004e50:	4093      	lsls	r3, r2
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e58:	4935      	ldr	r1, [pc, #212]	; (8004f30 <HAL_GPIO_Init+0x2ec>)
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	3302      	adds	r3, #2
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e66:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <HAL_GPIO_Init+0x304>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4013      	ands	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e8a:	4a2f      	ldr	r2, [pc, #188]	; (8004f48 <HAL_GPIO_Init+0x304>)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e90:	4b2d      	ldr	r3, [pc, #180]	; (8004f48 <HAL_GPIO_Init+0x304>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eb4:	4a24      	ldr	r2, [pc, #144]	; (8004f48 <HAL_GPIO_Init+0x304>)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eba:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <HAL_GPIO_Init+0x304>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ede:	4a1a      	ldr	r2, [pc, #104]	; (8004f48 <HAL_GPIO_Init+0x304>)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ee4:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <HAL_GPIO_Init+0x304>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f08:	4a0f      	ldr	r2, [pc, #60]	; (8004f48 <HAL_GPIO_Init+0x304>)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3301      	adds	r3, #1
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b0f      	cmp	r3, #15
 8004f18:	f67f aea2 	bls.w	8004c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	3724      	adds	r7, #36	; 0x24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40013800 	.word	0x40013800
 8004f34:	40020000 	.word	0x40020000
 8004f38:	40020400 	.word	0x40020400
 8004f3c:	40020800 	.word	0x40020800
 8004f40:	40020c00 	.word	0x40020c00
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40013c00 	.word	0x40013c00

08004f4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e0bb      	b.n	80050e0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f68:	2201      	movs	r2, #1
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	f040 80ab 	bne.w	80050da <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004f84:	4a5c      	ldr	r2, [pc, #368]	; (80050f8 <HAL_GPIO_DeInit+0x1ac>)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f90:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	220f      	movs	r2, #15
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a54      	ldr	r2, [pc, #336]	; (80050fc <HAL_GPIO_DeInit+0x1b0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d019      	beq.n	8004fe2 <HAL_GPIO_DeInit+0x96>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a53      	ldr	r2, [pc, #332]	; (8005100 <HAL_GPIO_DeInit+0x1b4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_GPIO_DeInit+0x92>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a52      	ldr	r2, [pc, #328]	; (8005104 <HAL_GPIO_DeInit+0x1b8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00d      	beq.n	8004fda <HAL_GPIO_DeInit+0x8e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a51      	ldr	r2, [pc, #324]	; (8005108 <HAL_GPIO_DeInit+0x1bc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <HAL_GPIO_DeInit+0x8a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a50      	ldr	r2, [pc, #320]	; (800510c <HAL_GPIO_DeInit+0x1c0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_GPIO_DeInit+0x86>
 8004fce:	2304      	movs	r3, #4
 8004fd0:	e008      	b.n	8004fe4 <HAL_GPIO_DeInit+0x98>
 8004fd2:	2307      	movs	r3, #7
 8004fd4:	e006      	b.n	8004fe4 <HAL_GPIO_DeInit+0x98>
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e004      	b.n	8004fe4 <HAL_GPIO_DeInit+0x98>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e002      	b.n	8004fe4 <HAL_GPIO_DeInit+0x98>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_GPIO_DeInit+0x98>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	f002 0203 	and.w	r2, r2, #3
 8004fea:	0092      	lsls	r2, r2, #2
 8004fec:	4093      	lsls	r3, r2
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d132      	bne.n	800505a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ff4:	4b46      	ldr	r3, [pc, #280]	; (8005110 <HAL_GPIO_DeInit+0x1c4>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	4944      	ldr	r1, [pc, #272]	; (8005110 <HAL_GPIO_DeInit+0x1c4>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005002:	4b43      	ldr	r3, [pc, #268]	; (8005110 <HAL_GPIO_DeInit+0x1c4>)
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	43db      	mvns	r3, r3
 800500a:	4941      	ldr	r1, [pc, #260]	; (8005110 <HAL_GPIO_DeInit+0x1c4>)
 800500c:	4013      	ands	r3, r2
 800500e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005010:	4b3f      	ldr	r3, [pc, #252]	; (8005110 <HAL_GPIO_DeInit+0x1c4>)
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	43db      	mvns	r3, r3
 8005018:	493d      	ldr	r1, [pc, #244]	; (8005110 <HAL_GPIO_DeInit+0x1c4>)
 800501a:	4013      	ands	r3, r2
 800501c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800501e:	4b3c      	ldr	r3, [pc, #240]	; (8005110 <HAL_GPIO_DeInit+0x1c4>)
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	43db      	mvns	r3, r3
 8005026:	493a      	ldr	r1, [pc, #232]	; (8005110 <HAL_GPIO_DeInit+0x1c4>)
 8005028:	4013      	ands	r3, r2
 800502a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	220f      	movs	r2, #15
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800503c:	4a2e      	ldr	r2, [pc, #184]	; (80050f8 <HAL_GPIO_DeInit+0x1ac>)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	089b      	lsrs	r3, r3, #2
 8005042:	3302      	adds	r3, #2
 8005044:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	43da      	mvns	r2, r3
 800504c:	482a      	ldr	r0, [pc, #168]	; (80050f8 <HAL_GPIO_DeInit+0x1ac>)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	089b      	lsrs	r3, r3, #2
 8005052:	400a      	ands	r2, r1
 8005054:	3302      	adds	r3, #2
 8005056:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	2103      	movs	r1, #3
 8005064:	fa01 f303 	lsl.w	r3, r1, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	401a      	ands	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	08da      	lsrs	r2, r3, #3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3208      	adds	r2, #8
 8005078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	220f      	movs	r2, #15
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	08d2      	lsrs	r2, r2, #3
 8005090:	4019      	ands	r1, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3208      	adds	r2, #8
 8005096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	2103      	movs	r1, #3
 80050a4:	fa01 f303 	lsl.w	r3, r1, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	401a      	ands	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	2101      	movs	r1, #1
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	fa01 f303 	lsl.w	r3, r1, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	401a      	ands	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	2103      	movs	r1, #3
 80050ce:	fa01 f303 	lsl.w	r3, r1, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	401a      	ands	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	3301      	adds	r3, #1
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b0f      	cmp	r3, #15
 80050e4:	f67f af40 	bls.w	8004f68 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40013800 	.word	0x40013800
 80050fc:	40020000 	.word	0x40020000
 8005100:	40020400 	.word	0x40020400
 8005104:	40020800 	.word	0x40020800
 8005108:	40020c00 	.word	0x40020c00
 800510c:	40021000 	.word	0x40021000
 8005110:	40013c00 	.word	0x40013c00

08005114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	807b      	strh	r3, [r7, #2]
 8005120:	4613      	mov	r3, r2
 8005122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005124:	787b      	ldrb	r3, [r7, #1]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800512a:	887a      	ldrh	r2, [r7, #2]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005130:	e003      	b.n	800513a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005132:	887b      	ldrh	r3, [r7, #2]
 8005134:	041a      	lsls	r2, r3, #16
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	619a      	str	r2, [r3, #24]
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005152:	4b08      	ldr	r3, [pc, #32]	; (8005174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800515e:	4a05      	ldr	r2, [pc, #20]	; (8005174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	4618      	mov	r0, r3
 8005168:	f7fc fcd4 	bl	8001b14 <HAL_GPIO_EXTI_Callback>
  }
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40013c00 	.word	0x40013c00

08005178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e12b      	b.n	80053e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd fd5e 	bl	8002c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2224      	movs	r2, #36	; 0x24
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051dc:	f001 fbec 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 80051e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	4a81      	ldr	r2, [pc, #516]	; (80053ec <HAL_I2C_Init+0x274>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d807      	bhi.n	80051fc <HAL_I2C_Init+0x84>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a80      	ldr	r2, [pc, #512]	; (80053f0 <HAL_I2C_Init+0x278>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	bf94      	ite	ls
 80051f4:	2301      	movls	r3, #1
 80051f6:	2300      	movhi	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e006      	b.n	800520a <HAL_I2C_Init+0x92>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a7d      	ldr	r2, [pc, #500]	; (80053f4 <HAL_I2C_Init+0x27c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	bf94      	ite	ls
 8005204:	2301      	movls	r3, #1
 8005206:	2300      	movhi	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e0e7      	b.n	80053e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a78      	ldr	r2, [pc, #480]	; (80053f8 <HAL_I2C_Init+0x280>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	0c9b      	lsrs	r3, r3, #18
 800521c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4a6a      	ldr	r2, [pc, #424]	; (80053ec <HAL_I2C_Init+0x274>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d802      	bhi.n	800524c <HAL_I2C_Init+0xd4>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	3301      	adds	r3, #1
 800524a:	e009      	b.n	8005260 <HAL_I2C_Init+0xe8>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005252:	fb02 f303 	mul.w	r3, r2, r3
 8005256:	4a69      	ldr	r2, [pc, #420]	; (80053fc <HAL_I2C_Init+0x284>)
 8005258:	fba2 2303 	umull	r2, r3, r2, r3
 800525c:	099b      	lsrs	r3, r3, #6
 800525e:	3301      	adds	r3, #1
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	430b      	orrs	r3, r1
 8005266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005272:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	495c      	ldr	r1, [pc, #368]	; (80053ec <HAL_I2C_Init+0x274>)
 800527c:	428b      	cmp	r3, r1
 800527e:	d819      	bhi.n	80052b4 <HAL_I2C_Init+0x13c>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1e59      	subs	r1, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	fbb1 f3f3 	udiv	r3, r1, r3
 800528e:	1c59      	adds	r1, r3, #1
 8005290:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005294:	400b      	ands	r3, r1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_I2C_Init+0x138>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1e59      	subs	r1, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80052a8:	3301      	adds	r3, #1
 80052aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ae:	e051      	b.n	8005354 <HAL_I2C_Init+0x1dc>
 80052b0:	2304      	movs	r3, #4
 80052b2:	e04f      	b.n	8005354 <HAL_I2C_Init+0x1dc>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d111      	bne.n	80052e0 <HAL_I2C_Init+0x168>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1e58      	subs	r0, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	440b      	add	r3, r1
 80052ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ce:	3301      	adds	r3, #1
 80052d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e012      	b.n	8005306 <HAL_I2C_Init+0x18e>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	1e58      	subs	r0, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6859      	ldr	r1, [r3, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	0099      	lsls	r1, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052f6:	3301      	adds	r3, #1
 80052f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	bf0c      	ite	eq
 8005300:	2301      	moveq	r3, #1
 8005302:	2300      	movne	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_I2C_Init+0x196>
 800530a:	2301      	movs	r3, #1
 800530c:	e022      	b.n	8005354 <HAL_I2C_Init+0x1dc>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10e      	bne.n	8005334 <HAL_I2C_Init+0x1bc>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	1e58      	subs	r0, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	460b      	mov	r3, r1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	440b      	add	r3, r1
 8005324:	fbb0 f3f3 	udiv	r3, r0, r3
 8005328:	3301      	adds	r3, #1
 800532a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800532e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005332:	e00f      	b.n	8005354 <HAL_I2C_Init+0x1dc>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	1e58      	subs	r0, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6859      	ldr	r1, [r3, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	0099      	lsls	r1, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	fbb0 f3f3 	udiv	r3, r0, r3
 800534a:	3301      	adds	r3, #1
 800534c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	6809      	ldr	r1, [r1, #0]
 8005358:	4313      	orrs	r3, r2
 800535a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6911      	ldr	r1, [r2, #16]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	68d2      	ldr	r2, [r2, #12]
 800538e:	4311      	orrs	r1, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	430b      	orrs	r3, r1
 8005396:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	000186a0 	.word	0x000186a0
 80053f0:	001e847f 	.word	0x001e847f
 80053f4:	003d08ff 	.word	0x003d08ff
 80053f8:	431bde83 	.word	0x431bde83
 80053fc:	10624dd3 	.word	0x10624dd3

08005400 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e021      	b.n	8005456 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2224      	movs	r2, #36	; 0x24
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fd fc60 	bl	8002cf0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	4608      	mov	r0, r1
 800546a:	4611      	mov	r1, r2
 800546c:	461a      	mov	r2, r3
 800546e:	4603      	mov	r3, r0
 8005470:	817b      	strh	r3, [r7, #10]
 8005472:	460b      	mov	r3, r1
 8005474:	813b      	strh	r3, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800547a:	f7fd fff5 	bl	8003468 <HAL_GetTick>
 800547e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b20      	cmp	r3, #32
 800548a:	f040 80d9 	bne.w	8005640 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	2319      	movs	r3, #25
 8005494:	2201      	movs	r2, #1
 8005496:	496d      	ldr	r1, [pc, #436]	; (800564c <HAL_I2C_Mem_Write+0x1ec>)
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fc7f 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
 80054a6:	e0cc      	b.n	8005642 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_I2C_Mem_Write+0x56>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e0c5      	b.n	8005642 <HAL_I2C_Mem_Write+0x1e2>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d007      	beq.n	80054dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2221      	movs	r2, #33	; 0x21
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2240      	movs	r2, #64	; 0x40
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800550c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4a4d      	ldr	r2, [pc, #308]	; (8005650 <HAL_I2C_Mem_Write+0x1f0>)
 800551c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800551e:	88f8      	ldrh	r0, [r7, #6]
 8005520:	893a      	ldrh	r2, [r7, #8]
 8005522:	8979      	ldrh	r1, [r7, #10]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4603      	mov	r3, r0
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fab6 	bl	8005aa0 <I2C_RequestMemoryWrite>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d052      	beq.n	80055e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e081      	b.n	8005642 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 fd00 	bl	8005f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2b04      	cmp	r3, #4
 8005554:	d107      	bne.n	8005566 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e06b      	b.n	8005642 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	781a      	ldrb	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b01      	subs	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d11b      	bne.n	80055e0 <HAL_I2C_Mem_Write+0x180>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d017      	beq.n	80055e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	781a      	ldrb	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1aa      	bne.n	800553e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 fcec 	bl	8005fca <I2C_WaitOnBTFFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00d      	beq.n	8005614 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d107      	bne.n	8005610 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e016      	b.n	8005642 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	00100002 	.word	0x00100002
 8005650:	ffff0000 	.word	0xffff0000

08005654 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08c      	sub	sp, #48	; 0x30
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	4608      	mov	r0, r1
 800565e:	4611      	mov	r1, r2
 8005660:	461a      	mov	r2, r3
 8005662:	4603      	mov	r3, r0
 8005664:	817b      	strh	r3, [r7, #10]
 8005666:	460b      	mov	r3, r1
 8005668:	813b      	strh	r3, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800566e:	f7fd fefb 	bl	8003468 <HAL_GetTick>
 8005672:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b20      	cmp	r3, #32
 800567e:	f040 8208 	bne.w	8005a92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	2319      	movs	r3, #25
 8005688:	2201      	movs	r2, #1
 800568a:	497b      	ldr	r1, [pc, #492]	; (8005878 <HAL_I2C_Mem_Read+0x224>)
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fb85 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
 800569a:	e1fb      	b.n	8005a94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_I2C_Mem_Read+0x56>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e1f4      	b.n	8005a94 <HAL_I2C_Mem_Read+0x440>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d007      	beq.n	80056d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2222      	movs	r2, #34	; 0x22
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4a5b      	ldr	r2, [pc, #364]	; (800587c <HAL_I2C_Mem_Read+0x228>)
 8005710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005712:	88f8      	ldrh	r0, [r7, #6]
 8005714:	893a      	ldrh	r2, [r7, #8]
 8005716:	8979      	ldrh	r1, [r7, #10]
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	4603      	mov	r3, r0
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fa52 	bl	8005bcc <I2C_RequestMemoryRead>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e1b0      	b.n	8005a94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005736:	2b00      	cmp	r3, #0
 8005738:	d113      	bne.n	8005762 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800573a:	2300      	movs	r3, #0
 800573c:	623b      	str	r3, [r7, #32]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	623b      	str	r3, [r7, #32]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	623b      	str	r3, [r7, #32]
 800574e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	e184      	b.n	8005a6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005766:	2b01      	cmp	r3, #1
 8005768:	d11b      	bne.n	80057a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	61fb      	str	r3, [r7, #28]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	e164      	b.n	8005a6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d11b      	bne.n	80057e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ca:	2300      	movs	r3, #0
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	e144      	b.n	8005a6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057f8:	e138      	b.n	8005a6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fe:	2b03      	cmp	r3, #3
 8005800:	f200 80f1 	bhi.w	80059e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005808:	2b01      	cmp	r3, #1
 800580a:	d123      	bne.n	8005854 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800580c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fc1b 	bl	800604c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e139      	b.n	8005a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005852:	e10b      	b.n	8005a6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005858:	2b02      	cmp	r3, #2
 800585a:	d14e      	bne.n	80058fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	2200      	movs	r2, #0
 8005864:	4906      	ldr	r1, [pc, #24]	; (8005880 <HAL_I2C_Mem_Read+0x22c>)
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fa98 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e10e      	b.n	8005a94 <HAL_I2C_Mem_Read+0x440>
 8005876:	bf00      	nop
 8005878:	00100002 	.word	0x00100002
 800587c:	ffff0000 	.word	0xffff0000
 8005880:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058f8:	e0b8      	b.n	8005a6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	2200      	movs	r2, #0
 8005902:	4966      	ldr	r1, [pc, #408]	; (8005a9c <HAL_I2C_Mem_Read+0x448>)
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fa49 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0bf      	b.n	8005a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005940:	3b01      	subs	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	2200      	movs	r2, #0
 800595e:	494f      	ldr	r1, [pc, #316]	; (8005a9c <HAL_I2C_Mem_Read+0x448>)
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fa1b 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e091      	b.n	8005a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800597e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059e4:	e042      	b.n	8005a6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 fb2e 	bl	800604c <I2C_WaitOnRXNEFlagUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e04c      	b.n	8005a94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d118      	bne.n	8005a6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f47f aec2 	bne.w	80057fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e000      	b.n	8005a94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a92:	2302      	movs	r3, #2
  }
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3728      	adds	r7, #40	; 0x28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	00010004 	.word	0x00010004

08005aa0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	461a      	mov	r2, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	817b      	strh	r3, [r7, #10]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	813b      	strh	r3, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f960 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00d      	beq.n	8005afe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af0:	d103      	bne.n	8005afa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e05f      	b.n	8005bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005afe:	897b      	ldrh	r3, [r7, #10]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	492d      	ldr	r1, [pc, #180]	; (8005bc8 <I2C_RequestMemoryWrite+0x128>)
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f998 	bl	8005e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e04c      	b.n	8005bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3c:	6a39      	ldr	r1, [r7, #32]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fa02 	bl	8005f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00d      	beq.n	8005b66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d107      	bne.n	8005b62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e02b      	b.n	8005bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b66:	88fb      	ldrh	r3, [r7, #6]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d105      	bne.n	8005b78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b6c:	893b      	ldrh	r3, [r7, #8]
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	611a      	str	r2, [r3, #16]
 8005b76:	e021      	b.n	8005bbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b78:	893b      	ldrh	r3, [r7, #8]
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b88:	6a39      	ldr	r1, [r7, #32]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f9dc 	bl	8005f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00d      	beq.n	8005bb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d107      	bne.n	8005bae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e005      	b.n	8005bbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb2:	893b      	ldrh	r3, [r7, #8]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	00010002 	.word	0x00010002

08005bcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	817b      	strh	r3, [r7, #10]
 8005bde:	460b      	mov	r3, r1
 8005be0:	813b      	strh	r3, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f8c2 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00d      	beq.n	8005c3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2c:	d103      	bne.n	8005c36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e0aa      	b.n	8005d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c3a:	897b      	ldrh	r3, [r7, #10]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	4952      	ldr	r1, [pc, #328]	; (8005d98 <I2C_RequestMemoryRead+0x1cc>)
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f8fa 	bl	8005e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e097      	b.n	8005d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	6a39      	ldr	r1, [r7, #32]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f964 	bl	8005f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00d      	beq.n	8005ca2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d107      	bne.n	8005c9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e076      	b.n	8005d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d105      	bne.n	8005cb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca8:	893b      	ldrh	r3, [r7, #8]
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	611a      	str	r2, [r3, #16]
 8005cb2:	e021      	b.n	8005cf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cb4:	893b      	ldrh	r3, [r7, #8]
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc4:	6a39      	ldr	r1, [r7, #32]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f93e 	bl	8005f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00d      	beq.n	8005cee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d107      	bne.n	8005cea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e050      	b.n	8005d90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cee:	893b      	ldrh	r3, [r7, #8]
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	6a39      	ldr	r1, [r7, #32]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f923 	bl	8005f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00d      	beq.n	8005d24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d107      	bne.n	8005d20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e035      	b.n	8005d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f82b 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5a:	d103      	bne.n	8005d64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e013      	b.n	8005d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d68:	897b      	ldrh	r3, [r7, #10]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	6a3a      	ldr	r2, [r7, #32]
 8005d7c:	4906      	ldr	r1, [pc, #24]	; (8005d98 <I2C_RequestMemoryRead+0x1cc>)
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f863 	bl	8005e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	00010002 	.word	0x00010002

08005d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	4613      	mov	r3, r2
 8005daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dac:	e025      	b.n	8005dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d021      	beq.n	8005dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db6:	f7fd fb57 	bl	8003468 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d302      	bcc.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d116      	bne.n	8005dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f043 0220 	orr.w	r2, r3, #32
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e023      	b.n	8005e42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d10d      	bne.n	8005e20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	43da      	mvns	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bf0c      	ite	eq
 8005e16:	2301      	moveq	r3, #1
 8005e18:	2300      	movne	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	e00c      	b.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	43da      	mvns	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bf0c      	ite	eq
 8005e32:	2301      	moveq	r3, #1
 8005e34:	2300      	movne	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d0b6      	beq.n	8005dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e58:	e051      	b.n	8005efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e68:	d123      	bne.n	8005eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f043 0204 	orr.w	r2, r3, #4
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e046      	b.n	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d021      	beq.n	8005efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eba:	f7fd fad5 	bl	8003468 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d302      	bcc.n	8005ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d116      	bne.n	8005efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f043 0220 	orr.w	r2, r3, #32
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e020      	b.n	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	0c1b      	lsrs	r3, r3, #16
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d10c      	bne.n	8005f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	43da      	mvns	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4013      	ands	r3, r2
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bf14      	ite	ne
 8005f1a:	2301      	movne	r3, #1
 8005f1c:	2300      	moveq	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	e00b      	b.n	8005f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	43da      	mvns	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf14      	ite	ne
 8005f34:	2301      	movne	r3, #1
 8005f36:	2300      	moveq	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d18d      	bne.n	8005e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f54:	e02d      	b.n	8005fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f8ce 	bl	80060f8 <I2C_IsAcknowledgeFailed>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e02d      	b.n	8005fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d021      	beq.n	8005fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f6e:	f7fd fa7b 	bl	8003468 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d116      	bne.n	8005fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	f043 0220 	orr.w	r2, r3, #32
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e007      	b.n	8005fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d1ca      	bne.n	8005f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fd6:	e02d      	b.n	8006034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f88d 	bl	80060f8 <I2C_IsAcknowledgeFailed>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e02d      	b.n	8006044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d021      	beq.n	8006034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff0:	f7fd fa3a 	bl	8003468 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d302      	bcc.n	8006006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d116      	bne.n	8006034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f043 0220 	orr.w	r2, r3, #32
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e007      	b.n	8006044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b04      	cmp	r3, #4
 8006040:	d1ca      	bne.n	8005fd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006058:	e042      	b.n	80060e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f003 0310 	and.w	r3, r3, #16
 8006064:	2b10      	cmp	r3, #16
 8006066:	d119      	bne.n	800609c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0210 	mvn.w	r2, #16
 8006070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e029      	b.n	80060f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609c:	f7fd f9e4 	bl	8003468 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d302      	bcc.n	80060b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d116      	bne.n	80060e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e007      	b.n	80060f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b40      	cmp	r3, #64	; 0x40
 80060ec:	d1b5      	bne.n	800605a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800610a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610e:	d11b      	bne.n	8006148 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006118:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	f043 0204 	orr.w	r2, r3, #4
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
	...

08006158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e267      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d075      	beq.n	8006262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006176:	4b88      	ldr	r3, [pc, #544]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 030c 	and.w	r3, r3, #12
 800617e:	2b04      	cmp	r3, #4
 8006180:	d00c      	beq.n	800619c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006182:	4b85      	ldr	r3, [pc, #532]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800618a:	2b08      	cmp	r3, #8
 800618c:	d112      	bne.n	80061b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800618e:	4b82      	ldr	r3, [pc, #520]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800619a:	d10b      	bne.n	80061b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800619c:	4b7e      	ldr	r3, [pc, #504]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d05b      	beq.n	8006260 <HAL_RCC_OscConfig+0x108>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d157      	bne.n	8006260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e242      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061bc:	d106      	bne.n	80061cc <HAL_RCC_OscConfig+0x74>
 80061be:	4b76      	ldr	r3, [pc, #472]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a75      	ldr	r2, [pc, #468]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e01d      	b.n	8006208 <HAL_RCC_OscConfig+0xb0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061d4:	d10c      	bne.n	80061f0 <HAL_RCC_OscConfig+0x98>
 80061d6:	4b70      	ldr	r3, [pc, #448]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a6f      	ldr	r2, [pc, #444]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80061dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	4b6d      	ldr	r3, [pc, #436]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a6c      	ldr	r2, [pc, #432]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80061e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e00b      	b.n	8006208 <HAL_RCC_OscConfig+0xb0>
 80061f0:	4b69      	ldr	r3, [pc, #420]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a68      	ldr	r2, [pc, #416]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80061f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	4b66      	ldr	r3, [pc, #408]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a65      	ldr	r2, [pc, #404]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 8006202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d013      	beq.n	8006238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006210:	f7fd f92a 	bl	8003468 <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006218:	f7fd f926 	bl	8003468 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b64      	cmp	r3, #100	; 0x64
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e207      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800622a:	4b5b      	ldr	r3, [pc, #364]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0f0      	beq.n	8006218 <HAL_RCC_OscConfig+0xc0>
 8006236:	e014      	b.n	8006262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006238:	f7fd f916 	bl	8003468 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006240:	f7fd f912 	bl	8003468 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b64      	cmp	r3, #100	; 0x64
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e1f3      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006252:	4b51      	ldr	r3, [pc, #324]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f0      	bne.n	8006240 <HAL_RCC_OscConfig+0xe8>
 800625e:	e000      	b.n	8006262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d063      	beq.n	8006336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800626e:	4b4a      	ldr	r3, [pc, #296]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 030c 	and.w	r3, r3, #12
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00b      	beq.n	8006292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800627a:	4b47      	ldr	r3, [pc, #284]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006282:	2b08      	cmp	r3, #8
 8006284:	d11c      	bne.n	80062c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006286:	4b44      	ldr	r3, [pc, #272]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d116      	bne.n	80062c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006292:	4b41      	ldr	r3, [pc, #260]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_RCC_OscConfig+0x152>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d001      	beq.n	80062aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e1c7      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062aa:	4b3b      	ldr	r3, [pc, #236]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4937      	ldr	r1, [pc, #220]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062be:	e03a      	b.n	8006336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062c8:	4b34      	ldr	r3, [pc, #208]	; (800639c <HAL_RCC_OscConfig+0x244>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ce:	f7fd f8cb 	bl	8003468 <HAL_GetTick>
 80062d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d4:	e008      	b.n	80062e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062d6:	f7fd f8c7 	bl	8003468 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e1a8      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e8:	4b2b      	ldr	r3, [pc, #172]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f0      	beq.n	80062d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f4:	4b28      	ldr	r3, [pc, #160]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	4925      	ldr	r1, [pc, #148]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]
 8006308:	e015      	b.n	8006336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <HAL_RCC_OscConfig+0x244>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006310:	f7fd f8aa 	bl	8003468 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006318:	f7fd f8a6 	bl	8003468 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e187      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800632a:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d036      	beq.n	80063b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800634a:	4b15      	ldr	r3, [pc, #84]	; (80063a0 <HAL_RCC_OscConfig+0x248>)
 800634c:	2201      	movs	r2, #1
 800634e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006350:	f7fd f88a 	bl	8003468 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006358:	f7fd f886 	bl	8003468 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e167      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800636a:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <HAL_RCC_OscConfig+0x240>)
 800636c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x200>
 8006376:	e01b      	b.n	80063b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006378:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <HAL_RCC_OscConfig+0x248>)
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800637e:	f7fd f873 	bl	8003468 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006384:	e00e      	b.n	80063a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006386:	f7fd f86f 	bl	8003468 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d907      	bls.n	80063a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e150      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
 8006398:	40023800 	.word	0x40023800
 800639c:	42470000 	.word	0x42470000
 80063a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a4:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80063a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ea      	bne.n	8006386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8097 	beq.w	80064ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063be:	2300      	movs	r3, #0
 80063c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063c2:	4b81      	ldr	r3, [pc, #516]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10f      	bne.n	80063ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	4b7d      	ldr	r3, [pc, #500]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	4a7c      	ldr	r2, [pc, #496]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80063d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063dc:	6413      	str	r3, [r2, #64]	; 0x40
 80063de:	4b7a      	ldr	r3, [pc, #488]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e6:	60bb      	str	r3, [r7, #8]
 80063e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ee:	4b77      	ldr	r3, [pc, #476]	; (80065cc <HAL_RCC_OscConfig+0x474>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d118      	bne.n	800642c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063fa:	4b74      	ldr	r3, [pc, #464]	; (80065cc <HAL_RCC_OscConfig+0x474>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a73      	ldr	r2, [pc, #460]	; (80065cc <HAL_RCC_OscConfig+0x474>)
 8006400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006406:	f7fd f82f 	bl	8003468 <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800640e:	f7fd f82b 	bl	8003468 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e10c      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006420:	4b6a      	ldr	r3, [pc, #424]	; (80065cc <HAL_RCC_OscConfig+0x474>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f0      	beq.n	800640e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d106      	bne.n	8006442 <HAL_RCC_OscConfig+0x2ea>
 8006434:	4b64      	ldr	r3, [pc, #400]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 8006436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006438:	4a63      	ldr	r2, [pc, #396]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 800643a:	f043 0301 	orr.w	r3, r3, #1
 800643e:	6713      	str	r3, [r2, #112]	; 0x70
 8006440:	e01c      	b.n	800647c <HAL_RCC_OscConfig+0x324>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b05      	cmp	r3, #5
 8006448:	d10c      	bne.n	8006464 <HAL_RCC_OscConfig+0x30c>
 800644a:	4b5f      	ldr	r3, [pc, #380]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	4a5e      	ldr	r2, [pc, #376]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 8006450:	f043 0304 	orr.w	r3, r3, #4
 8006454:	6713      	str	r3, [r2, #112]	; 0x70
 8006456:	4b5c      	ldr	r3, [pc, #368]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 8006458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645a:	4a5b      	ldr	r2, [pc, #364]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 800645c:	f043 0301 	orr.w	r3, r3, #1
 8006460:	6713      	str	r3, [r2, #112]	; 0x70
 8006462:	e00b      	b.n	800647c <HAL_RCC_OscConfig+0x324>
 8006464:	4b58      	ldr	r3, [pc, #352]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 8006466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006468:	4a57      	ldr	r2, [pc, #348]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	6713      	str	r3, [r2, #112]	; 0x70
 8006470:	4b55      	ldr	r3, [pc, #340]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	4a54      	ldr	r2, [pc, #336]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 8006476:	f023 0304 	bic.w	r3, r3, #4
 800647a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d015      	beq.n	80064b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006484:	f7fc fff0 	bl	8003468 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648a:	e00a      	b.n	80064a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800648c:	f7fc ffec 	bl	8003468 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	f241 3288 	movw	r2, #5000	; 0x1388
 800649a:	4293      	cmp	r3, r2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e0cb      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a2:	4b49      	ldr	r3, [pc, #292]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0ee      	beq.n	800648c <HAL_RCC_OscConfig+0x334>
 80064ae:	e014      	b.n	80064da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b0:	f7fc ffda 	bl	8003468 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b6:	e00a      	b.n	80064ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064b8:	f7fc ffd6 	bl	8003468 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e0b5      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064ce:	4b3e      	ldr	r3, [pc, #248]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1ee      	bne.n	80064b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d105      	bne.n	80064ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e0:	4b39      	ldr	r3, [pc, #228]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	4a38      	ldr	r2, [pc, #224]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80064e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80a1 	beq.w	8006638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064f6:	4b34      	ldr	r3, [pc, #208]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 030c 	and.w	r3, r3, #12
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d05c      	beq.n	80065bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d141      	bne.n	800658e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800650a:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <HAL_RCC_OscConfig+0x478>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006510:	f7fc ffaa 	bl	8003468 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006518:	f7fc ffa6 	bl	8003468 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e087      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652a:	4b27      	ldr	r3, [pc, #156]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69da      	ldr	r2, [r3, #28]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	019b      	lsls	r3, r3, #6
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	3b01      	subs	r3, #1
 8006550:	041b      	lsls	r3, r3, #16
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	061b      	lsls	r3, r3, #24
 800655a:	491b      	ldr	r1, [pc, #108]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 800655c:	4313      	orrs	r3, r2
 800655e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006560:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <HAL_RCC_OscConfig+0x478>)
 8006562:	2201      	movs	r2, #1
 8006564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006566:	f7fc ff7f 	bl	8003468 <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800656e:	f7fc ff7b 	bl	8003468 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e05c      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006580:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <HAL_RCC_OscConfig+0x416>
 800658c:	e054      	b.n	8006638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658e:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <HAL_RCC_OscConfig+0x478>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006594:	f7fc ff68 	bl	8003468 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800659c:	f7fc ff64 	bl	8003468 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e045      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <HAL_RCC_OscConfig+0x470>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x444>
 80065ba:	e03d      	b.n	8006638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d107      	bne.n	80065d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e038      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
 80065c8:	40023800 	.word	0x40023800
 80065cc:	40007000 	.word	0x40007000
 80065d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065d4:	4b1b      	ldr	r3, [pc, #108]	; (8006644 <HAL_RCC_OscConfig+0x4ec>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d028      	beq.n	8006634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d121      	bne.n	8006634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d11a      	bne.n	8006634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006604:	4013      	ands	r3, r2
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800660a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800660c:	4293      	cmp	r3, r2
 800660e:	d111      	bne.n	8006634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	3b01      	subs	r3, #1
 800661e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006620:	429a      	cmp	r2, r3
 8006622:	d107      	bne.n	8006634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006630:	429a      	cmp	r2, r3
 8006632:	d001      	beq.n	8006638 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40023800 	.word	0x40023800

08006648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0cc      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800665c:	4b68      	ldr	r3, [pc, #416]	; (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d90c      	bls.n	8006684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800666a:	4b65      	ldr	r3, [pc, #404]	; (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006672:	4b63      	ldr	r3, [pc, #396]	; (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d001      	beq.n	8006684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0b8      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d020      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800669c:	4b59      	ldr	r3, [pc, #356]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	4a58      	ldr	r2, [pc, #352]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066b4:	4b53      	ldr	r3, [pc, #332]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4a52      	ldr	r2, [pc, #328]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c0:	4b50      	ldr	r3, [pc, #320]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	494d      	ldr	r1, [pc, #308]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d044      	beq.n	8006768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d107      	bne.n	80066f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e6:	4b47      	ldr	r3, [pc, #284]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d119      	bne.n	8006726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e07f      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d003      	beq.n	8006706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006702:	2b03      	cmp	r3, #3
 8006704:	d107      	bne.n	8006716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006706:	4b3f      	ldr	r3, [pc, #252]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d109      	bne.n	8006726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e06f      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006716:	4b3b      	ldr	r3, [pc, #236]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e067      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006726:	4b37      	ldr	r3, [pc, #220]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f023 0203 	bic.w	r2, r3, #3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4934      	ldr	r1, [pc, #208]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	4313      	orrs	r3, r2
 8006736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006738:	f7fc fe96 	bl	8003468 <HAL_GetTick>
 800673c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800673e:	e00a      	b.n	8006756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006740:	f7fc fe92 	bl	8003468 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	f241 3288 	movw	r2, #5000	; 0x1388
 800674e:	4293      	cmp	r3, r2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e04f      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006756:	4b2b      	ldr	r3, [pc, #172]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 020c 	and.w	r2, r3, #12
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	429a      	cmp	r2, r3
 8006766:	d1eb      	bne.n	8006740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006768:	4b25      	ldr	r3, [pc, #148]	; (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d20c      	bcs.n	8006790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006776:	4b22      	ldr	r3, [pc, #136]	; (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d001      	beq.n	8006790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e032      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800679c:	4b19      	ldr	r3, [pc, #100]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	4916      	ldr	r1, [pc, #88]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	490e      	ldr	r1, [pc, #56]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067ce:	f000 f821 	bl	8006814 <HAL_RCC_GetSysClockFreq>
 80067d2:	4602      	mov	r2, r0
 80067d4:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	091b      	lsrs	r3, r3, #4
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	490a      	ldr	r1, [pc, #40]	; (8006808 <HAL_RCC_ClockConfig+0x1c0>)
 80067e0:	5ccb      	ldrb	r3, [r1, r3]
 80067e2:	fa22 f303 	lsr.w	r3, r2, r3
 80067e6:	4a09      	ldr	r2, [pc, #36]	; (800680c <HAL_RCC_ClockConfig+0x1c4>)
 80067e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067ea:	4b09      	ldr	r3, [pc, #36]	; (8006810 <HAL_RCC_ClockConfig+0x1c8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fc fca4 	bl	800313c <HAL_InitTick>

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40023c00 	.word	0x40023c00
 8006804:	40023800 	.word	0x40023800
 8006808:	0800f020 	.word	0x0800f020
 800680c:	20000000 	.word	0x20000000
 8006810:	20000004 	.word	0x20000004

08006814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006818:	b090      	sub	sp, #64	; 0x40
 800681a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
 8006820:	2300      	movs	r3, #0
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006824:	2300      	movs	r3, #0
 8006826:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800682c:	4b59      	ldr	r3, [pc, #356]	; (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 030c 	and.w	r3, r3, #12
 8006834:	2b08      	cmp	r3, #8
 8006836:	d00d      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x40>
 8006838:	2b08      	cmp	r3, #8
 800683a:	f200 80a1 	bhi.w	8006980 <HAL_RCC_GetSysClockFreq+0x16c>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <HAL_RCC_GetSysClockFreq+0x34>
 8006842:	2b04      	cmp	r3, #4
 8006844:	d003      	beq.n	800684e <HAL_RCC_GetSysClockFreq+0x3a>
 8006846:	e09b      	b.n	8006980 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006848:	4b53      	ldr	r3, [pc, #332]	; (8006998 <HAL_RCC_GetSysClockFreq+0x184>)
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800684c:	e09b      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800684e:	4b53      	ldr	r3, [pc, #332]	; (800699c <HAL_RCC_GetSysClockFreq+0x188>)
 8006850:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006852:	e098      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006854:	4b4f      	ldr	r3, [pc, #316]	; (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800685e:	4b4d      	ldr	r3, [pc, #308]	; (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d028      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800686a:	4b4a      	ldr	r3, [pc, #296]	; (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	099b      	lsrs	r3, r3, #6
 8006870:	2200      	movs	r2, #0
 8006872:	623b      	str	r3, [r7, #32]
 8006874:	627a      	str	r2, [r7, #36]	; 0x24
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800687c:	2100      	movs	r1, #0
 800687e:	4b47      	ldr	r3, [pc, #284]	; (800699c <HAL_RCC_GetSysClockFreq+0x188>)
 8006880:	fb03 f201 	mul.w	r2, r3, r1
 8006884:	2300      	movs	r3, #0
 8006886:	fb00 f303 	mul.w	r3, r0, r3
 800688a:	4413      	add	r3, r2
 800688c:	4a43      	ldr	r2, [pc, #268]	; (800699c <HAL_RCC_GetSysClockFreq+0x188>)
 800688e:	fba0 1202 	umull	r1, r2, r0, r2
 8006892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006894:	460a      	mov	r2, r1
 8006896:	62ba      	str	r2, [r7, #40]	; 0x28
 8006898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800689a:	4413      	add	r3, r2
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a0:	2200      	movs	r2, #0
 80068a2:	61bb      	str	r3, [r7, #24]
 80068a4:	61fa      	str	r2, [r7, #28]
 80068a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80068ae:	f7fa f9a3 	bl	8000bf8 <__aeabi_uldivmod>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4613      	mov	r3, r2
 80068b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ba:	e053      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068bc:	4b35      	ldr	r3, [pc, #212]	; (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	099b      	lsrs	r3, r3, #6
 80068c2:	2200      	movs	r2, #0
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	617a      	str	r2, [r7, #20]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80068ce:	f04f 0b00 	mov.w	fp, #0
 80068d2:	4652      	mov	r2, sl
 80068d4:	465b      	mov	r3, fp
 80068d6:	f04f 0000 	mov.w	r0, #0
 80068da:	f04f 0100 	mov.w	r1, #0
 80068de:	0159      	lsls	r1, r3, #5
 80068e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068e4:	0150      	lsls	r0, r2, #5
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	ebb2 080a 	subs.w	r8, r2, sl
 80068ee:	eb63 090b 	sbc.w	r9, r3, fp
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80068fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006902:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006906:	ebb2 0408 	subs.w	r4, r2, r8
 800690a:	eb63 0509 	sbc.w	r5, r3, r9
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	00eb      	lsls	r3, r5, #3
 8006918:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800691c:	00e2      	lsls	r2, r4, #3
 800691e:	4614      	mov	r4, r2
 8006920:	461d      	mov	r5, r3
 8006922:	eb14 030a 	adds.w	r3, r4, sl
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	eb45 030b 	adc.w	r3, r5, fp
 800692c:	607b      	str	r3, [r7, #4]
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800693a:	4629      	mov	r1, r5
 800693c:	028b      	lsls	r3, r1, #10
 800693e:	4621      	mov	r1, r4
 8006940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006944:	4621      	mov	r1, r4
 8006946:	028a      	lsls	r2, r1, #10
 8006948:	4610      	mov	r0, r2
 800694a:	4619      	mov	r1, r3
 800694c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694e:	2200      	movs	r2, #0
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	60fa      	str	r2, [r7, #12]
 8006954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006958:	f7fa f94e 	bl	8000bf8 <__aeabi_uldivmod>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4613      	mov	r3, r2
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	0c1b      	lsrs	r3, r3, #16
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	3301      	adds	r3, #1
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800697e:	e002      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <HAL_RCC_GetSysClockFreq+0x184>)
 8006982:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006988:	4618      	mov	r0, r3
 800698a:	3740      	adds	r7, #64	; 0x40
 800698c:	46bd      	mov	sp, r7
 800698e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006992:	bf00      	nop
 8006994:	40023800 	.word	0x40023800
 8006998:	00f42400 	.word	0x00f42400
 800699c:	017d7840 	.word	0x017d7840

080069a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000000 	.word	0x20000000

080069b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069bc:	f7ff fff0 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0a9b      	lsrs	r3, r3, #10
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4903      	ldr	r1, [pc, #12]	; (80069dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40023800 	.word	0x40023800
 80069dc:	0800f030 	.word	0x0800f030

080069e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069e4:	f7ff ffdc 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	0b5b      	lsrs	r3, r3, #13
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4903      	ldr	r1, [pc, #12]	; (8006a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40023800 	.word	0x40023800
 8006a04:	0800f030 	.word	0x0800f030

08006a08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	220f      	movs	r2, #15
 8006a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a18:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <HAL_RCC_GetClockConfig+0x5c>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0203 	and.w	r2, r3, #3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <HAL_RCC_GetClockConfig+0x5c>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a30:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <HAL_RCC_GetClockConfig+0x5c>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a3c:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_RCC_GetClockConfig+0x5c>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	08db      	lsrs	r3, r3, #3
 8006a42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a4a:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <HAL_RCC_GetClockConfig+0x60>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0207 	and.w	r2, r3, #7
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	601a      	str	r2, [r3, #0]
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40023800 	.word	0x40023800
 8006a68:	40023c00 	.word	0x40023c00

08006a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e041      	b.n	8006b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fc f94e 	bl	8002d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4610      	mov	r0, r2
 8006aac:	f001 faea 	bl	8008084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d001      	beq.n	8006b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e044      	b.n	8006bae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <HAL_TIM_Base_Start_IT+0xb0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d018      	beq.n	8006b78 <HAL_TIM_Base_Start_IT+0x6c>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4e:	d013      	beq.n	8006b78 <HAL_TIM_Base_Start_IT+0x6c>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a1a      	ldr	r2, [pc, #104]	; (8006bc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00e      	beq.n	8006b78 <HAL_TIM_Base_Start_IT+0x6c>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a19      	ldr	r2, [pc, #100]	; (8006bc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_TIM_Base_Start_IT+0x6c>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_TIM_Base_Start_IT+0x6c>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a16      	ldr	r2, [pc, #88]	; (8006bcc <HAL_TIM_Base_Start_IT+0xc0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d111      	bne.n	8006b9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b06      	cmp	r3, #6
 8006b88:	d010      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0201 	orr.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9a:	e007      	b.n	8006bac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40010000 	.word	0x40010000
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40000800 	.word	0x40000800
 8006bc8:	40000c00 	.word	0x40000c00
 8006bcc:	40014000 	.word	0x40014000

08006bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e041      	b.n	8006c66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f839 	bl	8006c6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f001 fa38 	bl	8008084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d109      	bne.n	8006ca8 <HAL_TIM_PWM_Start+0x24>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	bf14      	ite	ne
 8006ca0:	2301      	movne	r3, #1
 8006ca2:	2300      	moveq	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	e022      	b.n	8006cee <HAL_TIM_PWM_Start+0x6a>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d109      	bne.n	8006cc2 <HAL_TIM_PWM_Start+0x3e>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	bf14      	ite	ne
 8006cba:	2301      	movne	r3, #1
 8006cbc:	2300      	moveq	r3, #0
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	e015      	b.n	8006cee <HAL_TIM_PWM_Start+0x6a>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d109      	bne.n	8006cdc <HAL_TIM_PWM_Start+0x58>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	bf14      	ite	ne
 8006cd4:	2301      	movne	r3, #1
 8006cd6:	2300      	moveq	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	e008      	b.n	8006cee <HAL_TIM_PWM_Start+0x6a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	bf14      	ite	ne
 8006ce8:	2301      	movne	r3, #1
 8006cea:	2300      	moveq	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e068      	b.n	8006dc8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d104      	bne.n	8006d06 <HAL_TIM_PWM_Start+0x82>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d04:	e013      	b.n	8006d2e <HAL_TIM_PWM_Start+0xaa>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d104      	bne.n	8006d16 <HAL_TIM_PWM_Start+0x92>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d14:	e00b      	b.n	8006d2e <HAL_TIM_PWM_Start+0xaa>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d104      	bne.n	8006d26 <HAL_TIM_PWM_Start+0xa2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d24:	e003      	b.n	8006d2e <HAL_TIM_PWM_Start+0xaa>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2201      	movs	r2, #1
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 fd68 	bl	800880c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a23      	ldr	r2, [pc, #140]	; (8006dd0 <HAL_TIM_PWM_Start+0x14c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d107      	bne.n	8006d56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1d      	ldr	r2, [pc, #116]	; (8006dd0 <HAL_TIM_PWM_Start+0x14c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d018      	beq.n	8006d92 <HAL_TIM_PWM_Start+0x10e>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d68:	d013      	beq.n	8006d92 <HAL_TIM_PWM_Start+0x10e>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a19      	ldr	r2, [pc, #100]	; (8006dd4 <HAL_TIM_PWM_Start+0x150>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_TIM_PWM_Start+0x10e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a17      	ldr	r2, [pc, #92]	; (8006dd8 <HAL_TIM_PWM_Start+0x154>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_TIM_PWM_Start+0x10e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a16      	ldr	r2, [pc, #88]	; (8006ddc <HAL_TIM_PWM_Start+0x158>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_TIM_PWM_Start+0x10e>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a14      	ldr	r2, [pc, #80]	; (8006de0 <HAL_TIM_PWM_Start+0x15c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d111      	bne.n	8006db6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b06      	cmp	r3, #6
 8006da2:	d010      	beq.n	8006dc6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db4:	e007      	b.n	8006dc6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0201 	orr.w	r2, r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40010000 	.word	0x40010000
 8006dd4:	40000400 	.word	0x40000400
 8006dd8:	40000800 	.word	0x40000800
 8006ddc:	40000c00 	.word	0x40000c00
 8006de0:	40014000 	.word	0x40014000

08006de4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2200      	movs	r2, #0
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 fd08 	bl	800880c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <HAL_TIM_PWM_Stop+0xc4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d117      	bne.n	8006e36 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6a1a      	ldr	r2, [r3, #32]
 8006e0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10f      	bne.n	8006e36 <HAL_TIM_PWM_Stop+0x52>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6a1a      	ldr	r2, [r3, #32]
 8006e1c:	f240 4344 	movw	r3, #1092	; 0x444
 8006e20:	4013      	ands	r3, r2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d107      	bne.n	8006e36 <HAL_TIM_PWM_Stop+0x52>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6a1a      	ldr	r2, [r3, #32]
 8006e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10f      	bne.n	8006e66 <HAL_TIM_PWM_Stop+0x82>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6a1a      	ldr	r2, [r3, #32]
 8006e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d107      	bne.n	8006e66 <HAL_TIM_PWM_Stop+0x82>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0201 	bic.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d104      	bne.n	8006e76 <HAL_TIM_PWM_Stop+0x92>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e74:	e013      	b.n	8006e9e <HAL_TIM_PWM_Stop+0xba>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d104      	bne.n	8006e86 <HAL_TIM_PWM_Stop+0xa2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e84:	e00b      	b.n	8006e9e <HAL_TIM_PWM_Stop+0xba>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d104      	bne.n	8006e96 <HAL_TIM_PWM_Stop+0xb2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e94:	e003      	b.n	8006e9e <HAL_TIM_PWM_Stop+0xba>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	40010000 	.word	0x40010000

08006eac <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d109      	bne.n	8006ed4 <HAL_TIM_PWM_Start_IT+0x28>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	bf14      	ite	ne
 8006ecc:	2301      	movne	r3, #1
 8006ece:	2300      	moveq	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	e022      	b.n	8006f1a <HAL_TIM_PWM_Start_IT+0x6e>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d109      	bne.n	8006eee <HAL_TIM_PWM_Start_IT+0x42>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	bf14      	ite	ne
 8006ee6:	2301      	movne	r3, #1
 8006ee8:	2300      	moveq	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	e015      	b.n	8006f1a <HAL_TIM_PWM_Start_IT+0x6e>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d109      	bne.n	8006f08 <HAL_TIM_PWM_Start_IT+0x5c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	e008      	b.n	8006f1a <HAL_TIM_PWM_Start_IT+0x6e>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	bf14      	ite	ne
 8006f14:	2301      	movne	r3, #1
 8006f16:	2300      	moveq	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e0b3      	b.n	800708a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start_IT+0x86>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f30:	e013      	b.n	8006f5a <HAL_TIM_PWM_Start_IT+0xae>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_PWM_Start_IT+0x96>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f40:	e00b      	b.n	8006f5a <HAL_TIM_PWM_Start_IT+0xae>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d104      	bne.n	8006f52 <HAL_TIM_PWM_Start_IT+0xa6>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f50:	e003      	b.n	8006f5a <HAL_TIM_PWM_Start_IT+0xae>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2202      	movs	r2, #2
 8006f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b0c      	cmp	r3, #12
 8006f5e:	d841      	bhi.n	8006fe4 <HAL_TIM_PWM_Start_IT+0x138>
 8006f60:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006f9d 	.word	0x08006f9d
 8006f6c:	08006fe5 	.word	0x08006fe5
 8006f70:	08006fe5 	.word	0x08006fe5
 8006f74:	08006fe5 	.word	0x08006fe5
 8006f78:	08006faf 	.word	0x08006faf
 8006f7c:	08006fe5 	.word	0x08006fe5
 8006f80:	08006fe5 	.word	0x08006fe5
 8006f84:	08006fe5 	.word	0x08006fe5
 8006f88:	08006fc1 	.word	0x08006fc1
 8006f8c:	08006fe5 	.word	0x08006fe5
 8006f90:	08006fe5 	.word	0x08006fe5
 8006f94:	08006fe5 	.word	0x08006fe5
 8006f98:	08006fd3 	.word	0x08006fd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0202 	orr.w	r2, r2, #2
 8006faa:	60da      	str	r2, [r3, #12]
      break;
 8006fac:	e01d      	b.n	8006fea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0204 	orr.w	r2, r2, #4
 8006fbc:	60da      	str	r2, [r3, #12]
      break;
 8006fbe:	e014      	b.n	8006fea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0208 	orr.w	r2, r2, #8
 8006fce:	60da      	str	r2, [r3, #12]
      break;
 8006fd0:	e00b      	b.n	8006fea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0210 	orr.w	r2, r2, #16
 8006fe0:	60da      	str	r2, [r3, #12]
      break;
 8006fe2:	e002      	b.n	8006fea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d14b      	bne.n	8007088 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 fc07 	bl	800880c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a24      	ldr	r2, [pc, #144]	; (8007094 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d107      	bne.n	8007018 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007016:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d018      	beq.n	8007054 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702a:	d013      	beq.n	8007054 <HAL_TIM_PWM_Start_IT+0x1a8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a19      	ldr	r2, [pc, #100]	; (8007098 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00e      	beq.n	8007054 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a18      	ldr	r2, [pc, #96]	; (800709c <HAL_TIM_PWM_Start_IT+0x1f0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d009      	beq.n	8007054 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_TIM_PWM_Start_IT+0x1a8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a15      	ldr	r2, [pc, #84]	; (80070a4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d111      	bne.n	8007078 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b06      	cmp	r3, #6
 8007064:	d010      	beq.n	8007088 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0201 	orr.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007076:	e007      	b.n	8007088 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40010000 	.word	0x40010000
 8007098:	40000400 	.word	0x40000400
 800709c:	40000800 	.word	0x40000800
 80070a0:	40000c00 	.word	0x40000c00
 80070a4:	40014000 	.word	0x40014000

080070a8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b0c      	cmp	r3, #12
 80070ba:	d841      	bhi.n	8007140 <HAL_TIM_PWM_Stop_IT+0x98>
 80070bc:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80070be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c2:	bf00      	nop
 80070c4:	080070f9 	.word	0x080070f9
 80070c8:	08007141 	.word	0x08007141
 80070cc:	08007141 	.word	0x08007141
 80070d0:	08007141 	.word	0x08007141
 80070d4:	0800710b 	.word	0x0800710b
 80070d8:	08007141 	.word	0x08007141
 80070dc:	08007141 	.word	0x08007141
 80070e0:	08007141 	.word	0x08007141
 80070e4:	0800711d 	.word	0x0800711d
 80070e8:	08007141 	.word	0x08007141
 80070ec:	08007141 	.word	0x08007141
 80070f0:	08007141 	.word	0x08007141
 80070f4:	0800712f 	.word	0x0800712f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0202 	bic.w	r2, r2, #2
 8007106:	60da      	str	r2, [r3, #12]
      break;
 8007108:	e01d      	b.n	8007146 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0204 	bic.w	r2, r2, #4
 8007118:	60da      	str	r2, [r3, #12]
      break;
 800711a:	e014      	b.n	8007146 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0208 	bic.w	r2, r2, #8
 800712a:	60da      	str	r2, [r3, #12]
      break;
 800712c:	e00b      	b.n	8007146 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0210 	bic.w	r2, r2, #16
 800713c:	60da      	str	r2, [r3, #12]
      break;
 800713e:	e002      	b.n	8007146 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
      break;
 8007144:	bf00      	nop
  }

  if (status == HAL_OK)
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d157      	bne.n	80071fc <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2200      	movs	r2, #0
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fb59 	bl	800880c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2a      	ldr	r2, [pc, #168]	; (8007208 <HAL_TIM_PWM_Stop_IT+0x160>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d117      	bne.n	8007194 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6a1a      	ldr	r2, [r3, #32]
 800716a:	f241 1311 	movw	r3, #4369	; 0x1111
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10f      	bne.n	8007194 <HAL_TIM_PWM_Stop_IT+0xec>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6a1a      	ldr	r2, [r3, #32]
 800717a:	f240 4344 	movw	r3, #1092	; 0x444
 800717e:	4013      	ands	r3, r2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d107      	bne.n	8007194 <HAL_TIM_PWM_Stop_IT+0xec>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007192:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6a1a      	ldr	r2, [r3, #32]
 800719a:	f241 1311 	movw	r3, #4369	; 0x1111
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10f      	bne.n	80071c4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6a1a      	ldr	r2, [r3, #32]
 80071aa:	f240 4344 	movw	r3, #1092	; 0x444
 80071ae:	4013      	ands	r3, r2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d107      	bne.n	80071c4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0201 	bic.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d104      	bne.n	80071d4 <HAL_TIM_PWM_Stop_IT+0x12c>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d2:	e013      	b.n	80071fc <HAL_TIM_PWM_Stop_IT+0x154>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d104      	bne.n	80071e4 <HAL_TIM_PWM_Stop_IT+0x13c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e2:	e00b      	b.n	80071fc <HAL_TIM_PWM_Stop_IT+0x154>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d104      	bne.n	80071f4 <HAL_TIM_PWM_Stop_IT+0x14c>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f2:	e003      	b.n	80071fc <HAL_TIM_PWM_Stop_IT+0x154>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	40010000 	.word	0x40010000

0800720c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e041      	b.n	80072a2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d106      	bne.n	8007238 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fb fe02 	bl	8002e3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3304      	adds	r3, #4
 8007248:	4619      	mov	r1, r3
 800724a:	4610      	mov	r0, r2
 800724c:	f000 ff1a 	bl	8008084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <HAL_TIM_IC_Start_IT+0x1e>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	e013      	b.n	80072f2 <HAL_TIM_IC_Start_IT+0x46>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d104      	bne.n	80072da <HAL_TIM_IC_Start_IT+0x2e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	e00b      	b.n	80072f2 <HAL_TIM_IC_Start_IT+0x46>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d104      	bne.n	80072ea <HAL_TIM_IC_Start_IT+0x3e>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	e003      	b.n	80072f2 <HAL_TIM_IC_Start_IT+0x46>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d104      	bne.n	8007304 <HAL_TIM_IC_Start_IT+0x58>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007300:	b2db      	uxtb	r3, r3
 8007302:	e013      	b.n	800732c <HAL_TIM_IC_Start_IT+0x80>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2b04      	cmp	r3, #4
 8007308:	d104      	bne.n	8007314 <HAL_TIM_IC_Start_IT+0x68>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007310:	b2db      	uxtb	r3, r3
 8007312:	e00b      	b.n	800732c <HAL_TIM_IC_Start_IT+0x80>
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b08      	cmp	r3, #8
 8007318:	d104      	bne.n	8007324 <HAL_TIM_IC_Start_IT+0x78>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007320:	b2db      	uxtb	r3, r3
 8007322:	e003      	b.n	800732c <HAL_TIM_IC_Start_IT+0x80>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800732a:	b2db      	uxtb	r3, r3
 800732c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d102      	bne.n	800733a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007334:	7b7b      	ldrb	r3, [r7, #13]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d001      	beq.n	800733e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e0c2      	b.n	80074c4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d104      	bne.n	800734e <HAL_TIM_IC_Start_IT+0xa2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800734c:	e013      	b.n	8007376 <HAL_TIM_IC_Start_IT+0xca>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b04      	cmp	r3, #4
 8007352:	d104      	bne.n	800735e <HAL_TIM_IC_Start_IT+0xb2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800735c:	e00b      	b.n	8007376 <HAL_TIM_IC_Start_IT+0xca>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b08      	cmp	r3, #8
 8007362:	d104      	bne.n	800736e <HAL_TIM_IC_Start_IT+0xc2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800736c:	e003      	b.n	8007376 <HAL_TIM_IC_Start_IT+0xca>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <HAL_TIM_IC_Start_IT+0xda>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007384:	e013      	b.n	80073ae <HAL_TIM_IC_Start_IT+0x102>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b04      	cmp	r3, #4
 800738a:	d104      	bne.n	8007396 <HAL_TIM_IC_Start_IT+0xea>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007394:	e00b      	b.n	80073ae <HAL_TIM_IC_Start_IT+0x102>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b08      	cmp	r3, #8
 800739a:	d104      	bne.n	80073a6 <HAL_TIM_IC_Start_IT+0xfa>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a4:	e003      	b.n	80073ae <HAL_TIM_IC_Start_IT+0x102>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2202      	movs	r2, #2
 80073aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b0c      	cmp	r3, #12
 80073b2:	d841      	bhi.n	8007438 <HAL_TIM_IC_Start_IT+0x18c>
 80073b4:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <HAL_TIM_IC_Start_IT+0x110>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073f1 	.word	0x080073f1
 80073c0:	08007439 	.word	0x08007439
 80073c4:	08007439 	.word	0x08007439
 80073c8:	08007439 	.word	0x08007439
 80073cc:	08007403 	.word	0x08007403
 80073d0:	08007439 	.word	0x08007439
 80073d4:	08007439 	.word	0x08007439
 80073d8:	08007439 	.word	0x08007439
 80073dc:	08007415 	.word	0x08007415
 80073e0:	08007439 	.word	0x08007439
 80073e4:	08007439 	.word	0x08007439
 80073e8:	08007439 	.word	0x08007439
 80073ec:	08007427 	.word	0x08007427
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0202 	orr.w	r2, r2, #2
 80073fe:	60da      	str	r2, [r3, #12]
      break;
 8007400:	e01d      	b.n	800743e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f042 0204 	orr.w	r2, r2, #4
 8007410:	60da      	str	r2, [r3, #12]
      break;
 8007412:	e014      	b.n	800743e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0208 	orr.w	r2, r2, #8
 8007422:	60da      	str	r2, [r3, #12]
      break;
 8007424:	e00b      	b.n	800743e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0210 	orr.w	r2, r2, #16
 8007434:	60da      	str	r2, [r3, #12]
      break;
 8007436:	e002      	b.n	800743e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
      break;
 800743c:	bf00      	nop
  }

  if (status == HAL_OK)
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d13e      	bne.n	80074c2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2201      	movs	r2, #1
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	4618      	mov	r0, r3
 800744e:	f001 f9dd 	bl	800880c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1d      	ldr	r2, [pc, #116]	; (80074cc <HAL_TIM_IC_Start_IT+0x220>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d018      	beq.n	800748e <HAL_TIM_IC_Start_IT+0x1e2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007464:	d013      	beq.n	800748e <HAL_TIM_IC_Start_IT+0x1e2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a19      	ldr	r2, [pc, #100]	; (80074d0 <HAL_TIM_IC_Start_IT+0x224>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00e      	beq.n	800748e <HAL_TIM_IC_Start_IT+0x1e2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a17      	ldr	r2, [pc, #92]	; (80074d4 <HAL_TIM_IC_Start_IT+0x228>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d009      	beq.n	800748e <HAL_TIM_IC_Start_IT+0x1e2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a16      	ldr	r2, [pc, #88]	; (80074d8 <HAL_TIM_IC_Start_IT+0x22c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d004      	beq.n	800748e <HAL_TIM_IC_Start_IT+0x1e2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a14      	ldr	r2, [pc, #80]	; (80074dc <HAL_TIM_IC_Start_IT+0x230>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d111      	bne.n	80074b2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b06      	cmp	r3, #6
 800749e:	d010      	beq.n	80074c2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0201 	orr.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b0:	e007      	b.n	80074c2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0201 	orr.w	r2, r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40000400 	.word	0x40000400
 80074d4:	40000800 	.word	0x40000800
 80074d8:	40000c00 	.word	0x40000c00
 80074dc:	40014000 	.word	0x40014000

080074e0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d104      	bne.n	8007502 <HAL_TIM_IC_Start_DMA+0x22>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	e013      	b.n	800752a <HAL_TIM_IC_Start_DMA+0x4a>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b04      	cmp	r3, #4
 8007506:	d104      	bne.n	8007512 <HAL_TIM_IC_Start_DMA+0x32>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800750e:	b2db      	uxtb	r3, r3
 8007510:	e00b      	b.n	800752a <HAL_TIM_IC_Start_DMA+0x4a>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b08      	cmp	r3, #8
 8007516:	d104      	bne.n	8007522 <HAL_TIM_IC_Start_DMA+0x42>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800751e:	b2db      	uxtb	r3, r3
 8007520:	e003      	b.n	800752a <HAL_TIM_IC_Start_DMA+0x4a>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007528:	b2db      	uxtb	r3, r3
 800752a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d104      	bne.n	800753c <HAL_TIM_IC_Start_DMA+0x5c>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007538:	b2db      	uxtb	r3, r3
 800753a:	e013      	b.n	8007564 <HAL_TIM_IC_Start_DMA+0x84>
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b04      	cmp	r3, #4
 8007540:	d104      	bne.n	800754c <HAL_TIM_IC_Start_DMA+0x6c>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007548:	b2db      	uxtb	r3, r3
 800754a:	e00b      	b.n	8007564 <HAL_TIM_IC_Start_DMA+0x84>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b08      	cmp	r3, #8
 8007550:	d104      	bne.n	800755c <HAL_TIM_IC_Start_DMA+0x7c>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007558:	b2db      	uxtb	r3, r3
 800755a:	e003      	b.n	8007564 <HAL_TIM_IC_Start_DMA+0x84>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007562:	b2db      	uxtb	r3, r3
 8007564:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8007566:	7dbb      	ldrb	r3, [r7, #22]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d002      	beq.n	8007572 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800756c:	7d7b      	ldrb	r3, [r7, #21]
 800756e:	2b02      	cmp	r3, #2
 8007570:	d101      	bne.n	8007576 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8007572:	2302      	movs	r3, #2
 8007574:	e13c      	b.n	80077f0 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8007576:	7dbb      	ldrb	r3, [r7, #22]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d143      	bne.n	8007604 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800757c:	7d7b      	ldrb	r3, [r7, #21]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d140      	bne.n	8007604 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <HAL_TIM_IC_Start_DMA+0xb2>
 8007588:	887b      	ldrh	r3, [r7, #2]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e12e      	b.n	80077f0 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d104      	bne.n	80075a2 <HAL_TIM_IC_Start_DMA+0xc2>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a0:	e013      	b.n	80075ca <HAL_TIM_IC_Start_DMA+0xea>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d104      	bne.n	80075b2 <HAL_TIM_IC_Start_DMA+0xd2>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b0:	e00b      	b.n	80075ca <HAL_TIM_IC_Start_DMA+0xea>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d104      	bne.n	80075c2 <HAL_TIM_IC_Start_DMA+0xe2>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c0:	e003      	b.n	80075ca <HAL_TIM_IC_Start_DMA+0xea>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2202      	movs	r2, #2
 80075c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <HAL_TIM_IC_Start_DMA+0xfa>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80075d8:	e016      	b.n	8007608 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d104      	bne.n	80075ea <HAL_TIM_IC_Start_DMA+0x10a>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80075e8:	e00e      	b.n	8007608 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d104      	bne.n	80075fa <HAL_TIM_IC_Start_DMA+0x11a>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80075f8:	e006      	b.n	8007608 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2202      	movs	r2, #2
 80075fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8007602:	e001      	b.n	8007608 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e0f3      	b.n	80077f0 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2201      	movs	r2, #1
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f001 f8fb 	bl	800880c <TIM_CCxChannelCmd>

  switch (Channel)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b0c      	cmp	r3, #12
 800761a:	f200 80ad 	bhi.w	8007778 <HAL_TIM_IC_Start_DMA+0x298>
 800761e:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <HAL_TIM_IC_Start_DMA+0x144>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	08007659 	.word	0x08007659
 8007628:	08007779 	.word	0x08007779
 800762c:	08007779 	.word	0x08007779
 8007630:	08007779 	.word	0x08007779
 8007634:	080076a1 	.word	0x080076a1
 8007638:	08007779 	.word	0x08007779
 800763c:	08007779 	.word	0x08007779
 8007640:	08007779 	.word	0x08007779
 8007644:	080076e9 	.word	0x080076e9
 8007648:	08007779 	.word	0x08007779
 800764c:	08007779 	.word	0x08007779
 8007650:	08007779 	.word	0x08007779
 8007654:	08007731 	.word	0x08007731
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	4a66      	ldr	r2, [pc, #408]	; (80077f8 <HAL_TIM_IC_Start_DMA+0x318>)
 800765e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	4a65      	ldr	r2, [pc, #404]	; (80077fc <HAL_TIM_IC_Start_DMA+0x31c>)
 8007666:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	4a64      	ldr	r2, [pc, #400]	; (8007800 <HAL_TIM_IC_Start_DMA+0x320>)
 800766e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3334      	adds	r3, #52	; 0x34
 800767a:	4619      	mov	r1, r3
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	887b      	ldrh	r3, [r7, #2]
 8007680:	f7fc fca4 	bl	8003fcc <HAL_DMA_Start_IT>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e0b0      	b.n	80077f0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800769c:	60da      	str	r2, [r3, #12]
      break;
 800769e:	e06e      	b.n	800777e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	4a54      	ldr	r2, [pc, #336]	; (80077f8 <HAL_TIM_IC_Start_DMA+0x318>)
 80076a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	4a53      	ldr	r2, [pc, #332]	; (80077fc <HAL_TIM_IC_Start_DMA+0x31c>)
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b4:	4a52      	ldr	r2, [pc, #328]	; (8007800 <HAL_TIM_IC_Start_DMA+0x320>)
 80076b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3338      	adds	r3, #56	; 0x38
 80076c2:	4619      	mov	r1, r3
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	887b      	ldrh	r3, [r7, #2]
 80076c8:	f7fc fc80 	bl	8003fcc <HAL_DMA_Start_IT>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e08c      	b.n	80077f0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076e4:	60da      	str	r2, [r3, #12]
      break;
 80076e6:	e04a      	b.n	800777e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	4a42      	ldr	r2, [pc, #264]	; (80077f8 <HAL_TIM_IC_Start_DMA+0x318>)
 80076ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	4a41      	ldr	r2, [pc, #260]	; (80077fc <HAL_TIM_IC_Start_DMA+0x31c>)
 80076f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	4a40      	ldr	r2, [pc, #256]	; (8007800 <HAL_TIM_IC_Start_DMA+0x320>)
 80076fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	333c      	adds	r3, #60	; 0x3c
 800770a:	4619      	mov	r1, r3
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	887b      	ldrh	r3, [r7, #2]
 8007710:	f7fc fc5c 	bl	8003fcc <HAL_DMA_Start_IT>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e068      	b.n	80077f0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68da      	ldr	r2, [r3, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800772c:	60da      	str	r2, [r3, #12]
      break;
 800772e:	e026      	b.n	800777e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	4a30      	ldr	r2, [pc, #192]	; (80077f8 <HAL_TIM_IC_Start_DMA+0x318>)
 8007736:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	4a2f      	ldr	r2, [pc, #188]	; (80077fc <HAL_TIM_IC_Start_DMA+0x31c>)
 800773e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007744:	4a2e      	ldr	r2, [pc, #184]	; (8007800 <HAL_TIM_IC_Start_DMA+0x320>)
 8007746:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3340      	adds	r3, #64	; 0x40
 8007752:	4619      	mov	r1, r3
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	887b      	ldrh	r3, [r7, #2]
 8007758:	f7fc fc38 	bl	8003fcc <HAL_DMA_Start_IT>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e044      	b.n	80077f0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007774:	60da      	str	r2, [r3, #12]
      break;
 8007776:	e002      	b.n	800777e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
      break;
 800777c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a20      	ldr	r2, [pc, #128]	; (8007804 <HAL_TIM_IC_Start_DMA+0x324>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d018      	beq.n	80077ba <HAL_TIM_IC_Start_DMA+0x2da>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007790:	d013      	beq.n	80077ba <HAL_TIM_IC_Start_DMA+0x2da>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1c      	ldr	r2, [pc, #112]	; (8007808 <HAL_TIM_IC_Start_DMA+0x328>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00e      	beq.n	80077ba <HAL_TIM_IC_Start_DMA+0x2da>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1a      	ldr	r2, [pc, #104]	; (800780c <HAL_TIM_IC_Start_DMA+0x32c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d009      	beq.n	80077ba <HAL_TIM_IC_Start_DMA+0x2da>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a19      	ldr	r2, [pc, #100]	; (8007810 <HAL_TIM_IC_Start_DMA+0x330>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d004      	beq.n	80077ba <HAL_TIM_IC_Start_DMA+0x2da>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a17      	ldr	r2, [pc, #92]	; (8007814 <HAL_TIM_IC_Start_DMA+0x334>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d111      	bne.n	80077de <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b06      	cmp	r3, #6
 80077ca:	d010      	beq.n	80077ee <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077dc:	e007      	b.n	80077ee <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f042 0201 	orr.w	r2, r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	08007f55 	.word	0x08007f55
 80077fc:	0800801d 	.word	0x0800801d
 8007800:	08007ec3 	.word	0x08007ec3
 8007804:	40010000 	.word	0x40010000
 8007808:	40000400 	.word	0x40000400
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00
 8007814:	40014000 	.word	0x40014000

08007818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d122      	bne.n	8007874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b02      	cmp	r3, #2
 800783a:	d11b      	bne.n	8007874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f06f 0202 	mvn.w	r2, #2
 8007844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fa f900 	bl	8001a60 <HAL_TIM_IC_CaptureCallback>
 8007860:	e005      	b.n	800786e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fb05 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fa f913 	bl	8001a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b04      	cmp	r3, #4
 8007880:	d122      	bne.n	80078c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b04      	cmp	r3, #4
 800788e:	d11b      	bne.n	80078c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f06f 0204 	mvn.w	r2, #4
 8007898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2202      	movs	r2, #2
 800789e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7fa f8d6 	bl	8001a60 <HAL_TIM_IC_CaptureCallback>
 80078b4:	e005      	b.n	80078c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fadb 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7fa f8e9 	bl	8001a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f003 0308 	and.w	r3, r3, #8
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d122      	bne.n	800791c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f003 0308 	and.w	r3, r3, #8
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d11b      	bne.n	800791c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f06f 0208 	mvn.w	r2, #8
 80078ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2204      	movs	r2, #4
 80078f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fa f8ac 	bl	8001a60 <HAL_TIM_IC_CaptureCallback>
 8007908:	e005      	b.n	8007916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fab1 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7fa f8bf 	bl	8001a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f003 0310 	and.w	r3, r3, #16
 8007926:	2b10      	cmp	r3, #16
 8007928:	d122      	bne.n	8007970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b10      	cmp	r3, #16
 8007936:	d11b      	bne.n	8007970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f06f 0210 	mvn.w	r2, #16
 8007940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2208      	movs	r2, #8
 8007946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fa f882 	bl	8001a60 <HAL_TIM_IC_CaptureCallback>
 800795c:	e005      	b.n	800796a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa87 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fa f895 	bl	8001a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b01      	cmp	r3, #1
 800797c:	d10e      	bne.n	800799c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b01      	cmp	r3, #1
 800798a:	d107      	bne.n	800799c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f06f 0201 	mvn.w	r2, #1
 8007994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7fa fe04 	bl	80025a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a6:	2b80      	cmp	r3, #128	; 0x80
 80079a8:	d10e      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b4:	2b80      	cmp	r3, #128	; 0x80
 80079b6:	d107      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 ffc0 	bl	8008948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	d10e      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d107      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fa53 	bl	8007e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d10e      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d107      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0220 	mvn.w	r2, #32
 8007a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 ff8a 	bl	8008934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e088      	b.n	8007b58 <HAL_TIM_IC_ConfigChannel+0x130>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d11b      	bne.n	8007a8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6819      	ldr	r1, [r3, #0]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f000 fd1a 	bl	800849c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699a      	ldr	r2, [r3, #24]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 020c 	bic.w	r2, r2, #12
 8007a76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6999      	ldr	r1, [r3, #24]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	619a      	str	r2, [r3, #24]
 8007a8a:	e060      	b.n	8007b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d11c      	bne.n	8007acc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6819      	ldr	r1, [r3, #0]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f000 fd92 	bl	80085ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	699a      	ldr	r2, [r3, #24]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ab4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6999      	ldr	r1, [r3, #24]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	021a      	lsls	r2, r3, #8
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	619a      	str	r2, [r3, #24]
 8007aca:	e040      	b.n	8007b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d11b      	bne.n	8007b0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6819      	ldr	r1, [r3, #0]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f000 fddf 	bl	80086a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69da      	ldr	r2, [r3, #28]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 020c 	bic.w	r2, r2, #12
 8007af4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69d9      	ldr	r1, [r3, #28]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	61da      	str	r2, [r3, #28]
 8007b08:	e021      	b.n	8007b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b0c      	cmp	r3, #12
 8007b0e:	d11c      	bne.n	8007b4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	6819      	ldr	r1, [r3, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f000 fdfc 	bl	800871c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	69da      	ldr	r2, [r3, #28]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007b32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69d9      	ldr	r1, [r3, #28]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	021a      	lsls	r2, r3, #8
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	61da      	str	r2, [r3, #28]
 8007b48:	e001      	b.n	8007b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d101      	bne.n	8007b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e0ae      	b.n	8007cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b0c      	cmp	r3, #12
 8007b8a:	f200 809f 	bhi.w	8007ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b8e:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007bc9 	.word	0x08007bc9
 8007b98:	08007ccd 	.word	0x08007ccd
 8007b9c:	08007ccd 	.word	0x08007ccd
 8007ba0:	08007ccd 	.word	0x08007ccd
 8007ba4:	08007c09 	.word	0x08007c09
 8007ba8:	08007ccd 	.word	0x08007ccd
 8007bac:	08007ccd 	.word	0x08007ccd
 8007bb0:	08007ccd 	.word	0x08007ccd
 8007bb4:	08007c4b 	.word	0x08007c4b
 8007bb8:	08007ccd 	.word	0x08007ccd
 8007bbc:	08007ccd 	.word	0x08007ccd
 8007bc0:	08007ccd 	.word	0x08007ccd
 8007bc4:	08007c8b 	.word	0x08007c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fad8 	bl	8008184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0208 	orr.w	r2, r2, #8
 8007be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699a      	ldr	r2, [r3, #24]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0204 	bic.w	r2, r2, #4
 8007bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6999      	ldr	r1, [r3, #24]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	691a      	ldr	r2, [r3, #16]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	619a      	str	r2, [r3, #24]
      break;
 8007c06:	e064      	b.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fb1e 	bl	8008250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699a      	ldr	r2, [r3, #24]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6999      	ldr	r1, [r3, #24]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	021a      	lsls	r2, r3, #8
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	619a      	str	r2, [r3, #24]
      break;
 8007c48:	e043      	b.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fb69 	bl	8008328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69da      	ldr	r2, [r3, #28]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0208 	orr.w	r2, r2, #8
 8007c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69da      	ldr	r2, [r3, #28]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0204 	bic.w	r2, r2, #4
 8007c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69d9      	ldr	r1, [r3, #28]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	61da      	str	r2, [r3, #28]
      break;
 8007c88:	e023      	b.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fbb3 	bl	80083fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69da      	ldr	r2, [r3, #28]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69da      	ldr	r2, [r3, #28]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69d9      	ldr	r1, [r3, #28]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	021a      	lsls	r2, r3, #8
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	61da      	str	r2, [r3, #28]
      break;
 8007cca:	e002      	b.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_TIM_ConfigClockSource+0x1c>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e0b4      	b.n	8007e6a <HAL_TIM_ConfigClockSource+0x186>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d38:	d03e      	beq.n	8007db8 <HAL_TIM_ConfigClockSource+0xd4>
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	f200 8087 	bhi.w	8007e50 <HAL_TIM_ConfigClockSource+0x16c>
 8007d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d46:	f000 8086 	beq.w	8007e56 <HAL_TIM_ConfigClockSource+0x172>
 8007d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4e:	d87f      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x16c>
 8007d50:	2b70      	cmp	r3, #112	; 0x70
 8007d52:	d01a      	beq.n	8007d8a <HAL_TIM_ConfigClockSource+0xa6>
 8007d54:	2b70      	cmp	r3, #112	; 0x70
 8007d56:	d87b      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x16c>
 8007d58:	2b60      	cmp	r3, #96	; 0x60
 8007d5a:	d050      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x11a>
 8007d5c:	2b60      	cmp	r3, #96	; 0x60
 8007d5e:	d877      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x16c>
 8007d60:	2b50      	cmp	r3, #80	; 0x50
 8007d62:	d03c      	beq.n	8007dde <HAL_TIM_ConfigClockSource+0xfa>
 8007d64:	2b50      	cmp	r3, #80	; 0x50
 8007d66:	d873      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x16c>
 8007d68:	2b40      	cmp	r3, #64	; 0x40
 8007d6a:	d058      	beq.n	8007e1e <HAL_TIM_ConfigClockSource+0x13a>
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d86f      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x16c>
 8007d70:	2b30      	cmp	r3, #48	; 0x30
 8007d72:	d064      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x15a>
 8007d74:	2b30      	cmp	r3, #48	; 0x30
 8007d76:	d86b      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x16c>
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	d060      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x15a>
 8007d7c:	2b20      	cmp	r3, #32
 8007d7e:	d867      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x16c>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d05c      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x15a>
 8007d84:	2b10      	cmp	r3, #16
 8007d86:	d05a      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x15a>
 8007d88:	e062      	b.n	8007e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	6899      	ldr	r1, [r3, #8]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f000 fd17 	bl	80087cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	609a      	str	r2, [r3, #8]
      break;
 8007db6:	e04f      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	6899      	ldr	r1, [r3, #8]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f000 fd00 	bl	80087cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dda:	609a      	str	r2, [r3, #8]
      break;
 8007ddc:	e03c      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	6859      	ldr	r1, [r3, #4]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	461a      	mov	r2, r3
 8007dec:	f000 fbbe 	bl	800856c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2150      	movs	r1, #80	; 0x50
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fccd 	bl	8008796 <TIM_ITRx_SetConfig>
      break;
 8007dfc:	e02c      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6859      	ldr	r1, [r3, #4]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f000 fc1a 	bl	8008644 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2160      	movs	r1, #96	; 0x60
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fcbd 	bl	8008796 <TIM_ITRx_SetConfig>
      break;
 8007e1c:	e01c      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	6859      	ldr	r1, [r3, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f000 fb9e 	bl	800856c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2140      	movs	r1, #64	; 0x40
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 fcad 	bl	8008796 <TIM_ITRx_SetConfig>
      break;
 8007e3c:	e00c      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f000 fca4 	bl	8008796 <TIM_ITRx_SetConfig>
      break;
 8007e4e:	e003      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	73fb      	strb	r3, [r7, #15]
      break;
 8007e54:	e000      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d107      	bne.n	8007eea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ee8:	e02a      	b.n	8007f40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d107      	bne.n	8007f04 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f02:	e01d      	b.n	8007f40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d107      	bne.n	8007f1e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2204      	movs	r2, #4
 8007f12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f1c:	e010      	b.n	8007f40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d107      	bne.n	8007f38 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2208      	movs	r2, #8
 8007f2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f36:	e003      	b.n	8007f40 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7ff ffb4 	bl	8007eae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	771a      	strb	r2, [r3, #28]
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d10f      	bne.n	8007f8c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d146      	bne.n	8008008 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f8a:	e03d      	b.n	8008008 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d10f      	bne.n	8007fb6 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d131      	bne.n	8008008 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fb4:	e028      	b.n	8008008 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d10f      	bne.n	8007fe0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d11c      	bne.n	8008008 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fde:	e013      	b.n	8008008 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d10e      	bne.n	8008008 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2208      	movs	r2, #8
 8007fee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d107      	bne.n	8008008 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7f9 fd29 	bl	8001a60 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	771a      	strb	r2, [r3, #28]
}
 8008014:	bf00      	nop
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d103      	bne.n	800803c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	771a      	strb	r2, [r3, #28]
 800803a:	e019      	b.n	8008070 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	429a      	cmp	r2, r3
 8008044:	d103      	bne.n	800804e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2202      	movs	r2, #2
 800804a:	771a      	strb	r2, [r3, #28]
 800804c:	e010      	b.n	8008070 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d103      	bne.n	8008060 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2204      	movs	r2, #4
 800805c:	771a      	strb	r2, [r3, #28]
 800805e:	e007      	b.n	8008070 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	429a      	cmp	r2, r3
 8008068:	d102      	bne.n	8008070 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2208      	movs	r2, #8
 800806e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff ff08 	bl	8007e86 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	771a      	strb	r2, [r3, #28]
}
 800807c:	bf00      	nop
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a34      	ldr	r2, [pc, #208]	; (8008168 <TIM_Base_SetConfig+0xe4>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00f      	beq.n	80080bc <TIM_Base_SetConfig+0x38>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a2:	d00b      	beq.n	80080bc <TIM_Base_SetConfig+0x38>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a31      	ldr	r2, [pc, #196]	; (800816c <TIM_Base_SetConfig+0xe8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d007      	beq.n	80080bc <TIM_Base_SetConfig+0x38>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a30      	ldr	r2, [pc, #192]	; (8008170 <TIM_Base_SetConfig+0xec>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_Base_SetConfig+0x38>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a2f      	ldr	r2, [pc, #188]	; (8008174 <TIM_Base_SetConfig+0xf0>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d108      	bne.n	80080ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a25      	ldr	r2, [pc, #148]	; (8008168 <TIM_Base_SetConfig+0xe4>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d01b      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080dc:	d017      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a22      	ldr	r2, [pc, #136]	; (800816c <TIM_Base_SetConfig+0xe8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d013      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a21      	ldr	r2, [pc, #132]	; (8008170 <TIM_Base_SetConfig+0xec>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00f      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a20      	ldr	r2, [pc, #128]	; (8008174 <TIM_Base_SetConfig+0xf0>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00b      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a1f      	ldr	r2, [pc, #124]	; (8008178 <TIM_Base_SetConfig+0xf4>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d007      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a1e      	ldr	r2, [pc, #120]	; (800817c <TIM_Base_SetConfig+0xf8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d003      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a1d      	ldr	r2, [pc, #116]	; (8008180 <TIM_Base_SetConfig+0xfc>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d108      	bne.n	8008120 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a08      	ldr	r2, [pc, #32]	; (8008168 <TIM_Base_SetConfig+0xe4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d103      	bne.n	8008154 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	615a      	str	r2, [r3, #20]
}
 800815a:	bf00      	nop
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	40010000 	.word	0x40010000
 800816c:	40000400 	.word	0x40000400
 8008170:	40000800 	.word	0x40000800
 8008174:	40000c00 	.word	0x40000c00
 8008178:	40014000 	.word	0x40014000
 800817c:	40014400 	.word	0x40014400
 8008180:	40014800 	.word	0x40014800

08008184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	f023 0201 	bic.w	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0303 	bic.w	r3, r3, #3
 80081ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f023 0302 	bic.w	r3, r3, #2
 80081cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a1c      	ldr	r2, [pc, #112]	; (800824c <TIM_OC1_SetConfig+0xc8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d10c      	bne.n	80081fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f023 0308 	bic.w	r3, r3, #8
 80081e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f023 0304 	bic.w	r3, r3, #4
 80081f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a13      	ldr	r2, [pc, #76]	; (800824c <TIM_OC1_SetConfig+0xc8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d111      	bne.n	8008226 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	4313      	orrs	r3, r2
 800821a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	4313      	orrs	r3, r2
 8008224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	621a      	str	r2, [r3, #32]
}
 8008240:	bf00      	nop
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	40010000 	.word	0x40010000

08008250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f023 0210 	bic.w	r2, r3, #16
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f023 0320 	bic.w	r3, r3, #32
 800829a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	011b      	lsls	r3, r3, #4
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a1e      	ldr	r2, [pc, #120]	; (8008324 <TIM_OC2_SetConfig+0xd4>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d10d      	bne.n	80082cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a15      	ldr	r2, [pc, #84]	; (8008324 <TIM_OC2_SetConfig+0xd4>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d113      	bne.n	80082fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	621a      	str	r2, [r3, #32]
}
 8008316:	bf00      	nop
 8008318:	371c      	adds	r7, #28
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	40010000 	.word	0x40010000

08008328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a1d      	ldr	r2, [pc, #116]	; (80083f8 <TIM_OC3_SetConfig+0xd0>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d10d      	bne.n	80083a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800838c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	4313      	orrs	r3, r2
 8008398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a14      	ldr	r2, [pc, #80]	; (80083f8 <TIM_OC3_SetConfig+0xd0>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d113      	bne.n	80083d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	621a      	str	r2, [r3, #32]
}
 80083ec:	bf00      	nop
 80083ee:	371c      	adds	r7, #28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	40010000 	.word	0x40010000

080083fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	031b      	lsls	r3, r3, #12
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4313      	orrs	r3, r2
 8008452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a10      	ldr	r2, [pc, #64]	; (8008498 <TIM_OC4_SetConfig+0x9c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d109      	bne.n	8008470 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	019b      	lsls	r3, r3, #6
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	4313      	orrs	r3, r2
 800846e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	621a      	str	r2, [r3, #32]
}
 800848a:	bf00      	nop
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	40010000 	.word	0x40010000

0800849c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	f023 0201 	bic.w	r2, r3, #1
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a1b      	ldr	r3, [r3, #32]
 80084c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4a24      	ldr	r2, [pc, #144]	; (8008558 <TIM_TI1_SetConfig+0xbc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d013      	beq.n	80084f2 <TIM_TI1_SetConfig+0x56>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d0:	d00f      	beq.n	80084f2 <TIM_TI1_SetConfig+0x56>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4a21      	ldr	r2, [pc, #132]	; (800855c <TIM_TI1_SetConfig+0xc0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00b      	beq.n	80084f2 <TIM_TI1_SetConfig+0x56>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4a20      	ldr	r2, [pc, #128]	; (8008560 <TIM_TI1_SetConfig+0xc4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d007      	beq.n	80084f2 <TIM_TI1_SetConfig+0x56>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4a1f      	ldr	r2, [pc, #124]	; (8008564 <TIM_TI1_SetConfig+0xc8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d003      	beq.n	80084f2 <TIM_TI1_SetConfig+0x56>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <TIM_TI1_SetConfig+0xcc>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d101      	bne.n	80084f6 <TIM_TI1_SetConfig+0x5a>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <TIM_TI1_SetConfig+0x5c>
 80084f6:	2300      	movs	r3, #0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d008      	beq.n	800850e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4313      	orrs	r3, r2
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	e003      	b.n	8008516 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f043 0301 	orr.w	r3, r3, #1
 8008514:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800851c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	011b      	lsls	r3, r3, #4
 8008522:	b2db      	uxtb	r3, r3
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	4313      	orrs	r3, r2
 8008528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f023 030a 	bic.w	r3, r3, #10
 8008530:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f003 030a 	and.w	r3, r3, #10
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	4313      	orrs	r3, r2
 800853c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	621a      	str	r2, [r3, #32]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	40010000 	.word	0x40010000
 800855c:	40000400 	.word	0x40000400
 8008560:	40000800 	.word	0x40000800
 8008564:	40000c00 	.word	0x40000c00
 8008568:	40014000 	.word	0x40014000

0800856c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6a1b      	ldr	r3, [r3, #32]
 800857c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	f023 0201 	bic.w	r2, r3, #1
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	4313      	orrs	r3, r2
 80085a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f023 030a 	bic.w	r3, r3, #10
 80085a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	621a      	str	r2, [r3, #32]
}
 80085be:	bf00      	nop
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b087      	sub	sp, #28
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	f023 0210 	bic.w	r2, r3, #16
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	021b      	lsls	r3, r3, #8
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	031b      	lsls	r3, r3, #12
 800860e:	b29b      	uxth	r3, r3
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	4313      	orrs	r3, r2
 8008614:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800861c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	4313      	orrs	r3, r2
 800862a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	621a      	str	r2, [r3, #32]
}
 8008638:	bf00      	nop
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008644:	b480      	push	{r7}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	f023 0210 	bic.w	r2, r3, #16
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800866e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	031b      	lsls	r3, r3, #12
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	4313      	orrs	r3, r2
 8008678:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008680:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	011b      	lsls	r3, r3, #4
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	621a      	str	r2, [r3, #32]
}
 8008698:	bf00      	nop
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f023 0303 	bic.w	r3, r3, #3
 80086d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	011b      	lsls	r3, r3, #4
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80086f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	4313      	orrs	r3, r2
 8008702:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	621a      	str	r2, [r3, #32]
}
 8008710:	bf00      	nop
 8008712:	371c      	adds	r7, #28
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008748:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	4313      	orrs	r3, r2
 8008752:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800875a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	031b      	lsls	r3, r3, #12
 8008760:	b29b      	uxth	r3, r3
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	4313      	orrs	r3, r2
 8008766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800876e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	031b      	lsls	r3, r3, #12
 8008774:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4313      	orrs	r3, r2
 800877c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	621a      	str	r2, [r3, #32]
}
 800878a:	bf00      	nop
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008796:	b480      	push	{r7}
 8008798:	b085      	sub	sp, #20
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	f043 0307 	orr.w	r3, r3, #7
 80087b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	609a      	str	r2, [r3, #8]
}
 80087c0:	bf00      	nop
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	021a      	lsls	r2, r3, #8
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	431a      	orrs	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	609a      	str	r2, [r3, #8]
}
 8008800:	bf00      	nop
 8008802:	371c      	adds	r7, #28
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f003 031f 	and.w	r3, r3, #31
 800881e:	2201      	movs	r2, #1
 8008820:	fa02 f303 	lsl.w	r3, r2, r3
 8008824:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a1a      	ldr	r2, [r3, #32]
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	43db      	mvns	r3, r3
 800882e:	401a      	ands	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a1a      	ldr	r2, [r3, #32]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f003 031f 	and.w	r3, r3, #31
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	fa01 f303 	lsl.w	r3, r1, r3
 8008844:	431a      	orrs	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	621a      	str	r2, [r3, #32]
}
 800884a:	bf00      	nop
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
	...

08008858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800886c:	2302      	movs	r3, #2
 800886e:	e050      	b.n	8008912 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a1c      	ldr	r2, [pc, #112]	; (8008920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d018      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088bc:	d013      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a18      	ldr	r2, [pc, #96]	; (8008924 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d00e      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a16      	ldr	r2, [pc, #88]	; (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d009      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a15      	ldr	r2, [pc, #84]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d004      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a13      	ldr	r2, [pc, #76]	; (8008930 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d10c      	bne.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	40010000 	.word	0x40010000
 8008924:	40000400 	.word	0x40000400
 8008928:	40000800 	.word	0x40000800
 800892c:	40000c00 	.word	0x40000c00
 8008930:	40014000 	.word	0x40014000

08008934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e03f      	b.n	80089ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d106      	bne.n	8008988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7fa fb8a 	bl	800309c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2224      	movs	r2, #36	; 0x24
 800898c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800899e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fd7b 	bl	800949c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	695a      	ldr	r2, [r3, #20]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68da      	ldr	r2, [r3, #12]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2220      	movs	r2, #32
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2220      	movs	r2, #32
 80089e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b08a      	sub	sp, #40	; 0x28
 80089fa:	af02      	add	r7, sp, #8
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	603b      	str	r3, [r7, #0]
 8008a02:	4613      	mov	r3, r2
 8008a04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b20      	cmp	r3, #32
 8008a14:	d17c      	bne.n	8008b10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <HAL_UART_Transmit+0x2c>
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e075      	b.n	8008b12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d101      	bne.n	8008a34 <HAL_UART_Transmit+0x3e>
 8008a30:	2302      	movs	r3, #2
 8008a32:	e06e      	b.n	8008b12 <HAL_UART_Transmit+0x11c>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2221      	movs	r2, #33	; 0x21
 8008a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a4a:	f7fa fd0d 	bl	8003468 <HAL_GetTick>
 8008a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	88fa      	ldrh	r2, [r7, #6]
 8008a54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a64:	d108      	bne.n	8008a78 <HAL_UART_Transmit+0x82>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d104      	bne.n	8008a78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	61bb      	str	r3, [r7, #24]
 8008a76:	e003      	b.n	8008a80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a88:	e02a      	b.n	8008ae0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2200      	movs	r2, #0
 8008a92:	2180      	movs	r1, #128	; 0x80
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 faf9 	bl	800908c <UART_WaitOnFlagUntilTimeout>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e036      	b.n	8008b12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10b      	bne.n	8008ac2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ab8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	3302      	adds	r3, #2
 8008abe:	61bb      	str	r3, [r7, #24]
 8008ac0:	e007      	b.n	8008ad2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	781a      	ldrb	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1cf      	bne.n	8008a8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2200      	movs	r2, #0
 8008af2:	2140      	movs	r1, #64	; 0x40
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 fac9 	bl	800908c <UART_WaitOnFlagUntilTimeout>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e006      	b.n	8008b12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	e000      	b.n	8008b12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b10:	2302      	movs	r3, #2
  }
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3720      	adds	r7, #32
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b0ba      	sub	sp, #232	; 0xe8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b52:	f003 030f 	and.w	r3, r3, #15
 8008b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10f      	bne.n	8008b82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b66:	f003 0320 	and.w	r3, r3, #32
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <HAL_UART_IRQHandler+0x66>
 8008b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b72:	f003 0320 	and.w	r3, r3, #32
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fbd3 	bl	8009326 <UART_Receive_IT>
      return;
 8008b80:	e256      	b.n	8009030 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 80de 	beq.w	8008d48 <HAL_UART_IRQHandler+0x22c>
 8008b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d106      	bne.n	8008ba6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 80d1 	beq.w	8008d48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <HAL_UART_IRQHandler+0xae>
 8008bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d005      	beq.n	8008bca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	f043 0201 	orr.w	r2, r3, #1
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00b      	beq.n	8008bee <HAL_UART_IRQHandler+0xd2>
 8008bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	f043 0202 	orr.w	r2, r3, #2
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bf2:	f003 0302 	and.w	r3, r3, #2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00b      	beq.n	8008c12 <HAL_UART_IRQHandler+0xf6>
 8008bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d005      	beq.n	8008c12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	f043 0204 	orr.w	r2, r3, #4
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d011      	beq.n	8008c42 <HAL_UART_IRQHandler+0x126>
 8008c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c22:	f003 0320 	and.w	r3, r3, #32
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d105      	bne.n	8008c36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d005      	beq.n	8008c42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3a:	f043 0208 	orr.w	r2, r3, #8
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 81ed 	beq.w	8009026 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c50:	f003 0320 	and.w	r3, r3, #32
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <HAL_UART_IRQHandler+0x14e>
 8008c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c5c:	f003 0320 	and.w	r3, r3, #32
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fb5e 	bl	8009326 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c74:	2b40      	cmp	r3, #64	; 0x40
 8008c76:	bf0c      	ite	eq
 8008c78:	2301      	moveq	r3, #1
 8008c7a:	2300      	movne	r3, #0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	f003 0308 	and.w	r3, r3, #8
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d103      	bne.n	8008c96 <HAL_UART_IRQHandler+0x17a>
 8008c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d04f      	beq.n	8008d36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa66 	bl	8009168 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca6:	2b40      	cmp	r3, #64	; 0x40
 8008ca8:	d141      	bne.n	8008d2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3314      	adds	r3, #20
 8008cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3314      	adds	r3, #20
 8008cd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008cd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1d9      	bne.n	8008caa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d013      	beq.n	8008d26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d02:	4a7d      	ldr	r2, [pc, #500]	; (8008ef8 <HAL_UART_IRQHandler+0x3dc>)
 8008d04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fb fa26 	bl	800415c <HAL_DMA_Abort_IT>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d016      	beq.n	8008d44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d20:	4610      	mov	r0, r2
 8008d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d24:	e00e      	b.n	8008d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f99a 	bl	8009060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d2c:	e00a      	b.n	8008d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f996 	bl	8009060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d34:	e006      	b.n	8008d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f992 	bl	8009060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008d42:	e170      	b.n	8009026 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d44:	bf00      	nop
    return;
 8008d46:	e16e      	b.n	8009026 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	f040 814a 	bne.w	8008fe6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d56:	f003 0310 	and.w	r3, r3, #16
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 8143 	beq.w	8008fe6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 813c 	beq.w	8008fe6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60bb      	str	r3, [r7, #8]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	60bb      	str	r3, [r7, #8]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	60bb      	str	r3, [r7, #8]
 8008d82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	f040 80b4 	bne.w	8008efc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008da0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 8140 	beq.w	800902a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008db2:	429a      	cmp	r2, r3
 8008db4:	f080 8139 	bcs.w	800902a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008dbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dca:	f000 8088 	beq.w	8008ede <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ddc:	e853 3f00 	ldrex	r3, [r3]
 8008de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	330c      	adds	r3, #12
 8008df6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008dfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1d9      	bne.n	8008dce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3314      	adds	r3, #20
 8008e20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e2c:	f023 0301 	bic.w	r3, r3, #1
 8008e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3314      	adds	r3, #20
 8008e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008e42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e1      	bne.n	8008e1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3314      	adds	r3, #20
 8008e76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008e7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008e7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e3      	bne.n	8008e56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	330c      	adds	r3, #12
 8008ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eae:	f023 0310 	bic.w	r3, r3, #16
 8008eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	330c      	adds	r3, #12
 8008ebc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ec0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ec2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e3      	bne.n	8008e9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fb f8cf 	bl	800407c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f8c0 	bl	8009074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ef4:	e099      	b.n	800902a <HAL_UART_IRQHandler+0x50e>
 8008ef6:	bf00      	nop
 8008ef8:	0800922f 	.word	0x0800922f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 808b 	beq.w	800902e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 8086 	beq.w	800902e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	330c      	adds	r3, #12
 8008f28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	330c      	adds	r3, #12
 8008f42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008f46:	647a      	str	r2, [r7, #68]	; 0x44
 8008f48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e3      	bne.n	8008f22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3314      	adds	r3, #20
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	623b      	str	r3, [r7, #32]
   return(result);
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	f023 0301 	bic.w	r3, r3, #1
 8008f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3314      	adds	r3, #20
 8008f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f7e:	633a      	str	r2, [r7, #48]	; 0x30
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e3      	bne.n	8008f5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	330c      	adds	r3, #12
 8008fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0310 	bic.w	r3, r3, #16
 8008fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	330c      	adds	r3, #12
 8008fc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008fc4:	61fa      	str	r2, [r7, #28]
 8008fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc8:	69b9      	ldr	r1, [r7, #24]
 8008fca:	69fa      	ldr	r2, [r7, #28]
 8008fcc:	e841 2300 	strex	r3, r2, [r1]
 8008fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e3      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f848 	bl	8009074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fe4:	e023      	b.n	800902e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d009      	beq.n	8009006 <HAL_UART_IRQHandler+0x4ea>
 8008ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f929 	bl	8009256 <UART_Transmit_IT>
    return;
 8009004:	e014      	b.n	8009030 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00e      	beq.n	8009030 <HAL_UART_IRQHandler+0x514>
 8009012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	d008      	beq.n	8009030 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f969 	bl	80092f6 <UART_EndTransmit_IT>
    return;
 8009024:	e004      	b.n	8009030 <HAL_UART_IRQHandler+0x514>
    return;
 8009026:	bf00      	nop
 8009028:	e002      	b.n	8009030 <HAL_UART_IRQHandler+0x514>
      return;
 800902a:	bf00      	nop
 800902c:	e000      	b.n	8009030 <HAL_UART_IRQHandler+0x514>
      return;
 800902e:	bf00      	nop
  }
}
 8009030:	37e8      	adds	r7, #232	; 0xe8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop

08009038 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b090      	sub	sp, #64	; 0x40
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	603b      	str	r3, [r7, #0]
 8009098:	4613      	mov	r3, r2
 800909a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800909c:	e050      	b.n	8009140 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800909e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a4:	d04c      	beq.n	8009140 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80090a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d007      	beq.n	80090bc <UART_WaitOnFlagUntilTimeout+0x30>
 80090ac:	f7fa f9dc 	bl	8003468 <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d241      	bcs.n	8009140 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	330c      	adds	r3, #12
 80090c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	330c      	adds	r3, #12
 80090da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090dc:	637a      	str	r2, [r7, #52]	; 0x34
 80090de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e5      	bne.n	80090bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3314      	adds	r3, #20
 80090f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f023 0301 	bic.w	r3, r3, #1
 8009106:	63bb      	str	r3, [r7, #56]	; 0x38
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3314      	adds	r3, #20
 800910e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009110:	623a      	str	r2, [r7, #32]
 8009112:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	69f9      	ldr	r1, [r7, #28]
 8009116:	6a3a      	ldr	r2, [r7, #32]
 8009118:	e841 2300 	strex	r3, r2, [r1]
 800911c:	61bb      	str	r3, [r7, #24]
   return(result);
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e5      	bne.n	80090f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2220      	movs	r2, #32
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2220      	movs	r2, #32
 8009130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e00f      	b.n	8009160 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4013      	ands	r3, r2
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	429a      	cmp	r2, r3
 800914e:	bf0c      	ite	eq
 8009150:	2301      	moveq	r3, #1
 8009152:	2300      	movne	r3, #0
 8009154:	b2db      	uxtb	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	429a      	cmp	r2, r3
 800915c:	d09f      	beq.n	800909e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3740      	adds	r7, #64	; 0x40
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009168:	b480      	push	{r7}
 800916a:	b095      	sub	sp, #84	; 0x54
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	330c      	adds	r3, #12
 8009176:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	330c      	adds	r3, #12
 800918e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009190:	643a      	str	r2, [r7, #64]	; 0x40
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e5      	bne.n	8009170 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3314      	adds	r3, #20
 80091aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	f023 0301 	bic.w	r3, r3, #1
 80091ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3314      	adds	r3, #20
 80091c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e5      	bne.n	80091a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d119      	bne.n	8009214 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	330c      	adds	r3, #12
 80091e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	e853 3f00 	ldrex	r3, [r3]
 80091ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f023 0310 	bic.w	r3, r3, #16
 80091f6:	647b      	str	r3, [r7, #68]	; 0x44
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	330c      	adds	r3, #12
 80091fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009200:	61ba      	str	r2, [r7, #24]
 8009202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009204:	6979      	ldr	r1, [r7, #20]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	e841 2300 	strex	r3, r2, [r1]
 800920c:	613b      	str	r3, [r7, #16]
   return(result);
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e5      	bne.n	80091e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009222:	bf00      	nop
 8009224:	3754      	adds	r7, #84	; 0x54
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f7ff ff09 	bl	8009060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800924e:	bf00      	nop
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009256:	b480      	push	{r7}
 8009258:	b085      	sub	sp, #20
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b21      	cmp	r3, #33	; 0x21
 8009268:	d13e      	bne.n	80092e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009272:	d114      	bne.n	800929e <UART_Transmit_IT+0x48>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d110      	bne.n	800929e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009290:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	1c9a      	adds	r2, r3, #2
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	621a      	str	r2, [r3, #32]
 800929c:	e008      	b.n	80092b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	1c59      	adds	r1, r3, #1
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6211      	str	r1, [r2, #32]
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	3b01      	subs	r3, #1
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	4619      	mov	r1, r3
 80092be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10f      	bne.n	80092e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e000      	b.n	80092ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092e8:	2302      	movs	r3, #2
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800930c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2220      	movs	r2, #32
 8009312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff fe8e 	bl	8009038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b08c      	sub	sp, #48	; 0x30
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b22      	cmp	r3, #34	; 0x22
 8009338:	f040 80ab 	bne.w	8009492 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009344:	d117      	bne.n	8009376 <UART_Receive_IT+0x50>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d113      	bne.n	8009376 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009356:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	b29b      	uxth	r3, r3
 8009360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009364:	b29a      	uxth	r2, r3
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936e:	1c9a      	adds	r2, r3, #2
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	629a      	str	r2, [r3, #40]	; 0x28
 8009374:	e026      	b.n	80093c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800937c:	2300      	movs	r3, #0
 800937e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009388:	d007      	beq.n	800939a <UART_Receive_IT+0x74>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10a      	bne.n	80093a8 <UART_Receive_IT+0x82>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	701a      	strb	r2, [r3, #0]
 80093a6:	e008      	b.n	80093ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	3b01      	subs	r3, #1
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	4619      	mov	r1, r3
 80093d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d15a      	bne.n	800948e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0220 	bic.w	r2, r2, #32
 80093e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68da      	ldr	r2, [r3, #12]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	695a      	ldr	r2, [r3, #20]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 0201 	bic.w	r2, r2, #1
 8009406:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2220      	movs	r2, #32
 800940c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009414:	2b01      	cmp	r3, #1
 8009416:	d135      	bne.n	8009484 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	330c      	adds	r3, #12
 8009424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	613b      	str	r3, [r7, #16]
   return(result);
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f023 0310 	bic.w	r3, r3, #16
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	330c      	adds	r3, #12
 800943c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800943e:	623a      	str	r2, [r7, #32]
 8009440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	69f9      	ldr	r1, [r7, #28]
 8009444:	6a3a      	ldr	r2, [r7, #32]
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	61bb      	str	r3, [r7, #24]
   return(result);
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e5      	bne.n	800941e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0310 	and.w	r3, r3, #16
 800945c:	2b10      	cmp	r3, #16
 800945e:	d10a      	bne.n	8009476 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	60fb      	str	r3, [r7, #12]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff fdf9 	bl	8009074 <HAL_UARTEx_RxEventCallback>
 8009482:	e002      	b.n	800948a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff fde1 	bl	800904c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	e002      	b.n	8009494 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	e000      	b.n	8009494 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009492:	2302      	movs	r3, #2
  }
}
 8009494:	4618      	mov	r0, r3
 8009496:	3730      	adds	r7, #48	; 0x30
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800949c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094a0:	b0c0      	sub	sp, #256	; 0x100
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80094b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b8:	68d9      	ldr	r1, [r3, #12]
 80094ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	ea40 0301 	orr.w	r3, r0, r1
 80094c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80094c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	431a      	orrs	r2, r3
 80094d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	431a      	orrs	r2, r3
 80094dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80094e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80094f4:	f021 010c 	bic.w	r1, r1, #12
 80094f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009502:	430b      	orrs	r3, r1
 8009504:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009516:	6999      	ldr	r1, [r3, #24]
 8009518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	ea40 0301 	orr.w	r3, r0, r1
 8009522:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	4b8f      	ldr	r3, [pc, #572]	; (8009768 <UART_SetConfig+0x2cc>)
 800952c:	429a      	cmp	r2, r3
 800952e:	d005      	beq.n	800953c <UART_SetConfig+0xa0>
 8009530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	4b8d      	ldr	r3, [pc, #564]	; (800976c <UART_SetConfig+0x2d0>)
 8009538:	429a      	cmp	r2, r3
 800953a:	d104      	bne.n	8009546 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800953c:	f7fd fa50 	bl	80069e0 <HAL_RCC_GetPCLK2Freq>
 8009540:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009544:	e003      	b.n	800954e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009546:	f7fd fa37 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800954a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800954e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009558:	f040 810c 	bne.w	8009774 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800955c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009560:	2200      	movs	r2, #0
 8009562:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009566:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800956a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800956e:	4622      	mov	r2, r4
 8009570:	462b      	mov	r3, r5
 8009572:	1891      	adds	r1, r2, r2
 8009574:	65b9      	str	r1, [r7, #88]	; 0x58
 8009576:	415b      	adcs	r3, r3
 8009578:	65fb      	str	r3, [r7, #92]	; 0x5c
 800957a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800957e:	4621      	mov	r1, r4
 8009580:	eb12 0801 	adds.w	r8, r2, r1
 8009584:	4629      	mov	r1, r5
 8009586:	eb43 0901 	adc.w	r9, r3, r1
 800958a:	f04f 0200 	mov.w	r2, #0
 800958e:	f04f 0300 	mov.w	r3, #0
 8009592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800959a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800959e:	4690      	mov	r8, r2
 80095a0:	4699      	mov	r9, r3
 80095a2:	4623      	mov	r3, r4
 80095a4:	eb18 0303 	adds.w	r3, r8, r3
 80095a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095ac:	462b      	mov	r3, r5
 80095ae:	eb49 0303 	adc.w	r3, r9, r3
 80095b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80095c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80095c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80095ca:	460b      	mov	r3, r1
 80095cc:	18db      	adds	r3, r3, r3
 80095ce:	653b      	str	r3, [r7, #80]	; 0x50
 80095d0:	4613      	mov	r3, r2
 80095d2:	eb42 0303 	adc.w	r3, r2, r3
 80095d6:	657b      	str	r3, [r7, #84]	; 0x54
 80095d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80095dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80095e0:	f7f7 fb0a 	bl	8000bf8 <__aeabi_uldivmod>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4b61      	ldr	r3, [pc, #388]	; (8009770 <UART_SetConfig+0x2d4>)
 80095ea:	fba3 2302 	umull	r2, r3, r3, r2
 80095ee:	095b      	lsrs	r3, r3, #5
 80095f0:	011c      	lsls	r4, r3, #4
 80095f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095f6:	2200      	movs	r2, #0
 80095f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009600:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009604:	4642      	mov	r2, r8
 8009606:	464b      	mov	r3, r9
 8009608:	1891      	adds	r1, r2, r2
 800960a:	64b9      	str	r1, [r7, #72]	; 0x48
 800960c:	415b      	adcs	r3, r3
 800960e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009610:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009614:	4641      	mov	r1, r8
 8009616:	eb12 0a01 	adds.w	sl, r2, r1
 800961a:	4649      	mov	r1, r9
 800961c:	eb43 0b01 	adc.w	fp, r3, r1
 8009620:	f04f 0200 	mov.w	r2, #0
 8009624:	f04f 0300 	mov.w	r3, #0
 8009628:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800962c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009634:	4692      	mov	sl, r2
 8009636:	469b      	mov	fp, r3
 8009638:	4643      	mov	r3, r8
 800963a:	eb1a 0303 	adds.w	r3, sl, r3
 800963e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009642:	464b      	mov	r3, r9
 8009644:	eb4b 0303 	adc.w	r3, fp, r3
 8009648:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800964c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009658:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800965c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009660:	460b      	mov	r3, r1
 8009662:	18db      	adds	r3, r3, r3
 8009664:	643b      	str	r3, [r7, #64]	; 0x40
 8009666:	4613      	mov	r3, r2
 8009668:	eb42 0303 	adc.w	r3, r2, r3
 800966c:	647b      	str	r3, [r7, #68]	; 0x44
 800966e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009672:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009676:	f7f7 fabf 	bl	8000bf8 <__aeabi_uldivmod>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4611      	mov	r1, r2
 8009680:	4b3b      	ldr	r3, [pc, #236]	; (8009770 <UART_SetConfig+0x2d4>)
 8009682:	fba3 2301 	umull	r2, r3, r3, r1
 8009686:	095b      	lsrs	r3, r3, #5
 8009688:	2264      	movs	r2, #100	; 0x64
 800968a:	fb02 f303 	mul.w	r3, r2, r3
 800968e:	1acb      	subs	r3, r1, r3
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009696:	4b36      	ldr	r3, [pc, #216]	; (8009770 <UART_SetConfig+0x2d4>)
 8009698:	fba3 2302 	umull	r2, r3, r3, r2
 800969c:	095b      	lsrs	r3, r3, #5
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096a4:	441c      	add	r4, r3
 80096a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80096b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80096b8:	4642      	mov	r2, r8
 80096ba:	464b      	mov	r3, r9
 80096bc:	1891      	adds	r1, r2, r2
 80096be:	63b9      	str	r1, [r7, #56]	; 0x38
 80096c0:	415b      	adcs	r3, r3
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096c8:	4641      	mov	r1, r8
 80096ca:	1851      	adds	r1, r2, r1
 80096cc:	6339      	str	r1, [r7, #48]	; 0x30
 80096ce:	4649      	mov	r1, r9
 80096d0:	414b      	adcs	r3, r1
 80096d2:	637b      	str	r3, [r7, #52]	; 0x34
 80096d4:	f04f 0200 	mov.w	r2, #0
 80096d8:	f04f 0300 	mov.w	r3, #0
 80096dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80096e0:	4659      	mov	r1, fp
 80096e2:	00cb      	lsls	r3, r1, #3
 80096e4:	4651      	mov	r1, sl
 80096e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096ea:	4651      	mov	r1, sl
 80096ec:	00ca      	lsls	r2, r1, #3
 80096ee:	4610      	mov	r0, r2
 80096f0:	4619      	mov	r1, r3
 80096f2:	4603      	mov	r3, r0
 80096f4:	4642      	mov	r2, r8
 80096f6:	189b      	adds	r3, r3, r2
 80096f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096fc:	464b      	mov	r3, r9
 80096fe:	460a      	mov	r2, r1
 8009700:	eb42 0303 	adc.w	r3, r2, r3
 8009704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009714:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009718:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800971c:	460b      	mov	r3, r1
 800971e:	18db      	adds	r3, r3, r3
 8009720:	62bb      	str	r3, [r7, #40]	; 0x28
 8009722:	4613      	mov	r3, r2
 8009724:	eb42 0303 	adc.w	r3, r2, r3
 8009728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800972a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800972e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009732:	f7f7 fa61 	bl	8000bf8 <__aeabi_uldivmod>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <UART_SetConfig+0x2d4>)
 800973c:	fba3 1302 	umull	r1, r3, r3, r2
 8009740:	095b      	lsrs	r3, r3, #5
 8009742:	2164      	movs	r1, #100	; 0x64
 8009744:	fb01 f303 	mul.w	r3, r1, r3
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	00db      	lsls	r3, r3, #3
 800974c:	3332      	adds	r3, #50	; 0x32
 800974e:	4a08      	ldr	r2, [pc, #32]	; (8009770 <UART_SetConfig+0x2d4>)
 8009750:	fba2 2303 	umull	r2, r3, r2, r3
 8009754:	095b      	lsrs	r3, r3, #5
 8009756:	f003 0207 	and.w	r2, r3, #7
 800975a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4422      	add	r2, r4
 8009762:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009764:	e105      	b.n	8009972 <UART_SetConfig+0x4d6>
 8009766:	bf00      	nop
 8009768:	40011000 	.word	0x40011000
 800976c:	40011400 	.word	0x40011400
 8009770:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009778:	2200      	movs	r2, #0
 800977a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800977e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009782:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009786:	4642      	mov	r2, r8
 8009788:	464b      	mov	r3, r9
 800978a:	1891      	adds	r1, r2, r2
 800978c:	6239      	str	r1, [r7, #32]
 800978e:	415b      	adcs	r3, r3
 8009790:	627b      	str	r3, [r7, #36]	; 0x24
 8009792:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009796:	4641      	mov	r1, r8
 8009798:	1854      	adds	r4, r2, r1
 800979a:	4649      	mov	r1, r9
 800979c:	eb43 0501 	adc.w	r5, r3, r1
 80097a0:	f04f 0200 	mov.w	r2, #0
 80097a4:	f04f 0300 	mov.w	r3, #0
 80097a8:	00eb      	lsls	r3, r5, #3
 80097aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097ae:	00e2      	lsls	r2, r4, #3
 80097b0:	4614      	mov	r4, r2
 80097b2:	461d      	mov	r5, r3
 80097b4:	4643      	mov	r3, r8
 80097b6:	18e3      	adds	r3, r4, r3
 80097b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097bc:	464b      	mov	r3, r9
 80097be:	eb45 0303 	adc.w	r3, r5, r3
 80097c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097d6:	f04f 0200 	mov.w	r2, #0
 80097da:	f04f 0300 	mov.w	r3, #0
 80097de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80097e2:	4629      	mov	r1, r5
 80097e4:	008b      	lsls	r3, r1, #2
 80097e6:	4621      	mov	r1, r4
 80097e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097ec:	4621      	mov	r1, r4
 80097ee:	008a      	lsls	r2, r1, #2
 80097f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80097f4:	f7f7 fa00 	bl	8000bf8 <__aeabi_uldivmod>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	4b60      	ldr	r3, [pc, #384]	; (8009980 <UART_SetConfig+0x4e4>)
 80097fe:	fba3 2302 	umull	r2, r3, r3, r2
 8009802:	095b      	lsrs	r3, r3, #5
 8009804:	011c      	lsls	r4, r3, #4
 8009806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800980a:	2200      	movs	r2, #0
 800980c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009810:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009814:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	1891      	adds	r1, r2, r2
 800981e:	61b9      	str	r1, [r7, #24]
 8009820:	415b      	adcs	r3, r3
 8009822:	61fb      	str	r3, [r7, #28]
 8009824:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009828:	4641      	mov	r1, r8
 800982a:	1851      	adds	r1, r2, r1
 800982c:	6139      	str	r1, [r7, #16]
 800982e:	4649      	mov	r1, r9
 8009830:	414b      	adcs	r3, r1
 8009832:	617b      	str	r3, [r7, #20]
 8009834:	f04f 0200 	mov.w	r2, #0
 8009838:	f04f 0300 	mov.w	r3, #0
 800983c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009840:	4659      	mov	r1, fp
 8009842:	00cb      	lsls	r3, r1, #3
 8009844:	4651      	mov	r1, sl
 8009846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800984a:	4651      	mov	r1, sl
 800984c:	00ca      	lsls	r2, r1, #3
 800984e:	4610      	mov	r0, r2
 8009850:	4619      	mov	r1, r3
 8009852:	4603      	mov	r3, r0
 8009854:	4642      	mov	r2, r8
 8009856:	189b      	adds	r3, r3, r2
 8009858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800985c:	464b      	mov	r3, r9
 800985e:	460a      	mov	r2, r1
 8009860:	eb42 0303 	adc.w	r3, r2, r3
 8009864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	67bb      	str	r3, [r7, #120]	; 0x78
 8009872:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	f04f 0300 	mov.w	r3, #0
 800987c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009880:	4649      	mov	r1, r9
 8009882:	008b      	lsls	r3, r1, #2
 8009884:	4641      	mov	r1, r8
 8009886:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800988a:	4641      	mov	r1, r8
 800988c:	008a      	lsls	r2, r1, #2
 800988e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009892:	f7f7 f9b1 	bl	8000bf8 <__aeabi_uldivmod>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4b39      	ldr	r3, [pc, #228]	; (8009980 <UART_SetConfig+0x4e4>)
 800989c:	fba3 1302 	umull	r1, r3, r3, r2
 80098a0:	095b      	lsrs	r3, r3, #5
 80098a2:	2164      	movs	r1, #100	; 0x64
 80098a4:	fb01 f303 	mul.w	r3, r1, r3
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	011b      	lsls	r3, r3, #4
 80098ac:	3332      	adds	r3, #50	; 0x32
 80098ae:	4a34      	ldr	r2, [pc, #208]	; (8009980 <UART_SetConfig+0x4e4>)
 80098b0:	fba2 2303 	umull	r2, r3, r2, r3
 80098b4:	095b      	lsrs	r3, r3, #5
 80098b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098ba:	441c      	add	r4, r3
 80098bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098c0:	2200      	movs	r2, #0
 80098c2:	673b      	str	r3, [r7, #112]	; 0x70
 80098c4:	677a      	str	r2, [r7, #116]	; 0x74
 80098c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80098ca:	4642      	mov	r2, r8
 80098cc:	464b      	mov	r3, r9
 80098ce:	1891      	adds	r1, r2, r2
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	415b      	adcs	r3, r3
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098da:	4641      	mov	r1, r8
 80098dc:	1851      	adds	r1, r2, r1
 80098de:	6039      	str	r1, [r7, #0]
 80098e0:	4649      	mov	r1, r9
 80098e2:	414b      	adcs	r3, r1
 80098e4:	607b      	str	r3, [r7, #4]
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	f04f 0300 	mov.w	r3, #0
 80098ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80098f2:	4659      	mov	r1, fp
 80098f4:	00cb      	lsls	r3, r1, #3
 80098f6:	4651      	mov	r1, sl
 80098f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098fc:	4651      	mov	r1, sl
 80098fe:	00ca      	lsls	r2, r1, #3
 8009900:	4610      	mov	r0, r2
 8009902:	4619      	mov	r1, r3
 8009904:	4603      	mov	r3, r0
 8009906:	4642      	mov	r2, r8
 8009908:	189b      	adds	r3, r3, r2
 800990a:	66bb      	str	r3, [r7, #104]	; 0x68
 800990c:	464b      	mov	r3, r9
 800990e:	460a      	mov	r2, r1
 8009910:	eb42 0303 	adc.w	r3, r2, r3
 8009914:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	663b      	str	r3, [r7, #96]	; 0x60
 8009920:	667a      	str	r2, [r7, #100]	; 0x64
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	f04f 0300 	mov.w	r3, #0
 800992a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800992e:	4649      	mov	r1, r9
 8009930:	008b      	lsls	r3, r1, #2
 8009932:	4641      	mov	r1, r8
 8009934:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009938:	4641      	mov	r1, r8
 800993a:	008a      	lsls	r2, r1, #2
 800993c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009940:	f7f7 f95a 	bl	8000bf8 <__aeabi_uldivmod>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	4b0d      	ldr	r3, [pc, #52]	; (8009980 <UART_SetConfig+0x4e4>)
 800994a:	fba3 1302 	umull	r1, r3, r3, r2
 800994e:	095b      	lsrs	r3, r3, #5
 8009950:	2164      	movs	r1, #100	; 0x64
 8009952:	fb01 f303 	mul.w	r3, r1, r3
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	3332      	adds	r3, #50	; 0x32
 800995c:	4a08      	ldr	r2, [pc, #32]	; (8009980 <UART_SetConfig+0x4e4>)
 800995e:	fba2 2303 	umull	r2, r3, r2, r3
 8009962:	095b      	lsrs	r3, r3, #5
 8009964:	f003 020f 	and.w	r2, r3, #15
 8009968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4422      	add	r2, r4
 8009970:	609a      	str	r2, [r3, #8]
}
 8009972:	bf00      	nop
 8009974:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009978:	46bd      	mov	sp, r7
 800997a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800997e:	bf00      	nop
 8009980:	51eb851f 	.word	0x51eb851f

08009984 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	4603      	mov	r3, r0
 800998c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009996:	2b84      	cmp	r3, #132	; 0x84
 8009998:	d005      	beq.n	80099a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800999a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4413      	add	r3, r2
 80099a2:	3303      	adds	r3, #3
 80099a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80099a6:	68fb      	ldr	r3, [r7, #12]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80099b8:	f001 fbc0 	bl	800b13c <vTaskStartScheduler>
  
  return osOK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80099c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099c4:	b089      	sub	sp, #36	; 0x24
 80099c6:	af04      	add	r7, sp, #16
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	695b      	ldr	r3, [r3, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d020      	beq.n	8009a16 <osThreadCreate+0x54>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d01c      	beq.n	8009a16 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685c      	ldr	r4, [r3, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681d      	ldr	r5, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691e      	ldr	r6, [r3, #16]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7ff ffc8 	bl	8009984 <makeFreeRtosPriority>
 80099f4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099fe:	9202      	str	r2, [sp, #8]
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	9100      	str	r1, [sp, #0]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	4632      	mov	r2, r6
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f001 f8ac 	bl	800ab68 <xTaskCreateStatic>
 8009a10:	4603      	mov	r3, r0
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	e01c      	b.n	8009a50 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685c      	ldr	r4, [r3, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a22:	b29e      	uxth	r6, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff ffaa 	bl	8009984 <makeFreeRtosPriority>
 8009a30:	4602      	mov	r2, r0
 8009a32:	f107 030c 	add.w	r3, r7, #12
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	9200      	str	r2, [sp, #0]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	4629      	mov	r1, r5
 8009a40:	4620      	mov	r0, r4
 8009a42:	f001 f8ee 	bl	800ac22 <xTaskCreate>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d001      	beq.n	8009a50 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e000      	b.n	8009a52 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009a50:	68fb      	ldr	r3, [r7, #12]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a5a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009a60:	201c      	movs	r0, #28
 8009a62:	f002 ff69 	bl	800c938 <pvPortMalloc>
 8009a66:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00a      	beq.n	8009a84 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 f9bc 	bl	8009df6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009a84:	687b      	ldr	r3, [r7, #4]
	}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b090      	sub	sp, #64	; 0x40
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ac2:	bf00      	nop
 8009ac4:	e7fe      	b.n	8009ac4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00a      	beq.n	8009ae6 <xEventGroupWaitBits+0x56>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	61fb      	str	r3, [r7, #28]
}
 8009ae2:	bf00      	nop
 8009ae4:	e7fe      	b.n	8009ae4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10a      	bne.n	8009b02 <xEventGroupWaitBits+0x72>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	61bb      	str	r3, [r7, #24]
}
 8009afe:	bf00      	nop
 8009b00:	e7fe      	b.n	8009b00 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b02:	f001 fffb 	bl	800bafc <xTaskGetSchedulerState>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d102      	bne.n	8009b12 <xEventGroupWaitBits+0x82>
 8009b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d101      	bne.n	8009b16 <xEventGroupWaitBits+0x86>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e000      	b.n	8009b18 <xEventGroupWaitBits+0x88>
 8009b16:	2300      	movs	r3, #0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	617b      	str	r3, [r7, #20]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8009b32:	f001 fb69 	bl	800b208 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	68b9      	ldr	r1, [r7, #8]
 8009b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b42:	f000 f936 	bl	8009db2 <prvTestWaitCondition>
 8009b46:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8009b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00e      	beq.n	8009b6c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d028      	beq.n	8009bae <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	43db      	mvns	r3, r3
 8009b64:	401a      	ands	r2, r3
 8009b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	e020      	b.n	8009bae <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d104      	bne.n	8009b7c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8009b76:	2301      	movs	r3, #1
 8009b78:	633b      	str	r3, [r7, #48]	; 0x30
 8009b7a:	e018      	b.n	8009bae <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b88:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b96:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b9a:	1d18      	adds	r0, r3, #4
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	f001 fd21 	bl	800b5ec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009bae:	f001 fb39 	bl	800b224 <xTaskResumeAll>
 8009bb2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d031      	beq.n	8009c1e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d107      	bne.n	8009bd0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009bc0:	4b19      	ldr	r3, [pc, #100]	; (8009c28 <xEventGroupWaitBits+0x198>)
 8009bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009bd0:	f002 f838 	bl	800bc44 <uxTaskResetEventItemValue>
 8009bd4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d11a      	bne.n	8009c16 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8009be0:	f002 fd88 	bl	800c6f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009bf0:	f000 f8df 	bl	8009db2 <prvTestWaitCondition>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d009      	beq.n	8009c0e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d006      	beq.n	8009c0e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	43db      	mvns	r3, r3
 8009c08:	401a      	ands	r2, r3
 8009c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8009c12:	f002 fd9f 	bl	800c754 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8009c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3740      	adds	r7, #64	; 0x40
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	e000ed04 	.word	0xe000ed04

08009c2c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10a      	bne.n	8009c56 <xEventGroupClearBits+0x2a>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	60fb      	str	r3, [r7, #12]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00a      	beq.n	8009c76 <xEventGroupClearBits+0x4a>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	60bb      	str	r3, [r7, #8]
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8009c76:	f002 fd3d 	bl	800c6f4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	43db      	mvns	r3, r3
 8009c88:	401a      	ands	r2, r3
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8009c8e:	f002 fd61 	bl	800c754 <vPortExitCritical>

	return uxReturn;
 8009c92:	693b      	ldr	r3, [r7, #16]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08e      	sub	sp, #56	; 0x38
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <xEventGroupSetBits+0x32>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	613b      	str	r3, [r7, #16]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00a      	beq.n	8009cee <xEventGroupSetBits+0x52>
	__asm volatile
 8009cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	60fb      	str	r3, [r7, #12]
}
 8009cea:	bf00      	nop
 8009cec:	e7fe      	b.n	8009cec <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8009cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8009cfa:	f001 fa85 	bl	800b208 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8009d10:	e03c      	b.n	8009d8c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8009d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8009d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009d28:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d30:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d108      	bne.n	8009d4e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	4013      	ands	r3, r2
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00b      	beq.n	8009d60 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d4c:	e008      	b.n	8009d60 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	4013      	ands	r3, r2
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d101      	bne.n	8009d60 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d010      	beq.n	8009d88 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009d80:	4619      	mov	r1, r3
 8009d82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009d84:	f001 fcfc 	bl	800b780 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8009d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d1be      	bne.n	8009d12 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9a:	43db      	mvns	r3, r3
 8009d9c:	401a      	ands	r2, r3
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8009da2:	f001 fa3f 	bl	800b224 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	681b      	ldr	r3, [r3, #0]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3738      	adds	r7, #56	; 0x38
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009db2:	b480      	push	{r7}
 8009db4:	b087      	sub	sp, #28
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d107      	bne.n	8009dd8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	4013      	ands	r3, r2
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	e007      	b.n	8009de8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d101      	bne.n	8009de8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009de4:	2301      	movs	r3, #1
 8009de6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009de8:	697b      	ldr	r3, [r7, #20]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f103 0208 	add.w	r2, r3, #8
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f103 0208 	add.w	r2, r3, #8
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f103 0208 	add.w	r2, r3, #8
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e2a:	bf00      	nop
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e36:	b480      	push	{r7}
 8009e38:	b083      	sub	sp, #12
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	689a      	ldr	r2, [r3, #8]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	601a      	str	r2, [r3, #0]
}
 8009e8c:	bf00      	nop
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eae:	d103      	bne.n	8009eb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	60fb      	str	r3, [r7, #12]
 8009eb6:	e00c      	b.n	8009ed2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3308      	adds	r3, #8
 8009ebc:	60fb      	str	r3, [r7, #12]
 8009ebe:	e002      	b.n	8009ec6 <vListInsert+0x2e>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	60fb      	str	r3, [r7, #12]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d2f6      	bcs.n	8009ec0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	685a      	ldr	r2, [r3, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	601a      	str	r2, [r3, #0]
}
 8009efe:	bf00      	nop
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6892      	ldr	r2, [r2, #8]
 8009f20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6852      	ldr	r2, [r2, #4]
 8009f2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d103      	bne.n	8009f3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	1e5a      	subs	r2, r3, #1
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
	...

08009f60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xQueueGenericReset+0x2a>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	60bb      	str	r3, [r7, #8]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f8a:	f002 fbb3 	bl	800c6f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f96:	68f9      	ldr	r1, [r7, #12]
 8009f98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f9a:	fb01 f303 	mul.w	r3, r1, r3
 8009f9e:	441a      	add	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	68f9      	ldr	r1, [r7, #12]
 8009fbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fc0:	fb01 f303 	mul.w	r3, r1, r3
 8009fc4:	441a      	add	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	22ff      	movs	r2, #255	; 0xff
 8009fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	22ff      	movs	r2, #255	; 0xff
 8009fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d114      	bne.n	800a00a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d01a      	beq.n	800a01e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3310      	adds	r3, #16
 8009fec:	4618      	mov	r0, r3
 8009fee:	f001 fb65 	bl	800b6bc <xTaskRemoveFromEventList>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d012      	beq.n	800a01e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <xQueueGenericReset+0xcc>)
 8009ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	e009      	b.n	800a01e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3310      	adds	r3, #16
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fef1 	bl	8009df6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3324      	adds	r3, #36	; 0x24
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff feec 	bl	8009df6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a01e:	f002 fb99 	bl	800c754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a022:	2301      	movs	r3, #1
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	e000ed04 	.word	0xe000ed04

0800a030 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08e      	sub	sp, #56	; 0x38
 800a034:	af02      	add	r7, sp, #8
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <xQueueGenericCreateStatic+0x52>
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <xQueueGenericCreateStatic+0x56>
 800a082:	2301      	movs	r3, #1
 800a084:	e000      	b.n	800a088 <xQueueGenericCreateStatic+0x58>
 800a086:	2300      	movs	r3, #0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	623b      	str	r3, [r7, #32]
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d102      	bne.n	800a0ae <xQueueGenericCreateStatic+0x7e>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <xQueueGenericCreateStatic+0x82>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e000      	b.n	800a0b4 <xQueueGenericCreateStatic+0x84>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	61fb      	str	r3, [r7, #28]
}
 800a0ca:	bf00      	nop
 800a0cc:	e7fe      	b.n	800a0cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0ce:	2348      	movs	r3, #72	; 0x48
 800a0d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b48      	cmp	r3, #72	; 0x48
 800a0d6:	d00a      	beq.n	800a0ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	61bb      	str	r3, [r7, #24]
}
 800a0ea:	bf00      	nop
 800a0ec:	e7fe      	b.n	800a0ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00d      	beq.n	800a116 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a102:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	4613      	mov	r3, r2
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f000 f83f 	bl	800a194 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a118:	4618      	mov	r0, r3
 800a11a:	3730      	adds	r7, #48	; 0x30
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08a      	sub	sp, #40	; 0x28
 800a124:	af02      	add	r7, sp, #8
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	4613      	mov	r3, r2
 800a12c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	613b      	str	r3, [r7, #16]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	fb02 f303 	mul.w	r3, r2, r3
 800a152:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	3348      	adds	r3, #72	; 0x48
 800a158:	4618      	mov	r0, r3
 800a15a:	f002 fbed 	bl	800c938 <pvPortMalloc>
 800a15e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d011      	beq.n	800a18a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	3348      	adds	r3, #72	; 0x48
 800a16e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a178:	79fa      	ldrb	r2, [r7, #7]
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	4613      	mov	r3, r2
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	68b9      	ldr	r1, [r7, #8]
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 f805 	bl	800a194 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a18a:	69bb      	ldr	r3, [r7, #24]
	}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3720      	adds	r7, #32
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d103      	bne.n	800a1b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	e002      	b.n	800a1b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	69b8      	ldr	r0, [r7, #24]
 800a1c6:	f7ff fecb 	bl	8009f60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1ca:	bf00      	nop
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b08e      	sub	sp, #56	; 0x38
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
 800a1e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <xQueueGenericSend+0x32>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d103      	bne.n	800a214 <xQueueGenericSend+0x40>
 800a20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <xQueueGenericSend+0x44>
 800a214:	2301      	movs	r3, #1
 800a216:	e000      	b.n	800a21a <xQueueGenericSend+0x46>
 800a218:	2300      	movs	r3, #0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10a      	bne.n	800a234 <xQueueGenericSend+0x60>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a230:	bf00      	nop
 800a232:	e7fe      	b.n	800a232 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2b02      	cmp	r3, #2
 800a238:	d103      	bne.n	800a242 <xQueueGenericSend+0x6e>
 800a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d101      	bne.n	800a246 <xQueueGenericSend+0x72>
 800a242:	2301      	movs	r3, #1
 800a244:	e000      	b.n	800a248 <xQueueGenericSend+0x74>
 800a246:	2300      	movs	r3, #0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10a      	bne.n	800a262 <xQueueGenericSend+0x8e>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	623b      	str	r3, [r7, #32]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a262:	f001 fc4b 	bl	800bafc <xTaskGetSchedulerState>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <xQueueGenericSend+0x9e>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <xQueueGenericSend+0xa2>
 800a272:	2301      	movs	r3, #1
 800a274:	e000      	b.n	800a278 <xQueueGenericSend+0xa4>
 800a276:	2300      	movs	r3, #0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <xQueueGenericSend+0xbe>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	61fb      	str	r3, [r7, #28]
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a292:	f002 fa2f 	bl	800c6f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d302      	bcc.n	800a2a8 <xQueueGenericSend+0xd4>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d129      	bne.n	800a2fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	68b9      	ldr	r1, [r7, #8]
 800a2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ae:	f000 faed 	bl	800a88c <prvCopyDataToQueue>
 800a2b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d010      	beq.n	800a2de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	3324      	adds	r3, #36	; 0x24
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f001 f9fb 	bl	800b6bc <xTaskRemoveFromEventList>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d013      	beq.n	800a2f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2cc:	4b3f      	ldr	r3, [pc, #252]	; (800a3cc <xQueueGenericSend+0x1f8>)
 800a2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	e00a      	b.n	800a2f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d007      	beq.n	800a2f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2e4:	4b39      	ldr	r3, [pc, #228]	; (800a3cc <xQueueGenericSend+0x1f8>)
 800a2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2f4:	f002 fa2e 	bl	800c754 <vPortExitCritical>
				return pdPASS;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e063      	b.n	800a3c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d103      	bne.n	800a30a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a302:	f002 fa27 	bl	800c754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a306:	2300      	movs	r3, #0
 800a308:	e05c      	b.n	800a3c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d106      	bne.n	800a31e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a310:	f107 0314 	add.w	r3, r7, #20
 800a314:	4618      	mov	r0, r3
 800a316:	f001 fa95 	bl	800b844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a31a:	2301      	movs	r3, #1
 800a31c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a31e:	f002 fa19 	bl	800c754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a322:	f000 ff71 	bl	800b208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a326:	f002 f9e5 	bl	800c6f4 <vPortEnterCritical>
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a330:	b25b      	sxtb	r3, r3
 800a332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a336:	d103      	bne.n	800a340 <xQueueGenericSend+0x16c>
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a346:	b25b      	sxtb	r3, r3
 800a348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34c:	d103      	bne.n	800a356 <xQueueGenericSend+0x182>
 800a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a356:	f002 f9fd 	bl	800c754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a35a:	1d3a      	adds	r2, r7, #4
 800a35c:	f107 0314 	add.w	r3, r7, #20
 800a360:	4611      	mov	r1, r2
 800a362:	4618      	mov	r0, r3
 800a364:	f001 fa84 	bl	800b870 <xTaskCheckForTimeOut>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d124      	bne.n	800a3b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a36e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a370:	f000 fb84 	bl	800aa7c <prvIsQueueFull>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d018      	beq.n	800a3ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	3310      	adds	r3, #16
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	4611      	mov	r1, r2
 800a382:	4618      	mov	r0, r3
 800a384:	f001 f90e 	bl	800b5a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a38a:	f000 fb0f 	bl	800a9ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a38e:	f000 ff49 	bl	800b224 <xTaskResumeAll>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	f47f af7c 	bne.w	800a292 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a39a:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <xQueueGenericSend+0x1f8>)
 800a39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	e772      	b.n	800a292 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ae:	f000 fafd 	bl	800a9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3b2:	f000 ff37 	bl	800b224 <xTaskResumeAll>
 800a3b6:	e76c      	b.n	800a292 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ba:	f000 faf7 	bl	800a9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3be:	f000 ff31 	bl	800b224 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3738      	adds	r7, #56	; 0x38
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	e000ed04 	.word	0xe000ed04

0800a3d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b090      	sub	sp, #64	; 0x40
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3fa:	bf00      	nop
 800a3fc:	e7fe      	b.n	800a3fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d103      	bne.n	800a40c <xQueueGenericSendFromISR+0x3c>
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <xQueueGenericSendFromISR+0x40>
 800a40c:	2301      	movs	r3, #1
 800a40e:	e000      	b.n	800a412 <xQueueGenericSendFromISR+0x42>
 800a410:	2300      	movs	r3, #0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d103      	bne.n	800a43a <xQueueGenericSendFromISR+0x6a>
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a436:	2b01      	cmp	r3, #1
 800a438:	d101      	bne.n	800a43e <xQueueGenericSendFromISR+0x6e>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <xQueueGenericSendFromISR+0x70>
 800a43e:	2300      	movs	r3, #0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	623b      	str	r3, [r7, #32]
}
 800a456:	bf00      	nop
 800a458:	e7fe      	b.n	800a458 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a45a:	f002 fa2d 	bl	800c8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a45e:	f3ef 8211 	mrs	r2, BASEPRI
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	61fa      	str	r2, [r7, #28]
 800a474:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a476:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a478:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a482:	429a      	cmp	r2, r3
 800a484:	d302      	bcc.n	800a48c <xQueueGenericSendFromISR+0xbc>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d12f      	bne.n	800a4ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4a2:	f000 f9f3 	bl	800a88c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ae:	d112      	bne.n	800a4d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d016      	beq.n	800a4e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	3324      	adds	r3, #36	; 0x24
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f001 f8fd 	bl	800b6bc <xTaskRemoveFromEventList>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00e      	beq.n	800a4e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00b      	beq.n	800a4e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	e007      	b.n	800a4e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4da:	3301      	adds	r3, #1
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	b25a      	sxtb	r2, r3
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a4ea:	e001      	b.n	800a4f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3740      	adds	r7, #64	; 0x40
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08c      	sub	sp, #48	; 0x30
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a514:	2300      	movs	r3, #0
 800a516:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10a      	bne.n	800a538 <xQueueReceive+0x30>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	623b      	str	r3, [r7, #32]
}
 800a534:	bf00      	nop
 800a536:	e7fe      	b.n	800a536 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d103      	bne.n	800a546 <xQueueReceive+0x3e>
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <xQueueReceive+0x42>
 800a546:	2301      	movs	r3, #1
 800a548:	e000      	b.n	800a54c <xQueueReceive+0x44>
 800a54a:	2300      	movs	r3, #0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10a      	bne.n	800a566 <xQueueReceive+0x5e>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	61fb      	str	r3, [r7, #28]
}
 800a562:	bf00      	nop
 800a564:	e7fe      	b.n	800a564 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a566:	f001 fac9 	bl	800bafc <xTaskGetSchedulerState>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d102      	bne.n	800a576 <xQueueReceive+0x6e>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <xQueueReceive+0x72>
 800a576:	2301      	movs	r3, #1
 800a578:	e000      	b.n	800a57c <xQueueReceive+0x74>
 800a57a:	2300      	movs	r3, #0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <xQueueReceive+0x8e>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	61bb      	str	r3, [r7, #24]
}
 800a592:	bf00      	nop
 800a594:	e7fe      	b.n	800a594 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a596:	f002 f8ad 	bl	800c6f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d01f      	beq.n	800a5e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5a6:	68b9      	ldr	r1, [r7, #8]
 800a5a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5aa:	f000 f9d9 	bl	800a960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	1e5a      	subs	r2, r3, #1
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00f      	beq.n	800a5de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c0:	3310      	adds	r3, #16
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f001 f87a 	bl	800b6bc <xTaskRemoveFromEventList>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d007      	beq.n	800a5de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5ce:	4b3d      	ldr	r3, [pc, #244]	; (800a6c4 <xQueueReceive+0x1bc>)
 800a5d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d4:	601a      	str	r2, [r3, #0]
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5de:	f002 f8b9 	bl	800c754 <vPortExitCritical>
				return pdPASS;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e069      	b.n	800a6ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d103      	bne.n	800a5f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5ec:	f002 f8b2 	bl	800c754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e062      	b.n	800a6ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d106      	bne.n	800a608 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5fa:	f107 0310 	add.w	r3, r7, #16
 800a5fe:	4618      	mov	r0, r3
 800a600:	f001 f920 	bl	800b844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a604:	2301      	movs	r3, #1
 800a606:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a608:	f002 f8a4 	bl	800c754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a60c:	f000 fdfc 	bl	800b208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a610:	f002 f870 	bl	800c6f4 <vPortEnterCritical>
 800a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a61a:	b25b      	sxtb	r3, r3
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a620:	d103      	bne.n	800a62a <xQueueReceive+0x122>
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a630:	b25b      	sxtb	r3, r3
 800a632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a636:	d103      	bne.n	800a640 <xQueueReceive+0x138>
 800a638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a640:	f002 f888 	bl	800c754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a644:	1d3a      	adds	r2, r7, #4
 800a646:	f107 0310 	add.w	r3, r7, #16
 800a64a:	4611      	mov	r1, r2
 800a64c:	4618      	mov	r0, r3
 800a64e:	f001 f90f 	bl	800b870 <xTaskCheckForTimeOut>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d123      	bne.n	800a6a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a65a:	f000 f9f9 	bl	800aa50 <prvIsQueueEmpty>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d017      	beq.n	800a694 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	3324      	adds	r3, #36	; 0x24
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	4611      	mov	r1, r2
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 ff99 	bl	800b5a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a674:	f000 f99a 	bl	800a9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a678:	f000 fdd4 	bl	800b224 <xTaskResumeAll>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d189      	bne.n	800a596 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a682:	4b10      	ldr	r3, [pc, #64]	; (800a6c4 <xQueueReceive+0x1bc>)
 800a684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	e780      	b.n	800a596 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a696:	f000 f989 	bl	800a9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a69a:	f000 fdc3 	bl	800b224 <xTaskResumeAll>
 800a69e:	e77a      	b.n	800a596 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a2:	f000 f983 	bl	800a9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6a6:	f000 fdbd 	bl	800b224 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ac:	f000 f9d0 	bl	800aa50 <prvIsQueueEmpty>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f43f af6f 	beq.w	800a596 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3730      	adds	r7, #48	; 0x30
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08e      	sub	sp, #56	; 0x38
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10a      	bne.n	800a6f8 <xQueuePeek+0x30>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d103      	bne.n	800a706 <xQueuePeek+0x3e>
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <xQueuePeek+0x42>
 800a706:	2301      	movs	r3, #1
 800a708:	e000      	b.n	800a70c <xQueuePeek+0x44>
 800a70a:	2300      	movs	r3, #0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <xQueuePeek+0x5e>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	623b      	str	r3, [r7, #32]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a726:	f001 f9e9 	bl	800bafc <xTaskGetSchedulerState>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <xQueuePeek+0x6e>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d101      	bne.n	800a73a <xQueuePeek+0x72>
 800a736:	2301      	movs	r3, #1
 800a738:	e000      	b.n	800a73c <xQueuePeek+0x74>
 800a73a:	2300      	movs	r3, #0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10a      	bne.n	800a756 <xQueuePeek+0x8e>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	61fb      	str	r3, [r7, #28]
}
 800a752:	bf00      	nop
 800a754:	e7fe      	b.n	800a754 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a756:	f001 ffcd 	bl	800c6f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a762:	2b00      	cmp	r3, #0
 800a764:	d021      	beq.n	800a7aa <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a770:	f000 f8f6 	bl	800a960 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a778:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00f      	beq.n	800a7a2 <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	3324      	adds	r3, #36	; 0x24
 800a786:	4618      	mov	r0, r3
 800a788:	f000 ff98 	bl	800b6bc <xTaskRemoveFromEventList>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 800a792:	4b3d      	ldr	r3, [pc, #244]	; (800a888 <xQueuePeek+0x1c0>)
 800a794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7a2:	f001 ffd7 	bl	800c754 <vPortExitCritical>
				return pdPASS;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e069      	b.n	800a87e <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d103      	bne.n	800a7b8 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7b0:	f001 ffd0 	bl	800c754 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	e062      	b.n	800a87e <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d106      	bne.n	800a7cc <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7be:	f107 0314 	add.w	r3, r7, #20
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f001 f83e 	bl	800b844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7cc:	f001 ffc2 	bl	800c754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7d0:	f000 fd1a 	bl	800b208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7d4:	f001 ff8e 	bl	800c6f4 <vPortEnterCritical>
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7de:	b25b      	sxtb	r3, r3
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e4:	d103      	bne.n	800a7ee <xQueuePeek+0x126>
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7f4:	b25b      	sxtb	r3, r3
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d103      	bne.n	800a804 <xQueuePeek+0x13c>
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a804:	f001 ffa6 	bl	800c754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a808:	1d3a      	adds	r2, r7, #4
 800a80a:	f107 0314 	add.w	r3, r7, #20
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f001 f82d 	bl	800b870 <xTaskCheckForTimeOut>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d123      	bne.n	800a864 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a81c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a81e:	f000 f917 	bl	800aa50 <prvIsQueueEmpty>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d017      	beq.n	800a858 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82a:	3324      	adds	r3, #36	; 0x24
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	4611      	mov	r1, r2
 800a830:	4618      	mov	r0, r3
 800a832:	f000 feb7 	bl	800b5a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a838:	f000 f8b8 	bl	800a9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a83c:	f000 fcf2 	bl	800b224 <xTaskResumeAll>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d187      	bne.n	800a756 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 800a846:	4b10      	ldr	r3, [pc, #64]	; (800a888 <xQueuePeek+0x1c0>)
 800a848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	e77e      	b.n	800a756 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800a858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a85a:	f000 f8a7 	bl	800a9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a85e:	f000 fce1 	bl	800b224 <xTaskResumeAll>
 800a862:	e778      	b.n	800a756 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800a864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a866:	f000 f8a1 	bl	800a9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a86a:	f000 fcdb 	bl	800b224 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a86e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a870:	f000 f8ee 	bl	800aa50 <prvIsQueueEmpty>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	f43f af6d 	beq.w	800a756 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a87c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3738      	adds	r7, #56	; 0x38
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a898:	2300      	movs	r3, #0
 800a89a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10d      	bne.n	800a8c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d14d      	bne.n	800a94e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f001 f93e 	bl	800bb38 <xTaskPriorityDisinherit>
 800a8bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	609a      	str	r2, [r3, #8]
 800a8c4:	e043      	b.n	800a94e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d119      	bne.n	800a900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6858      	ldr	r0, [r3, #4]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	68b9      	ldr	r1, [r7, #8]
 800a8d8:	f002 fa42 	bl	800cd60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e4:	441a      	add	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d32b      	bcc.n	800a94e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	605a      	str	r2, [r3, #4]
 800a8fe:	e026      	b.n	800a94e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	68d8      	ldr	r0, [r3, #12]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a908:	461a      	mov	r2, r3
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	f002 fa28 	bl	800cd60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	68da      	ldr	r2, [r3, #12]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a918:	425b      	negs	r3, r3
 800a91a:	441a      	add	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	68da      	ldr	r2, [r3, #12]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d207      	bcs.n	800a93c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	689a      	ldr	r2, [r3, #8]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a934:	425b      	negs	r3, r3
 800a936:	441a      	add	r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d105      	bne.n	800a94e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a956:	697b      	ldr	r3, [r7, #20]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d018      	beq.n	800a9a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68da      	ldr	r2, [r3, #12]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97a:	441a      	add	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d303      	bcc.n	800a994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68d9      	ldr	r1, [r3, #12]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99c:	461a      	mov	r2, r3
 800a99e:	6838      	ldr	r0, [r7, #0]
 800a9a0:	f002 f9de 	bl	800cd60 <memcpy>
	}
}
 800a9a4:	bf00      	nop
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9b4:	f001 fe9e 	bl	800c6f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9c0:	e011      	b.n	800a9e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d012      	beq.n	800a9f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3324      	adds	r3, #36	; 0x24
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fe74 	bl	800b6bc <xTaskRemoveFromEventList>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d001      	beq.n	800a9de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9da:	f000 ffab 	bl	800b934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	dce9      	bgt.n	800a9c2 <prvUnlockQueue+0x16>
 800a9ee:	e000      	b.n	800a9f2 <prvUnlockQueue+0x46>
					break;
 800a9f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	22ff      	movs	r2, #255	; 0xff
 800a9f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a9fa:	f001 feab 	bl	800c754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9fe:	f001 fe79 	bl	800c6f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa0a:	e011      	b.n	800aa30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d012      	beq.n	800aa3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3310      	adds	r3, #16
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fe4f 	bl	800b6bc <xTaskRemoveFromEventList>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa24:	f000 ff86 	bl	800b934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dce9      	bgt.n	800aa0c <prvUnlockQueue+0x60>
 800aa38:	e000      	b.n	800aa3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	22ff      	movs	r2, #255	; 0xff
 800aa40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa44:	f001 fe86 	bl	800c754 <vPortExitCritical>
}
 800aa48:	bf00      	nop
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa58:	f001 fe4c 	bl	800c6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d102      	bne.n	800aa6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa64:	2301      	movs	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	e001      	b.n	800aa6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa6e:	f001 fe71 	bl	800c754 <vPortExitCritical>

	return xReturn;
 800aa72:	68fb      	ldr	r3, [r7, #12]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa84:	f001 fe36 	bl	800c6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d102      	bne.n	800aa9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa94:	2301      	movs	r3, #1
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	e001      	b.n	800aa9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa9e:	f001 fe59 	bl	800c754 <vPortExitCritical>

	return xReturn;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	e014      	b.n	800aae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aabc:	4a0f      	ldr	r2, [pc, #60]	; (800aafc <vQueueAddToRegistry+0x50>)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10b      	bne.n	800aae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aac8:	490c      	ldr	r1, [pc, #48]	; (800aafc <vQueueAddToRegistry+0x50>)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aad2:	4a0a      	ldr	r2, [pc, #40]	; (800aafc <vQueueAddToRegistry+0x50>)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	00db      	lsls	r3, r3, #3
 800aad8:	4413      	add	r3, r2
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aade:	e006      	b.n	800aaee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	3301      	adds	r3, #1
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b07      	cmp	r3, #7
 800aaea:	d9e7      	bls.n	800aabc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	20000950 	.word	0x20000950

0800ab00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab10:	f001 fdf0 	bl	800c6f4 <vPortEnterCritical>
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab1a:	b25b      	sxtb	r3, r3
 800ab1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab20:	d103      	bne.n	800ab2a <vQueueWaitForMessageRestricted+0x2a>
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab30:	b25b      	sxtb	r3, r3
 800ab32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab36:	d103      	bne.n	800ab40 <vQueueWaitForMessageRestricted+0x40>
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab40:	f001 fe08 	bl	800c754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d106      	bne.n	800ab5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	3324      	adds	r3, #36	; 0x24
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	68b9      	ldr	r1, [r7, #8]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 fd85 	bl	800b664 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab5a:	6978      	ldr	r0, [r7, #20]
 800ab5c:	f7ff ff26 	bl	800a9ac <prvUnlockQueue>
	}
 800ab60:	bf00      	nop
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08e      	sub	sp, #56	; 0x38
 800ab6c:	af04      	add	r7, sp, #16
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
 800ab74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10a      	bne.n	800ab92 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	623b      	str	r3, [r7, #32]
}
 800ab8e:	bf00      	nop
 800ab90:	e7fe      	b.n	800ab90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <xTaskCreateStatic+0x46>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	61fb      	str	r3, [r7, #28]
}
 800abaa:	bf00      	nop
 800abac:	e7fe      	b.n	800abac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abae:	235c      	movs	r3, #92	; 0x5c
 800abb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2b5c      	cmp	r3, #92	; 0x5c
 800abb6:	d00a      	beq.n	800abce <xTaskCreateStatic+0x66>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	61bb      	str	r3, [r7, #24]
}
 800abca:	bf00      	nop
 800abcc:	e7fe      	b.n	800abcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d01e      	beq.n	800ac14 <xTaskCreateStatic+0xac>
 800abd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d01b      	beq.n	800ac14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abe4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe8:	2202      	movs	r2, #2
 800abea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abee:	2300      	movs	r3, #0
 800abf0:	9303      	str	r3, [sp, #12]
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	9302      	str	r3, [sp, #8]
 800abf6:	f107 0314 	add.w	r3, r7, #20
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	68b9      	ldr	r1, [r7, #8]
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f000 f850 	bl	800acac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac0e:	f000 f8d5 	bl	800adbc <prvAddNewTaskToReadyList>
 800ac12:	e001      	b.n	800ac18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac14:	2300      	movs	r3, #0
 800ac16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac18:	697b      	ldr	r3, [r7, #20]
	}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3728      	adds	r7, #40	; 0x28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b08c      	sub	sp, #48	; 0x30
 800ac26:	af04      	add	r7, sp, #16
 800ac28:	60f8      	str	r0, [r7, #12]
 800ac2a:	60b9      	str	r1, [r7, #8]
 800ac2c:	603b      	str	r3, [r7, #0]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4618      	mov	r0, r3
 800ac38:	f001 fe7e 	bl	800c938 <pvPortMalloc>
 800ac3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00e      	beq.n	800ac62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac44:	205c      	movs	r0, #92	; 0x5c
 800ac46:	f001 fe77 	bl	800c938 <pvPortMalloc>
 800ac4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	631a      	str	r2, [r3, #48]	; 0x30
 800ac58:	e005      	b.n	800ac66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac5a:	6978      	ldr	r0, [r7, #20]
 800ac5c:	f001 ff38 	bl	800cad0 <vPortFree>
 800ac60:	e001      	b.n	800ac66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d017      	beq.n	800ac9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac74:	88fa      	ldrh	r2, [r7, #6]
 800ac76:	2300      	movs	r3, #0
 800ac78:	9303      	str	r3, [sp, #12]
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	9302      	str	r3, [sp, #8]
 800ac7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	68b9      	ldr	r1, [r7, #8]
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f000 f80e 	bl	800acac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac90:	69f8      	ldr	r0, [r7, #28]
 800ac92:	f000 f893 	bl	800adbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac96:	2301      	movs	r3, #1
 800ac98:	61bb      	str	r3, [r7, #24]
 800ac9a:	e002      	b.n	800aca2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aca0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aca2:	69bb      	ldr	r3, [r7, #24]
	}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3720      	adds	r7, #32
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b088      	sub	sp, #32
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800acc4:	3b01      	subs	r3, #1
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	f023 0307 	bic.w	r3, r3, #7
 800acd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00a      	beq.n	800acf4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	617b      	str	r3, [r7, #20]
}
 800acf0:	bf00      	nop
 800acf2:	e7fe      	b.n	800acf2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d01f      	beq.n	800ad3a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acfa:	2300      	movs	r3, #0
 800acfc:	61fb      	str	r3, [r7, #28]
 800acfe:	e012      	b.n	800ad26 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	4413      	add	r3, r2
 800ad06:	7819      	ldrb	r1, [r3, #0]
 800ad08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	3334      	adds	r3, #52	; 0x34
 800ad10:	460a      	mov	r2, r1
 800ad12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	4413      	add	r3, r2
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d006      	beq.n	800ad2e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	3301      	adds	r3, #1
 800ad24:	61fb      	str	r3, [r7, #28]
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	2b17      	cmp	r3, #23
 800ad2a:	d9e9      	bls.n	800ad00 <prvInitialiseNewTask+0x54>
 800ad2c:	e000      	b.n	800ad30 <prvInitialiseNewTask+0x84>
			{
				break;
 800ad2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800ad38:	e003      	b.n	800ad42 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	2b06      	cmp	r3, #6
 800ad46:	d901      	bls.n	800ad4c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad48:	2306      	movs	r3, #6
 800ad4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	3304      	adds	r3, #4
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff f867 	bl	8009e36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	3318      	adds	r3, #24
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7ff f862 	bl	8009e36 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7a:	f1c3 0207 	rsb	r2, r3, #7
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	2200      	movs	r2, #0
 800ad92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	68f9      	ldr	r1, [r7, #12]
 800ad9a:	69b8      	ldr	r0, [r7, #24]
 800ad9c:	f001 fb7a 	bl	800c494 <pxPortInitialiseStack>
 800ada0:	4602      	mov	r2, r0
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adb2:	bf00      	nop
 800adb4:	3720      	adds	r7, #32
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800adc4:	f001 fc96 	bl	800c6f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800adc8:	4b2a      	ldr	r3, [pc, #168]	; (800ae74 <prvAddNewTaskToReadyList+0xb8>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3301      	adds	r3, #1
 800adce:	4a29      	ldr	r2, [pc, #164]	; (800ae74 <prvAddNewTaskToReadyList+0xb8>)
 800add0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800add2:	4b29      	ldr	r3, [pc, #164]	; (800ae78 <prvAddNewTaskToReadyList+0xbc>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d109      	bne.n	800adee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adda:	4a27      	ldr	r2, [pc, #156]	; (800ae78 <prvAddNewTaskToReadyList+0xbc>)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ade0:	4b24      	ldr	r3, [pc, #144]	; (800ae74 <prvAddNewTaskToReadyList+0xb8>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d110      	bne.n	800ae0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ade8:	f000 fdca 	bl	800b980 <prvInitialiseTaskLists>
 800adec:	e00d      	b.n	800ae0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800adee:	4b23      	ldr	r3, [pc, #140]	; (800ae7c <prvAddNewTaskToReadyList+0xc0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adf6:	4b20      	ldr	r3, [pc, #128]	; (800ae78 <prvAddNewTaskToReadyList+0xbc>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d802      	bhi.n	800ae0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae04:	4a1c      	ldr	r2, [pc, #112]	; (800ae78 <prvAddNewTaskToReadyList+0xbc>)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae0a:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <prvAddNewTaskToReadyList+0xc4>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	4a1b      	ldr	r2, [pc, #108]	; (800ae80 <prvAddNewTaskToReadyList+0xc4>)
 800ae12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	2201      	movs	r2, #1
 800ae1a:	409a      	lsls	r2, r3
 800ae1c:	4b19      	ldr	r3, [pc, #100]	; (800ae84 <prvAddNewTaskToReadyList+0xc8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	4a18      	ldr	r2, [pc, #96]	; (800ae84 <prvAddNewTaskToReadyList+0xc8>)
 800ae24:	6013      	str	r3, [r2, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <prvAddNewTaskToReadyList+0xcc>)
 800ae34:	441a      	add	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	f7ff f807 	bl	8009e50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae42:	f001 fc87 	bl	800c754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae46:	4b0d      	ldr	r3, [pc, #52]	; (800ae7c <prvAddNewTaskToReadyList+0xc0>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00e      	beq.n	800ae6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae4e:	4b0a      	ldr	r3, [pc, #40]	; (800ae78 <prvAddNewTaskToReadyList+0xbc>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d207      	bcs.n	800ae6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae5c:	4b0b      	ldr	r3, [pc, #44]	; (800ae8c <prvAddNewTaskToReadyList+0xd0>)
 800ae5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20000a90 	.word	0x20000a90
 800ae78:	20000990 	.word	0x20000990
 800ae7c:	20000a9c 	.word	0x20000a9c
 800ae80:	20000aac 	.word	0x20000aac
 800ae84:	20000a98 	.word	0x20000a98
 800ae88:	20000994 	.word	0x20000994
 800ae8c:	e000ed04 	.word	0xe000ed04

0800ae90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d017      	beq.n	800aed2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aea2:	4b13      	ldr	r3, [pc, #76]	; (800aef0 <vTaskDelay+0x60>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <vTaskDelay+0x30>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	60bb      	str	r3, [r7, #8]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aec0:	f000 f9a2 	bl	800b208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aec4:	2100      	movs	r1, #0
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fed4 	bl	800bc74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aecc:	f000 f9aa 	bl	800b224 <xTaskResumeAll>
 800aed0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d107      	bne.n	800aee8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aed8:	4b06      	ldr	r3, [pc, #24]	; (800aef4 <vTaskDelay+0x64>)
 800aeda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aede:	601a      	str	r2, [r3, #0]
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aee8:	bf00      	nop
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	20000ab8 	.word	0x20000ab8
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800af00:	f001 fbf8 	bl	800c6f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d102      	bne.n	800af10 <vTaskSuspend+0x18>
 800af0a:	4b3c      	ldr	r3, [pc, #240]	; (800affc <vTaskSuspend+0x104>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	e000      	b.n	800af12 <vTaskSuspend+0x1a>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3304      	adds	r3, #4
 800af18:	4618      	mov	r0, r3
 800af1a:	f7fe fff6 	bl	8009f0a <uxListRemove>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d115      	bne.n	800af50 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af28:	4935      	ldr	r1, [pc, #212]	; (800b000 <vTaskSuspend+0x108>)
 800af2a:	4613      	mov	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	440b      	add	r3, r1
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10a      	bne.n	800af50 <vTaskSuspend+0x58>
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3e:	2201      	movs	r2, #1
 800af40:	fa02 f303 	lsl.w	r3, r2, r3
 800af44:	43da      	mvns	r2, r3
 800af46:	4b2f      	ldr	r3, [pc, #188]	; (800b004 <vTaskSuspend+0x10c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4013      	ands	r3, r2
 800af4c:	4a2d      	ldr	r2, [pc, #180]	; (800b004 <vTaskSuspend+0x10c>)
 800af4e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af54:	2b00      	cmp	r3, #0
 800af56:	d004      	beq.n	800af62 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	3318      	adds	r3, #24
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fe ffd4 	bl	8009f0a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3304      	adds	r3, #4
 800af66:	4619      	mov	r1, r3
 800af68:	4827      	ldr	r0, [pc, #156]	; (800b008 <vTaskSuspend+0x110>)
 800af6a:	f7fe ff71 	bl	8009e50 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b01      	cmp	r3, #1
 800af78:	d103      	bne.n	800af82 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800af82:	f001 fbe7 	bl	800c754 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800af86:	4b21      	ldr	r3, [pc, #132]	; (800b00c <vTaskSuspend+0x114>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d005      	beq.n	800af9a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800af8e:	f001 fbb1 	bl	800c6f4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800af92:	f000 fd93 	bl	800babc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800af96:	f001 fbdd 	bl	800c754 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800af9a:	4b18      	ldr	r3, [pc, #96]	; (800affc <vTaskSuspend+0x104>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d127      	bne.n	800aff4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800afa4:	4b19      	ldr	r3, [pc, #100]	; (800b00c <vTaskSuspend+0x114>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d017      	beq.n	800afdc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800afac:	4b18      	ldr	r3, [pc, #96]	; (800b010 <vTaskSuspend+0x118>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00a      	beq.n	800afca <vTaskSuspend+0xd2>
	__asm volatile
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	60bb      	str	r3, [r7, #8]
}
 800afc6:	bf00      	nop
 800afc8:	e7fe      	b.n	800afc8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800afca:	4b12      	ldr	r3, [pc, #72]	; (800b014 <vTaskSuspend+0x11c>)
 800afcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afda:	e00b      	b.n	800aff4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800afdc:	4b0a      	ldr	r3, [pc, #40]	; (800b008 <vTaskSuspend+0x110>)
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	4b0d      	ldr	r3, [pc, #52]	; (800b018 <vTaskSuspend+0x120>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d103      	bne.n	800aff0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800afe8:	4b04      	ldr	r3, [pc, #16]	; (800affc <vTaskSuspend+0x104>)
 800afea:	2200      	movs	r2, #0
 800afec:	601a      	str	r2, [r3, #0]
	}
 800afee:	e001      	b.n	800aff4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800aff0:	f000 fa7c 	bl	800b4ec <vTaskSwitchContext>
	}
 800aff4:	bf00      	nop
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000990 	.word	0x20000990
 800b000:	20000994 	.word	0x20000994
 800b004:	20000a98 	.word	0x20000a98
 800b008:	20000a7c 	.word	0x20000a7c
 800b00c:	20000a9c 	.word	0x20000a9c
 800b010:	20000ab8 	.word	0x20000ab8
 800b014:	e000ed04 	.word	0xe000ed04
 800b018:	20000a90 	.word	0x20000a90

0800b01c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b024:	2300      	movs	r3, #0
 800b026:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10a      	bne.n	800b048 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	60fb      	str	r3, [r7, #12]
}
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	695b      	ldr	r3, [r3, #20]
 800b04c:	4a0a      	ldr	r2, [pc, #40]	; (800b078 <prvTaskIsTaskSuspended+0x5c>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d10a      	bne.n	800b068 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b056:	4a09      	ldr	r2, [pc, #36]	; (800b07c <prvTaskIsTaskSuspended+0x60>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d005      	beq.n	800b068 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b064:	2301      	movs	r3, #1
 800b066:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b068:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b06a:	4618      	mov	r0, r3
 800b06c:	371c      	adds	r7, #28
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	20000a7c 	.word	0x20000a7c
 800b07c:	20000a50 	.word	0x20000a50

0800b080 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10a      	bne.n	800b0a8 <vTaskResume+0x28>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	60bb      	str	r3, [r7, #8]
}
 800b0a4:	bf00      	nop
 800b0a6:	e7fe      	b.n	800b0a6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b0a8:	4b20      	ldr	r3, [pc, #128]	; (800b12c <vTaskResume+0xac>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d037      	beq.n	800b122 <vTaskResume+0xa2>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d034      	beq.n	800b122 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800b0b8:	f001 fb1c 	bl	800c6f4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7ff ffad 	bl	800b01c <prvTaskIsTaskSuspended>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d02a      	beq.n	800b11e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fe ff1c 	bl	8009f0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	409a      	lsls	r2, r3
 800b0da:	4b15      	ldr	r3, [pc, #84]	; (800b130 <vTaskResume+0xb0>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	4a13      	ldr	r2, [pc, #76]	; (800b130 <vTaskResume+0xb0>)
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4a10      	ldr	r2, [pc, #64]	; (800b134 <vTaskResume+0xb4>)
 800b0f2:	441a      	add	r2, r3
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f7fe fea8 	bl	8009e50 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b104:	4b09      	ldr	r3, [pc, #36]	; (800b12c <vTaskResume+0xac>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d307      	bcc.n	800b11e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b10e:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <vTaskResume+0xb8>)
 800b110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b114:	601a      	str	r2, [r3, #0]
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b11e:	f001 fb19 	bl	800c754 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	20000990 	.word	0x20000990
 800b130:	20000a98 	.word	0x20000a98
 800b134:	20000994 	.word	0x20000994
 800b138:	e000ed04 	.word	0xe000ed04

0800b13c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b08a      	sub	sp, #40	; 0x28
 800b140:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b142:	2300      	movs	r3, #0
 800b144:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b14a:	463a      	mov	r2, r7
 800b14c:	1d39      	adds	r1, r7, #4
 800b14e:	f107 0308 	add.w	r3, r7, #8
 800b152:	4618      	mov	r0, r3
 800b154:	f7f5 fed2 	bl	8000efc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	9202      	str	r2, [sp, #8]
 800b160:	9301      	str	r3, [sp, #4]
 800b162:	2300      	movs	r3, #0
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	2300      	movs	r3, #0
 800b168:	460a      	mov	r2, r1
 800b16a:	4921      	ldr	r1, [pc, #132]	; (800b1f0 <vTaskStartScheduler+0xb4>)
 800b16c:	4821      	ldr	r0, [pc, #132]	; (800b1f4 <vTaskStartScheduler+0xb8>)
 800b16e:	f7ff fcfb 	bl	800ab68 <xTaskCreateStatic>
 800b172:	4603      	mov	r3, r0
 800b174:	4a20      	ldr	r2, [pc, #128]	; (800b1f8 <vTaskStartScheduler+0xbc>)
 800b176:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b178:	4b1f      	ldr	r3, [pc, #124]	; (800b1f8 <vTaskStartScheduler+0xbc>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b180:	2301      	movs	r3, #1
 800b182:	617b      	str	r3, [r7, #20]
 800b184:	e001      	b.n	800b18a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b186:	2300      	movs	r3, #0
 800b188:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d102      	bne.n	800b196 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b190:	f000 fdd6 	bl	800bd40 <xTimerCreateTimerTask>
 800b194:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d116      	bne.n	800b1ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	613b      	str	r3, [r7, #16]
}
 800b1ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1b0:	4b12      	ldr	r3, [pc, #72]	; (800b1fc <vTaskStartScheduler+0xc0>)
 800b1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1b8:	4b11      	ldr	r3, [pc, #68]	; (800b200 <vTaskStartScheduler+0xc4>)
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1be:	4b11      	ldr	r3, [pc, #68]	; (800b204 <vTaskStartScheduler+0xc8>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1c4:	f001 f9f4 	bl	800c5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1c8:	e00e      	b.n	800b1e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d0:	d10a      	bne.n	800b1e8 <vTaskStartScheduler+0xac>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	60fb      	str	r3, [r7, #12]
}
 800b1e4:	bf00      	nop
 800b1e6:	e7fe      	b.n	800b1e6 <vTaskStartScheduler+0xaa>
}
 800b1e8:	bf00      	nop
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	0800effc 	.word	0x0800effc
 800b1f4:	0800b94d 	.word	0x0800b94d
 800b1f8:	20000ab4 	.word	0x20000ab4
 800b1fc:	20000ab0 	.word	0x20000ab0
 800b200:	20000a9c 	.word	0x20000a9c
 800b204:	20000a94 	.word	0x20000a94

0800b208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b208:	b480      	push	{r7}
 800b20a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b20c:	4b04      	ldr	r3, [pc, #16]	; (800b220 <vTaskSuspendAll+0x18>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3301      	adds	r3, #1
 800b212:	4a03      	ldr	r2, [pc, #12]	; (800b220 <vTaskSuspendAll+0x18>)
 800b214:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b216:	bf00      	nop
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	20000ab8 	.word	0x20000ab8

0800b224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b22e:	2300      	movs	r3, #0
 800b230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b232:	4b41      	ldr	r3, [pc, #260]	; (800b338 <xTaskResumeAll+0x114>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10a      	bne.n	800b250 <xTaskResumeAll+0x2c>
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	603b      	str	r3, [r7, #0]
}
 800b24c:	bf00      	nop
 800b24e:	e7fe      	b.n	800b24e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b250:	f001 fa50 	bl	800c6f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b254:	4b38      	ldr	r3, [pc, #224]	; (800b338 <xTaskResumeAll+0x114>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3b01      	subs	r3, #1
 800b25a:	4a37      	ldr	r2, [pc, #220]	; (800b338 <xTaskResumeAll+0x114>)
 800b25c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b25e:	4b36      	ldr	r3, [pc, #216]	; (800b338 <xTaskResumeAll+0x114>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d161      	bne.n	800b32a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b266:	4b35      	ldr	r3, [pc, #212]	; (800b33c <xTaskResumeAll+0x118>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d05d      	beq.n	800b32a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b26e:	e02e      	b.n	800b2ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b270:	4b33      	ldr	r3, [pc, #204]	; (800b340 <xTaskResumeAll+0x11c>)
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	3318      	adds	r3, #24
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe fe44 	bl	8009f0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3304      	adds	r3, #4
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe fe3f 	bl	8009f0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b290:	2201      	movs	r2, #1
 800b292:	409a      	lsls	r2, r3
 800b294:	4b2b      	ldr	r3, [pc, #172]	; (800b344 <xTaskResumeAll+0x120>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4313      	orrs	r3, r2
 800b29a:	4a2a      	ldr	r2, [pc, #168]	; (800b344 <xTaskResumeAll+0x120>)
 800b29c:	6013      	str	r3, [r2, #0]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4a27      	ldr	r2, [pc, #156]	; (800b348 <xTaskResumeAll+0x124>)
 800b2ac:	441a      	add	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	f7fe fdcb 	bl	8009e50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2be:	4b23      	ldr	r3, [pc, #140]	; (800b34c <xTaskResumeAll+0x128>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d302      	bcc.n	800b2ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b2c8:	4b21      	ldr	r3, [pc, #132]	; (800b350 <xTaskResumeAll+0x12c>)
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2ce:	4b1c      	ldr	r3, [pc, #112]	; (800b340 <xTaskResumeAll+0x11c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1cc      	bne.n	800b270 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2dc:	f000 fbee 	bl	800babc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2e0:	4b1c      	ldr	r3, [pc, #112]	; (800b354 <xTaskResumeAll+0x130>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d010      	beq.n	800b30e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2ec:	f000 f846 	bl	800b37c <xTaskIncrementTick>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d002      	beq.n	800b2fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b2f6:	4b16      	ldr	r3, [pc, #88]	; (800b350 <xTaskResumeAll+0x12c>)
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1f1      	bne.n	800b2ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b308:	4b12      	ldr	r3, [pc, #72]	; (800b354 <xTaskResumeAll+0x130>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b30e:	4b10      	ldr	r3, [pc, #64]	; (800b350 <xTaskResumeAll+0x12c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b316:	2301      	movs	r3, #1
 800b318:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b31a:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <xTaskResumeAll+0x134>)
 800b31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b32a:	f001 fa13 	bl	800c754 <vPortExitCritical>

	return xAlreadyYielded;
 800b32e:	68bb      	ldr	r3, [r7, #8]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	20000ab8 	.word	0x20000ab8
 800b33c:	20000a90 	.word	0x20000a90
 800b340:	20000a50 	.word	0x20000a50
 800b344:	20000a98 	.word	0x20000a98
 800b348:	20000994 	.word	0x20000994
 800b34c:	20000990 	.word	0x20000990
 800b350:	20000aa4 	.word	0x20000aa4
 800b354:	20000aa0 	.word	0x20000aa0
 800b358:	e000ed04 	.word	0xe000ed04

0800b35c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b362:	4b05      	ldr	r3, [pc, #20]	; (800b378 <xTaskGetTickCount+0x1c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b368:	687b      	ldr	r3, [r7, #4]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	20000a94 	.word	0x20000a94

0800b37c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b382:	2300      	movs	r3, #0
 800b384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b386:	4b4e      	ldr	r3, [pc, #312]	; (800b4c0 <xTaskIncrementTick+0x144>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f040 808e 	bne.w	800b4ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b390:	4b4c      	ldr	r3, [pc, #304]	; (800b4c4 <xTaskIncrementTick+0x148>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3301      	adds	r3, #1
 800b396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b398:	4a4a      	ldr	r2, [pc, #296]	; (800b4c4 <xTaskIncrementTick+0x148>)
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d120      	bne.n	800b3e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3a4:	4b48      	ldr	r3, [pc, #288]	; (800b4c8 <xTaskIncrementTick+0x14c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00a      	beq.n	800b3c4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	603b      	str	r3, [r7, #0]
}
 800b3c0:	bf00      	nop
 800b3c2:	e7fe      	b.n	800b3c2 <xTaskIncrementTick+0x46>
 800b3c4:	4b40      	ldr	r3, [pc, #256]	; (800b4c8 <xTaskIncrementTick+0x14c>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60fb      	str	r3, [r7, #12]
 800b3ca:	4b40      	ldr	r3, [pc, #256]	; (800b4cc <xTaskIncrementTick+0x150>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a3e      	ldr	r2, [pc, #248]	; (800b4c8 <xTaskIncrementTick+0x14c>)
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	4a3e      	ldr	r2, [pc, #248]	; (800b4cc <xTaskIncrementTick+0x150>)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	4b3d      	ldr	r3, [pc, #244]	; (800b4d0 <xTaskIncrementTick+0x154>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	4a3c      	ldr	r2, [pc, #240]	; (800b4d0 <xTaskIncrementTick+0x154>)
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	f000 fb6b 	bl	800babc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3e6:	4b3b      	ldr	r3, [pc, #236]	; (800b4d4 <xTaskIncrementTick+0x158>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d348      	bcc.n	800b482 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3f0:	4b35      	ldr	r3, [pc, #212]	; (800b4c8 <xTaskIncrementTick+0x14c>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d104      	bne.n	800b404 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3fa:	4b36      	ldr	r3, [pc, #216]	; (800b4d4 <xTaskIncrementTick+0x158>)
 800b3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b400:	601a      	str	r2, [r3, #0]
					break;
 800b402:	e03e      	b.n	800b482 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b404:	4b30      	ldr	r3, [pc, #192]	; (800b4c8 <xTaskIncrementTick+0x14c>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d203      	bcs.n	800b424 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b41c:	4a2d      	ldr	r2, [pc, #180]	; (800b4d4 <xTaskIncrementTick+0x158>)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b422:	e02e      	b.n	800b482 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	3304      	adds	r3, #4
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe fd6e 	bl	8009f0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b432:	2b00      	cmp	r3, #0
 800b434:	d004      	beq.n	800b440 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	3318      	adds	r3, #24
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe fd65 	bl	8009f0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b444:	2201      	movs	r2, #1
 800b446:	409a      	lsls	r2, r3
 800b448:	4b23      	ldr	r3, [pc, #140]	; (800b4d8 <xTaskIncrementTick+0x15c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	4a22      	ldr	r2, [pc, #136]	; (800b4d8 <xTaskIncrementTick+0x15c>)
 800b450:	6013      	str	r3, [r2, #0]
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b456:	4613      	mov	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4413      	add	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4a1f      	ldr	r2, [pc, #124]	; (800b4dc <xTaskIncrementTick+0x160>)
 800b460:	441a      	add	r2, r3
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	3304      	adds	r3, #4
 800b466:	4619      	mov	r1, r3
 800b468:	4610      	mov	r0, r2
 800b46a:	f7fe fcf1 	bl	8009e50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b472:	4b1b      	ldr	r3, [pc, #108]	; (800b4e0 <xTaskIncrementTick+0x164>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	429a      	cmp	r2, r3
 800b47a:	d3b9      	bcc.n	800b3f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b47c:	2301      	movs	r3, #1
 800b47e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b480:	e7b6      	b.n	800b3f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b482:	4b17      	ldr	r3, [pc, #92]	; (800b4e0 <xTaskIncrementTick+0x164>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b488:	4914      	ldr	r1, [pc, #80]	; (800b4dc <xTaskIncrementTick+0x160>)
 800b48a:	4613      	mov	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4413      	add	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	440b      	add	r3, r1
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d901      	bls.n	800b49e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b49a:	2301      	movs	r3, #1
 800b49c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b49e:	4b11      	ldr	r3, [pc, #68]	; (800b4e4 <xTaskIncrementTick+0x168>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d007      	beq.n	800b4b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	617b      	str	r3, [r7, #20]
 800b4aa:	e004      	b.n	800b4b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4ac:	4b0e      	ldr	r3, [pc, #56]	; (800b4e8 <xTaskIncrementTick+0x16c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	4a0d      	ldr	r2, [pc, #52]	; (800b4e8 <xTaskIncrementTick+0x16c>)
 800b4b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4b6:	697b      	ldr	r3, [r7, #20]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	20000ab8 	.word	0x20000ab8
 800b4c4:	20000a94 	.word	0x20000a94
 800b4c8:	20000a48 	.word	0x20000a48
 800b4cc:	20000a4c 	.word	0x20000a4c
 800b4d0:	20000aa8 	.word	0x20000aa8
 800b4d4:	20000ab0 	.word	0x20000ab0
 800b4d8:	20000a98 	.word	0x20000a98
 800b4dc:	20000994 	.word	0x20000994
 800b4e0:	20000990 	.word	0x20000990
 800b4e4:	20000aa4 	.word	0x20000aa4
 800b4e8:	20000aa0 	.word	0x20000aa0

0800b4ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4f2:	4b27      	ldr	r3, [pc, #156]	; (800b590 <vTaskSwitchContext+0xa4>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d003      	beq.n	800b502 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4fa:	4b26      	ldr	r3, [pc, #152]	; (800b594 <vTaskSwitchContext+0xa8>)
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b500:	e03f      	b.n	800b582 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b502:	4b24      	ldr	r3, [pc, #144]	; (800b594 <vTaskSwitchContext+0xa8>)
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b508:	4b23      	ldr	r3, [pc, #140]	; (800b598 <vTaskSwitchContext+0xac>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	fab3 f383 	clz	r3, r3
 800b514:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b516:	7afb      	ldrb	r3, [r7, #11]
 800b518:	f1c3 031f 	rsb	r3, r3, #31
 800b51c:	617b      	str	r3, [r7, #20]
 800b51e:	491f      	ldr	r1, [pc, #124]	; (800b59c <vTaskSwitchContext+0xb0>)
 800b520:	697a      	ldr	r2, [r7, #20]
 800b522:	4613      	mov	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	440b      	add	r3, r1
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10a      	bne.n	800b548 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	607b      	str	r3, [r7, #4]
}
 800b544:	bf00      	nop
 800b546:	e7fe      	b.n	800b546 <vTaskSwitchContext+0x5a>
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4a12      	ldr	r2, [pc, #72]	; (800b59c <vTaskSwitchContext+0xb0>)
 800b554:	4413      	add	r3, r2
 800b556:	613b      	str	r3, [r7, #16]
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	685a      	ldr	r2, [r3, #4]
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	605a      	str	r2, [r3, #4]
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	3308      	adds	r3, #8
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d104      	bne.n	800b578 <vTaskSwitchContext+0x8c>
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	605a      	str	r2, [r3, #4]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	4a08      	ldr	r2, [pc, #32]	; (800b5a0 <vTaskSwitchContext+0xb4>)
 800b580:	6013      	str	r3, [r2, #0]
}
 800b582:	bf00      	nop
 800b584:	371c      	adds	r7, #28
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	20000ab8 	.word	0x20000ab8
 800b594:	20000aa4 	.word	0x20000aa4
 800b598:	20000a98 	.word	0x20000a98
 800b59c:	20000994 	.word	0x20000994
 800b5a0:	20000990 	.word	0x20000990

0800b5a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10a      	bne.n	800b5ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	60fb      	str	r3, [r7, #12]
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5ca:	4b07      	ldr	r3, [pc, #28]	; (800b5e8 <vTaskPlaceOnEventList+0x44>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	3318      	adds	r3, #24
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7fe fc60 	bl	8009e98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5d8:	2101      	movs	r1, #1
 800b5da:	6838      	ldr	r0, [r7, #0]
 800b5dc:	f000 fb4a 	bl	800bc74 <prvAddCurrentTaskToDelayedList>
}
 800b5e0:	bf00      	nop
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	20000990 	.word	0x20000990

0800b5ec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10a      	bne.n	800b614 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	617b      	str	r3, [r7, #20]
}
 800b610:	bf00      	nop
 800b612:	e7fe      	b.n	800b612 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b614:	4b11      	ldr	r3, [pc, #68]	; (800b65c <vTaskPlaceOnUnorderedEventList+0x70>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10a      	bne.n	800b632 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	613b      	str	r3, [r7, #16]
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b63c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b63e:	4b08      	ldr	r3, [pc, #32]	; (800b660 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3318      	adds	r3, #24
 800b644:	4619      	mov	r1, r3
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f7fe fc02 	bl	8009e50 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b64c:	2101      	movs	r1, #1
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fb10 	bl	800bc74 <prvAddCurrentTaskToDelayedList>
}
 800b654:	bf00      	nop
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20000ab8 	.word	0x20000ab8
 800b660:	20000990 	.word	0x20000990

0800b664 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10a      	bne.n	800b68c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67a:	f383 8811 	msr	BASEPRI, r3
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	617b      	str	r3, [r7, #20]
}
 800b688:	bf00      	nop
 800b68a:	e7fe      	b.n	800b68a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b68c:	4b0a      	ldr	r3, [pc, #40]	; (800b6b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3318      	adds	r3, #24
 800b692:	4619      	mov	r1, r3
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7fe fbdb 	bl	8009e50 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6a6:	6879      	ldr	r1, [r7, #4]
 800b6a8:	68b8      	ldr	r0, [r7, #8]
 800b6aa:	f000 fae3 	bl	800bc74 <prvAddCurrentTaskToDelayedList>
	}
 800b6ae:	bf00      	nop
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20000990 	.word	0x20000990

0800b6bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10a      	bne.n	800b6e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	60fb      	str	r3, [r7, #12]
}
 800b6e4:	bf00      	nop
 800b6e6:	e7fe      	b.n	800b6e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	3318      	adds	r3, #24
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fe fc0c 	bl	8009f0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6f2:	4b1d      	ldr	r3, [pc, #116]	; (800b768 <xTaskRemoveFromEventList+0xac>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d11c      	bne.n	800b734 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fe fc03 	bl	8009f0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b708:	2201      	movs	r2, #1
 800b70a:	409a      	lsls	r2, r3
 800b70c:	4b17      	ldr	r3, [pc, #92]	; (800b76c <xTaskRemoveFromEventList+0xb0>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4313      	orrs	r3, r2
 800b712:	4a16      	ldr	r2, [pc, #88]	; (800b76c <xTaskRemoveFromEventList+0xb0>)
 800b714:	6013      	str	r3, [r2, #0]
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b71a:	4613      	mov	r3, r2
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4413      	add	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4a13      	ldr	r2, [pc, #76]	; (800b770 <xTaskRemoveFromEventList+0xb4>)
 800b724:	441a      	add	r2, r3
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	3304      	adds	r3, #4
 800b72a:	4619      	mov	r1, r3
 800b72c:	4610      	mov	r0, r2
 800b72e:	f7fe fb8f 	bl	8009e50 <vListInsertEnd>
 800b732:	e005      	b.n	800b740 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	3318      	adds	r3, #24
 800b738:	4619      	mov	r1, r3
 800b73a:	480e      	ldr	r0, [pc, #56]	; (800b774 <xTaskRemoveFromEventList+0xb8>)
 800b73c:	f7fe fb88 	bl	8009e50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b744:	4b0c      	ldr	r3, [pc, #48]	; (800b778 <xTaskRemoveFromEventList+0xbc>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d905      	bls.n	800b75a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b74e:	2301      	movs	r3, #1
 800b750:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b752:	4b0a      	ldr	r3, [pc, #40]	; (800b77c <xTaskRemoveFromEventList+0xc0>)
 800b754:	2201      	movs	r2, #1
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	e001      	b.n	800b75e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b75a:	2300      	movs	r3, #0
 800b75c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b75e:	697b      	ldr	r3, [r7, #20]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3718      	adds	r7, #24
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	20000ab8 	.word	0x20000ab8
 800b76c:	20000a98 	.word	0x20000a98
 800b770:	20000994 	.word	0x20000994
 800b774:	20000a50 	.word	0x20000a50
 800b778:	20000990 	.word	0x20000990
 800b77c:	20000aa4 	.word	0x20000aa4

0800b780 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b78a:	4b29      	ldr	r3, [pc, #164]	; (800b830 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10a      	bne.n	800b7a8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	613b      	str	r3, [r7, #16]
}
 800b7a4:	bf00      	nop
 800b7a6:	e7fe      	b.n	800b7a6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	60fb      	str	r3, [r7, #12]
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7fe fb98 	bl	8009f0a <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe fb93 	bl	8009f0a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	409a      	lsls	r2, r3
 800b7ec:	4b11      	ldr	r3, [pc, #68]	; (800b834 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	4a10      	ldr	r2, [pc, #64]	; (800b834 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b7f4:	6013      	str	r3, [r2, #0]
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	4413      	add	r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	4a0d      	ldr	r2, [pc, #52]	; (800b838 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b804:	441a      	add	r2, r3
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	3304      	adds	r3, #4
 800b80a:	4619      	mov	r1, r3
 800b80c:	4610      	mov	r0, r2
 800b80e:	f7fe fb1f 	bl	8009e50 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b816:	4b09      	ldr	r3, [pc, #36]	; (800b83c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d902      	bls.n	800b826 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b820:	4b07      	ldr	r3, [pc, #28]	; (800b840 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b822:	2201      	movs	r2, #1
 800b824:	601a      	str	r2, [r3, #0]
	}
}
 800b826:	bf00      	nop
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20000ab8 	.word	0x20000ab8
 800b834:	20000a98 	.word	0x20000a98
 800b838:	20000994 	.word	0x20000994
 800b83c:	20000990 	.word	0x20000990
 800b840:	20000aa4 	.word	0x20000aa4

0800b844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b84c:	4b06      	ldr	r3, [pc, #24]	; (800b868 <vTaskInternalSetTimeOutState+0x24>)
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b854:	4b05      	ldr	r3, [pc, #20]	; (800b86c <vTaskInternalSetTimeOutState+0x28>)
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	605a      	str	r2, [r3, #4]
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	20000aa8 	.word	0x20000aa8
 800b86c:	20000a94 	.word	0x20000a94

0800b870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10a      	bne.n	800b896 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	613b      	str	r3, [r7, #16]
}
 800b892:	bf00      	nop
 800b894:	e7fe      	b.n	800b894 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10a      	bne.n	800b8b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	60fb      	str	r3, [r7, #12]
}
 800b8ae:	bf00      	nop
 800b8b0:	e7fe      	b.n	800b8b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8b2:	f000 ff1f 	bl	800c6f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8b6:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <xTaskCheckForTimeOut+0xbc>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ce:	d102      	bne.n	800b8d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	61fb      	str	r3, [r7, #28]
 800b8d4:	e023      	b.n	800b91e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4b15      	ldr	r3, [pc, #84]	; (800b930 <xTaskCheckForTimeOut+0xc0>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d007      	beq.n	800b8f2 <xTaskCheckForTimeOut+0x82>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	69ba      	ldr	r2, [r7, #24]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d302      	bcc.n	800b8f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	61fb      	str	r3, [r7, #28]
 800b8f0:	e015      	b.n	800b91e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d20b      	bcs.n	800b914 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	1ad2      	subs	r2, r2, r3
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7ff ff9b 	bl	800b844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b90e:	2300      	movs	r3, #0
 800b910:	61fb      	str	r3, [r7, #28]
 800b912:	e004      	b.n	800b91e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2200      	movs	r2, #0
 800b918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b91a:	2301      	movs	r3, #1
 800b91c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b91e:	f000 ff19 	bl	800c754 <vPortExitCritical>

	return xReturn;
 800b922:	69fb      	ldr	r3, [r7, #28]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3720      	adds	r7, #32
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20000a94 	.word	0x20000a94
 800b930:	20000aa8 	.word	0x20000aa8

0800b934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b934:	b480      	push	{r7}
 800b936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b938:	4b03      	ldr	r3, [pc, #12]	; (800b948 <vTaskMissedYield+0x14>)
 800b93a:	2201      	movs	r2, #1
 800b93c:	601a      	str	r2, [r3, #0]
}
 800b93e:	bf00      	nop
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr
 800b948:	20000aa4 	.word	0x20000aa4

0800b94c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b954:	f000 f854 	bl	800ba00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b958:	4b07      	ldr	r3, [pc, #28]	; (800b978 <prvIdleTask+0x2c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d907      	bls.n	800b970 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b960:	4b06      	ldr	r3, [pc, #24]	; (800b97c <prvIdleTask+0x30>)
 800b962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b966:	601a      	str	r2, [r3, #0]
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b970:	f7f6 f8c8 	bl	8001b04 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b974:	e7ee      	b.n	800b954 <prvIdleTask+0x8>
 800b976:	bf00      	nop
 800b978:	20000994 	.word	0x20000994
 800b97c:	e000ed04 	.word	0xe000ed04

0800b980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b986:	2300      	movs	r3, #0
 800b988:	607b      	str	r3, [r7, #4]
 800b98a:	e00c      	b.n	800b9a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	4613      	mov	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4a12      	ldr	r2, [pc, #72]	; (800b9e0 <prvInitialiseTaskLists+0x60>)
 800b998:	4413      	add	r3, r2
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe fa2b 	bl	8009df6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	607b      	str	r3, [r7, #4]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b06      	cmp	r3, #6
 800b9aa:	d9ef      	bls.n	800b98c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9ac:	480d      	ldr	r0, [pc, #52]	; (800b9e4 <prvInitialiseTaskLists+0x64>)
 800b9ae:	f7fe fa22 	bl	8009df6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9b2:	480d      	ldr	r0, [pc, #52]	; (800b9e8 <prvInitialiseTaskLists+0x68>)
 800b9b4:	f7fe fa1f 	bl	8009df6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9b8:	480c      	ldr	r0, [pc, #48]	; (800b9ec <prvInitialiseTaskLists+0x6c>)
 800b9ba:	f7fe fa1c 	bl	8009df6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9be:	480c      	ldr	r0, [pc, #48]	; (800b9f0 <prvInitialiseTaskLists+0x70>)
 800b9c0:	f7fe fa19 	bl	8009df6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9c4:	480b      	ldr	r0, [pc, #44]	; (800b9f4 <prvInitialiseTaskLists+0x74>)
 800b9c6:	f7fe fa16 	bl	8009df6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9ca:	4b0b      	ldr	r3, [pc, #44]	; (800b9f8 <prvInitialiseTaskLists+0x78>)
 800b9cc:	4a05      	ldr	r2, [pc, #20]	; (800b9e4 <prvInitialiseTaskLists+0x64>)
 800b9ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9d0:	4b0a      	ldr	r3, [pc, #40]	; (800b9fc <prvInitialiseTaskLists+0x7c>)
 800b9d2:	4a05      	ldr	r2, [pc, #20]	; (800b9e8 <prvInitialiseTaskLists+0x68>)
 800b9d4:	601a      	str	r2, [r3, #0]
}
 800b9d6:	bf00      	nop
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20000994 	.word	0x20000994
 800b9e4:	20000a20 	.word	0x20000a20
 800b9e8:	20000a34 	.word	0x20000a34
 800b9ec:	20000a50 	.word	0x20000a50
 800b9f0:	20000a64 	.word	0x20000a64
 800b9f4:	20000a7c 	.word	0x20000a7c
 800b9f8:	20000a48 	.word	0x20000a48
 800b9fc:	20000a4c 	.word	0x20000a4c

0800ba00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba06:	e019      	b.n	800ba3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba08:	f000 fe74 	bl	800c6f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba0c:	4b10      	ldr	r3, [pc, #64]	; (800ba50 <prvCheckTasksWaitingTermination+0x50>)
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	3304      	adds	r3, #4
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fe fa76 	bl	8009f0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba1e:	4b0d      	ldr	r3, [pc, #52]	; (800ba54 <prvCheckTasksWaitingTermination+0x54>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3b01      	subs	r3, #1
 800ba24:	4a0b      	ldr	r2, [pc, #44]	; (800ba54 <prvCheckTasksWaitingTermination+0x54>)
 800ba26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba28:	4b0b      	ldr	r3, [pc, #44]	; (800ba58 <prvCheckTasksWaitingTermination+0x58>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	4a0a      	ldr	r2, [pc, #40]	; (800ba58 <prvCheckTasksWaitingTermination+0x58>)
 800ba30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba32:	f000 fe8f 	bl	800c754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f810 	bl	800ba5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba3c:	4b06      	ldr	r3, [pc, #24]	; (800ba58 <prvCheckTasksWaitingTermination+0x58>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e1      	bne.n	800ba08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba44:	bf00      	nop
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20000a64 	.word	0x20000a64
 800ba54:	20000a90 	.word	0x20000a90
 800ba58:	20000a78 	.word	0x20000a78

0800ba5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d108      	bne.n	800ba80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba72:	4618      	mov	r0, r3
 800ba74:	f001 f82c 	bl	800cad0 <vPortFree>
				vPortFree( pxTCB );
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f001 f829 	bl	800cad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba7e:	e018      	b.n	800bab2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d103      	bne.n	800ba92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f001 f820 	bl	800cad0 <vPortFree>
	}
 800ba90:	e00f      	b.n	800bab2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d00a      	beq.n	800bab2 <prvDeleteTCB+0x56>
	__asm volatile
 800ba9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	60fb      	str	r3, [r7, #12]
}
 800baae:	bf00      	nop
 800bab0:	e7fe      	b.n	800bab0 <prvDeleteTCB+0x54>
	}
 800bab2:	bf00      	nop
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
	...

0800babc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bac2:	4b0c      	ldr	r3, [pc, #48]	; (800baf4 <prvResetNextTaskUnblockTime+0x38>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d104      	bne.n	800bad6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bacc:	4b0a      	ldr	r3, [pc, #40]	; (800baf8 <prvResetNextTaskUnblockTime+0x3c>)
 800bace:	f04f 32ff 	mov.w	r2, #4294967295
 800bad2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bad4:	e008      	b.n	800bae8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bad6:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <prvResetNextTaskUnblockTime+0x38>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	4a04      	ldr	r2, [pc, #16]	; (800baf8 <prvResetNextTaskUnblockTime+0x3c>)
 800bae6:	6013      	str	r3, [r2, #0]
}
 800bae8:	bf00      	nop
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	20000a48 	.word	0x20000a48
 800baf8:	20000ab0 	.word	0x20000ab0

0800bafc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb02:	4b0b      	ldr	r3, [pc, #44]	; (800bb30 <xTaskGetSchedulerState+0x34>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d102      	bne.n	800bb10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	607b      	str	r3, [r7, #4]
 800bb0e:	e008      	b.n	800bb22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb10:	4b08      	ldr	r3, [pc, #32]	; (800bb34 <xTaskGetSchedulerState+0x38>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d102      	bne.n	800bb1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb18:	2302      	movs	r3, #2
 800bb1a:	607b      	str	r3, [r7, #4]
 800bb1c:	e001      	b.n	800bb22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb22:	687b      	ldr	r3, [r7, #4]
	}
 800bb24:	4618      	mov	r0, r3
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	20000a9c 	.word	0x20000a9c
 800bb34:	20000ab8 	.word	0x20000ab8

0800bb38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb44:	2300      	movs	r3, #0
 800bb46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d06e      	beq.n	800bc2c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb4e:	4b3a      	ldr	r3, [pc, #232]	; (800bc38 <xTaskPriorityDisinherit+0x100>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d00a      	beq.n	800bb6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	60fb      	str	r3, [r7, #12]
}
 800bb6a:	bf00      	nop
 800bb6c:	e7fe      	b.n	800bb6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10a      	bne.n	800bb8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	60bb      	str	r3, [r7, #8]
}
 800bb88:	bf00      	nop
 800bb8a:	e7fe      	b.n	800bb8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb90:	1e5a      	subs	r2, r3, #1
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d044      	beq.n	800bc2c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d140      	bne.n	800bc2c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	3304      	adds	r3, #4
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe f9ab 	bl	8009f0a <uxListRemove>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d115      	bne.n	800bbe6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbbe:	491f      	ldr	r1, [pc, #124]	; (800bc3c <xTaskPriorityDisinherit+0x104>)
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4413      	add	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	440b      	add	r3, r1
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10a      	bne.n	800bbe6 <xTaskPriorityDisinherit+0xae>
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bbda:	43da      	mvns	r2, r3
 800bbdc:	4b18      	ldr	r3, [pc, #96]	; (800bc40 <xTaskPriorityDisinherit+0x108>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	4a17      	ldr	r2, [pc, #92]	; (800bc40 <xTaskPriorityDisinherit+0x108>)
 800bbe4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf2:	f1c3 0207 	rsb	r2, r3, #7
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfe:	2201      	movs	r2, #1
 800bc00:	409a      	lsls	r2, r3
 800bc02:	4b0f      	ldr	r3, [pc, #60]	; (800bc40 <xTaskPriorityDisinherit+0x108>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	4a0d      	ldr	r2, [pc, #52]	; (800bc40 <xTaskPriorityDisinherit+0x108>)
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	4613      	mov	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4a08      	ldr	r2, [pc, #32]	; (800bc3c <xTaskPriorityDisinherit+0x104>)
 800bc1a:	441a      	add	r2, r3
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	4619      	mov	r1, r3
 800bc22:	4610      	mov	r0, r2
 800bc24:	f7fe f914 	bl	8009e50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc2c:	697b      	ldr	r3, [r7, #20]
	}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20000990 	.word	0x20000990
 800bc3c:	20000994 	.word	0x20000994
 800bc40:	20000a98 	.word	0x20000a98

0800bc44 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bc4a:	4b09      	ldr	r3, [pc, #36]	; (800bc70 <uxTaskResetEventItemValue+0x2c>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc52:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <uxTaskResetEventItemValue+0x2c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc58:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <uxTaskResetEventItemValue+0x2c>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f1c2 0207 	rsb	r2, r2, #7
 800bc60:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bc62:	687b      	ldr	r3, [r7, #4]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr
 800bc70:	20000990 	.word	0x20000990

0800bc74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc7e:	4b29      	ldr	r3, [pc, #164]	; (800bd24 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc84:	4b28      	ldr	r3, [pc, #160]	; (800bd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	3304      	adds	r3, #4
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fe f93d 	bl	8009f0a <uxListRemove>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10b      	bne.n	800bcae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bc96:	4b24      	ldr	r3, [pc, #144]	; (800bd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bca2:	43da      	mvns	r2, r3
 800bca4:	4b21      	ldr	r3, [pc, #132]	; (800bd2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4013      	ands	r3, r2
 800bcaa:	4a20      	ldr	r2, [pc, #128]	; (800bd2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bcac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb4:	d10a      	bne.n	800bccc <prvAddCurrentTaskToDelayedList+0x58>
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d007      	beq.n	800bccc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcbc:	4b1a      	ldr	r3, [pc, #104]	; (800bd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	481a      	ldr	r0, [pc, #104]	; (800bd30 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bcc6:	f7fe f8c3 	bl	8009e50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcca:	e026      	b.n	800bd1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcd4:	4b14      	ldr	r3, [pc, #80]	; (800bd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68ba      	ldr	r2, [r7, #8]
 800bcda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d209      	bcs.n	800bcf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bce4:	4b13      	ldr	r3, [pc, #76]	; (800bd34 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	4b0f      	ldr	r3, [pc, #60]	; (800bd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3304      	adds	r3, #4
 800bcee:	4619      	mov	r1, r3
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	f7fe f8d1 	bl	8009e98 <vListInsert>
}
 800bcf6:	e010      	b.n	800bd1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcf8:	4b0f      	ldr	r3, [pc, #60]	; (800bd38 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	4b0a      	ldr	r3, [pc, #40]	; (800bd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3304      	adds	r3, #4
 800bd02:	4619      	mov	r1, r3
 800bd04:	4610      	mov	r0, r2
 800bd06:	f7fe f8c7 	bl	8009e98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd0a:	4b0c      	ldr	r3, [pc, #48]	; (800bd3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d202      	bcs.n	800bd1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bd14:	4a09      	ldr	r2, [pc, #36]	; (800bd3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	6013      	str	r3, [r2, #0]
}
 800bd1a:	bf00      	nop
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20000a94 	.word	0x20000a94
 800bd28:	20000990 	.word	0x20000990
 800bd2c:	20000a98 	.word	0x20000a98
 800bd30:	20000a7c 	.word	0x20000a7c
 800bd34:	20000a4c 	.word	0x20000a4c
 800bd38:	20000a48 	.word	0x20000a48
 800bd3c:	20000ab0 	.word	0x20000ab0

0800bd40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08a      	sub	sp, #40	; 0x28
 800bd44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd4a:	f000 fb63 	bl	800c414 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd4e:	4b1c      	ldr	r3, [pc, #112]	; (800bdc0 <xTimerCreateTimerTask+0x80>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d021      	beq.n	800bd9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd5e:	1d3a      	adds	r2, r7, #4
 800bd60:	f107 0108 	add.w	r1, r7, #8
 800bd64:	f107 030c 	add.w	r3, r7, #12
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7f5 f8e1 	bl	8000f30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd6e:	6879      	ldr	r1, [r7, #4]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	9202      	str	r2, [sp, #8]
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	2303      	movs	r3, #3
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	460a      	mov	r2, r1
 800bd80:	4910      	ldr	r1, [pc, #64]	; (800bdc4 <xTimerCreateTimerTask+0x84>)
 800bd82:	4811      	ldr	r0, [pc, #68]	; (800bdc8 <xTimerCreateTimerTask+0x88>)
 800bd84:	f7fe fef0 	bl	800ab68 <xTaskCreateStatic>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	4a10      	ldr	r2, [pc, #64]	; (800bdcc <xTimerCreateTimerTask+0x8c>)
 800bd8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <xTimerCreateTimerTask+0x8c>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd96:	2301      	movs	r3, #1
 800bd98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10a      	bne.n	800bdb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	613b      	str	r3, [r7, #16]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bdb6:	697b      	ldr	r3, [r7, #20]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3718      	adds	r7, #24
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	20000aec 	.word	0x20000aec
 800bdc4:	0800f004 	.word	0x0800f004
 800bdc8:	0800bfbd 	.word	0x0800bfbd
 800bdcc:	20000af0 	.word	0x20000af0

0800bdd0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b088      	sub	sp, #32
 800bdd4:	af02      	add	r7, sp, #8
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bdde:	2028      	movs	r0, #40	; 0x28
 800bde0:	f000 fdaa 	bl	800c938 <pvPortMalloc>
 800bde4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00d      	beq.n	800be08 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	9301      	str	r3, [sp, #4]
 800bdf8:	6a3b      	ldr	r3, [r7, #32]
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	68b9      	ldr	r1, [r7, #8]
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f000 f805 	bl	800be12 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800be08:	697b      	ldr	r3, [r7, #20]
	}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	60b9      	str	r1, [r7, #8]
 800be1c:	607a      	str	r2, [r7, #4]
 800be1e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10a      	bne.n	800be3c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	617b      	str	r3, [r7, #20]
}
 800be38:	bf00      	nop
 800be3a:	e7fe      	b.n	800be3a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d01e      	beq.n	800be80 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800be42:	f000 fae7 	bl	800c414 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800be46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800be52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be54:	683a      	ldr	r2, [r7, #0]
 800be56:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5a:	6a3a      	ldr	r2, [r7, #32]
 800be5c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be60:	3304      	adds	r3, #4
 800be62:	4618      	mov	r0, r3
 800be64:	f7fd ffe7 	bl	8009e36 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d008      	beq.n	800be80 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800be74:	f043 0304 	orr.w	r3, r3, #4
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800be80:	bf00      	nop
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b08a      	sub	sp, #40	; 0x28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
 800be94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be96:	2300      	movs	r3, #0
 800be98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10a      	bne.n	800beb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	623b      	str	r3, [r7, #32]
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800beb6:	4b1a      	ldr	r3, [pc, #104]	; (800bf20 <xTimerGenericCommand+0x98>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d02a      	beq.n	800bf14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2b05      	cmp	r3, #5
 800bece:	dc18      	bgt.n	800bf02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bed0:	f7ff fe14 	bl	800bafc <xTaskGetSchedulerState>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d109      	bne.n	800beee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800beda:	4b11      	ldr	r3, [pc, #68]	; (800bf20 <xTimerGenericCommand+0x98>)
 800bedc:	6818      	ldr	r0, [r3, #0]
 800bede:	f107 0110 	add.w	r1, r7, #16
 800bee2:	2300      	movs	r3, #0
 800bee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bee6:	f7fe f975 	bl	800a1d4 <xQueueGenericSend>
 800beea:	6278      	str	r0, [r7, #36]	; 0x24
 800beec:	e012      	b.n	800bf14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800beee:	4b0c      	ldr	r3, [pc, #48]	; (800bf20 <xTimerGenericCommand+0x98>)
 800bef0:	6818      	ldr	r0, [r3, #0]
 800bef2:	f107 0110 	add.w	r1, r7, #16
 800bef6:	2300      	movs	r3, #0
 800bef8:	2200      	movs	r2, #0
 800befa:	f7fe f96b 	bl	800a1d4 <xQueueGenericSend>
 800befe:	6278      	str	r0, [r7, #36]	; 0x24
 800bf00:	e008      	b.n	800bf14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf02:	4b07      	ldr	r3, [pc, #28]	; (800bf20 <xTimerGenericCommand+0x98>)
 800bf04:	6818      	ldr	r0, [r3, #0]
 800bf06:	f107 0110 	add.w	r1, r7, #16
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	683a      	ldr	r2, [r7, #0]
 800bf0e:	f7fe fa5f 	bl	800a3d0 <xQueueGenericSendFromISR>
 800bf12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3728      	adds	r7, #40	; 0x28
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	20000aec 	.word	0x20000aec

0800bf24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b088      	sub	sp, #32
 800bf28:	af02      	add	r7, sp, #8
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf2e:	4b22      	ldr	r3, [pc, #136]	; (800bfb8 <prvProcessExpiredTimer+0x94>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fd ffe4 	bl	8009f0a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bf48:	f003 0304 	and.w	r3, r3, #4
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d022      	beq.n	800bf96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	699a      	ldr	r2, [r3, #24]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	18d1      	adds	r1, r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	6978      	ldr	r0, [r7, #20]
 800bf5e:	f000 f8d1 	bl	800c104 <prvInsertTimerInActiveList>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d01f      	beq.n	800bfa8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf68:	2300      	movs	r3, #0
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	2100      	movs	r1, #0
 800bf72:	6978      	ldr	r0, [r7, #20]
 800bf74:	f7ff ff88 	bl	800be88 <xTimerGenericCommand>
 800bf78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d113      	bne.n	800bfa8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	60fb      	str	r3, [r7, #12]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bf9c:	f023 0301 	bic.w	r3, r3, #1
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	6a1b      	ldr	r3, [r3, #32]
 800bfac:	6978      	ldr	r0, [r7, #20]
 800bfae:	4798      	blx	r3
}
 800bfb0:	bf00      	nop
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20000ae4 	.word	0x20000ae4

0800bfbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfc4:	f107 0308 	add.w	r3, r7, #8
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 f857 	bl	800c07c <prvGetNextExpireTime>
 800bfce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f000 f803 	bl	800bfe0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bfda:	f000 f8d5 	bl	800c188 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfde:	e7f1      	b.n	800bfc4 <prvTimerTask+0x8>

0800bfe0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bfea:	f7ff f90d 	bl	800b208 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfee:	f107 0308 	add.w	r3, r7, #8
 800bff2:	4618      	mov	r0, r3
 800bff4:	f000 f866 	bl	800c0c4 <prvSampleTimeNow>
 800bff8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d130      	bne.n	800c062 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10a      	bne.n	800c01c <prvProcessTimerOrBlockTask+0x3c>
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d806      	bhi.n	800c01c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c00e:	f7ff f909 	bl	800b224 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c012:	68f9      	ldr	r1, [r7, #12]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff ff85 	bl	800bf24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c01a:	e024      	b.n	800c066 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d008      	beq.n	800c034 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c022:	4b13      	ldr	r3, [pc, #76]	; (800c070 <prvProcessTimerOrBlockTask+0x90>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d101      	bne.n	800c030 <prvProcessTimerOrBlockTask+0x50>
 800c02c:	2301      	movs	r3, #1
 800c02e:	e000      	b.n	800c032 <prvProcessTimerOrBlockTask+0x52>
 800c030:	2300      	movs	r3, #0
 800c032:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c034:	4b0f      	ldr	r3, [pc, #60]	; (800c074 <prvProcessTimerOrBlockTask+0x94>)
 800c036:	6818      	ldr	r0, [r3, #0]
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	4619      	mov	r1, r3
 800c042:	f7fe fd5d 	bl	800ab00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c046:	f7ff f8ed 	bl	800b224 <xTaskResumeAll>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10a      	bne.n	800c066 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c050:	4b09      	ldr	r3, [pc, #36]	; (800c078 <prvProcessTimerOrBlockTask+0x98>)
 800c052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c056:	601a      	str	r2, [r3, #0]
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	f3bf 8f6f 	isb	sy
}
 800c060:	e001      	b.n	800c066 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c062:	f7ff f8df 	bl	800b224 <xTaskResumeAll>
}
 800c066:	bf00      	nop
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	20000ae8 	.word	0x20000ae8
 800c074:	20000aec 	.word	0x20000aec
 800c078:	e000ed04 	.word	0xe000ed04

0800c07c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c084:	4b0e      	ldr	r3, [pc, #56]	; (800c0c0 <prvGetNextExpireTime+0x44>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d101      	bne.n	800c092 <prvGetNextExpireTime+0x16>
 800c08e:	2201      	movs	r2, #1
 800c090:	e000      	b.n	800c094 <prvGetNextExpireTime+0x18>
 800c092:	2200      	movs	r2, #0
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d105      	bne.n	800c0ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0a0:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <prvGetNextExpireTime+0x44>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	60fb      	str	r3, [r7, #12]
 800c0aa:	e001      	b.n	800c0b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	20000ae4 	.word	0x20000ae4

0800c0c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c0cc:	f7ff f946 	bl	800b35c <xTaskGetTickCount>
 800c0d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c0d2:	4b0b      	ldr	r3, [pc, #44]	; (800c100 <prvSampleTimeNow+0x3c>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d205      	bcs.n	800c0e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c0dc:	f000 f936 	bl	800c34c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	e002      	b.n	800c0ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c0ee:	4a04      	ldr	r2, [pc, #16]	; (800c100 <prvSampleTimeNow+0x3c>)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	20000af4 	.word	0x20000af4

0800c104 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c112:	2300      	movs	r3, #0
 800c114:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	429a      	cmp	r2, r3
 800c128:	d812      	bhi.n	800c150 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	1ad2      	subs	r2, r2, r3
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	429a      	cmp	r2, r3
 800c136:	d302      	bcc.n	800c13e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c138:	2301      	movs	r3, #1
 800c13a:	617b      	str	r3, [r7, #20]
 800c13c:	e01b      	b.n	800c176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c13e:	4b10      	ldr	r3, [pc, #64]	; (800c180 <prvInsertTimerInActiveList+0x7c>)
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	3304      	adds	r3, #4
 800c146:	4619      	mov	r1, r3
 800c148:	4610      	mov	r0, r2
 800c14a:	f7fd fea5 	bl	8009e98 <vListInsert>
 800c14e:	e012      	b.n	800c176 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	429a      	cmp	r2, r3
 800c156:	d206      	bcs.n	800c166 <prvInsertTimerInActiveList+0x62>
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d302      	bcc.n	800c166 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c160:	2301      	movs	r3, #1
 800c162:	617b      	str	r3, [r7, #20]
 800c164:	e007      	b.n	800c176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c166:	4b07      	ldr	r3, [pc, #28]	; (800c184 <prvInsertTimerInActiveList+0x80>)
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	3304      	adds	r3, #4
 800c16e:	4619      	mov	r1, r3
 800c170:	4610      	mov	r0, r2
 800c172:	f7fd fe91 	bl	8009e98 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c176:	697b      	ldr	r3, [r7, #20]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	20000ae8 	.word	0x20000ae8
 800c184:	20000ae4 	.word	0x20000ae4

0800c188 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08e      	sub	sp, #56	; 0x38
 800c18c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c18e:	e0ca      	b.n	800c326 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	da18      	bge.n	800c1c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c196:	1d3b      	adds	r3, r7, #4
 800c198:	3304      	adds	r3, #4
 800c19a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d10a      	bne.n	800c1b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a6:	f383 8811 	msr	BASEPRI, r3
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	61fb      	str	r3, [r7, #28]
}
 800c1b4:	bf00      	nop
 800c1b6:	e7fe      	b.n	800c1b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1be:	6850      	ldr	r0, [r2, #4]
 800c1c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1c2:	6892      	ldr	r2, [r2, #8]
 800c1c4:	4611      	mov	r1, r2
 800c1c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f2c0 80aa 	blt.w	800c324 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d6:	695b      	ldr	r3, [r3, #20]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d004      	beq.n	800c1e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1de:	3304      	adds	r3, #4
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fd fe92 	bl	8009f0a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1e6:	463b      	mov	r3, r7
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff ff6b 	bl	800c0c4 <prvSampleTimeNow>
 800c1ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b09      	cmp	r3, #9
 800c1f4:	f200 8097 	bhi.w	800c326 <prvProcessReceivedCommands+0x19e>
 800c1f8:	a201      	add	r2, pc, #4	; (adr r2, 800c200 <prvProcessReceivedCommands+0x78>)
 800c1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fe:	bf00      	nop
 800c200:	0800c229 	.word	0x0800c229
 800c204:	0800c229 	.word	0x0800c229
 800c208:	0800c229 	.word	0x0800c229
 800c20c:	0800c29d 	.word	0x0800c29d
 800c210:	0800c2b1 	.word	0x0800c2b1
 800c214:	0800c2fb 	.word	0x0800c2fb
 800c218:	0800c229 	.word	0x0800c229
 800c21c:	0800c229 	.word	0x0800c229
 800c220:	0800c29d 	.word	0x0800c29d
 800c224:	0800c2b1 	.word	0x0800c2b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c22e:	f043 0301 	orr.w	r3, r3, #1
 800c232:	b2da      	uxtb	r2, r3
 800c234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	18d1      	adds	r1, r2, r3
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c248:	f7ff ff5c 	bl	800c104 <prvInsertTimerInActiveList>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d069      	beq.n	800c326 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c258:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c260:	f003 0304 	and.w	r3, r3, #4
 800c264:	2b00      	cmp	r3, #0
 800c266:	d05e      	beq.n	800c326 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26c:	699b      	ldr	r3, [r3, #24]
 800c26e:	441a      	add	r2, r3
 800c270:	2300      	movs	r3, #0
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	2300      	movs	r3, #0
 800c276:	2100      	movs	r1, #0
 800c278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c27a:	f7ff fe05 	bl	800be88 <xTimerGenericCommand>
 800c27e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c280:	6a3b      	ldr	r3, [r7, #32]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d14f      	bne.n	800c326 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	61bb      	str	r3, [r7, #24]
}
 800c298:	bf00      	nop
 800c29a:	e7fe      	b.n	800c29a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c2a2:	f023 0301 	bic.w	r3, r3, #1
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800c2ae:	e03a      	b.n	800c326 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c2b6:	f043 0301 	orr.w	r3, r3, #1
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10a      	bne.n	800c2e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	617b      	str	r3, [r7, #20]
}
 800c2e2:	bf00      	nop
 800c2e4:	e7fe      	b.n	800c2e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e8:	699a      	ldr	r2, [r3, #24]
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ec:	18d1      	adds	r1, r2, r3
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f4:	f7ff ff06 	bl	800c104 <prvInsertTimerInActiveList>
					break;
 800c2f8:	e015      	b.n	800c326 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c300:	f003 0302 	and.w	r3, r3, #2
 800c304:	2b00      	cmp	r3, #0
 800c306:	d103      	bne.n	800c310 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30a:	f000 fbe1 	bl	800cad0 <vPortFree>
 800c30e:	e00a      	b.n	800c326 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c316:	f023 0301 	bic.w	r3, r3, #1
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c322:	e000      	b.n	800c326 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c324:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c326:	4b08      	ldr	r3, [pc, #32]	; (800c348 <prvProcessReceivedCommands+0x1c0>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	1d39      	adds	r1, r7, #4
 800c32c:	2200      	movs	r2, #0
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fe f8ea 	bl	800a508 <xQueueReceive>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	f47f af2a 	bne.w	800c190 <prvProcessReceivedCommands+0x8>
	}
}
 800c33c:	bf00      	nop
 800c33e:	bf00      	nop
 800c340:	3730      	adds	r7, #48	; 0x30
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	20000aec 	.word	0x20000aec

0800c34c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b088      	sub	sp, #32
 800c350:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c352:	e048      	b.n	800c3e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c354:	4b2d      	ldr	r3, [pc, #180]	; (800c40c <prvSwitchTimerLists+0xc0>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c35e:	4b2b      	ldr	r3, [pc, #172]	; (800c40c <prvSwitchTimerLists+0xc0>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	3304      	adds	r3, #4
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fd fdcc 	bl	8009f0a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6a1b      	ldr	r3, [r3, #32]
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c380:	f003 0304 	and.w	r3, r3, #4
 800c384:	2b00      	cmp	r3, #0
 800c386:	d02e      	beq.n	800c3e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	4413      	add	r3, r2
 800c390:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	429a      	cmp	r2, r3
 800c398:	d90e      	bls.n	800c3b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3a6:	4b19      	ldr	r3, [pc, #100]	; (800c40c <prvSwitchTimerLists+0xc0>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3304      	adds	r3, #4
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	f7fd fd71 	bl	8009e98 <vListInsert>
 800c3b6:	e016      	b.n	800c3e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	2300      	movs	r3, #0
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f7ff fd60 	bl	800be88 <xTimerGenericCommand>
 800c3c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10a      	bne.n	800c3e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	603b      	str	r3, [r7, #0]
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3e6:	4b09      	ldr	r3, [pc, #36]	; (800c40c <prvSwitchTimerLists+0xc0>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1b1      	bne.n	800c354 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3f0:	4b06      	ldr	r3, [pc, #24]	; (800c40c <prvSwitchTimerLists+0xc0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c3f6:	4b06      	ldr	r3, [pc, #24]	; (800c410 <prvSwitchTimerLists+0xc4>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a04      	ldr	r2, [pc, #16]	; (800c40c <prvSwitchTimerLists+0xc0>)
 800c3fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c3fe:	4a04      	ldr	r2, [pc, #16]	; (800c410 <prvSwitchTimerLists+0xc4>)
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	6013      	str	r3, [r2, #0]
}
 800c404:	bf00      	nop
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	20000ae4 	.word	0x20000ae4
 800c410:	20000ae8 	.word	0x20000ae8

0800c414 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c41a:	f000 f96b 	bl	800c6f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c41e:	4b15      	ldr	r3, [pc, #84]	; (800c474 <prvCheckForValidListAndQueue+0x60>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d120      	bne.n	800c468 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c426:	4814      	ldr	r0, [pc, #80]	; (800c478 <prvCheckForValidListAndQueue+0x64>)
 800c428:	f7fd fce5 	bl	8009df6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c42c:	4813      	ldr	r0, [pc, #76]	; (800c47c <prvCheckForValidListAndQueue+0x68>)
 800c42e:	f7fd fce2 	bl	8009df6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c432:	4b13      	ldr	r3, [pc, #76]	; (800c480 <prvCheckForValidListAndQueue+0x6c>)
 800c434:	4a10      	ldr	r2, [pc, #64]	; (800c478 <prvCheckForValidListAndQueue+0x64>)
 800c436:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c438:	4b12      	ldr	r3, [pc, #72]	; (800c484 <prvCheckForValidListAndQueue+0x70>)
 800c43a:	4a10      	ldr	r2, [pc, #64]	; (800c47c <prvCheckForValidListAndQueue+0x68>)
 800c43c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c43e:	2300      	movs	r3, #0
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	4b11      	ldr	r3, [pc, #68]	; (800c488 <prvCheckForValidListAndQueue+0x74>)
 800c444:	4a11      	ldr	r2, [pc, #68]	; (800c48c <prvCheckForValidListAndQueue+0x78>)
 800c446:	2110      	movs	r1, #16
 800c448:	200a      	movs	r0, #10
 800c44a:	f7fd fdf1 	bl	800a030 <xQueueGenericCreateStatic>
 800c44e:	4603      	mov	r3, r0
 800c450:	4a08      	ldr	r2, [pc, #32]	; (800c474 <prvCheckForValidListAndQueue+0x60>)
 800c452:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c454:	4b07      	ldr	r3, [pc, #28]	; (800c474 <prvCheckForValidListAndQueue+0x60>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d005      	beq.n	800c468 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c45c:	4b05      	ldr	r3, [pc, #20]	; (800c474 <prvCheckForValidListAndQueue+0x60>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	490b      	ldr	r1, [pc, #44]	; (800c490 <prvCheckForValidListAndQueue+0x7c>)
 800c462:	4618      	mov	r0, r3
 800c464:	f7fe fb22 	bl	800aaac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c468:	f000 f974 	bl	800c754 <vPortExitCritical>
}
 800c46c:	bf00      	nop
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20000aec 	.word	0x20000aec
 800c478:	20000abc 	.word	0x20000abc
 800c47c:	20000ad0 	.word	0x20000ad0
 800c480:	20000ae4 	.word	0x20000ae4
 800c484:	20000ae8 	.word	0x20000ae8
 800c488:	20000b98 	.word	0x20000b98
 800c48c:	20000af8 	.word	0x20000af8
 800c490:	0800f00c 	.word	0x0800f00c

0800c494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3b04      	subs	r3, #4
 800c4a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3b04      	subs	r3, #4
 800c4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	f023 0201 	bic.w	r2, r3, #1
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	3b04      	subs	r3, #4
 800c4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4c4:	4a0c      	ldr	r2, [pc, #48]	; (800c4f8 <pxPortInitialiseStack+0x64>)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3b14      	subs	r3, #20
 800c4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3b04      	subs	r3, #4
 800c4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f06f 0202 	mvn.w	r2, #2
 800c4e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	3b20      	subs	r3, #32
 800c4e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	0800c4fd 	.word	0x0800c4fd

0800c4fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c506:	4b12      	ldr	r3, [pc, #72]	; (800c550 <prvTaskExitError+0x54>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c50e:	d00a      	beq.n	800c526 <prvTaskExitError+0x2a>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	60fb      	str	r3, [r7, #12]
}
 800c522:	bf00      	nop
 800c524:	e7fe      	b.n	800c524 <prvTaskExitError+0x28>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	60bb      	str	r3, [r7, #8]
}
 800c538:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c53a:	bf00      	nop
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d0fc      	beq.n	800c53c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c542:	bf00      	nop
 800c544:	bf00      	nop
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	2000000c 	.word	0x2000000c
	...

0800c560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c560:	4b07      	ldr	r3, [pc, #28]	; (800c580 <pxCurrentTCBConst2>)
 800c562:	6819      	ldr	r1, [r3, #0]
 800c564:	6808      	ldr	r0, [r1, #0]
 800c566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56a:	f380 8809 	msr	PSP, r0
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f04f 0000 	mov.w	r0, #0
 800c576:	f380 8811 	msr	BASEPRI, r0
 800c57a:	4770      	bx	lr
 800c57c:	f3af 8000 	nop.w

0800c580 <pxCurrentTCBConst2>:
 800c580:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop

0800c588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c588:	4808      	ldr	r0, [pc, #32]	; (800c5ac <prvPortStartFirstTask+0x24>)
 800c58a:	6800      	ldr	r0, [r0, #0]
 800c58c:	6800      	ldr	r0, [r0, #0]
 800c58e:	f380 8808 	msr	MSP, r0
 800c592:	f04f 0000 	mov.w	r0, #0
 800c596:	f380 8814 	msr	CONTROL, r0
 800c59a:	b662      	cpsie	i
 800c59c:	b661      	cpsie	f
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	df00      	svc	0
 800c5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5aa:	bf00      	nop
 800c5ac:	e000ed08 	.word	0xe000ed08

0800c5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5b6:	4b46      	ldr	r3, [pc, #280]	; (800c6d0 <xPortStartScheduler+0x120>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a46      	ldr	r2, [pc, #280]	; (800c6d4 <xPortStartScheduler+0x124>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d10a      	bne.n	800c5d6 <xPortStartScheduler+0x26>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	613b      	str	r3, [r7, #16]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c5d6:	4b3e      	ldr	r3, [pc, #248]	; (800c6d0 <xPortStartScheduler+0x120>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a3f      	ldr	r2, [pc, #252]	; (800c6d8 <xPortStartScheduler+0x128>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d10a      	bne.n	800c5f6 <xPortStartScheduler+0x46>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	60fb      	str	r3, [r7, #12]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5f6:	4b39      	ldr	r3, [pc, #228]	; (800c6dc <xPortStartScheduler+0x12c>)
 800c5f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	22ff      	movs	r2, #255	; 0xff
 800c606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c610:	78fb      	ldrb	r3, [r7, #3]
 800c612:	b2db      	uxtb	r3, r3
 800c614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	4b31      	ldr	r3, [pc, #196]	; (800c6e0 <xPortStartScheduler+0x130>)
 800c61c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c61e:	4b31      	ldr	r3, [pc, #196]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c620:	2207      	movs	r2, #7
 800c622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c624:	e009      	b.n	800c63a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c626:	4b2f      	ldr	r3, [pc, #188]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	4a2d      	ldr	r2, [pc, #180]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c62e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c630:	78fb      	ldrb	r3, [r7, #3]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	b2db      	uxtb	r3, r3
 800c638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c63a:	78fb      	ldrb	r3, [r7, #3]
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c642:	2b80      	cmp	r3, #128	; 0x80
 800c644:	d0ef      	beq.n	800c626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c646:	4b27      	ldr	r3, [pc, #156]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f1c3 0307 	rsb	r3, r3, #7
 800c64e:	2b04      	cmp	r3, #4
 800c650:	d00a      	beq.n	800c668 <xPortStartScheduler+0xb8>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	60bb      	str	r3, [r7, #8]
}
 800c664:	bf00      	nop
 800c666:	e7fe      	b.n	800c666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c668:	4b1e      	ldr	r3, [pc, #120]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	021b      	lsls	r3, r3, #8
 800c66e:	4a1d      	ldr	r2, [pc, #116]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c672:	4b1c      	ldr	r3, [pc, #112]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c67a:	4a1a      	ldr	r2, [pc, #104]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c67c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	b2da      	uxtb	r2, r3
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c686:	4b18      	ldr	r3, [pc, #96]	; (800c6e8 <xPortStartScheduler+0x138>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a17      	ldr	r2, [pc, #92]	; (800c6e8 <xPortStartScheduler+0x138>)
 800c68c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c692:	4b15      	ldr	r3, [pc, #84]	; (800c6e8 <xPortStartScheduler+0x138>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a14      	ldr	r2, [pc, #80]	; (800c6e8 <xPortStartScheduler+0x138>)
 800c698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c69c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c69e:	f000 f8dd 	bl	800c85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6a2:	4b12      	ldr	r3, [pc, #72]	; (800c6ec <xPortStartScheduler+0x13c>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6a8:	f000 f8fc 	bl	800c8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6ac:	4b10      	ldr	r3, [pc, #64]	; (800c6f0 <xPortStartScheduler+0x140>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a0f      	ldr	r2, [pc, #60]	; (800c6f0 <xPortStartScheduler+0x140>)
 800c6b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c6b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6b8:	f7ff ff66 	bl	800c588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6bc:	f7fe ff16 	bl	800b4ec <vTaskSwitchContext>
	prvTaskExitError();
 800c6c0:	f7ff ff1c 	bl	800c4fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3718      	adds	r7, #24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	e000ed00 	.word	0xe000ed00
 800c6d4:	410fc271 	.word	0x410fc271
 800c6d8:	410fc270 	.word	0x410fc270
 800c6dc:	e000e400 	.word	0xe000e400
 800c6e0:	20000be0 	.word	0x20000be0
 800c6e4:	20000be4 	.word	0x20000be4
 800c6e8:	e000ed20 	.word	0xe000ed20
 800c6ec:	2000000c 	.word	0x2000000c
 800c6f0:	e000ef34 	.word	0xe000ef34

0800c6f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
	__asm volatile
 800c6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	607b      	str	r3, [r7, #4]
}
 800c70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c70e:	4b0f      	ldr	r3, [pc, #60]	; (800c74c <vPortEnterCritical+0x58>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3301      	adds	r3, #1
 800c714:	4a0d      	ldr	r2, [pc, #52]	; (800c74c <vPortEnterCritical+0x58>)
 800c716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c718:	4b0c      	ldr	r3, [pc, #48]	; (800c74c <vPortEnterCritical+0x58>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d10f      	bne.n	800c740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c720:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <vPortEnterCritical+0x5c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00a      	beq.n	800c740 <vPortEnterCritical+0x4c>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	f383 8811 	msr	BASEPRI, r3
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	603b      	str	r3, [r7, #0]
}
 800c73c:	bf00      	nop
 800c73e:	e7fe      	b.n	800c73e <vPortEnterCritical+0x4a>
	}
}
 800c740:	bf00      	nop
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	2000000c 	.word	0x2000000c
 800c750:	e000ed04 	.word	0xe000ed04

0800c754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c75a:	4b12      	ldr	r3, [pc, #72]	; (800c7a4 <vPortExitCritical+0x50>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10a      	bne.n	800c778 <vPortExitCritical+0x24>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	607b      	str	r3, [r7, #4]
}
 800c774:	bf00      	nop
 800c776:	e7fe      	b.n	800c776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c778:	4b0a      	ldr	r3, [pc, #40]	; (800c7a4 <vPortExitCritical+0x50>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	3b01      	subs	r3, #1
 800c77e:	4a09      	ldr	r2, [pc, #36]	; (800c7a4 <vPortExitCritical+0x50>)
 800c780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c782:	4b08      	ldr	r3, [pc, #32]	; (800c7a4 <vPortExitCritical+0x50>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d105      	bne.n	800c796 <vPortExitCritical+0x42>
 800c78a:	2300      	movs	r3, #0
 800c78c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	f383 8811 	msr	BASEPRI, r3
}
 800c794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c796:	bf00      	nop
 800c798:	370c      	adds	r7, #12
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	2000000c 	.word	0x2000000c
	...

0800c7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7b0:	f3ef 8009 	mrs	r0, PSP
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	4b15      	ldr	r3, [pc, #84]	; (800c810 <pxCurrentTCBConst>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	f01e 0f10 	tst.w	lr, #16
 800c7c0:	bf08      	it	eq
 800c7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ca:	6010      	str	r0, [r2, #0]
 800c7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c7d4:	f380 8811 	msr	BASEPRI, r0
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f7fe fe84 	bl	800b4ec <vTaskSwitchContext>
 800c7e4:	f04f 0000 	mov.w	r0, #0
 800c7e8:	f380 8811 	msr	BASEPRI, r0
 800c7ec:	bc09      	pop	{r0, r3}
 800c7ee:	6819      	ldr	r1, [r3, #0]
 800c7f0:	6808      	ldr	r0, [r1, #0]
 800c7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f6:	f01e 0f10 	tst.w	lr, #16
 800c7fa:	bf08      	it	eq
 800c7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c800:	f380 8809 	msr	PSP, r0
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	f3af 8000 	nop.w

0800c810 <pxCurrentTCBConst>:
 800c810:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop

0800c818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	607b      	str	r3, [r7, #4]
}
 800c830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c832:	f7fe fda3 	bl	800b37c <xTaskIncrementTick>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c83c:	4b06      	ldr	r3, [pc, #24]	; (800c858 <SysTick_Handler+0x40>)
 800c83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	2300      	movs	r3, #0
 800c846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	f383 8811 	msr	BASEPRI, r3
}
 800c84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c850:	bf00      	nop
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	e000ed04 	.word	0xe000ed04

0800c85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c85c:	b480      	push	{r7}
 800c85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c860:	4b0b      	ldr	r3, [pc, #44]	; (800c890 <vPortSetupTimerInterrupt+0x34>)
 800c862:	2200      	movs	r2, #0
 800c864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c866:	4b0b      	ldr	r3, [pc, #44]	; (800c894 <vPortSetupTimerInterrupt+0x38>)
 800c868:	2200      	movs	r2, #0
 800c86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c86c:	4b0a      	ldr	r3, [pc, #40]	; (800c898 <vPortSetupTimerInterrupt+0x3c>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a0a      	ldr	r2, [pc, #40]	; (800c89c <vPortSetupTimerInterrupt+0x40>)
 800c872:	fba2 2303 	umull	r2, r3, r2, r3
 800c876:	099b      	lsrs	r3, r3, #6
 800c878:	4a09      	ldr	r2, [pc, #36]	; (800c8a0 <vPortSetupTimerInterrupt+0x44>)
 800c87a:	3b01      	subs	r3, #1
 800c87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c87e:	4b04      	ldr	r3, [pc, #16]	; (800c890 <vPortSetupTimerInterrupt+0x34>)
 800c880:	2207      	movs	r2, #7
 800c882:	601a      	str	r2, [r3, #0]
}
 800c884:	bf00      	nop
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	e000e010 	.word	0xe000e010
 800c894:	e000e018 	.word	0xe000e018
 800c898:	20000000 	.word	0x20000000
 800c89c:	10624dd3 	.word	0x10624dd3
 800c8a0:	e000e014 	.word	0xe000e014

0800c8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c8b4 <vPortEnableVFP+0x10>
 800c8a8:	6801      	ldr	r1, [r0, #0]
 800c8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c8ae:	6001      	str	r1, [r0, #0]
 800c8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8b2:	bf00      	nop
 800c8b4:	e000ed88 	.word	0xe000ed88

0800c8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8be:	f3ef 8305 	mrs	r3, IPSR
 800c8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2b0f      	cmp	r3, #15
 800c8c8:	d914      	bls.n	800c8f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c8ca:	4a17      	ldr	r2, [pc, #92]	; (800c928 <vPortValidateInterruptPriority+0x70>)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c8d4:	4b15      	ldr	r3, [pc, #84]	; (800c92c <vPortValidateInterruptPriority+0x74>)
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	7afa      	ldrb	r2, [r7, #11]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d20a      	bcs.n	800c8f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	607b      	str	r3, [r7, #4]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8f4:	4b0e      	ldr	r3, [pc, #56]	; (800c930 <vPortValidateInterruptPriority+0x78>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c8fc:	4b0d      	ldr	r3, [pc, #52]	; (800c934 <vPortValidateInterruptPriority+0x7c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	429a      	cmp	r2, r3
 800c902:	d90a      	bls.n	800c91a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	603b      	str	r3, [r7, #0]
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <vPortValidateInterruptPriority+0x60>
	}
 800c91a:	bf00      	nop
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	e000e3f0 	.word	0xe000e3f0
 800c92c:	20000be0 	.word	0x20000be0
 800c930:	e000ed0c 	.word	0xe000ed0c
 800c934:	20000be4 	.word	0x20000be4

0800c938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b08a      	sub	sp, #40	; 0x28
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c940:	2300      	movs	r3, #0
 800c942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c944:	f7fe fc60 	bl	800b208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c948:	4b5b      	ldr	r3, [pc, #364]	; (800cab8 <pvPortMalloc+0x180>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c950:	f000 f920 	bl	800cb94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c954:	4b59      	ldr	r3, [pc, #356]	; (800cabc <pvPortMalloc+0x184>)
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4013      	ands	r3, r2
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f040 8093 	bne.w	800ca88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d01d      	beq.n	800c9a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c968:	2208      	movs	r2, #8
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4413      	add	r3, r2
 800c96e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f003 0307 	and.w	r3, r3, #7
 800c976:	2b00      	cmp	r3, #0
 800c978:	d014      	beq.n	800c9a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f023 0307 	bic.w	r3, r3, #7
 800c980:	3308      	adds	r3, #8
 800c982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f003 0307 	and.w	r3, r3, #7
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00a      	beq.n	800c9a4 <pvPortMalloc+0x6c>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	617b      	str	r3, [r7, #20]
}
 800c9a0:	bf00      	nop
 800c9a2:	e7fe      	b.n	800c9a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d06e      	beq.n	800ca88 <pvPortMalloc+0x150>
 800c9aa:	4b45      	ldr	r3, [pc, #276]	; (800cac0 <pvPortMalloc+0x188>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d869      	bhi.n	800ca88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9b4:	4b43      	ldr	r3, [pc, #268]	; (800cac4 <pvPortMalloc+0x18c>)
 800c9b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9b8:	4b42      	ldr	r3, [pc, #264]	; (800cac4 <pvPortMalloc+0x18c>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9be:	e004      	b.n	800c9ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d903      	bls.n	800c9dc <pvPortMalloc+0xa4>
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1f1      	bne.n	800c9c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9dc:	4b36      	ldr	r3, [pc, #216]	; (800cab8 <pvPortMalloc+0x180>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d050      	beq.n	800ca88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9e6:	6a3b      	ldr	r3, [r7, #32]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2208      	movs	r2, #8
 800c9ec:	4413      	add	r3, r2
 800c9ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	6a3b      	ldr	r3, [r7, #32]
 800c9f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	1ad2      	subs	r2, r2, r3
 800ca00:	2308      	movs	r3, #8
 800ca02:	005b      	lsls	r3, r3, #1
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d91f      	bls.n	800ca48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	f003 0307 	and.w	r3, r3, #7
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00a      	beq.n	800ca30 <pvPortMalloc+0xf8>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	f383 8811 	msr	BASEPRI, r3
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	613b      	str	r3, [r7, #16]
}
 800ca2c:	bf00      	nop
 800ca2e:	e7fe      	b.n	800ca2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	685a      	ldr	r2, [r3, #4]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	1ad2      	subs	r2, r2, r3
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca42:	69b8      	ldr	r0, [r7, #24]
 800ca44:	f000 f908 	bl	800cc58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca48:	4b1d      	ldr	r3, [pc, #116]	; (800cac0 <pvPortMalloc+0x188>)
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	4a1b      	ldr	r2, [pc, #108]	; (800cac0 <pvPortMalloc+0x188>)
 800ca54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca56:	4b1a      	ldr	r3, [pc, #104]	; (800cac0 <pvPortMalloc+0x188>)
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	4b1b      	ldr	r3, [pc, #108]	; (800cac8 <pvPortMalloc+0x190>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d203      	bcs.n	800ca6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca62:	4b17      	ldr	r3, [pc, #92]	; (800cac0 <pvPortMalloc+0x188>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a18      	ldr	r2, [pc, #96]	; (800cac8 <pvPortMalloc+0x190>)
 800ca68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6c:	685a      	ldr	r2, [r3, #4]
 800ca6e:	4b13      	ldr	r3, [pc, #76]	; (800cabc <pvPortMalloc+0x184>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	431a      	orrs	r2, r3
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca7e:	4b13      	ldr	r3, [pc, #76]	; (800cacc <pvPortMalloc+0x194>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	3301      	adds	r3, #1
 800ca84:	4a11      	ldr	r2, [pc, #68]	; (800cacc <pvPortMalloc+0x194>)
 800ca86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca88:	f7fe fbcc 	bl	800b224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	f003 0307 	and.w	r3, r3, #7
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00a      	beq.n	800caac <pvPortMalloc+0x174>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	60fb      	str	r3, [r7, #12]
}
 800caa8:	bf00      	nop
 800caaa:	e7fe      	b.n	800caaa <pvPortMalloc+0x172>
	return pvReturn;
 800caac:	69fb      	ldr	r3, [r7, #28]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3728      	adds	r7, #40	; 0x28
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	20002f18 	.word	0x20002f18
 800cabc:	20002f2c 	.word	0x20002f2c
 800cac0:	20002f1c 	.word	0x20002f1c
 800cac4:	20002f10 	.word	0x20002f10
 800cac8:	20002f20 	.word	0x20002f20
 800cacc:	20002f24 	.word	0x20002f24

0800cad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d04d      	beq.n	800cb7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cae2:	2308      	movs	r3, #8
 800cae4:	425b      	negs	r3, r3
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	4413      	add	r3, r2
 800caea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	685a      	ldr	r2, [r3, #4]
 800caf4:	4b24      	ldr	r3, [pc, #144]	; (800cb88 <vPortFree+0xb8>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4013      	ands	r3, r2
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10a      	bne.n	800cb14 <vPortFree+0x44>
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	60fb      	str	r3, [r7, #12]
}
 800cb10:	bf00      	nop
 800cb12:	e7fe      	b.n	800cb12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00a      	beq.n	800cb32 <vPortFree+0x62>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	60bb      	str	r3, [r7, #8]
}
 800cb2e:	bf00      	nop
 800cb30:	e7fe      	b.n	800cb30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	685a      	ldr	r2, [r3, #4]
 800cb36:	4b14      	ldr	r3, [pc, #80]	; (800cb88 <vPortFree+0xb8>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4013      	ands	r3, r2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d01e      	beq.n	800cb7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d11a      	bne.n	800cb7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	4b0e      	ldr	r3, [pc, #56]	; (800cb88 <vPortFree+0xb8>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	43db      	mvns	r3, r3
 800cb52:	401a      	ands	r2, r3
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb58:	f7fe fb56 	bl	800b208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	685a      	ldr	r2, [r3, #4]
 800cb60:	4b0a      	ldr	r3, [pc, #40]	; (800cb8c <vPortFree+0xbc>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4413      	add	r3, r2
 800cb66:	4a09      	ldr	r2, [pc, #36]	; (800cb8c <vPortFree+0xbc>)
 800cb68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb6a:	6938      	ldr	r0, [r7, #16]
 800cb6c:	f000 f874 	bl	800cc58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb70:	4b07      	ldr	r3, [pc, #28]	; (800cb90 <vPortFree+0xc0>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	3301      	adds	r3, #1
 800cb76:	4a06      	ldr	r2, [pc, #24]	; (800cb90 <vPortFree+0xc0>)
 800cb78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb7a:	f7fe fb53 	bl	800b224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb7e:	bf00      	nop
 800cb80:	3718      	adds	r7, #24
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	20002f2c 	.word	0x20002f2c
 800cb8c:	20002f1c 	.word	0x20002f1c
 800cb90:	20002f28 	.word	0x20002f28

0800cb94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb9a:	f242 3328 	movw	r3, #9000	; 0x2328
 800cb9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cba0:	4b27      	ldr	r3, [pc, #156]	; (800cc40 <prvHeapInit+0xac>)
 800cba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f003 0307 	and.w	r3, r3, #7
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00c      	beq.n	800cbc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3307      	adds	r3, #7
 800cbb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f023 0307 	bic.w	r3, r3, #7
 800cbba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	4a1f      	ldr	r2, [pc, #124]	; (800cc40 <prvHeapInit+0xac>)
 800cbc4:	4413      	add	r3, r2
 800cbc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbcc:	4a1d      	ldr	r2, [pc, #116]	; (800cc44 <prvHeapInit+0xb0>)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cbd2:	4b1c      	ldr	r3, [pc, #112]	; (800cc44 <prvHeapInit+0xb0>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	4413      	add	r3, r2
 800cbde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cbe0:	2208      	movs	r2, #8
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	1a9b      	subs	r3, r3, r2
 800cbe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f023 0307 	bic.w	r3, r3, #7
 800cbee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	4a15      	ldr	r2, [pc, #84]	; (800cc48 <prvHeapInit+0xb4>)
 800cbf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cbf6:	4b14      	ldr	r3, [pc, #80]	; (800cc48 <prvHeapInit+0xb4>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbfe:	4b12      	ldr	r3, [pc, #72]	; (800cc48 <prvHeapInit+0xb4>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2200      	movs	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	1ad2      	subs	r2, r2, r3
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc14:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <prvHeapInit+0xb4>)
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	4a0a      	ldr	r2, [pc, #40]	; (800cc4c <prvHeapInit+0xb8>)
 800cc22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	4a09      	ldr	r2, [pc, #36]	; (800cc50 <prvHeapInit+0xbc>)
 800cc2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc2c:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <prvHeapInit+0xc0>)
 800cc2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc32:	601a      	str	r2, [r3, #0]
}
 800cc34:	bf00      	nop
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr
 800cc40:	20000be8 	.word	0x20000be8
 800cc44:	20002f10 	.word	0x20002f10
 800cc48:	20002f18 	.word	0x20002f18
 800cc4c:	20002f20 	.word	0x20002f20
 800cc50:	20002f1c 	.word	0x20002f1c
 800cc54:	20002f2c 	.word	0x20002f2c

0800cc58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc60:	4b28      	ldr	r3, [pc, #160]	; (800cd04 <prvInsertBlockIntoFreeList+0xac>)
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	e002      	b.n	800cc6c <prvInsertBlockIntoFreeList+0x14>
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d8f7      	bhi.n	800cc66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	4413      	add	r3, r2
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d108      	bne.n	800cc9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	441a      	add	r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	68ba      	ldr	r2, [r7, #8]
 800cca4:	441a      	add	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d118      	bne.n	800cce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	4b15      	ldr	r3, [pc, #84]	; (800cd08 <prvInsertBlockIntoFreeList+0xb0>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d00d      	beq.n	800ccd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	441a      	add	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	e008      	b.n	800cce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ccd6:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <prvInsertBlockIntoFreeList+0xb0>)
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	e003      	b.n	800cce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d002      	beq.n	800ccf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccf6:	bf00      	nop
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	20002f10 	.word	0x20002f10
 800cd08:	20002f18 	.word	0x20002f18

0800cd0c <__errno>:
 800cd0c:	4b01      	ldr	r3, [pc, #4]	; (800cd14 <__errno+0x8>)
 800cd0e:	6818      	ldr	r0, [r3, #0]
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	20000010 	.word	0x20000010

0800cd18 <__libc_init_array>:
 800cd18:	b570      	push	{r4, r5, r6, lr}
 800cd1a:	4d0d      	ldr	r5, [pc, #52]	; (800cd50 <__libc_init_array+0x38>)
 800cd1c:	4c0d      	ldr	r4, [pc, #52]	; (800cd54 <__libc_init_array+0x3c>)
 800cd1e:	1b64      	subs	r4, r4, r5
 800cd20:	10a4      	asrs	r4, r4, #2
 800cd22:	2600      	movs	r6, #0
 800cd24:	42a6      	cmp	r6, r4
 800cd26:	d109      	bne.n	800cd3c <__libc_init_array+0x24>
 800cd28:	4d0b      	ldr	r5, [pc, #44]	; (800cd58 <__libc_init_array+0x40>)
 800cd2a:	4c0c      	ldr	r4, [pc, #48]	; (800cd5c <__libc_init_array+0x44>)
 800cd2c:	f002 f892 	bl	800ee54 <_init>
 800cd30:	1b64      	subs	r4, r4, r5
 800cd32:	10a4      	asrs	r4, r4, #2
 800cd34:	2600      	movs	r6, #0
 800cd36:	42a6      	cmp	r6, r4
 800cd38:	d105      	bne.n	800cd46 <__libc_init_array+0x2e>
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd40:	4798      	blx	r3
 800cd42:	3601      	adds	r6, #1
 800cd44:	e7ee      	b.n	800cd24 <__libc_init_array+0xc>
 800cd46:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4a:	4798      	blx	r3
 800cd4c:	3601      	adds	r6, #1
 800cd4e:	e7f2      	b.n	800cd36 <__libc_init_array+0x1e>
 800cd50:	0800f228 	.word	0x0800f228
 800cd54:	0800f228 	.word	0x0800f228
 800cd58:	0800f228 	.word	0x0800f228
 800cd5c:	0800f22c 	.word	0x0800f22c

0800cd60 <memcpy>:
 800cd60:	440a      	add	r2, r1
 800cd62:	4291      	cmp	r1, r2
 800cd64:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd68:	d100      	bne.n	800cd6c <memcpy+0xc>
 800cd6a:	4770      	bx	lr
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd76:	4291      	cmp	r1, r2
 800cd78:	d1f9      	bne.n	800cd6e <memcpy+0xe>
 800cd7a:	bd10      	pop	{r4, pc}

0800cd7c <memset>:
 800cd7c:	4402      	add	r2, r0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d100      	bne.n	800cd86 <memset+0xa>
 800cd84:	4770      	bx	lr
 800cd86:	f803 1b01 	strb.w	r1, [r3], #1
 800cd8a:	e7f9      	b.n	800cd80 <memset+0x4>

0800cd8c <siprintf>:
 800cd8c:	b40e      	push	{r1, r2, r3}
 800cd8e:	b500      	push	{lr}
 800cd90:	b09c      	sub	sp, #112	; 0x70
 800cd92:	ab1d      	add	r3, sp, #116	; 0x74
 800cd94:	9002      	str	r0, [sp, #8]
 800cd96:	9006      	str	r0, [sp, #24]
 800cd98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd9c:	4809      	ldr	r0, [pc, #36]	; (800cdc4 <siprintf+0x38>)
 800cd9e:	9107      	str	r1, [sp, #28]
 800cda0:	9104      	str	r1, [sp, #16]
 800cda2:	4909      	ldr	r1, [pc, #36]	; (800cdc8 <siprintf+0x3c>)
 800cda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda8:	9105      	str	r1, [sp, #20]
 800cdaa:	6800      	ldr	r0, [r0, #0]
 800cdac:	9301      	str	r3, [sp, #4]
 800cdae:	a902      	add	r1, sp, #8
 800cdb0:	f000 f896 	bl	800cee0 <_svfiprintf_r>
 800cdb4:	9b02      	ldr	r3, [sp, #8]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	701a      	strb	r2, [r3, #0]
 800cdba:	b01c      	add	sp, #112	; 0x70
 800cdbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdc0:	b003      	add	sp, #12
 800cdc2:	4770      	bx	lr
 800cdc4:	20000010 	.word	0x20000010
 800cdc8:	ffff0208 	.word	0xffff0208

0800cdcc <siscanf>:
 800cdcc:	b40e      	push	{r1, r2, r3}
 800cdce:	b510      	push	{r4, lr}
 800cdd0:	b09f      	sub	sp, #124	; 0x7c
 800cdd2:	ac21      	add	r4, sp, #132	; 0x84
 800cdd4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800cdd8:	f854 2b04 	ldr.w	r2, [r4], #4
 800cddc:	9201      	str	r2, [sp, #4]
 800cdde:	f8ad 101c 	strh.w	r1, [sp, #28]
 800cde2:	9004      	str	r0, [sp, #16]
 800cde4:	9008      	str	r0, [sp, #32]
 800cde6:	f7f3 f9fb 	bl	80001e0 <strlen>
 800cdea:	4b0c      	ldr	r3, [pc, #48]	; (800ce1c <siscanf+0x50>)
 800cdec:	9005      	str	r0, [sp, #20]
 800cdee:	9009      	str	r0, [sp, #36]	; 0x24
 800cdf0:	930d      	str	r3, [sp, #52]	; 0x34
 800cdf2:	480b      	ldr	r0, [pc, #44]	; (800ce20 <siscanf+0x54>)
 800cdf4:	9a01      	ldr	r2, [sp, #4]
 800cdf6:	6800      	ldr	r0, [r0, #0]
 800cdf8:	9403      	str	r4, [sp, #12]
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	9311      	str	r3, [sp, #68]	; 0x44
 800cdfe:	9316      	str	r3, [sp, #88]	; 0x58
 800ce00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce04:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ce08:	a904      	add	r1, sp, #16
 800ce0a:	4623      	mov	r3, r4
 800ce0c:	f000 f9c2 	bl	800d194 <__ssvfiscanf_r>
 800ce10:	b01f      	add	sp, #124	; 0x7c
 800ce12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce16:	b003      	add	sp, #12
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	0800ce25 	.word	0x0800ce25
 800ce20:	20000010 	.word	0x20000010

0800ce24 <__seofread>:
 800ce24:	2000      	movs	r0, #0
 800ce26:	4770      	bx	lr

0800ce28 <__ssputs_r>:
 800ce28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce2c:	688e      	ldr	r6, [r1, #8]
 800ce2e:	429e      	cmp	r6, r3
 800ce30:	4682      	mov	sl, r0
 800ce32:	460c      	mov	r4, r1
 800ce34:	4690      	mov	r8, r2
 800ce36:	461f      	mov	r7, r3
 800ce38:	d838      	bhi.n	800ceac <__ssputs_r+0x84>
 800ce3a:	898a      	ldrh	r2, [r1, #12]
 800ce3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce40:	d032      	beq.n	800cea8 <__ssputs_r+0x80>
 800ce42:	6825      	ldr	r5, [r4, #0]
 800ce44:	6909      	ldr	r1, [r1, #16]
 800ce46:	eba5 0901 	sub.w	r9, r5, r1
 800ce4a:	6965      	ldr	r5, [r4, #20]
 800ce4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce54:	3301      	adds	r3, #1
 800ce56:	444b      	add	r3, r9
 800ce58:	106d      	asrs	r5, r5, #1
 800ce5a:	429d      	cmp	r5, r3
 800ce5c:	bf38      	it	cc
 800ce5e:	461d      	movcc	r5, r3
 800ce60:	0553      	lsls	r3, r2, #21
 800ce62:	d531      	bpl.n	800cec8 <__ssputs_r+0xa0>
 800ce64:	4629      	mov	r1, r5
 800ce66:	f000 ffe5 	bl	800de34 <_malloc_r>
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	b950      	cbnz	r0, 800ce84 <__ssputs_r+0x5c>
 800ce6e:	230c      	movs	r3, #12
 800ce70:	f8ca 3000 	str.w	r3, [sl]
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce7a:	81a3      	strh	r3, [r4, #12]
 800ce7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce84:	6921      	ldr	r1, [r4, #16]
 800ce86:	464a      	mov	r2, r9
 800ce88:	f7ff ff6a 	bl	800cd60 <memcpy>
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce96:	81a3      	strh	r3, [r4, #12]
 800ce98:	6126      	str	r6, [r4, #16]
 800ce9a:	6165      	str	r5, [r4, #20]
 800ce9c:	444e      	add	r6, r9
 800ce9e:	eba5 0509 	sub.w	r5, r5, r9
 800cea2:	6026      	str	r6, [r4, #0]
 800cea4:	60a5      	str	r5, [r4, #8]
 800cea6:	463e      	mov	r6, r7
 800cea8:	42be      	cmp	r6, r7
 800ceaa:	d900      	bls.n	800ceae <__ssputs_r+0x86>
 800ceac:	463e      	mov	r6, r7
 800ceae:	6820      	ldr	r0, [r4, #0]
 800ceb0:	4632      	mov	r2, r6
 800ceb2:	4641      	mov	r1, r8
 800ceb4:	f000 ff38 	bl	800dd28 <memmove>
 800ceb8:	68a3      	ldr	r3, [r4, #8]
 800ceba:	1b9b      	subs	r3, r3, r6
 800cebc:	60a3      	str	r3, [r4, #8]
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	4433      	add	r3, r6
 800cec2:	6023      	str	r3, [r4, #0]
 800cec4:	2000      	movs	r0, #0
 800cec6:	e7db      	b.n	800ce80 <__ssputs_r+0x58>
 800cec8:	462a      	mov	r2, r5
 800ceca:	f001 f827 	bl	800df1c <_realloc_r>
 800cece:	4606      	mov	r6, r0
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d1e1      	bne.n	800ce98 <__ssputs_r+0x70>
 800ced4:	6921      	ldr	r1, [r4, #16]
 800ced6:	4650      	mov	r0, sl
 800ced8:	f000 ff40 	bl	800dd5c <_free_r>
 800cedc:	e7c7      	b.n	800ce6e <__ssputs_r+0x46>
	...

0800cee0 <_svfiprintf_r>:
 800cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee4:	4698      	mov	r8, r3
 800cee6:	898b      	ldrh	r3, [r1, #12]
 800cee8:	061b      	lsls	r3, r3, #24
 800ceea:	b09d      	sub	sp, #116	; 0x74
 800ceec:	4607      	mov	r7, r0
 800ceee:	460d      	mov	r5, r1
 800cef0:	4614      	mov	r4, r2
 800cef2:	d50e      	bpl.n	800cf12 <_svfiprintf_r+0x32>
 800cef4:	690b      	ldr	r3, [r1, #16]
 800cef6:	b963      	cbnz	r3, 800cf12 <_svfiprintf_r+0x32>
 800cef8:	2140      	movs	r1, #64	; 0x40
 800cefa:	f000 ff9b 	bl	800de34 <_malloc_r>
 800cefe:	6028      	str	r0, [r5, #0]
 800cf00:	6128      	str	r0, [r5, #16]
 800cf02:	b920      	cbnz	r0, 800cf0e <_svfiprintf_r+0x2e>
 800cf04:	230c      	movs	r3, #12
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0c:	e0d1      	b.n	800d0b2 <_svfiprintf_r+0x1d2>
 800cf0e:	2340      	movs	r3, #64	; 0x40
 800cf10:	616b      	str	r3, [r5, #20]
 800cf12:	2300      	movs	r3, #0
 800cf14:	9309      	str	r3, [sp, #36]	; 0x24
 800cf16:	2320      	movs	r3, #32
 800cf18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf20:	2330      	movs	r3, #48	; 0x30
 800cf22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0cc <_svfiprintf_r+0x1ec>
 800cf26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf2a:	f04f 0901 	mov.w	r9, #1
 800cf2e:	4623      	mov	r3, r4
 800cf30:	469a      	mov	sl, r3
 800cf32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf36:	b10a      	cbz	r2, 800cf3c <_svfiprintf_r+0x5c>
 800cf38:	2a25      	cmp	r2, #37	; 0x25
 800cf3a:	d1f9      	bne.n	800cf30 <_svfiprintf_r+0x50>
 800cf3c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf40:	d00b      	beq.n	800cf5a <_svfiprintf_r+0x7a>
 800cf42:	465b      	mov	r3, fp
 800cf44:	4622      	mov	r2, r4
 800cf46:	4629      	mov	r1, r5
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f7ff ff6d 	bl	800ce28 <__ssputs_r>
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f000 80aa 	beq.w	800d0a8 <_svfiprintf_r+0x1c8>
 800cf54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf56:	445a      	add	r2, fp
 800cf58:	9209      	str	r2, [sp, #36]	; 0x24
 800cf5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 80a2 	beq.w	800d0a8 <_svfiprintf_r+0x1c8>
 800cf64:	2300      	movs	r3, #0
 800cf66:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf6e:	f10a 0a01 	add.w	sl, sl, #1
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	9307      	str	r3, [sp, #28]
 800cf76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf7a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf7c:	4654      	mov	r4, sl
 800cf7e:	2205      	movs	r2, #5
 800cf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf84:	4851      	ldr	r0, [pc, #324]	; (800d0cc <_svfiprintf_r+0x1ec>)
 800cf86:	f7f3 f933 	bl	80001f0 <memchr>
 800cf8a:	9a04      	ldr	r2, [sp, #16]
 800cf8c:	b9d8      	cbnz	r0, 800cfc6 <_svfiprintf_r+0xe6>
 800cf8e:	06d0      	lsls	r0, r2, #27
 800cf90:	bf44      	itt	mi
 800cf92:	2320      	movmi	r3, #32
 800cf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf98:	0711      	lsls	r1, r2, #28
 800cf9a:	bf44      	itt	mi
 800cf9c:	232b      	movmi	r3, #43	; 0x2b
 800cf9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa6:	2b2a      	cmp	r3, #42	; 0x2a
 800cfa8:	d015      	beq.n	800cfd6 <_svfiprintf_r+0xf6>
 800cfaa:	9a07      	ldr	r2, [sp, #28]
 800cfac:	4654      	mov	r4, sl
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f04f 0c0a 	mov.w	ip, #10
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfba:	3b30      	subs	r3, #48	; 0x30
 800cfbc:	2b09      	cmp	r3, #9
 800cfbe:	d94e      	bls.n	800d05e <_svfiprintf_r+0x17e>
 800cfc0:	b1b0      	cbz	r0, 800cff0 <_svfiprintf_r+0x110>
 800cfc2:	9207      	str	r2, [sp, #28]
 800cfc4:	e014      	b.n	800cff0 <_svfiprintf_r+0x110>
 800cfc6:	eba0 0308 	sub.w	r3, r0, r8
 800cfca:	fa09 f303 	lsl.w	r3, r9, r3
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	9304      	str	r3, [sp, #16]
 800cfd2:	46a2      	mov	sl, r4
 800cfd4:	e7d2      	b.n	800cf7c <_svfiprintf_r+0x9c>
 800cfd6:	9b03      	ldr	r3, [sp, #12]
 800cfd8:	1d19      	adds	r1, r3, #4
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	9103      	str	r1, [sp, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfbb      	ittet	lt
 800cfe2:	425b      	neglt	r3, r3
 800cfe4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfe8:	9307      	strge	r3, [sp, #28]
 800cfea:	9307      	strlt	r3, [sp, #28]
 800cfec:	bfb8      	it	lt
 800cfee:	9204      	strlt	r2, [sp, #16]
 800cff0:	7823      	ldrb	r3, [r4, #0]
 800cff2:	2b2e      	cmp	r3, #46	; 0x2e
 800cff4:	d10c      	bne.n	800d010 <_svfiprintf_r+0x130>
 800cff6:	7863      	ldrb	r3, [r4, #1]
 800cff8:	2b2a      	cmp	r3, #42	; 0x2a
 800cffa:	d135      	bne.n	800d068 <_svfiprintf_r+0x188>
 800cffc:	9b03      	ldr	r3, [sp, #12]
 800cffe:	1d1a      	adds	r2, r3, #4
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	9203      	str	r2, [sp, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	bfb8      	it	lt
 800d008:	f04f 33ff 	movlt.w	r3, #4294967295
 800d00c:	3402      	adds	r4, #2
 800d00e:	9305      	str	r3, [sp, #20]
 800d010:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0dc <_svfiprintf_r+0x1fc>
 800d014:	7821      	ldrb	r1, [r4, #0]
 800d016:	2203      	movs	r2, #3
 800d018:	4650      	mov	r0, sl
 800d01a:	f7f3 f8e9 	bl	80001f0 <memchr>
 800d01e:	b140      	cbz	r0, 800d032 <_svfiprintf_r+0x152>
 800d020:	2340      	movs	r3, #64	; 0x40
 800d022:	eba0 000a 	sub.w	r0, r0, sl
 800d026:	fa03 f000 	lsl.w	r0, r3, r0
 800d02a:	9b04      	ldr	r3, [sp, #16]
 800d02c:	4303      	orrs	r3, r0
 800d02e:	3401      	adds	r4, #1
 800d030:	9304      	str	r3, [sp, #16]
 800d032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d036:	4826      	ldr	r0, [pc, #152]	; (800d0d0 <_svfiprintf_r+0x1f0>)
 800d038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d03c:	2206      	movs	r2, #6
 800d03e:	f7f3 f8d7 	bl	80001f0 <memchr>
 800d042:	2800      	cmp	r0, #0
 800d044:	d038      	beq.n	800d0b8 <_svfiprintf_r+0x1d8>
 800d046:	4b23      	ldr	r3, [pc, #140]	; (800d0d4 <_svfiprintf_r+0x1f4>)
 800d048:	bb1b      	cbnz	r3, 800d092 <_svfiprintf_r+0x1b2>
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	3307      	adds	r3, #7
 800d04e:	f023 0307 	bic.w	r3, r3, #7
 800d052:	3308      	adds	r3, #8
 800d054:	9303      	str	r3, [sp, #12]
 800d056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d058:	4433      	add	r3, r6
 800d05a:	9309      	str	r3, [sp, #36]	; 0x24
 800d05c:	e767      	b.n	800cf2e <_svfiprintf_r+0x4e>
 800d05e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d062:	460c      	mov	r4, r1
 800d064:	2001      	movs	r0, #1
 800d066:	e7a5      	b.n	800cfb4 <_svfiprintf_r+0xd4>
 800d068:	2300      	movs	r3, #0
 800d06a:	3401      	adds	r4, #1
 800d06c:	9305      	str	r3, [sp, #20]
 800d06e:	4619      	mov	r1, r3
 800d070:	f04f 0c0a 	mov.w	ip, #10
 800d074:	4620      	mov	r0, r4
 800d076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d07a:	3a30      	subs	r2, #48	; 0x30
 800d07c:	2a09      	cmp	r2, #9
 800d07e:	d903      	bls.n	800d088 <_svfiprintf_r+0x1a8>
 800d080:	2b00      	cmp	r3, #0
 800d082:	d0c5      	beq.n	800d010 <_svfiprintf_r+0x130>
 800d084:	9105      	str	r1, [sp, #20]
 800d086:	e7c3      	b.n	800d010 <_svfiprintf_r+0x130>
 800d088:	fb0c 2101 	mla	r1, ip, r1, r2
 800d08c:	4604      	mov	r4, r0
 800d08e:	2301      	movs	r3, #1
 800d090:	e7f0      	b.n	800d074 <_svfiprintf_r+0x194>
 800d092:	ab03      	add	r3, sp, #12
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	462a      	mov	r2, r5
 800d098:	4b0f      	ldr	r3, [pc, #60]	; (800d0d8 <_svfiprintf_r+0x1f8>)
 800d09a:	a904      	add	r1, sp, #16
 800d09c:	4638      	mov	r0, r7
 800d09e:	f3af 8000 	nop.w
 800d0a2:	1c42      	adds	r2, r0, #1
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	d1d6      	bne.n	800d056 <_svfiprintf_r+0x176>
 800d0a8:	89ab      	ldrh	r3, [r5, #12]
 800d0aa:	065b      	lsls	r3, r3, #25
 800d0ac:	f53f af2c 	bmi.w	800cf08 <_svfiprintf_r+0x28>
 800d0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0b2:	b01d      	add	sp, #116	; 0x74
 800d0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b8:	ab03      	add	r3, sp, #12
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	462a      	mov	r2, r5
 800d0be:	4b06      	ldr	r3, [pc, #24]	; (800d0d8 <_svfiprintf_r+0x1f8>)
 800d0c0:	a904      	add	r1, sp, #16
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	f000 fa4c 	bl	800d560 <_printf_i>
 800d0c8:	e7eb      	b.n	800d0a2 <_svfiprintf_r+0x1c2>
 800d0ca:	bf00      	nop
 800d0cc:	0800f040 	.word	0x0800f040
 800d0d0:	0800f04a 	.word	0x0800f04a
 800d0d4:	00000000 	.word	0x00000000
 800d0d8:	0800ce29 	.word	0x0800ce29
 800d0dc:	0800f046 	.word	0x0800f046

0800d0e0 <_sungetc_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	1c4b      	adds	r3, r1, #1
 800d0e4:	4614      	mov	r4, r2
 800d0e6:	d103      	bne.n	800d0f0 <_sungetc_r+0x10>
 800d0e8:	f04f 35ff 	mov.w	r5, #4294967295
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}
 800d0f0:	8993      	ldrh	r3, [r2, #12]
 800d0f2:	f023 0320 	bic.w	r3, r3, #32
 800d0f6:	8193      	strh	r3, [r2, #12]
 800d0f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0fa:	6852      	ldr	r2, [r2, #4]
 800d0fc:	b2cd      	uxtb	r5, r1
 800d0fe:	b18b      	cbz	r3, 800d124 <_sungetc_r+0x44>
 800d100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d102:	4293      	cmp	r3, r2
 800d104:	dd08      	ble.n	800d118 <_sungetc_r+0x38>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	1e5a      	subs	r2, r3, #1
 800d10a:	6022      	str	r2, [r4, #0]
 800d10c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d110:	6863      	ldr	r3, [r4, #4]
 800d112:	3301      	adds	r3, #1
 800d114:	6063      	str	r3, [r4, #4]
 800d116:	e7e9      	b.n	800d0ec <_sungetc_r+0xc>
 800d118:	4621      	mov	r1, r4
 800d11a:	f000 fdc9 	bl	800dcb0 <__submore>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d0f1      	beq.n	800d106 <_sungetc_r+0x26>
 800d122:	e7e1      	b.n	800d0e8 <_sungetc_r+0x8>
 800d124:	6921      	ldr	r1, [r4, #16]
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	b151      	cbz	r1, 800d140 <_sungetc_r+0x60>
 800d12a:	4299      	cmp	r1, r3
 800d12c:	d208      	bcs.n	800d140 <_sungetc_r+0x60>
 800d12e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d132:	42a9      	cmp	r1, r5
 800d134:	d104      	bne.n	800d140 <_sungetc_r+0x60>
 800d136:	3b01      	subs	r3, #1
 800d138:	3201      	adds	r2, #1
 800d13a:	6023      	str	r3, [r4, #0]
 800d13c:	6062      	str	r2, [r4, #4]
 800d13e:	e7d5      	b.n	800d0ec <_sungetc_r+0xc>
 800d140:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d148:	6363      	str	r3, [r4, #52]	; 0x34
 800d14a:	2303      	movs	r3, #3
 800d14c:	63a3      	str	r3, [r4, #56]	; 0x38
 800d14e:	4623      	mov	r3, r4
 800d150:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	2301      	movs	r3, #1
 800d158:	e7dc      	b.n	800d114 <_sungetc_r+0x34>

0800d15a <__ssrefill_r>:
 800d15a:	b510      	push	{r4, lr}
 800d15c:	460c      	mov	r4, r1
 800d15e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d160:	b169      	cbz	r1, 800d17e <__ssrefill_r+0x24>
 800d162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d166:	4299      	cmp	r1, r3
 800d168:	d001      	beq.n	800d16e <__ssrefill_r+0x14>
 800d16a:	f000 fdf7 	bl	800dd5c <_free_r>
 800d16e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d170:	6063      	str	r3, [r4, #4]
 800d172:	2000      	movs	r0, #0
 800d174:	6360      	str	r0, [r4, #52]	; 0x34
 800d176:	b113      	cbz	r3, 800d17e <__ssrefill_r+0x24>
 800d178:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d17a:	6023      	str	r3, [r4, #0]
 800d17c:	bd10      	pop	{r4, pc}
 800d17e:	6923      	ldr	r3, [r4, #16]
 800d180:	6023      	str	r3, [r4, #0]
 800d182:	2300      	movs	r3, #0
 800d184:	6063      	str	r3, [r4, #4]
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	f043 0320 	orr.w	r3, r3, #32
 800d18c:	81a3      	strh	r3, [r4, #12]
 800d18e:	f04f 30ff 	mov.w	r0, #4294967295
 800d192:	e7f3      	b.n	800d17c <__ssrefill_r+0x22>

0800d194 <__ssvfiscanf_r>:
 800d194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d198:	460c      	mov	r4, r1
 800d19a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d19e:	2100      	movs	r1, #0
 800d1a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d1a4:	49a6      	ldr	r1, [pc, #664]	; (800d440 <__ssvfiscanf_r+0x2ac>)
 800d1a6:	91a0      	str	r1, [sp, #640]	; 0x280
 800d1a8:	f10d 0804 	add.w	r8, sp, #4
 800d1ac:	49a5      	ldr	r1, [pc, #660]	; (800d444 <__ssvfiscanf_r+0x2b0>)
 800d1ae:	4fa6      	ldr	r7, [pc, #664]	; (800d448 <__ssvfiscanf_r+0x2b4>)
 800d1b0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d44c <__ssvfiscanf_r+0x2b8>
 800d1b4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d1b8:	4606      	mov	r6, r0
 800d1ba:	91a1      	str	r1, [sp, #644]	; 0x284
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	7813      	ldrb	r3, [r2, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f000 815a 	beq.w	800d47a <__ssvfiscanf_r+0x2e6>
 800d1c6:	5dd9      	ldrb	r1, [r3, r7]
 800d1c8:	f011 0108 	ands.w	r1, r1, #8
 800d1cc:	f102 0501 	add.w	r5, r2, #1
 800d1d0:	d019      	beq.n	800d206 <__ssvfiscanf_r+0x72>
 800d1d2:	6863      	ldr	r3, [r4, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	dd0f      	ble.n	800d1f8 <__ssvfiscanf_r+0x64>
 800d1d8:	6823      	ldr	r3, [r4, #0]
 800d1da:	781a      	ldrb	r2, [r3, #0]
 800d1dc:	5cba      	ldrb	r2, [r7, r2]
 800d1de:	0712      	lsls	r2, r2, #28
 800d1e0:	d401      	bmi.n	800d1e6 <__ssvfiscanf_r+0x52>
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	e7eb      	b.n	800d1be <__ssvfiscanf_r+0x2a>
 800d1e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d1e8:	3201      	adds	r2, #1
 800d1ea:	9245      	str	r2, [sp, #276]	; 0x114
 800d1ec:	6862      	ldr	r2, [r4, #4]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	3a01      	subs	r2, #1
 800d1f2:	6062      	str	r2, [r4, #4]
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	e7ec      	b.n	800d1d2 <__ssvfiscanf_r+0x3e>
 800d1f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	4798      	blx	r3
 800d200:	2800      	cmp	r0, #0
 800d202:	d0e9      	beq.n	800d1d8 <__ssvfiscanf_r+0x44>
 800d204:	e7ed      	b.n	800d1e2 <__ssvfiscanf_r+0x4e>
 800d206:	2b25      	cmp	r3, #37	; 0x25
 800d208:	d012      	beq.n	800d230 <__ssvfiscanf_r+0x9c>
 800d20a:	469a      	mov	sl, r3
 800d20c:	6863      	ldr	r3, [r4, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f340 8091 	ble.w	800d336 <__ssvfiscanf_r+0x1a2>
 800d214:	6822      	ldr	r2, [r4, #0]
 800d216:	7813      	ldrb	r3, [r2, #0]
 800d218:	4553      	cmp	r3, sl
 800d21a:	f040 812e 	bne.w	800d47a <__ssvfiscanf_r+0x2e6>
 800d21e:	6863      	ldr	r3, [r4, #4]
 800d220:	3b01      	subs	r3, #1
 800d222:	6063      	str	r3, [r4, #4]
 800d224:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d226:	3201      	adds	r2, #1
 800d228:	3301      	adds	r3, #1
 800d22a:	6022      	str	r2, [r4, #0]
 800d22c:	9345      	str	r3, [sp, #276]	; 0x114
 800d22e:	e7d8      	b.n	800d1e2 <__ssvfiscanf_r+0x4e>
 800d230:	9141      	str	r1, [sp, #260]	; 0x104
 800d232:	9143      	str	r1, [sp, #268]	; 0x10c
 800d234:	7853      	ldrb	r3, [r2, #1]
 800d236:	2b2a      	cmp	r3, #42	; 0x2a
 800d238:	bf02      	ittt	eq
 800d23a:	2310      	moveq	r3, #16
 800d23c:	1c95      	addeq	r5, r2, #2
 800d23e:	9341      	streq	r3, [sp, #260]	; 0x104
 800d240:	220a      	movs	r2, #10
 800d242:	46aa      	mov	sl, r5
 800d244:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d248:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d24c:	2b09      	cmp	r3, #9
 800d24e:	d91d      	bls.n	800d28c <__ssvfiscanf_r+0xf8>
 800d250:	487e      	ldr	r0, [pc, #504]	; (800d44c <__ssvfiscanf_r+0x2b8>)
 800d252:	2203      	movs	r2, #3
 800d254:	f7f2 ffcc 	bl	80001f0 <memchr>
 800d258:	b140      	cbz	r0, 800d26c <__ssvfiscanf_r+0xd8>
 800d25a:	2301      	movs	r3, #1
 800d25c:	eba0 0009 	sub.w	r0, r0, r9
 800d260:	fa03 f000 	lsl.w	r0, r3, r0
 800d264:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d266:	4318      	orrs	r0, r3
 800d268:	9041      	str	r0, [sp, #260]	; 0x104
 800d26a:	4655      	mov	r5, sl
 800d26c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d270:	2b78      	cmp	r3, #120	; 0x78
 800d272:	d806      	bhi.n	800d282 <__ssvfiscanf_r+0xee>
 800d274:	2b57      	cmp	r3, #87	; 0x57
 800d276:	d810      	bhi.n	800d29a <__ssvfiscanf_r+0x106>
 800d278:	2b25      	cmp	r3, #37	; 0x25
 800d27a:	d0c6      	beq.n	800d20a <__ssvfiscanf_r+0x76>
 800d27c:	d856      	bhi.n	800d32c <__ssvfiscanf_r+0x198>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d064      	beq.n	800d34c <__ssvfiscanf_r+0x1b8>
 800d282:	2303      	movs	r3, #3
 800d284:	9347      	str	r3, [sp, #284]	; 0x11c
 800d286:	230a      	movs	r3, #10
 800d288:	9342      	str	r3, [sp, #264]	; 0x108
 800d28a:	e071      	b.n	800d370 <__ssvfiscanf_r+0x1dc>
 800d28c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d28e:	fb02 1103 	mla	r1, r2, r3, r1
 800d292:	3930      	subs	r1, #48	; 0x30
 800d294:	9143      	str	r1, [sp, #268]	; 0x10c
 800d296:	4655      	mov	r5, sl
 800d298:	e7d3      	b.n	800d242 <__ssvfiscanf_r+0xae>
 800d29a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d29e:	2a20      	cmp	r2, #32
 800d2a0:	d8ef      	bhi.n	800d282 <__ssvfiscanf_r+0xee>
 800d2a2:	a101      	add	r1, pc, #4	; (adr r1, 800d2a8 <__ssvfiscanf_r+0x114>)
 800d2a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d2a8:	0800d35b 	.word	0x0800d35b
 800d2ac:	0800d283 	.word	0x0800d283
 800d2b0:	0800d283 	.word	0x0800d283
 800d2b4:	0800d3b9 	.word	0x0800d3b9
 800d2b8:	0800d283 	.word	0x0800d283
 800d2bc:	0800d283 	.word	0x0800d283
 800d2c0:	0800d283 	.word	0x0800d283
 800d2c4:	0800d283 	.word	0x0800d283
 800d2c8:	0800d283 	.word	0x0800d283
 800d2cc:	0800d283 	.word	0x0800d283
 800d2d0:	0800d283 	.word	0x0800d283
 800d2d4:	0800d3cf 	.word	0x0800d3cf
 800d2d8:	0800d3a5 	.word	0x0800d3a5
 800d2dc:	0800d333 	.word	0x0800d333
 800d2e0:	0800d333 	.word	0x0800d333
 800d2e4:	0800d333 	.word	0x0800d333
 800d2e8:	0800d283 	.word	0x0800d283
 800d2ec:	0800d3a9 	.word	0x0800d3a9
 800d2f0:	0800d283 	.word	0x0800d283
 800d2f4:	0800d283 	.word	0x0800d283
 800d2f8:	0800d283 	.word	0x0800d283
 800d2fc:	0800d283 	.word	0x0800d283
 800d300:	0800d3df 	.word	0x0800d3df
 800d304:	0800d3b1 	.word	0x0800d3b1
 800d308:	0800d353 	.word	0x0800d353
 800d30c:	0800d283 	.word	0x0800d283
 800d310:	0800d283 	.word	0x0800d283
 800d314:	0800d3db 	.word	0x0800d3db
 800d318:	0800d283 	.word	0x0800d283
 800d31c:	0800d3a5 	.word	0x0800d3a5
 800d320:	0800d283 	.word	0x0800d283
 800d324:	0800d283 	.word	0x0800d283
 800d328:	0800d35b 	.word	0x0800d35b
 800d32c:	3b45      	subs	r3, #69	; 0x45
 800d32e:	2b02      	cmp	r3, #2
 800d330:	d8a7      	bhi.n	800d282 <__ssvfiscanf_r+0xee>
 800d332:	2305      	movs	r3, #5
 800d334:	e01b      	b.n	800d36e <__ssvfiscanf_r+0x1da>
 800d336:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d338:	4621      	mov	r1, r4
 800d33a:	4630      	mov	r0, r6
 800d33c:	4798      	blx	r3
 800d33e:	2800      	cmp	r0, #0
 800d340:	f43f af68 	beq.w	800d214 <__ssvfiscanf_r+0x80>
 800d344:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d346:	2800      	cmp	r0, #0
 800d348:	f040 808d 	bne.w	800d466 <__ssvfiscanf_r+0x2d2>
 800d34c:	f04f 30ff 	mov.w	r0, #4294967295
 800d350:	e08f      	b.n	800d472 <__ssvfiscanf_r+0x2de>
 800d352:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d354:	f042 0220 	orr.w	r2, r2, #32
 800d358:	9241      	str	r2, [sp, #260]	; 0x104
 800d35a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d35c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d360:	9241      	str	r2, [sp, #260]	; 0x104
 800d362:	2210      	movs	r2, #16
 800d364:	2b6f      	cmp	r3, #111	; 0x6f
 800d366:	9242      	str	r2, [sp, #264]	; 0x108
 800d368:	bf34      	ite	cc
 800d36a:	2303      	movcc	r3, #3
 800d36c:	2304      	movcs	r3, #4
 800d36e:	9347      	str	r3, [sp, #284]	; 0x11c
 800d370:	6863      	ldr	r3, [r4, #4]
 800d372:	2b00      	cmp	r3, #0
 800d374:	dd42      	ble.n	800d3fc <__ssvfiscanf_r+0x268>
 800d376:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d378:	0659      	lsls	r1, r3, #25
 800d37a:	d404      	bmi.n	800d386 <__ssvfiscanf_r+0x1f2>
 800d37c:	6823      	ldr	r3, [r4, #0]
 800d37e:	781a      	ldrb	r2, [r3, #0]
 800d380:	5cba      	ldrb	r2, [r7, r2]
 800d382:	0712      	lsls	r2, r2, #28
 800d384:	d441      	bmi.n	800d40a <__ssvfiscanf_r+0x276>
 800d386:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d388:	2b02      	cmp	r3, #2
 800d38a:	dc50      	bgt.n	800d42e <__ssvfiscanf_r+0x29a>
 800d38c:	466b      	mov	r3, sp
 800d38e:	4622      	mov	r2, r4
 800d390:	a941      	add	r1, sp, #260	; 0x104
 800d392:	4630      	mov	r0, r6
 800d394:	f000 fa0a 	bl	800d7ac <_scanf_chars>
 800d398:	2801      	cmp	r0, #1
 800d39a:	d06e      	beq.n	800d47a <__ssvfiscanf_r+0x2e6>
 800d39c:	2802      	cmp	r0, #2
 800d39e:	f47f af20 	bne.w	800d1e2 <__ssvfiscanf_r+0x4e>
 800d3a2:	e7cf      	b.n	800d344 <__ssvfiscanf_r+0x1b0>
 800d3a4:	220a      	movs	r2, #10
 800d3a6:	e7dd      	b.n	800d364 <__ssvfiscanf_r+0x1d0>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	9342      	str	r3, [sp, #264]	; 0x108
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e7de      	b.n	800d36e <__ssvfiscanf_r+0x1da>
 800d3b0:	2308      	movs	r3, #8
 800d3b2:	9342      	str	r3, [sp, #264]	; 0x108
 800d3b4:	2304      	movs	r3, #4
 800d3b6:	e7da      	b.n	800d36e <__ssvfiscanf_r+0x1da>
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	f000 fb48 	bl	800da50 <__sccl>
 800d3c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3c6:	9341      	str	r3, [sp, #260]	; 0x104
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e7cf      	b.n	800d36e <__ssvfiscanf_r+0x1da>
 800d3ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3d4:	9341      	str	r3, [sp, #260]	; 0x104
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e7c9      	b.n	800d36e <__ssvfiscanf_r+0x1da>
 800d3da:	2302      	movs	r3, #2
 800d3dc:	e7c7      	b.n	800d36e <__ssvfiscanf_r+0x1da>
 800d3de:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d3e0:	06c3      	lsls	r3, r0, #27
 800d3e2:	f53f aefe 	bmi.w	800d1e2 <__ssvfiscanf_r+0x4e>
 800d3e6:	9b00      	ldr	r3, [sp, #0]
 800d3e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d3ea:	1d19      	adds	r1, r3, #4
 800d3ec:	9100      	str	r1, [sp, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f010 0f01 	tst.w	r0, #1
 800d3f4:	bf14      	ite	ne
 800d3f6:	801a      	strhne	r2, [r3, #0]
 800d3f8:	601a      	streq	r2, [r3, #0]
 800d3fa:	e6f2      	b.n	800d1e2 <__ssvfiscanf_r+0x4e>
 800d3fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d3fe:	4621      	mov	r1, r4
 800d400:	4630      	mov	r0, r6
 800d402:	4798      	blx	r3
 800d404:	2800      	cmp	r0, #0
 800d406:	d0b6      	beq.n	800d376 <__ssvfiscanf_r+0x1e2>
 800d408:	e79c      	b.n	800d344 <__ssvfiscanf_r+0x1b0>
 800d40a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d40c:	3201      	adds	r2, #1
 800d40e:	9245      	str	r2, [sp, #276]	; 0x114
 800d410:	6862      	ldr	r2, [r4, #4]
 800d412:	3a01      	subs	r2, #1
 800d414:	2a00      	cmp	r2, #0
 800d416:	6062      	str	r2, [r4, #4]
 800d418:	dd02      	ble.n	800d420 <__ssvfiscanf_r+0x28c>
 800d41a:	3301      	adds	r3, #1
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	e7ad      	b.n	800d37c <__ssvfiscanf_r+0x1e8>
 800d420:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d422:	4621      	mov	r1, r4
 800d424:	4630      	mov	r0, r6
 800d426:	4798      	blx	r3
 800d428:	2800      	cmp	r0, #0
 800d42a:	d0a7      	beq.n	800d37c <__ssvfiscanf_r+0x1e8>
 800d42c:	e78a      	b.n	800d344 <__ssvfiscanf_r+0x1b0>
 800d42e:	2b04      	cmp	r3, #4
 800d430:	dc0e      	bgt.n	800d450 <__ssvfiscanf_r+0x2bc>
 800d432:	466b      	mov	r3, sp
 800d434:	4622      	mov	r2, r4
 800d436:	a941      	add	r1, sp, #260	; 0x104
 800d438:	4630      	mov	r0, r6
 800d43a:	f000 fa11 	bl	800d860 <_scanf_i>
 800d43e:	e7ab      	b.n	800d398 <__ssvfiscanf_r+0x204>
 800d440:	0800d0e1 	.word	0x0800d0e1
 800d444:	0800d15b 	.word	0x0800d15b
 800d448:	0800f08f 	.word	0x0800f08f
 800d44c:	0800f046 	.word	0x0800f046
 800d450:	4b0b      	ldr	r3, [pc, #44]	; (800d480 <__ssvfiscanf_r+0x2ec>)
 800d452:	2b00      	cmp	r3, #0
 800d454:	f43f aec5 	beq.w	800d1e2 <__ssvfiscanf_r+0x4e>
 800d458:	466b      	mov	r3, sp
 800d45a:	4622      	mov	r2, r4
 800d45c:	a941      	add	r1, sp, #260	; 0x104
 800d45e:	4630      	mov	r0, r6
 800d460:	f3af 8000 	nop.w
 800d464:	e798      	b.n	800d398 <__ssvfiscanf_r+0x204>
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d46c:	bf18      	it	ne
 800d46e:	f04f 30ff 	movne.w	r0, #4294967295
 800d472:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d47a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d47c:	e7f9      	b.n	800d472 <__ssvfiscanf_r+0x2de>
 800d47e:	bf00      	nop
 800d480:	00000000 	.word	0x00000000

0800d484 <_printf_common>:
 800d484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d488:	4616      	mov	r6, r2
 800d48a:	4699      	mov	r9, r3
 800d48c:	688a      	ldr	r2, [r1, #8]
 800d48e:	690b      	ldr	r3, [r1, #16]
 800d490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d494:	4293      	cmp	r3, r2
 800d496:	bfb8      	it	lt
 800d498:	4613      	movlt	r3, r2
 800d49a:	6033      	str	r3, [r6, #0]
 800d49c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4a0:	4607      	mov	r7, r0
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	b10a      	cbz	r2, 800d4aa <_printf_common+0x26>
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	6033      	str	r3, [r6, #0]
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	0699      	lsls	r1, r3, #26
 800d4ae:	bf42      	ittt	mi
 800d4b0:	6833      	ldrmi	r3, [r6, #0]
 800d4b2:	3302      	addmi	r3, #2
 800d4b4:	6033      	strmi	r3, [r6, #0]
 800d4b6:	6825      	ldr	r5, [r4, #0]
 800d4b8:	f015 0506 	ands.w	r5, r5, #6
 800d4bc:	d106      	bne.n	800d4cc <_printf_common+0x48>
 800d4be:	f104 0a19 	add.w	sl, r4, #25
 800d4c2:	68e3      	ldr	r3, [r4, #12]
 800d4c4:	6832      	ldr	r2, [r6, #0]
 800d4c6:	1a9b      	subs	r3, r3, r2
 800d4c8:	42ab      	cmp	r3, r5
 800d4ca:	dc26      	bgt.n	800d51a <_printf_common+0x96>
 800d4cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4d0:	1e13      	subs	r3, r2, #0
 800d4d2:	6822      	ldr	r2, [r4, #0]
 800d4d4:	bf18      	it	ne
 800d4d6:	2301      	movne	r3, #1
 800d4d8:	0692      	lsls	r2, r2, #26
 800d4da:	d42b      	bmi.n	800d534 <_printf_common+0xb0>
 800d4dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4e0:	4649      	mov	r1, r9
 800d4e2:	4638      	mov	r0, r7
 800d4e4:	47c0      	blx	r8
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	d01e      	beq.n	800d528 <_printf_common+0xa4>
 800d4ea:	6823      	ldr	r3, [r4, #0]
 800d4ec:	68e5      	ldr	r5, [r4, #12]
 800d4ee:	6832      	ldr	r2, [r6, #0]
 800d4f0:	f003 0306 	and.w	r3, r3, #6
 800d4f4:	2b04      	cmp	r3, #4
 800d4f6:	bf08      	it	eq
 800d4f8:	1aad      	subeq	r5, r5, r2
 800d4fa:	68a3      	ldr	r3, [r4, #8]
 800d4fc:	6922      	ldr	r2, [r4, #16]
 800d4fe:	bf0c      	ite	eq
 800d500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d504:	2500      	movne	r5, #0
 800d506:	4293      	cmp	r3, r2
 800d508:	bfc4      	itt	gt
 800d50a:	1a9b      	subgt	r3, r3, r2
 800d50c:	18ed      	addgt	r5, r5, r3
 800d50e:	2600      	movs	r6, #0
 800d510:	341a      	adds	r4, #26
 800d512:	42b5      	cmp	r5, r6
 800d514:	d11a      	bne.n	800d54c <_printf_common+0xc8>
 800d516:	2000      	movs	r0, #0
 800d518:	e008      	b.n	800d52c <_printf_common+0xa8>
 800d51a:	2301      	movs	r3, #1
 800d51c:	4652      	mov	r2, sl
 800d51e:	4649      	mov	r1, r9
 800d520:	4638      	mov	r0, r7
 800d522:	47c0      	blx	r8
 800d524:	3001      	adds	r0, #1
 800d526:	d103      	bne.n	800d530 <_printf_common+0xac>
 800d528:	f04f 30ff 	mov.w	r0, #4294967295
 800d52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d530:	3501      	adds	r5, #1
 800d532:	e7c6      	b.n	800d4c2 <_printf_common+0x3e>
 800d534:	18e1      	adds	r1, r4, r3
 800d536:	1c5a      	adds	r2, r3, #1
 800d538:	2030      	movs	r0, #48	; 0x30
 800d53a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d53e:	4422      	add	r2, r4
 800d540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d548:	3302      	adds	r3, #2
 800d54a:	e7c7      	b.n	800d4dc <_printf_common+0x58>
 800d54c:	2301      	movs	r3, #1
 800d54e:	4622      	mov	r2, r4
 800d550:	4649      	mov	r1, r9
 800d552:	4638      	mov	r0, r7
 800d554:	47c0      	blx	r8
 800d556:	3001      	adds	r0, #1
 800d558:	d0e6      	beq.n	800d528 <_printf_common+0xa4>
 800d55a:	3601      	adds	r6, #1
 800d55c:	e7d9      	b.n	800d512 <_printf_common+0x8e>
	...

0800d560 <_printf_i>:
 800d560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d564:	7e0f      	ldrb	r7, [r1, #24]
 800d566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d568:	2f78      	cmp	r7, #120	; 0x78
 800d56a:	4691      	mov	r9, r2
 800d56c:	4680      	mov	r8, r0
 800d56e:	460c      	mov	r4, r1
 800d570:	469a      	mov	sl, r3
 800d572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d576:	d807      	bhi.n	800d588 <_printf_i+0x28>
 800d578:	2f62      	cmp	r7, #98	; 0x62
 800d57a:	d80a      	bhi.n	800d592 <_printf_i+0x32>
 800d57c:	2f00      	cmp	r7, #0
 800d57e:	f000 80d8 	beq.w	800d732 <_printf_i+0x1d2>
 800d582:	2f58      	cmp	r7, #88	; 0x58
 800d584:	f000 80a3 	beq.w	800d6ce <_printf_i+0x16e>
 800d588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d58c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d590:	e03a      	b.n	800d608 <_printf_i+0xa8>
 800d592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d596:	2b15      	cmp	r3, #21
 800d598:	d8f6      	bhi.n	800d588 <_printf_i+0x28>
 800d59a:	a101      	add	r1, pc, #4	; (adr r1, 800d5a0 <_printf_i+0x40>)
 800d59c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5a0:	0800d5f9 	.word	0x0800d5f9
 800d5a4:	0800d60d 	.word	0x0800d60d
 800d5a8:	0800d589 	.word	0x0800d589
 800d5ac:	0800d589 	.word	0x0800d589
 800d5b0:	0800d589 	.word	0x0800d589
 800d5b4:	0800d589 	.word	0x0800d589
 800d5b8:	0800d60d 	.word	0x0800d60d
 800d5bc:	0800d589 	.word	0x0800d589
 800d5c0:	0800d589 	.word	0x0800d589
 800d5c4:	0800d589 	.word	0x0800d589
 800d5c8:	0800d589 	.word	0x0800d589
 800d5cc:	0800d719 	.word	0x0800d719
 800d5d0:	0800d63d 	.word	0x0800d63d
 800d5d4:	0800d6fb 	.word	0x0800d6fb
 800d5d8:	0800d589 	.word	0x0800d589
 800d5dc:	0800d589 	.word	0x0800d589
 800d5e0:	0800d73b 	.word	0x0800d73b
 800d5e4:	0800d589 	.word	0x0800d589
 800d5e8:	0800d63d 	.word	0x0800d63d
 800d5ec:	0800d589 	.word	0x0800d589
 800d5f0:	0800d589 	.word	0x0800d589
 800d5f4:	0800d703 	.word	0x0800d703
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	1d1a      	adds	r2, r3, #4
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	602a      	str	r2, [r5, #0]
 800d600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d608:	2301      	movs	r3, #1
 800d60a:	e0a3      	b.n	800d754 <_printf_i+0x1f4>
 800d60c:	6820      	ldr	r0, [r4, #0]
 800d60e:	6829      	ldr	r1, [r5, #0]
 800d610:	0606      	lsls	r6, r0, #24
 800d612:	f101 0304 	add.w	r3, r1, #4
 800d616:	d50a      	bpl.n	800d62e <_printf_i+0xce>
 800d618:	680e      	ldr	r6, [r1, #0]
 800d61a:	602b      	str	r3, [r5, #0]
 800d61c:	2e00      	cmp	r6, #0
 800d61e:	da03      	bge.n	800d628 <_printf_i+0xc8>
 800d620:	232d      	movs	r3, #45	; 0x2d
 800d622:	4276      	negs	r6, r6
 800d624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d628:	485e      	ldr	r0, [pc, #376]	; (800d7a4 <_printf_i+0x244>)
 800d62a:	230a      	movs	r3, #10
 800d62c:	e019      	b.n	800d662 <_printf_i+0x102>
 800d62e:	680e      	ldr	r6, [r1, #0]
 800d630:	602b      	str	r3, [r5, #0]
 800d632:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d636:	bf18      	it	ne
 800d638:	b236      	sxthne	r6, r6
 800d63a:	e7ef      	b.n	800d61c <_printf_i+0xbc>
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	6820      	ldr	r0, [r4, #0]
 800d640:	1d19      	adds	r1, r3, #4
 800d642:	6029      	str	r1, [r5, #0]
 800d644:	0601      	lsls	r1, r0, #24
 800d646:	d501      	bpl.n	800d64c <_printf_i+0xec>
 800d648:	681e      	ldr	r6, [r3, #0]
 800d64a:	e002      	b.n	800d652 <_printf_i+0xf2>
 800d64c:	0646      	lsls	r6, r0, #25
 800d64e:	d5fb      	bpl.n	800d648 <_printf_i+0xe8>
 800d650:	881e      	ldrh	r6, [r3, #0]
 800d652:	4854      	ldr	r0, [pc, #336]	; (800d7a4 <_printf_i+0x244>)
 800d654:	2f6f      	cmp	r7, #111	; 0x6f
 800d656:	bf0c      	ite	eq
 800d658:	2308      	moveq	r3, #8
 800d65a:	230a      	movne	r3, #10
 800d65c:	2100      	movs	r1, #0
 800d65e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d662:	6865      	ldr	r5, [r4, #4]
 800d664:	60a5      	str	r5, [r4, #8]
 800d666:	2d00      	cmp	r5, #0
 800d668:	bfa2      	ittt	ge
 800d66a:	6821      	ldrge	r1, [r4, #0]
 800d66c:	f021 0104 	bicge.w	r1, r1, #4
 800d670:	6021      	strge	r1, [r4, #0]
 800d672:	b90e      	cbnz	r6, 800d678 <_printf_i+0x118>
 800d674:	2d00      	cmp	r5, #0
 800d676:	d04d      	beq.n	800d714 <_printf_i+0x1b4>
 800d678:	4615      	mov	r5, r2
 800d67a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d67e:	fb03 6711 	mls	r7, r3, r1, r6
 800d682:	5dc7      	ldrb	r7, [r0, r7]
 800d684:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d688:	4637      	mov	r7, r6
 800d68a:	42bb      	cmp	r3, r7
 800d68c:	460e      	mov	r6, r1
 800d68e:	d9f4      	bls.n	800d67a <_printf_i+0x11a>
 800d690:	2b08      	cmp	r3, #8
 800d692:	d10b      	bne.n	800d6ac <_printf_i+0x14c>
 800d694:	6823      	ldr	r3, [r4, #0]
 800d696:	07de      	lsls	r6, r3, #31
 800d698:	d508      	bpl.n	800d6ac <_printf_i+0x14c>
 800d69a:	6923      	ldr	r3, [r4, #16]
 800d69c:	6861      	ldr	r1, [r4, #4]
 800d69e:	4299      	cmp	r1, r3
 800d6a0:	bfde      	ittt	le
 800d6a2:	2330      	movle	r3, #48	; 0x30
 800d6a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6ac:	1b52      	subs	r2, r2, r5
 800d6ae:	6122      	str	r2, [r4, #16]
 800d6b0:	f8cd a000 	str.w	sl, [sp]
 800d6b4:	464b      	mov	r3, r9
 800d6b6:	aa03      	add	r2, sp, #12
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	4640      	mov	r0, r8
 800d6bc:	f7ff fee2 	bl	800d484 <_printf_common>
 800d6c0:	3001      	adds	r0, #1
 800d6c2:	d14c      	bne.n	800d75e <_printf_i+0x1fe>
 800d6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c8:	b004      	add	sp, #16
 800d6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ce:	4835      	ldr	r0, [pc, #212]	; (800d7a4 <_printf_i+0x244>)
 800d6d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d6d4:	6829      	ldr	r1, [r5, #0]
 800d6d6:	6823      	ldr	r3, [r4, #0]
 800d6d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6dc:	6029      	str	r1, [r5, #0]
 800d6de:	061d      	lsls	r5, r3, #24
 800d6e0:	d514      	bpl.n	800d70c <_printf_i+0x1ac>
 800d6e2:	07df      	lsls	r7, r3, #31
 800d6e4:	bf44      	itt	mi
 800d6e6:	f043 0320 	orrmi.w	r3, r3, #32
 800d6ea:	6023      	strmi	r3, [r4, #0]
 800d6ec:	b91e      	cbnz	r6, 800d6f6 <_printf_i+0x196>
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	f023 0320 	bic.w	r3, r3, #32
 800d6f4:	6023      	str	r3, [r4, #0]
 800d6f6:	2310      	movs	r3, #16
 800d6f8:	e7b0      	b.n	800d65c <_printf_i+0xfc>
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	f043 0320 	orr.w	r3, r3, #32
 800d700:	6023      	str	r3, [r4, #0]
 800d702:	2378      	movs	r3, #120	; 0x78
 800d704:	4828      	ldr	r0, [pc, #160]	; (800d7a8 <_printf_i+0x248>)
 800d706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d70a:	e7e3      	b.n	800d6d4 <_printf_i+0x174>
 800d70c:	0659      	lsls	r1, r3, #25
 800d70e:	bf48      	it	mi
 800d710:	b2b6      	uxthmi	r6, r6
 800d712:	e7e6      	b.n	800d6e2 <_printf_i+0x182>
 800d714:	4615      	mov	r5, r2
 800d716:	e7bb      	b.n	800d690 <_printf_i+0x130>
 800d718:	682b      	ldr	r3, [r5, #0]
 800d71a:	6826      	ldr	r6, [r4, #0]
 800d71c:	6961      	ldr	r1, [r4, #20]
 800d71e:	1d18      	adds	r0, r3, #4
 800d720:	6028      	str	r0, [r5, #0]
 800d722:	0635      	lsls	r5, r6, #24
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	d501      	bpl.n	800d72c <_printf_i+0x1cc>
 800d728:	6019      	str	r1, [r3, #0]
 800d72a:	e002      	b.n	800d732 <_printf_i+0x1d2>
 800d72c:	0670      	lsls	r0, r6, #25
 800d72e:	d5fb      	bpl.n	800d728 <_printf_i+0x1c8>
 800d730:	8019      	strh	r1, [r3, #0]
 800d732:	2300      	movs	r3, #0
 800d734:	6123      	str	r3, [r4, #16]
 800d736:	4615      	mov	r5, r2
 800d738:	e7ba      	b.n	800d6b0 <_printf_i+0x150>
 800d73a:	682b      	ldr	r3, [r5, #0]
 800d73c:	1d1a      	adds	r2, r3, #4
 800d73e:	602a      	str	r2, [r5, #0]
 800d740:	681d      	ldr	r5, [r3, #0]
 800d742:	6862      	ldr	r2, [r4, #4]
 800d744:	2100      	movs	r1, #0
 800d746:	4628      	mov	r0, r5
 800d748:	f7f2 fd52 	bl	80001f0 <memchr>
 800d74c:	b108      	cbz	r0, 800d752 <_printf_i+0x1f2>
 800d74e:	1b40      	subs	r0, r0, r5
 800d750:	6060      	str	r0, [r4, #4]
 800d752:	6863      	ldr	r3, [r4, #4]
 800d754:	6123      	str	r3, [r4, #16]
 800d756:	2300      	movs	r3, #0
 800d758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d75c:	e7a8      	b.n	800d6b0 <_printf_i+0x150>
 800d75e:	6923      	ldr	r3, [r4, #16]
 800d760:	462a      	mov	r2, r5
 800d762:	4649      	mov	r1, r9
 800d764:	4640      	mov	r0, r8
 800d766:	47d0      	blx	sl
 800d768:	3001      	adds	r0, #1
 800d76a:	d0ab      	beq.n	800d6c4 <_printf_i+0x164>
 800d76c:	6823      	ldr	r3, [r4, #0]
 800d76e:	079b      	lsls	r3, r3, #30
 800d770:	d413      	bmi.n	800d79a <_printf_i+0x23a>
 800d772:	68e0      	ldr	r0, [r4, #12]
 800d774:	9b03      	ldr	r3, [sp, #12]
 800d776:	4298      	cmp	r0, r3
 800d778:	bfb8      	it	lt
 800d77a:	4618      	movlt	r0, r3
 800d77c:	e7a4      	b.n	800d6c8 <_printf_i+0x168>
 800d77e:	2301      	movs	r3, #1
 800d780:	4632      	mov	r2, r6
 800d782:	4649      	mov	r1, r9
 800d784:	4640      	mov	r0, r8
 800d786:	47d0      	blx	sl
 800d788:	3001      	adds	r0, #1
 800d78a:	d09b      	beq.n	800d6c4 <_printf_i+0x164>
 800d78c:	3501      	adds	r5, #1
 800d78e:	68e3      	ldr	r3, [r4, #12]
 800d790:	9903      	ldr	r1, [sp, #12]
 800d792:	1a5b      	subs	r3, r3, r1
 800d794:	42ab      	cmp	r3, r5
 800d796:	dcf2      	bgt.n	800d77e <_printf_i+0x21e>
 800d798:	e7eb      	b.n	800d772 <_printf_i+0x212>
 800d79a:	2500      	movs	r5, #0
 800d79c:	f104 0619 	add.w	r6, r4, #25
 800d7a0:	e7f5      	b.n	800d78e <_printf_i+0x22e>
 800d7a2:	bf00      	nop
 800d7a4:	0800f051 	.word	0x0800f051
 800d7a8:	0800f062 	.word	0x0800f062

0800d7ac <_scanf_chars>:
 800d7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7b0:	4615      	mov	r5, r2
 800d7b2:	688a      	ldr	r2, [r1, #8]
 800d7b4:	4680      	mov	r8, r0
 800d7b6:	460c      	mov	r4, r1
 800d7b8:	b932      	cbnz	r2, 800d7c8 <_scanf_chars+0x1c>
 800d7ba:	698a      	ldr	r2, [r1, #24]
 800d7bc:	2a00      	cmp	r2, #0
 800d7be:	bf0c      	ite	eq
 800d7c0:	2201      	moveq	r2, #1
 800d7c2:	f04f 32ff 	movne.w	r2, #4294967295
 800d7c6:	608a      	str	r2, [r1, #8]
 800d7c8:	6822      	ldr	r2, [r4, #0]
 800d7ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d85c <_scanf_chars+0xb0>
 800d7ce:	06d1      	lsls	r1, r2, #27
 800d7d0:	bf5f      	itttt	pl
 800d7d2:	681a      	ldrpl	r2, [r3, #0]
 800d7d4:	1d11      	addpl	r1, r2, #4
 800d7d6:	6019      	strpl	r1, [r3, #0]
 800d7d8:	6816      	ldrpl	r6, [r2, #0]
 800d7da:	2700      	movs	r7, #0
 800d7dc:	69a0      	ldr	r0, [r4, #24]
 800d7de:	b188      	cbz	r0, 800d804 <_scanf_chars+0x58>
 800d7e0:	2801      	cmp	r0, #1
 800d7e2:	d107      	bne.n	800d7f4 <_scanf_chars+0x48>
 800d7e4:	682a      	ldr	r2, [r5, #0]
 800d7e6:	7811      	ldrb	r1, [r2, #0]
 800d7e8:	6962      	ldr	r2, [r4, #20]
 800d7ea:	5c52      	ldrb	r2, [r2, r1]
 800d7ec:	b952      	cbnz	r2, 800d804 <_scanf_chars+0x58>
 800d7ee:	2f00      	cmp	r7, #0
 800d7f0:	d031      	beq.n	800d856 <_scanf_chars+0xaa>
 800d7f2:	e022      	b.n	800d83a <_scanf_chars+0x8e>
 800d7f4:	2802      	cmp	r0, #2
 800d7f6:	d120      	bne.n	800d83a <_scanf_chars+0x8e>
 800d7f8:	682b      	ldr	r3, [r5, #0]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d800:	071b      	lsls	r3, r3, #28
 800d802:	d41a      	bmi.n	800d83a <_scanf_chars+0x8e>
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	06da      	lsls	r2, r3, #27
 800d808:	bf5e      	ittt	pl
 800d80a:	682b      	ldrpl	r3, [r5, #0]
 800d80c:	781b      	ldrbpl	r3, [r3, #0]
 800d80e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d812:	682a      	ldr	r2, [r5, #0]
 800d814:	686b      	ldr	r3, [r5, #4]
 800d816:	3201      	adds	r2, #1
 800d818:	602a      	str	r2, [r5, #0]
 800d81a:	68a2      	ldr	r2, [r4, #8]
 800d81c:	3b01      	subs	r3, #1
 800d81e:	3a01      	subs	r2, #1
 800d820:	606b      	str	r3, [r5, #4]
 800d822:	3701      	adds	r7, #1
 800d824:	60a2      	str	r2, [r4, #8]
 800d826:	b142      	cbz	r2, 800d83a <_scanf_chars+0x8e>
 800d828:	2b00      	cmp	r3, #0
 800d82a:	dcd7      	bgt.n	800d7dc <_scanf_chars+0x30>
 800d82c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d830:	4629      	mov	r1, r5
 800d832:	4640      	mov	r0, r8
 800d834:	4798      	blx	r3
 800d836:	2800      	cmp	r0, #0
 800d838:	d0d0      	beq.n	800d7dc <_scanf_chars+0x30>
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	f013 0310 	ands.w	r3, r3, #16
 800d840:	d105      	bne.n	800d84e <_scanf_chars+0xa2>
 800d842:	68e2      	ldr	r2, [r4, #12]
 800d844:	3201      	adds	r2, #1
 800d846:	60e2      	str	r2, [r4, #12]
 800d848:	69a2      	ldr	r2, [r4, #24]
 800d84a:	b102      	cbz	r2, 800d84e <_scanf_chars+0xa2>
 800d84c:	7033      	strb	r3, [r6, #0]
 800d84e:	6923      	ldr	r3, [r4, #16]
 800d850:	443b      	add	r3, r7
 800d852:	6123      	str	r3, [r4, #16]
 800d854:	2000      	movs	r0, #0
 800d856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d85a:	bf00      	nop
 800d85c:	0800f08f 	.word	0x0800f08f

0800d860 <_scanf_i>:
 800d860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d864:	4698      	mov	r8, r3
 800d866:	4b76      	ldr	r3, [pc, #472]	; (800da40 <_scanf_i+0x1e0>)
 800d868:	460c      	mov	r4, r1
 800d86a:	4682      	mov	sl, r0
 800d86c:	4616      	mov	r6, r2
 800d86e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d872:	b087      	sub	sp, #28
 800d874:	ab03      	add	r3, sp, #12
 800d876:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d87a:	4b72      	ldr	r3, [pc, #456]	; (800da44 <_scanf_i+0x1e4>)
 800d87c:	69a1      	ldr	r1, [r4, #24]
 800d87e:	4a72      	ldr	r2, [pc, #456]	; (800da48 <_scanf_i+0x1e8>)
 800d880:	2903      	cmp	r1, #3
 800d882:	bf18      	it	ne
 800d884:	461a      	movne	r2, r3
 800d886:	68a3      	ldr	r3, [r4, #8]
 800d888:	9201      	str	r2, [sp, #4]
 800d88a:	1e5a      	subs	r2, r3, #1
 800d88c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d890:	bf88      	it	hi
 800d892:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d896:	4627      	mov	r7, r4
 800d898:	bf82      	ittt	hi
 800d89a:	eb03 0905 	addhi.w	r9, r3, r5
 800d89e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d8a2:	60a3      	strhi	r3, [r4, #8]
 800d8a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d8a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d8ac:	bf98      	it	ls
 800d8ae:	f04f 0900 	movls.w	r9, #0
 800d8b2:	6023      	str	r3, [r4, #0]
 800d8b4:	463d      	mov	r5, r7
 800d8b6:	f04f 0b00 	mov.w	fp, #0
 800d8ba:	6831      	ldr	r1, [r6, #0]
 800d8bc:	ab03      	add	r3, sp, #12
 800d8be:	7809      	ldrb	r1, [r1, #0]
 800d8c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d8c4:	2202      	movs	r2, #2
 800d8c6:	f7f2 fc93 	bl	80001f0 <memchr>
 800d8ca:	b328      	cbz	r0, 800d918 <_scanf_i+0xb8>
 800d8cc:	f1bb 0f01 	cmp.w	fp, #1
 800d8d0:	d159      	bne.n	800d986 <_scanf_i+0x126>
 800d8d2:	6862      	ldr	r2, [r4, #4]
 800d8d4:	b92a      	cbnz	r2, 800d8e2 <_scanf_i+0x82>
 800d8d6:	6822      	ldr	r2, [r4, #0]
 800d8d8:	2308      	movs	r3, #8
 800d8da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8de:	6063      	str	r3, [r4, #4]
 800d8e0:	6022      	str	r2, [r4, #0]
 800d8e2:	6822      	ldr	r2, [r4, #0]
 800d8e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d8e8:	6022      	str	r2, [r4, #0]
 800d8ea:	68a2      	ldr	r2, [r4, #8]
 800d8ec:	1e51      	subs	r1, r2, #1
 800d8ee:	60a1      	str	r1, [r4, #8]
 800d8f0:	b192      	cbz	r2, 800d918 <_scanf_i+0xb8>
 800d8f2:	6832      	ldr	r2, [r6, #0]
 800d8f4:	1c51      	adds	r1, r2, #1
 800d8f6:	6031      	str	r1, [r6, #0]
 800d8f8:	7812      	ldrb	r2, [r2, #0]
 800d8fa:	f805 2b01 	strb.w	r2, [r5], #1
 800d8fe:	6872      	ldr	r2, [r6, #4]
 800d900:	3a01      	subs	r2, #1
 800d902:	2a00      	cmp	r2, #0
 800d904:	6072      	str	r2, [r6, #4]
 800d906:	dc07      	bgt.n	800d918 <_scanf_i+0xb8>
 800d908:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d90c:	4631      	mov	r1, r6
 800d90e:	4650      	mov	r0, sl
 800d910:	4790      	blx	r2
 800d912:	2800      	cmp	r0, #0
 800d914:	f040 8085 	bne.w	800da22 <_scanf_i+0x1c2>
 800d918:	f10b 0b01 	add.w	fp, fp, #1
 800d91c:	f1bb 0f03 	cmp.w	fp, #3
 800d920:	d1cb      	bne.n	800d8ba <_scanf_i+0x5a>
 800d922:	6863      	ldr	r3, [r4, #4]
 800d924:	b90b      	cbnz	r3, 800d92a <_scanf_i+0xca>
 800d926:	230a      	movs	r3, #10
 800d928:	6063      	str	r3, [r4, #4]
 800d92a:	6863      	ldr	r3, [r4, #4]
 800d92c:	4947      	ldr	r1, [pc, #284]	; (800da4c <_scanf_i+0x1ec>)
 800d92e:	6960      	ldr	r0, [r4, #20]
 800d930:	1ac9      	subs	r1, r1, r3
 800d932:	f000 f88d 	bl	800da50 <__sccl>
 800d936:	f04f 0b00 	mov.w	fp, #0
 800d93a:	68a3      	ldr	r3, [r4, #8]
 800d93c:	6822      	ldr	r2, [r4, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d03d      	beq.n	800d9be <_scanf_i+0x15e>
 800d942:	6831      	ldr	r1, [r6, #0]
 800d944:	6960      	ldr	r0, [r4, #20]
 800d946:	f891 c000 	ldrb.w	ip, [r1]
 800d94a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d94e:	2800      	cmp	r0, #0
 800d950:	d035      	beq.n	800d9be <_scanf_i+0x15e>
 800d952:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d956:	d124      	bne.n	800d9a2 <_scanf_i+0x142>
 800d958:	0510      	lsls	r0, r2, #20
 800d95a:	d522      	bpl.n	800d9a2 <_scanf_i+0x142>
 800d95c:	f10b 0b01 	add.w	fp, fp, #1
 800d960:	f1b9 0f00 	cmp.w	r9, #0
 800d964:	d003      	beq.n	800d96e <_scanf_i+0x10e>
 800d966:	3301      	adds	r3, #1
 800d968:	f109 39ff 	add.w	r9, r9, #4294967295
 800d96c:	60a3      	str	r3, [r4, #8]
 800d96e:	6873      	ldr	r3, [r6, #4]
 800d970:	3b01      	subs	r3, #1
 800d972:	2b00      	cmp	r3, #0
 800d974:	6073      	str	r3, [r6, #4]
 800d976:	dd1b      	ble.n	800d9b0 <_scanf_i+0x150>
 800d978:	6833      	ldr	r3, [r6, #0]
 800d97a:	3301      	adds	r3, #1
 800d97c:	6033      	str	r3, [r6, #0]
 800d97e:	68a3      	ldr	r3, [r4, #8]
 800d980:	3b01      	subs	r3, #1
 800d982:	60a3      	str	r3, [r4, #8]
 800d984:	e7d9      	b.n	800d93a <_scanf_i+0xda>
 800d986:	f1bb 0f02 	cmp.w	fp, #2
 800d98a:	d1ae      	bne.n	800d8ea <_scanf_i+0x8a>
 800d98c:	6822      	ldr	r2, [r4, #0]
 800d98e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d992:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d996:	d1bf      	bne.n	800d918 <_scanf_i+0xb8>
 800d998:	2310      	movs	r3, #16
 800d99a:	6063      	str	r3, [r4, #4]
 800d99c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9a0:	e7a2      	b.n	800d8e8 <_scanf_i+0x88>
 800d9a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d9a6:	6022      	str	r2, [r4, #0]
 800d9a8:	780b      	ldrb	r3, [r1, #0]
 800d9aa:	f805 3b01 	strb.w	r3, [r5], #1
 800d9ae:	e7de      	b.n	800d96e <_scanf_i+0x10e>
 800d9b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d9b4:	4631      	mov	r1, r6
 800d9b6:	4650      	mov	r0, sl
 800d9b8:	4798      	blx	r3
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d0df      	beq.n	800d97e <_scanf_i+0x11e>
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	05db      	lsls	r3, r3, #23
 800d9c2:	d50d      	bpl.n	800d9e0 <_scanf_i+0x180>
 800d9c4:	42bd      	cmp	r5, r7
 800d9c6:	d909      	bls.n	800d9dc <_scanf_i+0x17c>
 800d9c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d9cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9d0:	4632      	mov	r2, r6
 800d9d2:	4650      	mov	r0, sl
 800d9d4:	4798      	blx	r3
 800d9d6:	f105 39ff 	add.w	r9, r5, #4294967295
 800d9da:	464d      	mov	r5, r9
 800d9dc:	42bd      	cmp	r5, r7
 800d9de:	d02d      	beq.n	800da3c <_scanf_i+0x1dc>
 800d9e0:	6822      	ldr	r2, [r4, #0]
 800d9e2:	f012 0210 	ands.w	r2, r2, #16
 800d9e6:	d113      	bne.n	800da10 <_scanf_i+0x1b0>
 800d9e8:	702a      	strb	r2, [r5, #0]
 800d9ea:	6863      	ldr	r3, [r4, #4]
 800d9ec:	9e01      	ldr	r6, [sp, #4]
 800d9ee:	4639      	mov	r1, r7
 800d9f0:	4650      	mov	r0, sl
 800d9f2:	47b0      	blx	r6
 800d9f4:	6821      	ldr	r1, [r4, #0]
 800d9f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d9fa:	f011 0f20 	tst.w	r1, #32
 800d9fe:	d013      	beq.n	800da28 <_scanf_i+0x1c8>
 800da00:	1d1a      	adds	r2, r3, #4
 800da02:	f8c8 2000 	str.w	r2, [r8]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	6018      	str	r0, [r3, #0]
 800da0a:	68e3      	ldr	r3, [r4, #12]
 800da0c:	3301      	adds	r3, #1
 800da0e:	60e3      	str	r3, [r4, #12]
 800da10:	1bed      	subs	r5, r5, r7
 800da12:	44ab      	add	fp, r5
 800da14:	6925      	ldr	r5, [r4, #16]
 800da16:	445d      	add	r5, fp
 800da18:	6125      	str	r5, [r4, #16]
 800da1a:	2000      	movs	r0, #0
 800da1c:	b007      	add	sp, #28
 800da1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da22:	f04f 0b00 	mov.w	fp, #0
 800da26:	e7ca      	b.n	800d9be <_scanf_i+0x15e>
 800da28:	1d1a      	adds	r2, r3, #4
 800da2a:	f8c8 2000 	str.w	r2, [r8]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f011 0f01 	tst.w	r1, #1
 800da34:	bf14      	ite	ne
 800da36:	8018      	strhne	r0, [r3, #0]
 800da38:	6018      	streq	r0, [r3, #0]
 800da3a:	e7e6      	b.n	800da0a <_scanf_i+0x1aa>
 800da3c:	2001      	movs	r0, #1
 800da3e:	e7ed      	b.n	800da1c <_scanf_i+0x1bc>
 800da40:	0800f014 	.word	0x0800f014
 800da44:	0800dcad 	.word	0x0800dcad
 800da48:	0800dbc5 	.word	0x0800dbc5
 800da4c:	0800f08c 	.word	0x0800f08c

0800da50 <__sccl>:
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	780b      	ldrb	r3, [r1, #0]
 800da54:	4604      	mov	r4, r0
 800da56:	2b5e      	cmp	r3, #94	; 0x5e
 800da58:	bf0b      	itete	eq
 800da5a:	784b      	ldrbeq	r3, [r1, #1]
 800da5c:	1c48      	addne	r0, r1, #1
 800da5e:	1c88      	addeq	r0, r1, #2
 800da60:	2200      	movne	r2, #0
 800da62:	bf08      	it	eq
 800da64:	2201      	moveq	r2, #1
 800da66:	1e61      	subs	r1, r4, #1
 800da68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800da6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800da70:	42a9      	cmp	r1, r5
 800da72:	d1fb      	bne.n	800da6c <__sccl+0x1c>
 800da74:	b90b      	cbnz	r3, 800da7a <__sccl+0x2a>
 800da76:	3801      	subs	r0, #1
 800da78:	bd70      	pop	{r4, r5, r6, pc}
 800da7a:	f082 0201 	eor.w	r2, r2, #1
 800da7e:	54e2      	strb	r2, [r4, r3]
 800da80:	4605      	mov	r5, r0
 800da82:	4628      	mov	r0, r5
 800da84:	f810 1b01 	ldrb.w	r1, [r0], #1
 800da88:	292d      	cmp	r1, #45	; 0x2d
 800da8a:	d006      	beq.n	800da9a <__sccl+0x4a>
 800da8c:	295d      	cmp	r1, #93	; 0x5d
 800da8e:	d0f3      	beq.n	800da78 <__sccl+0x28>
 800da90:	b909      	cbnz	r1, 800da96 <__sccl+0x46>
 800da92:	4628      	mov	r0, r5
 800da94:	e7f0      	b.n	800da78 <__sccl+0x28>
 800da96:	460b      	mov	r3, r1
 800da98:	e7f1      	b.n	800da7e <__sccl+0x2e>
 800da9a:	786e      	ldrb	r6, [r5, #1]
 800da9c:	2e5d      	cmp	r6, #93	; 0x5d
 800da9e:	d0fa      	beq.n	800da96 <__sccl+0x46>
 800daa0:	42b3      	cmp	r3, r6
 800daa2:	dcf8      	bgt.n	800da96 <__sccl+0x46>
 800daa4:	3502      	adds	r5, #2
 800daa6:	4619      	mov	r1, r3
 800daa8:	3101      	adds	r1, #1
 800daaa:	428e      	cmp	r6, r1
 800daac:	5462      	strb	r2, [r4, r1]
 800daae:	dcfb      	bgt.n	800daa8 <__sccl+0x58>
 800dab0:	1af1      	subs	r1, r6, r3
 800dab2:	3901      	subs	r1, #1
 800dab4:	1c58      	adds	r0, r3, #1
 800dab6:	42b3      	cmp	r3, r6
 800dab8:	bfa8      	it	ge
 800daba:	2100      	movge	r1, #0
 800dabc:	1843      	adds	r3, r0, r1
 800dabe:	e7e0      	b.n	800da82 <__sccl+0x32>

0800dac0 <_strtol_l.constprop.0>:
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dac6:	d001      	beq.n	800dacc <_strtol_l.constprop.0+0xc>
 800dac8:	2b24      	cmp	r3, #36	; 0x24
 800daca:	d906      	bls.n	800dada <_strtol_l.constprop.0+0x1a>
 800dacc:	f7ff f91e 	bl	800cd0c <__errno>
 800dad0:	2316      	movs	r3, #22
 800dad2:	6003      	str	r3, [r0, #0]
 800dad4:	2000      	movs	r0, #0
 800dad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dada:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dbc0 <_strtol_l.constprop.0+0x100>
 800dade:	460d      	mov	r5, r1
 800dae0:	462e      	mov	r6, r5
 800dae2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dae6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800daea:	f017 0708 	ands.w	r7, r7, #8
 800daee:	d1f7      	bne.n	800dae0 <_strtol_l.constprop.0+0x20>
 800daf0:	2c2d      	cmp	r4, #45	; 0x2d
 800daf2:	d132      	bne.n	800db5a <_strtol_l.constprop.0+0x9a>
 800daf4:	782c      	ldrb	r4, [r5, #0]
 800daf6:	2701      	movs	r7, #1
 800daf8:	1cb5      	adds	r5, r6, #2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d05b      	beq.n	800dbb6 <_strtol_l.constprop.0+0xf6>
 800dafe:	2b10      	cmp	r3, #16
 800db00:	d109      	bne.n	800db16 <_strtol_l.constprop.0+0x56>
 800db02:	2c30      	cmp	r4, #48	; 0x30
 800db04:	d107      	bne.n	800db16 <_strtol_l.constprop.0+0x56>
 800db06:	782c      	ldrb	r4, [r5, #0]
 800db08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800db0c:	2c58      	cmp	r4, #88	; 0x58
 800db0e:	d14d      	bne.n	800dbac <_strtol_l.constprop.0+0xec>
 800db10:	786c      	ldrb	r4, [r5, #1]
 800db12:	2310      	movs	r3, #16
 800db14:	3502      	adds	r5, #2
 800db16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800db1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800db1e:	f04f 0c00 	mov.w	ip, #0
 800db22:	fbb8 f9f3 	udiv	r9, r8, r3
 800db26:	4666      	mov	r6, ip
 800db28:	fb03 8a19 	mls	sl, r3, r9, r8
 800db2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800db30:	f1be 0f09 	cmp.w	lr, #9
 800db34:	d816      	bhi.n	800db64 <_strtol_l.constprop.0+0xa4>
 800db36:	4674      	mov	r4, lr
 800db38:	42a3      	cmp	r3, r4
 800db3a:	dd24      	ble.n	800db86 <_strtol_l.constprop.0+0xc6>
 800db3c:	f1bc 0f00 	cmp.w	ip, #0
 800db40:	db1e      	blt.n	800db80 <_strtol_l.constprop.0+0xc0>
 800db42:	45b1      	cmp	r9, r6
 800db44:	d31c      	bcc.n	800db80 <_strtol_l.constprop.0+0xc0>
 800db46:	d101      	bne.n	800db4c <_strtol_l.constprop.0+0x8c>
 800db48:	45a2      	cmp	sl, r4
 800db4a:	db19      	blt.n	800db80 <_strtol_l.constprop.0+0xc0>
 800db4c:	fb06 4603 	mla	r6, r6, r3, r4
 800db50:	f04f 0c01 	mov.w	ip, #1
 800db54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db58:	e7e8      	b.n	800db2c <_strtol_l.constprop.0+0x6c>
 800db5a:	2c2b      	cmp	r4, #43	; 0x2b
 800db5c:	bf04      	itt	eq
 800db5e:	782c      	ldrbeq	r4, [r5, #0]
 800db60:	1cb5      	addeq	r5, r6, #2
 800db62:	e7ca      	b.n	800dafa <_strtol_l.constprop.0+0x3a>
 800db64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800db68:	f1be 0f19 	cmp.w	lr, #25
 800db6c:	d801      	bhi.n	800db72 <_strtol_l.constprop.0+0xb2>
 800db6e:	3c37      	subs	r4, #55	; 0x37
 800db70:	e7e2      	b.n	800db38 <_strtol_l.constprop.0+0x78>
 800db72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800db76:	f1be 0f19 	cmp.w	lr, #25
 800db7a:	d804      	bhi.n	800db86 <_strtol_l.constprop.0+0xc6>
 800db7c:	3c57      	subs	r4, #87	; 0x57
 800db7e:	e7db      	b.n	800db38 <_strtol_l.constprop.0+0x78>
 800db80:	f04f 3cff 	mov.w	ip, #4294967295
 800db84:	e7e6      	b.n	800db54 <_strtol_l.constprop.0+0x94>
 800db86:	f1bc 0f00 	cmp.w	ip, #0
 800db8a:	da05      	bge.n	800db98 <_strtol_l.constprop.0+0xd8>
 800db8c:	2322      	movs	r3, #34	; 0x22
 800db8e:	6003      	str	r3, [r0, #0]
 800db90:	4646      	mov	r6, r8
 800db92:	b942      	cbnz	r2, 800dba6 <_strtol_l.constprop.0+0xe6>
 800db94:	4630      	mov	r0, r6
 800db96:	e79e      	b.n	800dad6 <_strtol_l.constprop.0+0x16>
 800db98:	b107      	cbz	r7, 800db9c <_strtol_l.constprop.0+0xdc>
 800db9a:	4276      	negs	r6, r6
 800db9c:	2a00      	cmp	r2, #0
 800db9e:	d0f9      	beq.n	800db94 <_strtol_l.constprop.0+0xd4>
 800dba0:	f1bc 0f00 	cmp.w	ip, #0
 800dba4:	d000      	beq.n	800dba8 <_strtol_l.constprop.0+0xe8>
 800dba6:	1e69      	subs	r1, r5, #1
 800dba8:	6011      	str	r1, [r2, #0]
 800dbaa:	e7f3      	b.n	800db94 <_strtol_l.constprop.0+0xd4>
 800dbac:	2430      	movs	r4, #48	; 0x30
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1b1      	bne.n	800db16 <_strtol_l.constprop.0+0x56>
 800dbb2:	2308      	movs	r3, #8
 800dbb4:	e7af      	b.n	800db16 <_strtol_l.constprop.0+0x56>
 800dbb6:	2c30      	cmp	r4, #48	; 0x30
 800dbb8:	d0a5      	beq.n	800db06 <_strtol_l.constprop.0+0x46>
 800dbba:	230a      	movs	r3, #10
 800dbbc:	e7ab      	b.n	800db16 <_strtol_l.constprop.0+0x56>
 800dbbe:	bf00      	nop
 800dbc0:	0800f08f 	.word	0x0800f08f

0800dbc4 <_strtol_r>:
 800dbc4:	f7ff bf7c 	b.w	800dac0 <_strtol_l.constprop.0>

0800dbc8 <_strtoul_l.constprop.0>:
 800dbc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbcc:	4f36      	ldr	r7, [pc, #216]	; (800dca8 <_strtoul_l.constprop.0+0xe0>)
 800dbce:	4686      	mov	lr, r0
 800dbd0:	460d      	mov	r5, r1
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbd8:	5de6      	ldrb	r6, [r4, r7]
 800dbda:	f016 0608 	ands.w	r6, r6, #8
 800dbde:	d1f8      	bne.n	800dbd2 <_strtoul_l.constprop.0+0xa>
 800dbe0:	2c2d      	cmp	r4, #45	; 0x2d
 800dbe2:	d12f      	bne.n	800dc44 <_strtoul_l.constprop.0+0x7c>
 800dbe4:	782c      	ldrb	r4, [r5, #0]
 800dbe6:	2601      	movs	r6, #1
 800dbe8:	1c85      	adds	r5, r0, #2
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d057      	beq.n	800dc9e <_strtoul_l.constprop.0+0xd6>
 800dbee:	2b10      	cmp	r3, #16
 800dbf0:	d109      	bne.n	800dc06 <_strtoul_l.constprop.0+0x3e>
 800dbf2:	2c30      	cmp	r4, #48	; 0x30
 800dbf4:	d107      	bne.n	800dc06 <_strtoul_l.constprop.0+0x3e>
 800dbf6:	7828      	ldrb	r0, [r5, #0]
 800dbf8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dbfc:	2858      	cmp	r0, #88	; 0x58
 800dbfe:	d149      	bne.n	800dc94 <_strtoul_l.constprop.0+0xcc>
 800dc00:	786c      	ldrb	r4, [r5, #1]
 800dc02:	2310      	movs	r3, #16
 800dc04:	3502      	adds	r5, #2
 800dc06:	f04f 38ff 	mov.w	r8, #4294967295
 800dc0a:	2700      	movs	r7, #0
 800dc0c:	fbb8 f8f3 	udiv	r8, r8, r3
 800dc10:	fb03 f908 	mul.w	r9, r3, r8
 800dc14:	ea6f 0909 	mvn.w	r9, r9
 800dc18:	4638      	mov	r0, r7
 800dc1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dc1e:	f1bc 0f09 	cmp.w	ip, #9
 800dc22:	d814      	bhi.n	800dc4e <_strtoul_l.constprop.0+0x86>
 800dc24:	4664      	mov	r4, ip
 800dc26:	42a3      	cmp	r3, r4
 800dc28:	dd22      	ble.n	800dc70 <_strtoul_l.constprop.0+0xa8>
 800dc2a:	2f00      	cmp	r7, #0
 800dc2c:	db1d      	blt.n	800dc6a <_strtoul_l.constprop.0+0xa2>
 800dc2e:	4580      	cmp	r8, r0
 800dc30:	d31b      	bcc.n	800dc6a <_strtoul_l.constprop.0+0xa2>
 800dc32:	d101      	bne.n	800dc38 <_strtoul_l.constprop.0+0x70>
 800dc34:	45a1      	cmp	r9, r4
 800dc36:	db18      	blt.n	800dc6a <_strtoul_l.constprop.0+0xa2>
 800dc38:	fb00 4003 	mla	r0, r0, r3, r4
 800dc3c:	2701      	movs	r7, #1
 800dc3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc42:	e7ea      	b.n	800dc1a <_strtoul_l.constprop.0+0x52>
 800dc44:	2c2b      	cmp	r4, #43	; 0x2b
 800dc46:	bf04      	itt	eq
 800dc48:	782c      	ldrbeq	r4, [r5, #0]
 800dc4a:	1c85      	addeq	r5, r0, #2
 800dc4c:	e7cd      	b.n	800dbea <_strtoul_l.constprop.0+0x22>
 800dc4e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dc52:	f1bc 0f19 	cmp.w	ip, #25
 800dc56:	d801      	bhi.n	800dc5c <_strtoul_l.constprop.0+0x94>
 800dc58:	3c37      	subs	r4, #55	; 0x37
 800dc5a:	e7e4      	b.n	800dc26 <_strtoul_l.constprop.0+0x5e>
 800dc5c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dc60:	f1bc 0f19 	cmp.w	ip, #25
 800dc64:	d804      	bhi.n	800dc70 <_strtoul_l.constprop.0+0xa8>
 800dc66:	3c57      	subs	r4, #87	; 0x57
 800dc68:	e7dd      	b.n	800dc26 <_strtoul_l.constprop.0+0x5e>
 800dc6a:	f04f 37ff 	mov.w	r7, #4294967295
 800dc6e:	e7e6      	b.n	800dc3e <_strtoul_l.constprop.0+0x76>
 800dc70:	2f00      	cmp	r7, #0
 800dc72:	da07      	bge.n	800dc84 <_strtoul_l.constprop.0+0xbc>
 800dc74:	2322      	movs	r3, #34	; 0x22
 800dc76:	f8ce 3000 	str.w	r3, [lr]
 800dc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc7e:	b932      	cbnz	r2, 800dc8e <_strtoul_l.constprop.0+0xc6>
 800dc80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc84:	b106      	cbz	r6, 800dc88 <_strtoul_l.constprop.0+0xc0>
 800dc86:	4240      	negs	r0, r0
 800dc88:	2a00      	cmp	r2, #0
 800dc8a:	d0f9      	beq.n	800dc80 <_strtoul_l.constprop.0+0xb8>
 800dc8c:	b107      	cbz	r7, 800dc90 <_strtoul_l.constprop.0+0xc8>
 800dc8e:	1e69      	subs	r1, r5, #1
 800dc90:	6011      	str	r1, [r2, #0]
 800dc92:	e7f5      	b.n	800dc80 <_strtoul_l.constprop.0+0xb8>
 800dc94:	2430      	movs	r4, #48	; 0x30
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1b5      	bne.n	800dc06 <_strtoul_l.constprop.0+0x3e>
 800dc9a:	2308      	movs	r3, #8
 800dc9c:	e7b3      	b.n	800dc06 <_strtoul_l.constprop.0+0x3e>
 800dc9e:	2c30      	cmp	r4, #48	; 0x30
 800dca0:	d0a9      	beq.n	800dbf6 <_strtoul_l.constprop.0+0x2e>
 800dca2:	230a      	movs	r3, #10
 800dca4:	e7af      	b.n	800dc06 <_strtoul_l.constprop.0+0x3e>
 800dca6:	bf00      	nop
 800dca8:	0800f08f 	.word	0x0800f08f

0800dcac <_strtoul_r>:
 800dcac:	f7ff bf8c 	b.w	800dbc8 <_strtoul_l.constprop.0>

0800dcb0 <__submore>:
 800dcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dcb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcbc:	4299      	cmp	r1, r3
 800dcbe:	d11d      	bne.n	800dcfc <__submore+0x4c>
 800dcc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dcc4:	f000 f8b6 	bl	800de34 <_malloc_r>
 800dcc8:	b918      	cbnz	r0, 800dcd2 <__submore+0x22>
 800dcca:	f04f 30ff 	mov.w	r0, #4294967295
 800dcce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcd6:	63a3      	str	r3, [r4, #56]	; 0x38
 800dcd8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dcdc:	6360      	str	r0, [r4, #52]	; 0x34
 800dcde:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dce2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dce6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dcea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dcee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dcf2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dcf6:	6020      	str	r0, [r4, #0]
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	e7e8      	b.n	800dcce <__submore+0x1e>
 800dcfc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dcfe:	0077      	lsls	r7, r6, #1
 800dd00:	463a      	mov	r2, r7
 800dd02:	f000 f90b 	bl	800df1c <_realloc_r>
 800dd06:	4605      	mov	r5, r0
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d0de      	beq.n	800dcca <__submore+0x1a>
 800dd0c:	eb00 0806 	add.w	r8, r0, r6
 800dd10:	4601      	mov	r1, r0
 800dd12:	4632      	mov	r2, r6
 800dd14:	4640      	mov	r0, r8
 800dd16:	f7ff f823 	bl	800cd60 <memcpy>
 800dd1a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dd1e:	f8c4 8000 	str.w	r8, [r4]
 800dd22:	e7e9      	b.n	800dcf8 <__submore+0x48>

0800dd24 <__retarget_lock_acquire_recursive>:
 800dd24:	4770      	bx	lr

0800dd26 <__retarget_lock_release_recursive>:
 800dd26:	4770      	bx	lr

0800dd28 <memmove>:
 800dd28:	4288      	cmp	r0, r1
 800dd2a:	b510      	push	{r4, lr}
 800dd2c:	eb01 0402 	add.w	r4, r1, r2
 800dd30:	d902      	bls.n	800dd38 <memmove+0x10>
 800dd32:	4284      	cmp	r4, r0
 800dd34:	4623      	mov	r3, r4
 800dd36:	d807      	bhi.n	800dd48 <memmove+0x20>
 800dd38:	1e43      	subs	r3, r0, #1
 800dd3a:	42a1      	cmp	r1, r4
 800dd3c:	d008      	beq.n	800dd50 <memmove+0x28>
 800dd3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd46:	e7f8      	b.n	800dd3a <memmove+0x12>
 800dd48:	4402      	add	r2, r0
 800dd4a:	4601      	mov	r1, r0
 800dd4c:	428a      	cmp	r2, r1
 800dd4e:	d100      	bne.n	800dd52 <memmove+0x2a>
 800dd50:	bd10      	pop	{r4, pc}
 800dd52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd5a:	e7f7      	b.n	800dd4c <memmove+0x24>

0800dd5c <_free_r>:
 800dd5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd5e:	2900      	cmp	r1, #0
 800dd60:	d044      	beq.n	800ddec <_free_r+0x90>
 800dd62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd66:	9001      	str	r0, [sp, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	f1a1 0404 	sub.w	r4, r1, #4
 800dd6e:	bfb8      	it	lt
 800dd70:	18e4      	addlt	r4, r4, r3
 800dd72:	f000 f913 	bl	800df9c <__malloc_lock>
 800dd76:	4a1e      	ldr	r2, [pc, #120]	; (800ddf0 <_free_r+0x94>)
 800dd78:	9801      	ldr	r0, [sp, #4]
 800dd7a:	6813      	ldr	r3, [r2, #0]
 800dd7c:	b933      	cbnz	r3, 800dd8c <_free_r+0x30>
 800dd7e:	6063      	str	r3, [r4, #4]
 800dd80:	6014      	str	r4, [r2, #0]
 800dd82:	b003      	add	sp, #12
 800dd84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd88:	f000 b90e 	b.w	800dfa8 <__malloc_unlock>
 800dd8c:	42a3      	cmp	r3, r4
 800dd8e:	d908      	bls.n	800dda2 <_free_r+0x46>
 800dd90:	6825      	ldr	r5, [r4, #0]
 800dd92:	1961      	adds	r1, r4, r5
 800dd94:	428b      	cmp	r3, r1
 800dd96:	bf01      	itttt	eq
 800dd98:	6819      	ldreq	r1, [r3, #0]
 800dd9a:	685b      	ldreq	r3, [r3, #4]
 800dd9c:	1949      	addeq	r1, r1, r5
 800dd9e:	6021      	streq	r1, [r4, #0]
 800dda0:	e7ed      	b.n	800dd7e <_free_r+0x22>
 800dda2:	461a      	mov	r2, r3
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	b10b      	cbz	r3, 800ddac <_free_r+0x50>
 800dda8:	42a3      	cmp	r3, r4
 800ddaa:	d9fa      	bls.n	800dda2 <_free_r+0x46>
 800ddac:	6811      	ldr	r1, [r2, #0]
 800ddae:	1855      	adds	r5, r2, r1
 800ddb0:	42a5      	cmp	r5, r4
 800ddb2:	d10b      	bne.n	800ddcc <_free_r+0x70>
 800ddb4:	6824      	ldr	r4, [r4, #0]
 800ddb6:	4421      	add	r1, r4
 800ddb8:	1854      	adds	r4, r2, r1
 800ddba:	42a3      	cmp	r3, r4
 800ddbc:	6011      	str	r1, [r2, #0]
 800ddbe:	d1e0      	bne.n	800dd82 <_free_r+0x26>
 800ddc0:	681c      	ldr	r4, [r3, #0]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	6053      	str	r3, [r2, #4]
 800ddc6:	4421      	add	r1, r4
 800ddc8:	6011      	str	r1, [r2, #0]
 800ddca:	e7da      	b.n	800dd82 <_free_r+0x26>
 800ddcc:	d902      	bls.n	800ddd4 <_free_r+0x78>
 800ddce:	230c      	movs	r3, #12
 800ddd0:	6003      	str	r3, [r0, #0]
 800ddd2:	e7d6      	b.n	800dd82 <_free_r+0x26>
 800ddd4:	6825      	ldr	r5, [r4, #0]
 800ddd6:	1961      	adds	r1, r4, r5
 800ddd8:	428b      	cmp	r3, r1
 800ddda:	bf04      	itt	eq
 800dddc:	6819      	ldreq	r1, [r3, #0]
 800ddde:	685b      	ldreq	r3, [r3, #4]
 800dde0:	6063      	str	r3, [r4, #4]
 800dde2:	bf04      	itt	eq
 800dde4:	1949      	addeq	r1, r1, r5
 800dde6:	6021      	streq	r1, [r4, #0]
 800dde8:	6054      	str	r4, [r2, #4]
 800ddea:	e7ca      	b.n	800dd82 <_free_r+0x26>
 800ddec:	b003      	add	sp, #12
 800ddee:	bd30      	pop	{r4, r5, pc}
 800ddf0:	20002f38 	.word	0x20002f38

0800ddf4 <sbrk_aligned>:
 800ddf4:	b570      	push	{r4, r5, r6, lr}
 800ddf6:	4e0e      	ldr	r6, [pc, #56]	; (800de30 <sbrk_aligned+0x3c>)
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	6831      	ldr	r1, [r6, #0]
 800ddfc:	4605      	mov	r5, r0
 800ddfe:	b911      	cbnz	r1, 800de06 <sbrk_aligned+0x12>
 800de00:	f000 f8bc 	bl	800df7c <_sbrk_r>
 800de04:	6030      	str	r0, [r6, #0]
 800de06:	4621      	mov	r1, r4
 800de08:	4628      	mov	r0, r5
 800de0a:	f000 f8b7 	bl	800df7c <_sbrk_r>
 800de0e:	1c43      	adds	r3, r0, #1
 800de10:	d00a      	beq.n	800de28 <sbrk_aligned+0x34>
 800de12:	1cc4      	adds	r4, r0, #3
 800de14:	f024 0403 	bic.w	r4, r4, #3
 800de18:	42a0      	cmp	r0, r4
 800de1a:	d007      	beq.n	800de2c <sbrk_aligned+0x38>
 800de1c:	1a21      	subs	r1, r4, r0
 800de1e:	4628      	mov	r0, r5
 800de20:	f000 f8ac 	bl	800df7c <_sbrk_r>
 800de24:	3001      	adds	r0, #1
 800de26:	d101      	bne.n	800de2c <sbrk_aligned+0x38>
 800de28:	f04f 34ff 	mov.w	r4, #4294967295
 800de2c:	4620      	mov	r0, r4
 800de2e:	bd70      	pop	{r4, r5, r6, pc}
 800de30:	20002f3c 	.word	0x20002f3c

0800de34 <_malloc_r>:
 800de34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de38:	1ccd      	adds	r5, r1, #3
 800de3a:	f025 0503 	bic.w	r5, r5, #3
 800de3e:	3508      	adds	r5, #8
 800de40:	2d0c      	cmp	r5, #12
 800de42:	bf38      	it	cc
 800de44:	250c      	movcc	r5, #12
 800de46:	2d00      	cmp	r5, #0
 800de48:	4607      	mov	r7, r0
 800de4a:	db01      	blt.n	800de50 <_malloc_r+0x1c>
 800de4c:	42a9      	cmp	r1, r5
 800de4e:	d905      	bls.n	800de5c <_malloc_r+0x28>
 800de50:	230c      	movs	r3, #12
 800de52:	603b      	str	r3, [r7, #0]
 800de54:	2600      	movs	r6, #0
 800de56:	4630      	mov	r0, r6
 800de58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de5c:	4e2e      	ldr	r6, [pc, #184]	; (800df18 <_malloc_r+0xe4>)
 800de5e:	f000 f89d 	bl	800df9c <__malloc_lock>
 800de62:	6833      	ldr	r3, [r6, #0]
 800de64:	461c      	mov	r4, r3
 800de66:	bb34      	cbnz	r4, 800deb6 <_malloc_r+0x82>
 800de68:	4629      	mov	r1, r5
 800de6a:	4638      	mov	r0, r7
 800de6c:	f7ff ffc2 	bl	800ddf4 <sbrk_aligned>
 800de70:	1c43      	adds	r3, r0, #1
 800de72:	4604      	mov	r4, r0
 800de74:	d14d      	bne.n	800df12 <_malloc_r+0xde>
 800de76:	6834      	ldr	r4, [r6, #0]
 800de78:	4626      	mov	r6, r4
 800de7a:	2e00      	cmp	r6, #0
 800de7c:	d140      	bne.n	800df00 <_malloc_r+0xcc>
 800de7e:	6823      	ldr	r3, [r4, #0]
 800de80:	4631      	mov	r1, r6
 800de82:	4638      	mov	r0, r7
 800de84:	eb04 0803 	add.w	r8, r4, r3
 800de88:	f000 f878 	bl	800df7c <_sbrk_r>
 800de8c:	4580      	cmp	r8, r0
 800de8e:	d13a      	bne.n	800df06 <_malloc_r+0xd2>
 800de90:	6821      	ldr	r1, [r4, #0]
 800de92:	3503      	adds	r5, #3
 800de94:	1a6d      	subs	r5, r5, r1
 800de96:	f025 0503 	bic.w	r5, r5, #3
 800de9a:	3508      	adds	r5, #8
 800de9c:	2d0c      	cmp	r5, #12
 800de9e:	bf38      	it	cc
 800dea0:	250c      	movcc	r5, #12
 800dea2:	4629      	mov	r1, r5
 800dea4:	4638      	mov	r0, r7
 800dea6:	f7ff ffa5 	bl	800ddf4 <sbrk_aligned>
 800deaa:	3001      	adds	r0, #1
 800deac:	d02b      	beq.n	800df06 <_malloc_r+0xd2>
 800deae:	6823      	ldr	r3, [r4, #0]
 800deb0:	442b      	add	r3, r5
 800deb2:	6023      	str	r3, [r4, #0]
 800deb4:	e00e      	b.n	800ded4 <_malloc_r+0xa0>
 800deb6:	6822      	ldr	r2, [r4, #0]
 800deb8:	1b52      	subs	r2, r2, r5
 800deba:	d41e      	bmi.n	800defa <_malloc_r+0xc6>
 800debc:	2a0b      	cmp	r2, #11
 800debe:	d916      	bls.n	800deee <_malloc_r+0xba>
 800dec0:	1961      	adds	r1, r4, r5
 800dec2:	42a3      	cmp	r3, r4
 800dec4:	6025      	str	r5, [r4, #0]
 800dec6:	bf18      	it	ne
 800dec8:	6059      	strne	r1, [r3, #4]
 800deca:	6863      	ldr	r3, [r4, #4]
 800decc:	bf08      	it	eq
 800dece:	6031      	streq	r1, [r6, #0]
 800ded0:	5162      	str	r2, [r4, r5]
 800ded2:	604b      	str	r3, [r1, #4]
 800ded4:	4638      	mov	r0, r7
 800ded6:	f104 060b 	add.w	r6, r4, #11
 800deda:	f000 f865 	bl	800dfa8 <__malloc_unlock>
 800dede:	f026 0607 	bic.w	r6, r6, #7
 800dee2:	1d23      	adds	r3, r4, #4
 800dee4:	1af2      	subs	r2, r6, r3
 800dee6:	d0b6      	beq.n	800de56 <_malloc_r+0x22>
 800dee8:	1b9b      	subs	r3, r3, r6
 800deea:	50a3      	str	r3, [r4, r2]
 800deec:	e7b3      	b.n	800de56 <_malloc_r+0x22>
 800deee:	6862      	ldr	r2, [r4, #4]
 800def0:	42a3      	cmp	r3, r4
 800def2:	bf0c      	ite	eq
 800def4:	6032      	streq	r2, [r6, #0]
 800def6:	605a      	strne	r2, [r3, #4]
 800def8:	e7ec      	b.n	800ded4 <_malloc_r+0xa0>
 800defa:	4623      	mov	r3, r4
 800defc:	6864      	ldr	r4, [r4, #4]
 800defe:	e7b2      	b.n	800de66 <_malloc_r+0x32>
 800df00:	4634      	mov	r4, r6
 800df02:	6876      	ldr	r6, [r6, #4]
 800df04:	e7b9      	b.n	800de7a <_malloc_r+0x46>
 800df06:	230c      	movs	r3, #12
 800df08:	603b      	str	r3, [r7, #0]
 800df0a:	4638      	mov	r0, r7
 800df0c:	f000 f84c 	bl	800dfa8 <__malloc_unlock>
 800df10:	e7a1      	b.n	800de56 <_malloc_r+0x22>
 800df12:	6025      	str	r5, [r4, #0]
 800df14:	e7de      	b.n	800ded4 <_malloc_r+0xa0>
 800df16:	bf00      	nop
 800df18:	20002f38 	.word	0x20002f38

0800df1c <_realloc_r>:
 800df1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df20:	4680      	mov	r8, r0
 800df22:	4614      	mov	r4, r2
 800df24:	460e      	mov	r6, r1
 800df26:	b921      	cbnz	r1, 800df32 <_realloc_r+0x16>
 800df28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df2c:	4611      	mov	r1, r2
 800df2e:	f7ff bf81 	b.w	800de34 <_malloc_r>
 800df32:	b92a      	cbnz	r2, 800df40 <_realloc_r+0x24>
 800df34:	f7ff ff12 	bl	800dd5c <_free_r>
 800df38:	4625      	mov	r5, r4
 800df3a:	4628      	mov	r0, r5
 800df3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df40:	f000 f838 	bl	800dfb4 <_malloc_usable_size_r>
 800df44:	4284      	cmp	r4, r0
 800df46:	4607      	mov	r7, r0
 800df48:	d802      	bhi.n	800df50 <_realloc_r+0x34>
 800df4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df4e:	d812      	bhi.n	800df76 <_realloc_r+0x5a>
 800df50:	4621      	mov	r1, r4
 800df52:	4640      	mov	r0, r8
 800df54:	f7ff ff6e 	bl	800de34 <_malloc_r>
 800df58:	4605      	mov	r5, r0
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d0ed      	beq.n	800df3a <_realloc_r+0x1e>
 800df5e:	42bc      	cmp	r4, r7
 800df60:	4622      	mov	r2, r4
 800df62:	4631      	mov	r1, r6
 800df64:	bf28      	it	cs
 800df66:	463a      	movcs	r2, r7
 800df68:	f7fe fefa 	bl	800cd60 <memcpy>
 800df6c:	4631      	mov	r1, r6
 800df6e:	4640      	mov	r0, r8
 800df70:	f7ff fef4 	bl	800dd5c <_free_r>
 800df74:	e7e1      	b.n	800df3a <_realloc_r+0x1e>
 800df76:	4635      	mov	r5, r6
 800df78:	e7df      	b.n	800df3a <_realloc_r+0x1e>
	...

0800df7c <_sbrk_r>:
 800df7c:	b538      	push	{r3, r4, r5, lr}
 800df7e:	4d06      	ldr	r5, [pc, #24]	; (800df98 <_sbrk_r+0x1c>)
 800df80:	2300      	movs	r3, #0
 800df82:	4604      	mov	r4, r0
 800df84:	4608      	mov	r0, r1
 800df86:	602b      	str	r3, [r5, #0]
 800df88:	f7f5 f9c6 	bl	8003318 <_sbrk>
 800df8c:	1c43      	adds	r3, r0, #1
 800df8e:	d102      	bne.n	800df96 <_sbrk_r+0x1a>
 800df90:	682b      	ldr	r3, [r5, #0]
 800df92:	b103      	cbz	r3, 800df96 <_sbrk_r+0x1a>
 800df94:	6023      	str	r3, [r4, #0]
 800df96:	bd38      	pop	{r3, r4, r5, pc}
 800df98:	20002f30 	.word	0x20002f30

0800df9c <__malloc_lock>:
 800df9c:	4801      	ldr	r0, [pc, #4]	; (800dfa4 <__malloc_lock+0x8>)
 800df9e:	f7ff bec1 	b.w	800dd24 <__retarget_lock_acquire_recursive>
 800dfa2:	bf00      	nop
 800dfa4:	20002f34 	.word	0x20002f34

0800dfa8 <__malloc_unlock>:
 800dfa8:	4801      	ldr	r0, [pc, #4]	; (800dfb0 <__malloc_unlock+0x8>)
 800dfaa:	f7ff bebc 	b.w	800dd26 <__retarget_lock_release_recursive>
 800dfae:	bf00      	nop
 800dfb0:	20002f34 	.word	0x20002f34

0800dfb4 <_malloc_usable_size_r>:
 800dfb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfb8:	1f18      	subs	r0, r3, #4
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	bfbc      	itt	lt
 800dfbe:	580b      	ldrlt	r3, [r1, r0]
 800dfc0:	18c0      	addlt	r0, r0, r3
 800dfc2:	4770      	bx	lr

0800dfc4 <pow>:
 800dfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc6:	ed2d 8b02 	vpush	{d8}
 800dfca:	eeb0 8a40 	vmov.f32	s16, s0
 800dfce:	eef0 8a60 	vmov.f32	s17, s1
 800dfd2:	ec55 4b11 	vmov	r4, r5, d1
 800dfd6:	f000 f893 	bl	800e100 <__ieee754_pow>
 800dfda:	4622      	mov	r2, r4
 800dfdc:	462b      	mov	r3, r5
 800dfde:	4620      	mov	r0, r4
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	ec57 6b10 	vmov	r6, r7, d0
 800dfe6:	f7f2 fda9 	bl	8000b3c <__aeabi_dcmpun>
 800dfea:	2800      	cmp	r0, #0
 800dfec:	d13b      	bne.n	800e066 <pow+0xa2>
 800dfee:	ec51 0b18 	vmov	r0, r1, d8
 800dff2:	2200      	movs	r2, #0
 800dff4:	2300      	movs	r3, #0
 800dff6:	f7f2 fd6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800dffa:	b1b8      	cbz	r0, 800e02c <pow+0x68>
 800dffc:	2200      	movs	r2, #0
 800dffe:	2300      	movs	r3, #0
 800e000:	4620      	mov	r0, r4
 800e002:	4629      	mov	r1, r5
 800e004:	f7f2 fd68 	bl	8000ad8 <__aeabi_dcmpeq>
 800e008:	2800      	cmp	r0, #0
 800e00a:	d146      	bne.n	800e09a <pow+0xd6>
 800e00c:	ec45 4b10 	vmov	d0, r4, r5
 800e010:	f000 fe8f 	bl	800ed32 <finite>
 800e014:	b338      	cbz	r0, 800e066 <pow+0xa2>
 800e016:	2200      	movs	r2, #0
 800e018:	2300      	movs	r3, #0
 800e01a:	4620      	mov	r0, r4
 800e01c:	4629      	mov	r1, r5
 800e01e:	f7f2 fd65 	bl	8000aec <__aeabi_dcmplt>
 800e022:	b300      	cbz	r0, 800e066 <pow+0xa2>
 800e024:	f7fe fe72 	bl	800cd0c <__errno>
 800e028:	2322      	movs	r3, #34	; 0x22
 800e02a:	e01b      	b.n	800e064 <pow+0xa0>
 800e02c:	ec47 6b10 	vmov	d0, r6, r7
 800e030:	f000 fe7f 	bl	800ed32 <finite>
 800e034:	b9e0      	cbnz	r0, 800e070 <pow+0xac>
 800e036:	eeb0 0a48 	vmov.f32	s0, s16
 800e03a:	eef0 0a68 	vmov.f32	s1, s17
 800e03e:	f000 fe78 	bl	800ed32 <finite>
 800e042:	b1a8      	cbz	r0, 800e070 <pow+0xac>
 800e044:	ec45 4b10 	vmov	d0, r4, r5
 800e048:	f000 fe73 	bl	800ed32 <finite>
 800e04c:	b180      	cbz	r0, 800e070 <pow+0xac>
 800e04e:	4632      	mov	r2, r6
 800e050:	463b      	mov	r3, r7
 800e052:	4630      	mov	r0, r6
 800e054:	4639      	mov	r1, r7
 800e056:	f7f2 fd71 	bl	8000b3c <__aeabi_dcmpun>
 800e05a:	2800      	cmp	r0, #0
 800e05c:	d0e2      	beq.n	800e024 <pow+0x60>
 800e05e:	f7fe fe55 	bl	800cd0c <__errno>
 800e062:	2321      	movs	r3, #33	; 0x21
 800e064:	6003      	str	r3, [r0, #0]
 800e066:	ecbd 8b02 	vpop	{d8}
 800e06a:	ec47 6b10 	vmov	d0, r6, r7
 800e06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e070:	2200      	movs	r2, #0
 800e072:	2300      	movs	r3, #0
 800e074:	4630      	mov	r0, r6
 800e076:	4639      	mov	r1, r7
 800e078:	f7f2 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d0f2      	beq.n	800e066 <pow+0xa2>
 800e080:	eeb0 0a48 	vmov.f32	s0, s16
 800e084:	eef0 0a68 	vmov.f32	s1, s17
 800e088:	f000 fe53 	bl	800ed32 <finite>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	d0ea      	beq.n	800e066 <pow+0xa2>
 800e090:	ec45 4b10 	vmov	d0, r4, r5
 800e094:	f000 fe4d 	bl	800ed32 <finite>
 800e098:	e7c3      	b.n	800e022 <pow+0x5e>
 800e09a:	4f01      	ldr	r7, [pc, #4]	; (800e0a0 <pow+0xdc>)
 800e09c:	2600      	movs	r6, #0
 800e09e:	e7e2      	b.n	800e066 <pow+0xa2>
 800e0a0:	3ff00000 	.word	0x3ff00000

0800e0a4 <sqrt>:
 800e0a4:	b538      	push	{r3, r4, r5, lr}
 800e0a6:	ed2d 8b02 	vpush	{d8}
 800e0aa:	ec55 4b10 	vmov	r4, r5, d0
 800e0ae:	f000 fd55 	bl	800eb5c <__ieee754_sqrt>
 800e0b2:	4622      	mov	r2, r4
 800e0b4:	462b      	mov	r3, r5
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	eeb0 8a40 	vmov.f32	s16, s0
 800e0be:	eef0 8a60 	vmov.f32	s17, s1
 800e0c2:	f7f2 fd3b 	bl	8000b3c <__aeabi_dcmpun>
 800e0c6:	b990      	cbnz	r0, 800e0ee <sqrt+0x4a>
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	4629      	mov	r1, r5
 800e0d0:	f7f2 fd0c 	bl	8000aec <__aeabi_dcmplt>
 800e0d4:	b158      	cbz	r0, 800e0ee <sqrt+0x4a>
 800e0d6:	f7fe fe19 	bl	800cd0c <__errno>
 800e0da:	2321      	movs	r3, #33	; 0x21
 800e0dc:	6003      	str	r3, [r0, #0]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	f7f2 fbb9 	bl	800085c <__aeabi_ddiv>
 800e0ea:	ec41 0b18 	vmov	d8, r0, r1
 800e0ee:	eeb0 0a48 	vmov.f32	s0, s16
 800e0f2:	eef0 0a68 	vmov.f32	s1, s17
 800e0f6:	ecbd 8b02 	vpop	{d8}
 800e0fa:	bd38      	pop	{r3, r4, r5, pc}
 800e0fc:	0000      	movs	r0, r0
	...

0800e100 <__ieee754_pow>:
 800e100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	ed2d 8b06 	vpush	{d8-d10}
 800e108:	b089      	sub	sp, #36	; 0x24
 800e10a:	ed8d 1b00 	vstr	d1, [sp]
 800e10e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e112:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e116:	ea58 0102 	orrs.w	r1, r8, r2
 800e11a:	ec57 6b10 	vmov	r6, r7, d0
 800e11e:	d115      	bne.n	800e14c <__ieee754_pow+0x4c>
 800e120:	19b3      	adds	r3, r6, r6
 800e122:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e126:	4152      	adcs	r2, r2
 800e128:	4299      	cmp	r1, r3
 800e12a:	4b89      	ldr	r3, [pc, #548]	; (800e350 <__ieee754_pow+0x250>)
 800e12c:	4193      	sbcs	r3, r2
 800e12e:	f080 84d2 	bcs.w	800ead6 <__ieee754_pow+0x9d6>
 800e132:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e136:	4630      	mov	r0, r6
 800e138:	4639      	mov	r1, r7
 800e13a:	f7f2 f8af 	bl	800029c <__adddf3>
 800e13e:	ec41 0b10 	vmov	d0, r0, r1
 800e142:	b009      	add	sp, #36	; 0x24
 800e144:	ecbd 8b06 	vpop	{d8-d10}
 800e148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14c:	4b81      	ldr	r3, [pc, #516]	; (800e354 <__ieee754_pow+0x254>)
 800e14e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e152:	429c      	cmp	r4, r3
 800e154:	ee10 aa10 	vmov	sl, s0
 800e158:	463d      	mov	r5, r7
 800e15a:	dc06      	bgt.n	800e16a <__ieee754_pow+0x6a>
 800e15c:	d101      	bne.n	800e162 <__ieee754_pow+0x62>
 800e15e:	2e00      	cmp	r6, #0
 800e160:	d1e7      	bne.n	800e132 <__ieee754_pow+0x32>
 800e162:	4598      	cmp	r8, r3
 800e164:	dc01      	bgt.n	800e16a <__ieee754_pow+0x6a>
 800e166:	d10f      	bne.n	800e188 <__ieee754_pow+0x88>
 800e168:	b172      	cbz	r2, 800e188 <__ieee754_pow+0x88>
 800e16a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e16e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e172:	ea55 050a 	orrs.w	r5, r5, sl
 800e176:	d1dc      	bne.n	800e132 <__ieee754_pow+0x32>
 800e178:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e17c:	18db      	adds	r3, r3, r3
 800e17e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e182:	4152      	adcs	r2, r2
 800e184:	429d      	cmp	r5, r3
 800e186:	e7d0      	b.n	800e12a <__ieee754_pow+0x2a>
 800e188:	2d00      	cmp	r5, #0
 800e18a:	da3b      	bge.n	800e204 <__ieee754_pow+0x104>
 800e18c:	4b72      	ldr	r3, [pc, #456]	; (800e358 <__ieee754_pow+0x258>)
 800e18e:	4598      	cmp	r8, r3
 800e190:	dc51      	bgt.n	800e236 <__ieee754_pow+0x136>
 800e192:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e196:	4598      	cmp	r8, r3
 800e198:	f340 84ac 	ble.w	800eaf4 <__ieee754_pow+0x9f4>
 800e19c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e1a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e1a4:	2b14      	cmp	r3, #20
 800e1a6:	dd0f      	ble.n	800e1c8 <__ieee754_pow+0xc8>
 800e1a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e1ac:	fa22 f103 	lsr.w	r1, r2, r3
 800e1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	f040 849d 	bne.w	800eaf4 <__ieee754_pow+0x9f4>
 800e1ba:	f001 0101 	and.w	r1, r1, #1
 800e1be:	f1c1 0302 	rsb	r3, r1, #2
 800e1c2:	9304      	str	r3, [sp, #16]
 800e1c4:	b182      	cbz	r2, 800e1e8 <__ieee754_pow+0xe8>
 800e1c6:	e05f      	b.n	800e288 <__ieee754_pow+0x188>
 800e1c8:	2a00      	cmp	r2, #0
 800e1ca:	d15b      	bne.n	800e284 <__ieee754_pow+0x184>
 800e1cc:	f1c3 0314 	rsb	r3, r3, #20
 800e1d0:	fa48 f103 	asr.w	r1, r8, r3
 800e1d4:	fa01 f303 	lsl.w	r3, r1, r3
 800e1d8:	4543      	cmp	r3, r8
 800e1da:	f040 8488 	bne.w	800eaee <__ieee754_pow+0x9ee>
 800e1de:	f001 0101 	and.w	r1, r1, #1
 800e1e2:	f1c1 0302 	rsb	r3, r1, #2
 800e1e6:	9304      	str	r3, [sp, #16]
 800e1e8:	4b5c      	ldr	r3, [pc, #368]	; (800e35c <__ieee754_pow+0x25c>)
 800e1ea:	4598      	cmp	r8, r3
 800e1ec:	d132      	bne.n	800e254 <__ieee754_pow+0x154>
 800e1ee:	f1b9 0f00 	cmp.w	r9, #0
 800e1f2:	f280 8478 	bge.w	800eae6 <__ieee754_pow+0x9e6>
 800e1f6:	4959      	ldr	r1, [pc, #356]	; (800e35c <__ieee754_pow+0x25c>)
 800e1f8:	4632      	mov	r2, r6
 800e1fa:	463b      	mov	r3, r7
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	f7f2 fb2d 	bl	800085c <__aeabi_ddiv>
 800e202:	e79c      	b.n	800e13e <__ieee754_pow+0x3e>
 800e204:	2300      	movs	r3, #0
 800e206:	9304      	str	r3, [sp, #16]
 800e208:	2a00      	cmp	r2, #0
 800e20a:	d13d      	bne.n	800e288 <__ieee754_pow+0x188>
 800e20c:	4b51      	ldr	r3, [pc, #324]	; (800e354 <__ieee754_pow+0x254>)
 800e20e:	4598      	cmp	r8, r3
 800e210:	d1ea      	bne.n	800e1e8 <__ieee754_pow+0xe8>
 800e212:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e216:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e21a:	ea53 030a 	orrs.w	r3, r3, sl
 800e21e:	f000 845a 	beq.w	800ead6 <__ieee754_pow+0x9d6>
 800e222:	4b4f      	ldr	r3, [pc, #316]	; (800e360 <__ieee754_pow+0x260>)
 800e224:	429c      	cmp	r4, r3
 800e226:	dd08      	ble.n	800e23a <__ieee754_pow+0x13a>
 800e228:	f1b9 0f00 	cmp.w	r9, #0
 800e22c:	f2c0 8457 	blt.w	800eade <__ieee754_pow+0x9de>
 800e230:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e234:	e783      	b.n	800e13e <__ieee754_pow+0x3e>
 800e236:	2302      	movs	r3, #2
 800e238:	e7e5      	b.n	800e206 <__ieee754_pow+0x106>
 800e23a:	f1b9 0f00 	cmp.w	r9, #0
 800e23e:	f04f 0000 	mov.w	r0, #0
 800e242:	f04f 0100 	mov.w	r1, #0
 800e246:	f6bf af7a 	bge.w	800e13e <__ieee754_pow+0x3e>
 800e24a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e24e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e252:	e774      	b.n	800e13e <__ieee754_pow+0x3e>
 800e254:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e258:	d106      	bne.n	800e268 <__ieee754_pow+0x168>
 800e25a:	4632      	mov	r2, r6
 800e25c:	463b      	mov	r3, r7
 800e25e:	4630      	mov	r0, r6
 800e260:	4639      	mov	r1, r7
 800e262:	f7f2 f9d1 	bl	8000608 <__aeabi_dmul>
 800e266:	e76a      	b.n	800e13e <__ieee754_pow+0x3e>
 800e268:	4b3e      	ldr	r3, [pc, #248]	; (800e364 <__ieee754_pow+0x264>)
 800e26a:	4599      	cmp	r9, r3
 800e26c:	d10c      	bne.n	800e288 <__ieee754_pow+0x188>
 800e26e:	2d00      	cmp	r5, #0
 800e270:	db0a      	blt.n	800e288 <__ieee754_pow+0x188>
 800e272:	ec47 6b10 	vmov	d0, r6, r7
 800e276:	b009      	add	sp, #36	; 0x24
 800e278:	ecbd 8b06 	vpop	{d8-d10}
 800e27c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e280:	f000 bc6c 	b.w	800eb5c <__ieee754_sqrt>
 800e284:	2300      	movs	r3, #0
 800e286:	9304      	str	r3, [sp, #16]
 800e288:	ec47 6b10 	vmov	d0, r6, r7
 800e28c:	f000 fd48 	bl	800ed20 <fabs>
 800e290:	ec51 0b10 	vmov	r0, r1, d0
 800e294:	f1ba 0f00 	cmp.w	sl, #0
 800e298:	d129      	bne.n	800e2ee <__ieee754_pow+0x1ee>
 800e29a:	b124      	cbz	r4, 800e2a6 <__ieee754_pow+0x1a6>
 800e29c:	4b2f      	ldr	r3, [pc, #188]	; (800e35c <__ieee754_pow+0x25c>)
 800e29e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d123      	bne.n	800e2ee <__ieee754_pow+0x1ee>
 800e2a6:	f1b9 0f00 	cmp.w	r9, #0
 800e2aa:	da05      	bge.n	800e2b8 <__ieee754_pow+0x1b8>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	492a      	ldr	r1, [pc, #168]	; (800e35c <__ieee754_pow+0x25c>)
 800e2b4:	f7f2 fad2 	bl	800085c <__aeabi_ddiv>
 800e2b8:	2d00      	cmp	r5, #0
 800e2ba:	f6bf af40 	bge.w	800e13e <__ieee754_pow+0x3e>
 800e2be:	9b04      	ldr	r3, [sp, #16]
 800e2c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e2c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2c8:	4323      	orrs	r3, r4
 800e2ca:	d108      	bne.n	800e2de <__ieee754_pow+0x1de>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	4610      	mov	r0, r2
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	f7f1 ffe0 	bl	8000298 <__aeabi_dsub>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	e78f      	b.n	800e1fe <__ieee754_pow+0xfe>
 800e2de:	9b04      	ldr	r3, [sp, #16]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	f47f af2c 	bne.w	800e13e <__ieee754_pow+0x3e>
 800e2e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	e727      	b.n	800e13e <__ieee754_pow+0x3e>
 800e2ee:	0feb      	lsrs	r3, r5, #31
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	9306      	str	r3, [sp, #24]
 800e2f4:	9a06      	ldr	r2, [sp, #24]
 800e2f6:	9b04      	ldr	r3, [sp, #16]
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	d102      	bne.n	800e302 <__ieee754_pow+0x202>
 800e2fc:	4632      	mov	r2, r6
 800e2fe:	463b      	mov	r3, r7
 800e300:	e7e6      	b.n	800e2d0 <__ieee754_pow+0x1d0>
 800e302:	4b19      	ldr	r3, [pc, #100]	; (800e368 <__ieee754_pow+0x268>)
 800e304:	4598      	cmp	r8, r3
 800e306:	f340 80fb 	ble.w	800e500 <__ieee754_pow+0x400>
 800e30a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e30e:	4598      	cmp	r8, r3
 800e310:	4b13      	ldr	r3, [pc, #76]	; (800e360 <__ieee754_pow+0x260>)
 800e312:	dd0c      	ble.n	800e32e <__ieee754_pow+0x22e>
 800e314:	429c      	cmp	r4, r3
 800e316:	dc0f      	bgt.n	800e338 <__ieee754_pow+0x238>
 800e318:	f1b9 0f00 	cmp.w	r9, #0
 800e31c:	da0f      	bge.n	800e33e <__ieee754_pow+0x23e>
 800e31e:	2000      	movs	r0, #0
 800e320:	b009      	add	sp, #36	; 0x24
 800e322:	ecbd 8b06 	vpop	{d8-d10}
 800e326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e32a:	f000 bcf0 	b.w	800ed0e <__math_oflow>
 800e32e:	429c      	cmp	r4, r3
 800e330:	dbf2      	blt.n	800e318 <__ieee754_pow+0x218>
 800e332:	4b0a      	ldr	r3, [pc, #40]	; (800e35c <__ieee754_pow+0x25c>)
 800e334:	429c      	cmp	r4, r3
 800e336:	dd19      	ble.n	800e36c <__ieee754_pow+0x26c>
 800e338:	f1b9 0f00 	cmp.w	r9, #0
 800e33c:	dcef      	bgt.n	800e31e <__ieee754_pow+0x21e>
 800e33e:	2000      	movs	r0, #0
 800e340:	b009      	add	sp, #36	; 0x24
 800e342:	ecbd 8b06 	vpop	{d8-d10}
 800e346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34a:	f000 bcd7 	b.w	800ecfc <__math_uflow>
 800e34e:	bf00      	nop
 800e350:	fff00000 	.word	0xfff00000
 800e354:	7ff00000 	.word	0x7ff00000
 800e358:	433fffff 	.word	0x433fffff
 800e35c:	3ff00000 	.word	0x3ff00000
 800e360:	3fefffff 	.word	0x3fefffff
 800e364:	3fe00000 	.word	0x3fe00000
 800e368:	41e00000 	.word	0x41e00000
 800e36c:	4b60      	ldr	r3, [pc, #384]	; (800e4f0 <__ieee754_pow+0x3f0>)
 800e36e:	2200      	movs	r2, #0
 800e370:	f7f1 ff92 	bl	8000298 <__aeabi_dsub>
 800e374:	a354      	add	r3, pc, #336	; (adr r3, 800e4c8 <__ieee754_pow+0x3c8>)
 800e376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37a:	4604      	mov	r4, r0
 800e37c:	460d      	mov	r5, r1
 800e37e:	f7f2 f943 	bl	8000608 <__aeabi_dmul>
 800e382:	a353      	add	r3, pc, #332	; (adr r3, 800e4d0 <__ieee754_pow+0x3d0>)
 800e384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e388:	4606      	mov	r6, r0
 800e38a:	460f      	mov	r7, r1
 800e38c:	4620      	mov	r0, r4
 800e38e:	4629      	mov	r1, r5
 800e390:	f7f2 f93a 	bl	8000608 <__aeabi_dmul>
 800e394:	4b57      	ldr	r3, [pc, #348]	; (800e4f4 <__ieee754_pow+0x3f4>)
 800e396:	4682      	mov	sl, r0
 800e398:	468b      	mov	fp, r1
 800e39a:	2200      	movs	r2, #0
 800e39c:	4620      	mov	r0, r4
 800e39e:	4629      	mov	r1, r5
 800e3a0:	f7f2 f932 	bl	8000608 <__aeabi_dmul>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	a14b      	add	r1, pc, #300	; (adr r1, 800e4d8 <__ieee754_pow+0x3d8>)
 800e3aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3ae:	f7f1 ff73 	bl	8000298 <__aeabi_dsub>
 800e3b2:	4622      	mov	r2, r4
 800e3b4:	462b      	mov	r3, r5
 800e3b6:	f7f2 f927 	bl	8000608 <__aeabi_dmul>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	460b      	mov	r3, r1
 800e3be:	2000      	movs	r0, #0
 800e3c0:	494d      	ldr	r1, [pc, #308]	; (800e4f8 <__ieee754_pow+0x3f8>)
 800e3c2:	f7f1 ff69 	bl	8000298 <__aeabi_dsub>
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	4680      	mov	r8, r0
 800e3ca:	4689      	mov	r9, r1
 800e3cc:	462b      	mov	r3, r5
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	4629      	mov	r1, r5
 800e3d2:	f7f2 f919 	bl	8000608 <__aeabi_dmul>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	460b      	mov	r3, r1
 800e3da:	4640      	mov	r0, r8
 800e3dc:	4649      	mov	r1, r9
 800e3de:	f7f2 f913 	bl	8000608 <__aeabi_dmul>
 800e3e2:	a33f      	add	r3, pc, #252	; (adr r3, 800e4e0 <__ieee754_pow+0x3e0>)
 800e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e8:	f7f2 f90e 	bl	8000608 <__aeabi_dmul>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	4650      	mov	r0, sl
 800e3f2:	4659      	mov	r1, fp
 800e3f4:	f7f1 ff50 	bl	8000298 <__aeabi_dsub>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	4680      	mov	r8, r0
 800e3fe:	4689      	mov	r9, r1
 800e400:	4630      	mov	r0, r6
 800e402:	4639      	mov	r1, r7
 800e404:	f7f1 ff4a 	bl	800029c <__adddf3>
 800e408:	2000      	movs	r0, #0
 800e40a:	4632      	mov	r2, r6
 800e40c:	463b      	mov	r3, r7
 800e40e:	4604      	mov	r4, r0
 800e410:	460d      	mov	r5, r1
 800e412:	f7f1 ff41 	bl	8000298 <__aeabi_dsub>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	4640      	mov	r0, r8
 800e41c:	4649      	mov	r1, r9
 800e41e:	f7f1 ff3b 	bl	8000298 <__aeabi_dsub>
 800e422:	9b04      	ldr	r3, [sp, #16]
 800e424:	9a06      	ldr	r2, [sp, #24]
 800e426:	3b01      	subs	r3, #1
 800e428:	4313      	orrs	r3, r2
 800e42a:	4682      	mov	sl, r0
 800e42c:	468b      	mov	fp, r1
 800e42e:	f040 81e7 	bne.w	800e800 <__ieee754_pow+0x700>
 800e432:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e4e8 <__ieee754_pow+0x3e8>
 800e436:	eeb0 8a47 	vmov.f32	s16, s14
 800e43a:	eef0 8a67 	vmov.f32	s17, s15
 800e43e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e442:	2600      	movs	r6, #0
 800e444:	4632      	mov	r2, r6
 800e446:	463b      	mov	r3, r7
 800e448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e44c:	f7f1 ff24 	bl	8000298 <__aeabi_dsub>
 800e450:	4622      	mov	r2, r4
 800e452:	462b      	mov	r3, r5
 800e454:	f7f2 f8d8 	bl	8000608 <__aeabi_dmul>
 800e458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e45c:	4680      	mov	r8, r0
 800e45e:	4689      	mov	r9, r1
 800e460:	4650      	mov	r0, sl
 800e462:	4659      	mov	r1, fp
 800e464:	f7f2 f8d0 	bl	8000608 <__aeabi_dmul>
 800e468:	4602      	mov	r2, r0
 800e46a:	460b      	mov	r3, r1
 800e46c:	4640      	mov	r0, r8
 800e46e:	4649      	mov	r1, r9
 800e470:	f7f1 ff14 	bl	800029c <__adddf3>
 800e474:	4632      	mov	r2, r6
 800e476:	463b      	mov	r3, r7
 800e478:	4680      	mov	r8, r0
 800e47a:	4689      	mov	r9, r1
 800e47c:	4620      	mov	r0, r4
 800e47e:	4629      	mov	r1, r5
 800e480:	f7f2 f8c2 	bl	8000608 <__aeabi_dmul>
 800e484:	460b      	mov	r3, r1
 800e486:	4604      	mov	r4, r0
 800e488:	460d      	mov	r5, r1
 800e48a:	4602      	mov	r2, r0
 800e48c:	4649      	mov	r1, r9
 800e48e:	4640      	mov	r0, r8
 800e490:	f7f1 ff04 	bl	800029c <__adddf3>
 800e494:	4b19      	ldr	r3, [pc, #100]	; (800e4fc <__ieee754_pow+0x3fc>)
 800e496:	4299      	cmp	r1, r3
 800e498:	ec45 4b19 	vmov	d9, r4, r5
 800e49c:	4606      	mov	r6, r0
 800e49e:	460f      	mov	r7, r1
 800e4a0:	468b      	mov	fp, r1
 800e4a2:	f340 82f1 	ble.w	800ea88 <__ieee754_pow+0x988>
 800e4a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e4aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e4ae:	4303      	orrs	r3, r0
 800e4b0:	f000 81e4 	beq.w	800e87c <__ieee754_pow+0x77c>
 800e4b4:	ec51 0b18 	vmov	r0, r1, d8
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	f7f2 fb16 	bl	8000aec <__aeabi_dcmplt>
 800e4c0:	3800      	subs	r0, #0
 800e4c2:	bf18      	it	ne
 800e4c4:	2001      	movne	r0, #1
 800e4c6:	e72b      	b.n	800e320 <__ieee754_pow+0x220>
 800e4c8:	60000000 	.word	0x60000000
 800e4cc:	3ff71547 	.word	0x3ff71547
 800e4d0:	f85ddf44 	.word	0xf85ddf44
 800e4d4:	3e54ae0b 	.word	0x3e54ae0b
 800e4d8:	55555555 	.word	0x55555555
 800e4dc:	3fd55555 	.word	0x3fd55555
 800e4e0:	652b82fe 	.word	0x652b82fe
 800e4e4:	3ff71547 	.word	0x3ff71547
 800e4e8:	00000000 	.word	0x00000000
 800e4ec:	bff00000 	.word	0xbff00000
 800e4f0:	3ff00000 	.word	0x3ff00000
 800e4f4:	3fd00000 	.word	0x3fd00000
 800e4f8:	3fe00000 	.word	0x3fe00000
 800e4fc:	408fffff 	.word	0x408fffff
 800e500:	4bd5      	ldr	r3, [pc, #852]	; (800e858 <__ieee754_pow+0x758>)
 800e502:	402b      	ands	r3, r5
 800e504:	2200      	movs	r2, #0
 800e506:	b92b      	cbnz	r3, 800e514 <__ieee754_pow+0x414>
 800e508:	4bd4      	ldr	r3, [pc, #848]	; (800e85c <__ieee754_pow+0x75c>)
 800e50a:	f7f2 f87d 	bl	8000608 <__aeabi_dmul>
 800e50e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e512:	460c      	mov	r4, r1
 800e514:	1523      	asrs	r3, r4, #20
 800e516:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e51a:	4413      	add	r3, r2
 800e51c:	9305      	str	r3, [sp, #20]
 800e51e:	4bd0      	ldr	r3, [pc, #832]	; (800e860 <__ieee754_pow+0x760>)
 800e520:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e524:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e528:	429c      	cmp	r4, r3
 800e52a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e52e:	dd08      	ble.n	800e542 <__ieee754_pow+0x442>
 800e530:	4bcc      	ldr	r3, [pc, #816]	; (800e864 <__ieee754_pow+0x764>)
 800e532:	429c      	cmp	r4, r3
 800e534:	f340 8162 	ble.w	800e7fc <__ieee754_pow+0x6fc>
 800e538:	9b05      	ldr	r3, [sp, #20]
 800e53a:	3301      	adds	r3, #1
 800e53c:	9305      	str	r3, [sp, #20]
 800e53e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e542:	2400      	movs	r4, #0
 800e544:	00e3      	lsls	r3, r4, #3
 800e546:	9307      	str	r3, [sp, #28]
 800e548:	4bc7      	ldr	r3, [pc, #796]	; (800e868 <__ieee754_pow+0x768>)
 800e54a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e54e:	ed93 7b00 	vldr	d7, [r3]
 800e552:	4629      	mov	r1, r5
 800e554:	ec53 2b17 	vmov	r2, r3, d7
 800e558:	eeb0 9a47 	vmov.f32	s18, s14
 800e55c:	eef0 9a67 	vmov.f32	s19, s15
 800e560:	4682      	mov	sl, r0
 800e562:	f7f1 fe99 	bl	8000298 <__aeabi_dsub>
 800e566:	4652      	mov	r2, sl
 800e568:	4606      	mov	r6, r0
 800e56a:	460f      	mov	r7, r1
 800e56c:	462b      	mov	r3, r5
 800e56e:	ec51 0b19 	vmov	r0, r1, d9
 800e572:	f7f1 fe93 	bl	800029c <__adddf3>
 800e576:	4602      	mov	r2, r0
 800e578:	460b      	mov	r3, r1
 800e57a:	2000      	movs	r0, #0
 800e57c:	49bb      	ldr	r1, [pc, #748]	; (800e86c <__ieee754_pow+0x76c>)
 800e57e:	f7f2 f96d 	bl	800085c <__aeabi_ddiv>
 800e582:	ec41 0b1a 	vmov	d10, r0, r1
 800e586:	4602      	mov	r2, r0
 800e588:	460b      	mov	r3, r1
 800e58a:	4630      	mov	r0, r6
 800e58c:	4639      	mov	r1, r7
 800e58e:	f7f2 f83b 	bl	8000608 <__aeabi_dmul>
 800e592:	2300      	movs	r3, #0
 800e594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e598:	9302      	str	r3, [sp, #8]
 800e59a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e59e:	46ab      	mov	fp, r5
 800e5a0:	106d      	asrs	r5, r5, #1
 800e5a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e5a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e5aa:	ec41 0b18 	vmov	d8, r0, r1
 800e5ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	4640      	mov	r0, r8
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	4614      	mov	r4, r2
 800e5ba:	461d      	mov	r5, r3
 800e5bc:	f7f2 f824 	bl	8000608 <__aeabi_dmul>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	4639      	mov	r1, r7
 800e5c8:	f7f1 fe66 	bl	8000298 <__aeabi_dsub>
 800e5cc:	ec53 2b19 	vmov	r2, r3, d9
 800e5d0:	4606      	mov	r6, r0
 800e5d2:	460f      	mov	r7, r1
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	4629      	mov	r1, r5
 800e5d8:	f7f1 fe5e 	bl	8000298 <__aeabi_dsub>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	460b      	mov	r3, r1
 800e5e0:	4650      	mov	r0, sl
 800e5e2:	4659      	mov	r1, fp
 800e5e4:	f7f1 fe58 	bl	8000298 <__aeabi_dsub>
 800e5e8:	4642      	mov	r2, r8
 800e5ea:	464b      	mov	r3, r9
 800e5ec:	f7f2 f80c 	bl	8000608 <__aeabi_dmul>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	4639      	mov	r1, r7
 800e5f8:	f7f1 fe4e 	bl	8000298 <__aeabi_dsub>
 800e5fc:	ec53 2b1a 	vmov	r2, r3, d10
 800e600:	f7f2 f802 	bl	8000608 <__aeabi_dmul>
 800e604:	ec53 2b18 	vmov	r2, r3, d8
 800e608:	ec41 0b19 	vmov	d9, r0, r1
 800e60c:	ec51 0b18 	vmov	r0, r1, d8
 800e610:	f7f1 fffa 	bl	8000608 <__aeabi_dmul>
 800e614:	a37c      	add	r3, pc, #496	; (adr r3, 800e808 <__ieee754_pow+0x708>)
 800e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61a:	4604      	mov	r4, r0
 800e61c:	460d      	mov	r5, r1
 800e61e:	f7f1 fff3 	bl	8000608 <__aeabi_dmul>
 800e622:	a37b      	add	r3, pc, #492	; (adr r3, 800e810 <__ieee754_pow+0x710>)
 800e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e628:	f7f1 fe38 	bl	800029c <__adddf3>
 800e62c:	4622      	mov	r2, r4
 800e62e:	462b      	mov	r3, r5
 800e630:	f7f1 ffea 	bl	8000608 <__aeabi_dmul>
 800e634:	a378      	add	r3, pc, #480	; (adr r3, 800e818 <__ieee754_pow+0x718>)
 800e636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63a:	f7f1 fe2f 	bl	800029c <__adddf3>
 800e63e:	4622      	mov	r2, r4
 800e640:	462b      	mov	r3, r5
 800e642:	f7f1 ffe1 	bl	8000608 <__aeabi_dmul>
 800e646:	a376      	add	r3, pc, #472	; (adr r3, 800e820 <__ieee754_pow+0x720>)
 800e648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64c:	f7f1 fe26 	bl	800029c <__adddf3>
 800e650:	4622      	mov	r2, r4
 800e652:	462b      	mov	r3, r5
 800e654:	f7f1 ffd8 	bl	8000608 <__aeabi_dmul>
 800e658:	a373      	add	r3, pc, #460	; (adr r3, 800e828 <__ieee754_pow+0x728>)
 800e65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65e:	f7f1 fe1d 	bl	800029c <__adddf3>
 800e662:	4622      	mov	r2, r4
 800e664:	462b      	mov	r3, r5
 800e666:	f7f1 ffcf 	bl	8000608 <__aeabi_dmul>
 800e66a:	a371      	add	r3, pc, #452	; (adr r3, 800e830 <__ieee754_pow+0x730>)
 800e66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e670:	f7f1 fe14 	bl	800029c <__adddf3>
 800e674:	4622      	mov	r2, r4
 800e676:	4606      	mov	r6, r0
 800e678:	460f      	mov	r7, r1
 800e67a:	462b      	mov	r3, r5
 800e67c:	4620      	mov	r0, r4
 800e67e:	4629      	mov	r1, r5
 800e680:	f7f1 ffc2 	bl	8000608 <__aeabi_dmul>
 800e684:	4602      	mov	r2, r0
 800e686:	460b      	mov	r3, r1
 800e688:	4630      	mov	r0, r6
 800e68a:	4639      	mov	r1, r7
 800e68c:	f7f1 ffbc 	bl	8000608 <__aeabi_dmul>
 800e690:	4642      	mov	r2, r8
 800e692:	4604      	mov	r4, r0
 800e694:	460d      	mov	r5, r1
 800e696:	464b      	mov	r3, r9
 800e698:	ec51 0b18 	vmov	r0, r1, d8
 800e69c:	f7f1 fdfe 	bl	800029c <__adddf3>
 800e6a0:	ec53 2b19 	vmov	r2, r3, d9
 800e6a4:	f7f1 ffb0 	bl	8000608 <__aeabi_dmul>
 800e6a8:	4622      	mov	r2, r4
 800e6aa:	462b      	mov	r3, r5
 800e6ac:	f7f1 fdf6 	bl	800029c <__adddf3>
 800e6b0:	4642      	mov	r2, r8
 800e6b2:	4682      	mov	sl, r0
 800e6b4:	468b      	mov	fp, r1
 800e6b6:	464b      	mov	r3, r9
 800e6b8:	4640      	mov	r0, r8
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	f7f1 ffa4 	bl	8000608 <__aeabi_dmul>
 800e6c0:	4b6b      	ldr	r3, [pc, #428]	; (800e870 <__ieee754_pow+0x770>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	460f      	mov	r7, r1
 800e6c8:	f7f1 fde8 	bl	800029c <__adddf3>
 800e6cc:	4652      	mov	r2, sl
 800e6ce:	465b      	mov	r3, fp
 800e6d0:	f7f1 fde4 	bl	800029c <__adddf3>
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	460d      	mov	r5, r1
 800e6da:	4602      	mov	r2, r0
 800e6dc:	460b      	mov	r3, r1
 800e6de:	4640      	mov	r0, r8
 800e6e0:	4649      	mov	r1, r9
 800e6e2:	f7f1 ff91 	bl	8000608 <__aeabi_dmul>
 800e6e6:	4b62      	ldr	r3, [pc, #392]	; (800e870 <__ieee754_pow+0x770>)
 800e6e8:	4680      	mov	r8, r0
 800e6ea:	4689      	mov	r9, r1
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	4629      	mov	r1, r5
 800e6f2:	f7f1 fdd1 	bl	8000298 <__aeabi_dsub>
 800e6f6:	4632      	mov	r2, r6
 800e6f8:	463b      	mov	r3, r7
 800e6fa:	f7f1 fdcd 	bl	8000298 <__aeabi_dsub>
 800e6fe:	4602      	mov	r2, r0
 800e700:	460b      	mov	r3, r1
 800e702:	4650      	mov	r0, sl
 800e704:	4659      	mov	r1, fp
 800e706:	f7f1 fdc7 	bl	8000298 <__aeabi_dsub>
 800e70a:	ec53 2b18 	vmov	r2, r3, d8
 800e70e:	f7f1 ff7b 	bl	8000608 <__aeabi_dmul>
 800e712:	4622      	mov	r2, r4
 800e714:	4606      	mov	r6, r0
 800e716:	460f      	mov	r7, r1
 800e718:	462b      	mov	r3, r5
 800e71a:	ec51 0b19 	vmov	r0, r1, d9
 800e71e:	f7f1 ff73 	bl	8000608 <__aeabi_dmul>
 800e722:	4602      	mov	r2, r0
 800e724:	460b      	mov	r3, r1
 800e726:	4630      	mov	r0, r6
 800e728:	4639      	mov	r1, r7
 800e72a:	f7f1 fdb7 	bl	800029c <__adddf3>
 800e72e:	4606      	mov	r6, r0
 800e730:	460f      	mov	r7, r1
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4640      	mov	r0, r8
 800e738:	4649      	mov	r1, r9
 800e73a:	f7f1 fdaf 	bl	800029c <__adddf3>
 800e73e:	a33e      	add	r3, pc, #248	; (adr r3, 800e838 <__ieee754_pow+0x738>)
 800e740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e744:	2000      	movs	r0, #0
 800e746:	4604      	mov	r4, r0
 800e748:	460d      	mov	r5, r1
 800e74a:	f7f1 ff5d 	bl	8000608 <__aeabi_dmul>
 800e74e:	4642      	mov	r2, r8
 800e750:	ec41 0b18 	vmov	d8, r0, r1
 800e754:	464b      	mov	r3, r9
 800e756:	4620      	mov	r0, r4
 800e758:	4629      	mov	r1, r5
 800e75a:	f7f1 fd9d 	bl	8000298 <__aeabi_dsub>
 800e75e:	4602      	mov	r2, r0
 800e760:	460b      	mov	r3, r1
 800e762:	4630      	mov	r0, r6
 800e764:	4639      	mov	r1, r7
 800e766:	f7f1 fd97 	bl	8000298 <__aeabi_dsub>
 800e76a:	a335      	add	r3, pc, #212	; (adr r3, 800e840 <__ieee754_pow+0x740>)
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	f7f1 ff4a 	bl	8000608 <__aeabi_dmul>
 800e774:	a334      	add	r3, pc, #208	; (adr r3, 800e848 <__ieee754_pow+0x748>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	4606      	mov	r6, r0
 800e77c:	460f      	mov	r7, r1
 800e77e:	4620      	mov	r0, r4
 800e780:	4629      	mov	r1, r5
 800e782:	f7f1 ff41 	bl	8000608 <__aeabi_dmul>
 800e786:	4602      	mov	r2, r0
 800e788:	460b      	mov	r3, r1
 800e78a:	4630      	mov	r0, r6
 800e78c:	4639      	mov	r1, r7
 800e78e:	f7f1 fd85 	bl	800029c <__adddf3>
 800e792:	9a07      	ldr	r2, [sp, #28]
 800e794:	4b37      	ldr	r3, [pc, #220]	; (800e874 <__ieee754_pow+0x774>)
 800e796:	4413      	add	r3, r2
 800e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79c:	f7f1 fd7e 	bl	800029c <__adddf3>
 800e7a0:	4682      	mov	sl, r0
 800e7a2:	9805      	ldr	r0, [sp, #20]
 800e7a4:	468b      	mov	fp, r1
 800e7a6:	f7f1 fec5 	bl	8000534 <__aeabi_i2d>
 800e7aa:	9a07      	ldr	r2, [sp, #28]
 800e7ac:	4b32      	ldr	r3, [pc, #200]	; (800e878 <__ieee754_pow+0x778>)
 800e7ae:	4413      	add	r3, r2
 800e7b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	460f      	mov	r7, r1
 800e7b8:	4652      	mov	r2, sl
 800e7ba:	465b      	mov	r3, fp
 800e7bc:	ec51 0b18 	vmov	r0, r1, d8
 800e7c0:	f7f1 fd6c 	bl	800029c <__adddf3>
 800e7c4:	4642      	mov	r2, r8
 800e7c6:	464b      	mov	r3, r9
 800e7c8:	f7f1 fd68 	bl	800029c <__adddf3>
 800e7cc:	4632      	mov	r2, r6
 800e7ce:	463b      	mov	r3, r7
 800e7d0:	f7f1 fd64 	bl	800029c <__adddf3>
 800e7d4:	2000      	movs	r0, #0
 800e7d6:	4632      	mov	r2, r6
 800e7d8:	463b      	mov	r3, r7
 800e7da:	4604      	mov	r4, r0
 800e7dc:	460d      	mov	r5, r1
 800e7de:	f7f1 fd5b 	bl	8000298 <__aeabi_dsub>
 800e7e2:	4642      	mov	r2, r8
 800e7e4:	464b      	mov	r3, r9
 800e7e6:	f7f1 fd57 	bl	8000298 <__aeabi_dsub>
 800e7ea:	ec53 2b18 	vmov	r2, r3, d8
 800e7ee:	f7f1 fd53 	bl	8000298 <__aeabi_dsub>
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	4650      	mov	r0, sl
 800e7f8:	4659      	mov	r1, fp
 800e7fa:	e610      	b.n	800e41e <__ieee754_pow+0x31e>
 800e7fc:	2401      	movs	r4, #1
 800e7fe:	e6a1      	b.n	800e544 <__ieee754_pow+0x444>
 800e800:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e850 <__ieee754_pow+0x750>
 800e804:	e617      	b.n	800e436 <__ieee754_pow+0x336>
 800e806:	bf00      	nop
 800e808:	4a454eef 	.word	0x4a454eef
 800e80c:	3fca7e28 	.word	0x3fca7e28
 800e810:	93c9db65 	.word	0x93c9db65
 800e814:	3fcd864a 	.word	0x3fcd864a
 800e818:	a91d4101 	.word	0xa91d4101
 800e81c:	3fd17460 	.word	0x3fd17460
 800e820:	518f264d 	.word	0x518f264d
 800e824:	3fd55555 	.word	0x3fd55555
 800e828:	db6fabff 	.word	0xdb6fabff
 800e82c:	3fdb6db6 	.word	0x3fdb6db6
 800e830:	33333303 	.word	0x33333303
 800e834:	3fe33333 	.word	0x3fe33333
 800e838:	e0000000 	.word	0xe0000000
 800e83c:	3feec709 	.word	0x3feec709
 800e840:	dc3a03fd 	.word	0xdc3a03fd
 800e844:	3feec709 	.word	0x3feec709
 800e848:	145b01f5 	.word	0x145b01f5
 800e84c:	be3e2fe0 	.word	0xbe3e2fe0
 800e850:	00000000 	.word	0x00000000
 800e854:	3ff00000 	.word	0x3ff00000
 800e858:	7ff00000 	.word	0x7ff00000
 800e85c:	43400000 	.word	0x43400000
 800e860:	0003988e 	.word	0x0003988e
 800e864:	000bb679 	.word	0x000bb679
 800e868:	0800f1f0 	.word	0x0800f1f0
 800e86c:	3ff00000 	.word	0x3ff00000
 800e870:	40080000 	.word	0x40080000
 800e874:	0800f210 	.word	0x0800f210
 800e878:	0800f200 	.word	0x0800f200
 800e87c:	a3b5      	add	r3, pc, #724	; (adr r3, 800eb54 <__ieee754_pow+0xa54>)
 800e87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e882:	4640      	mov	r0, r8
 800e884:	4649      	mov	r1, r9
 800e886:	f7f1 fd09 	bl	800029c <__adddf3>
 800e88a:	4622      	mov	r2, r4
 800e88c:	ec41 0b1a 	vmov	d10, r0, r1
 800e890:	462b      	mov	r3, r5
 800e892:	4630      	mov	r0, r6
 800e894:	4639      	mov	r1, r7
 800e896:	f7f1 fcff 	bl	8000298 <__aeabi_dsub>
 800e89a:	4602      	mov	r2, r0
 800e89c:	460b      	mov	r3, r1
 800e89e:	ec51 0b1a 	vmov	r0, r1, d10
 800e8a2:	f7f2 f941 	bl	8000b28 <__aeabi_dcmpgt>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	f47f ae04 	bne.w	800e4b4 <__ieee754_pow+0x3b4>
 800e8ac:	4aa4      	ldr	r2, [pc, #656]	; (800eb40 <__ieee754_pow+0xa40>)
 800e8ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	f340 8108 	ble.w	800eac8 <__ieee754_pow+0x9c8>
 800e8b8:	151b      	asrs	r3, r3, #20
 800e8ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e8be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e8c2:	fa4a f303 	asr.w	r3, sl, r3
 800e8c6:	445b      	add	r3, fp
 800e8c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e8cc:	4e9d      	ldr	r6, [pc, #628]	; (800eb44 <__ieee754_pow+0xa44>)
 800e8ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e8d2:	4116      	asrs	r6, r2
 800e8d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e8d8:	2000      	movs	r0, #0
 800e8da:	ea23 0106 	bic.w	r1, r3, r6
 800e8de:	f1c2 0214 	rsb	r2, r2, #20
 800e8e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e8e6:	fa4a fa02 	asr.w	sl, sl, r2
 800e8ea:	f1bb 0f00 	cmp.w	fp, #0
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	bfb8      	it	lt
 800e8f8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e8fc:	f7f1 fccc 	bl	8000298 <__aeabi_dsub>
 800e900:	ec41 0b19 	vmov	d9, r0, r1
 800e904:	4642      	mov	r2, r8
 800e906:	464b      	mov	r3, r9
 800e908:	ec51 0b19 	vmov	r0, r1, d9
 800e90c:	f7f1 fcc6 	bl	800029c <__adddf3>
 800e910:	a37b      	add	r3, pc, #492	; (adr r3, 800eb00 <__ieee754_pow+0xa00>)
 800e912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e916:	2000      	movs	r0, #0
 800e918:	4604      	mov	r4, r0
 800e91a:	460d      	mov	r5, r1
 800e91c:	f7f1 fe74 	bl	8000608 <__aeabi_dmul>
 800e920:	ec53 2b19 	vmov	r2, r3, d9
 800e924:	4606      	mov	r6, r0
 800e926:	460f      	mov	r7, r1
 800e928:	4620      	mov	r0, r4
 800e92a:	4629      	mov	r1, r5
 800e92c:	f7f1 fcb4 	bl	8000298 <__aeabi_dsub>
 800e930:	4602      	mov	r2, r0
 800e932:	460b      	mov	r3, r1
 800e934:	4640      	mov	r0, r8
 800e936:	4649      	mov	r1, r9
 800e938:	f7f1 fcae 	bl	8000298 <__aeabi_dsub>
 800e93c:	a372      	add	r3, pc, #456	; (adr r3, 800eb08 <__ieee754_pow+0xa08>)
 800e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e942:	f7f1 fe61 	bl	8000608 <__aeabi_dmul>
 800e946:	a372      	add	r3, pc, #456	; (adr r3, 800eb10 <__ieee754_pow+0xa10>)
 800e948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94c:	4680      	mov	r8, r0
 800e94e:	4689      	mov	r9, r1
 800e950:	4620      	mov	r0, r4
 800e952:	4629      	mov	r1, r5
 800e954:	f7f1 fe58 	bl	8000608 <__aeabi_dmul>
 800e958:	4602      	mov	r2, r0
 800e95a:	460b      	mov	r3, r1
 800e95c:	4640      	mov	r0, r8
 800e95e:	4649      	mov	r1, r9
 800e960:	f7f1 fc9c 	bl	800029c <__adddf3>
 800e964:	4604      	mov	r4, r0
 800e966:	460d      	mov	r5, r1
 800e968:	4602      	mov	r2, r0
 800e96a:	460b      	mov	r3, r1
 800e96c:	4630      	mov	r0, r6
 800e96e:	4639      	mov	r1, r7
 800e970:	f7f1 fc94 	bl	800029c <__adddf3>
 800e974:	4632      	mov	r2, r6
 800e976:	463b      	mov	r3, r7
 800e978:	4680      	mov	r8, r0
 800e97a:	4689      	mov	r9, r1
 800e97c:	f7f1 fc8c 	bl	8000298 <__aeabi_dsub>
 800e980:	4602      	mov	r2, r0
 800e982:	460b      	mov	r3, r1
 800e984:	4620      	mov	r0, r4
 800e986:	4629      	mov	r1, r5
 800e988:	f7f1 fc86 	bl	8000298 <__aeabi_dsub>
 800e98c:	4642      	mov	r2, r8
 800e98e:	4606      	mov	r6, r0
 800e990:	460f      	mov	r7, r1
 800e992:	464b      	mov	r3, r9
 800e994:	4640      	mov	r0, r8
 800e996:	4649      	mov	r1, r9
 800e998:	f7f1 fe36 	bl	8000608 <__aeabi_dmul>
 800e99c:	a35e      	add	r3, pc, #376	; (adr r3, 800eb18 <__ieee754_pow+0xa18>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	460d      	mov	r5, r1
 800e9a6:	f7f1 fe2f 	bl	8000608 <__aeabi_dmul>
 800e9aa:	a35d      	add	r3, pc, #372	; (adr r3, 800eb20 <__ieee754_pow+0xa20>)
 800e9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b0:	f7f1 fc72 	bl	8000298 <__aeabi_dsub>
 800e9b4:	4622      	mov	r2, r4
 800e9b6:	462b      	mov	r3, r5
 800e9b8:	f7f1 fe26 	bl	8000608 <__aeabi_dmul>
 800e9bc:	a35a      	add	r3, pc, #360	; (adr r3, 800eb28 <__ieee754_pow+0xa28>)
 800e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c2:	f7f1 fc6b 	bl	800029c <__adddf3>
 800e9c6:	4622      	mov	r2, r4
 800e9c8:	462b      	mov	r3, r5
 800e9ca:	f7f1 fe1d 	bl	8000608 <__aeabi_dmul>
 800e9ce:	a358      	add	r3, pc, #352	; (adr r3, 800eb30 <__ieee754_pow+0xa30>)
 800e9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d4:	f7f1 fc60 	bl	8000298 <__aeabi_dsub>
 800e9d8:	4622      	mov	r2, r4
 800e9da:	462b      	mov	r3, r5
 800e9dc:	f7f1 fe14 	bl	8000608 <__aeabi_dmul>
 800e9e0:	a355      	add	r3, pc, #340	; (adr r3, 800eb38 <__ieee754_pow+0xa38>)
 800e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e6:	f7f1 fc59 	bl	800029c <__adddf3>
 800e9ea:	4622      	mov	r2, r4
 800e9ec:	462b      	mov	r3, r5
 800e9ee:	f7f1 fe0b 	bl	8000608 <__aeabi_dmul>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	4640      	mov	r0, r8
 800e9f8:	4649      	mov	r1, r9
 800e9fa:	f7f1 fc4d 	bl	8000298 <__aeabi_dsub>
 800e9fe:	4604      	mov	r4, r0
 800ea00:	460d      	mov	r5, r1
 800ea02:	4602      	mov	r2, r0
 800ea04:	460b      	mov	r3, r1
 800ea06:	4640      	mov	r0, r8
 800ea08:	4649      	mov	r1, r9
 800ea0a:	f7f1 fdfd 	bl	8000608 <__aeabi_dmul>
 800ea0e:	2200      	movs	r2, #0
 800ea10:	ec41 0b19 	vmov	d9, r0, r1
 800ea14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea18:	4620      	mov	r0, r4
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	f7f1 fc3c 	bl	8000298 <__aeabi_dsub>
 800ea20:	4602      	mov	r2, r0
 800ea22:	460b      	mov	r3, r1
 800ea24:	ec51 0b19 	vmov	r0, r1, d9
 800ea28:	f7f1 ff18 	bl	800085c <__aeabi_ddiv>
 800ea2c:	4632      	mov	r2, r6
 800ea2e:	4604      	mov	r4, r0
 800ea30:	460d      	mov	r5, r1
 800ea32:	463b      	mov	r3, r7
 800ea34:	4640      	mov	r0, r8
 800ea36:	4649      	mov	r1, r9
 800ea38:	f7f1 fde6 	bl	8000608 <__aeabi_dmul>
 800ea3c:	4632      	mov	r2, r6
 800ea3e:	463b      	mov	r3, r7
 800ea40:	f7f1 fc2c 	bl	800029c <__adddf3>
 800ea44:	4602      	mov	r2, r0
 800ea46:	460b      	mov	r3, r1
 800ea48:	4620      	mov	r0, r4
 800ea4a:	4629      	mov	r1, r5
 800ea4c:	f7f1 fc24 	bl	8000298 <__aeabi_dsub>
 800ea50:	4642      	mov	r2, r8
 800ea52:	464b      	mov	r3, r9
 800ea54:	f7f1 fc20 	bl	8000298 <__aeabi_dsub>
 800ea58:	460b      	mov	r3, r1
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	493a      	ldr	r1, [pc, #232]	; (800eb48 <__ieee754_pow+0xa48>)
 800ea5e:	2000      	movs	r0, #0
 800ea60:	f7f1 fc1a 	bl	8000298 <__aeabi_dsub>
 800ea64:	ec41 0b10 	vmov	d0, r0, r1
 800ea68:	ee10 3a90 	vmov	r3, s1
 800ea6c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ea70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea74:	da2b      	bge.n	800eace <__ieee754_pow+0x9ce>
 800ea76:	4650      	mov	r0, sl
 800ea78:	f000 f966 	bl	800ed48 <scalbn>
 800ea7c:	ec51 0b10 	vmov	r0, r1, d0
 800ea80:	ec53 2b18 	vmov	r2, r3, d8
 800ea84:	f7ff bbed 	b.w	800e262 <__ieee754_pow+0x162>
 800ea88:	4b30      	ldr	r3, [pc, #192]	; (800eb4c <__ieee754_pow+0xa4c>)
 800ea8a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ea8e:	429e      	cmp	r6, r3
 800ea90:	f77f af0c 	ble.w	800e8ac <__ieee754_pow+0x7ac>
 800ea94:	4b2e      	ldr	r3, [pc, #184]	; (800eb50 <__ieee754_pow+0xa50>)
 800ea96:	440b      	add	r3, r1
 800ea98:	4303      	orrs	r3, r0
 800ea9a:	d009      	beq.n	800eab0 <__ieee754_pow+0x9b0>
 800ea9c:	ec51 0b18 	vmov	r0, r1, d8
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f7f2 f822 	bl	8000aec <__aeabi_dcmplt>
 800eaa8:	3800      	subs	r0, #0
 800eaaa:	bf18      	it	ne
 800eaac:	2001      	movne	r0, #1
 800eaae:	e447      	b.n	800e340 <__ieee754_pow+0x240>
 800eab0:	4622      	mov	r2, r4
 800eab2:	462b      	mov	r3, r5
 800eab4:	f7f1 fbf0 	bl	8000298 <__aeabi_dsub>
 800eab8:	4642      	mov	r2, r8
 800eaba:	464b      	mov	r3, r9
 800eabc:	f7f2 f82a 	bl	8000b14 <__aeabi_dcmpge>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	f43f aef3 	beq.w	800e8ac <__ieee754_pow+0x7ac>
 800eac6:	e7e9      	b.n	800ea9c <__ieee754_pow+0x99c>
 800eac8:	f04f 0a00 	mov.w	sl, #0
 800eacc:	e71a      	b.n	800e904 <__ieee754_pow+0x804>
 800eace:	ec51 0b10 	vmov	r0, r1, d0
 800ead2:	4619      	mov	r1, r3
 800ead4:	e7d4      	b.n	800ea80 <__ieee754_pow+0x980>
 800ead6:	491c      	ldr	r1, [pc, #112]	; (800eb48 <__ieee754_pow+0xa48>)
 800ead8:	2000      	movs	r0, #0
 800eada:	f7ff bb30 	b.w	800e13e <__ieee754_pow+0x3e>
 800eade:	2000      	movs	r0, #0
 800eae0:	2100      	movs	r1, #0
 800eae2:	f7ff bb2c 	b.w	800e13e <__ieee754_pow+0x3e>
 800eae6:	4630      	mov	r0, r6
 800eae8:	4639      	mov	r1, r7
 800eaea:	f7ff bb28 	b.w	800e13e <__ieee754_pow+0x3e>
 800eaee:	9204      	str	r2, [sp, #16]
 800eaf0:	f7ff bb7a 	b.w	800e1e8 <__ieee754_pow+0xe8>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	f7ff bb64 	b.w	800e1c2 <__ieee754_pow+0xc2>
 800eafa:	bf00      	nop
 800eafc:	f3af 8000 	nop.w
 800eb00:	00000000 	.word	0x00000000
 800eb04:	3fe62e43 	.word	0x3fe62e43
 800eb08:	fefa39ef 	.word	0xfefa39ef
 800eb0c:	3fe62e42 	.word	0x3fe62e42
 800eb10:	0ca86c39 	.word	0x0ca86c39
 800eb14:	be205c61 	.word	0xbe205c61
 800eb18:	72bea4d0 	.word	0x72bea4d0
 800eb1c:	3e663769 	.word	0x3e663769
 800eb20:	c5d26bf1 	.word	0xc5d26bf1
 800eb24:	3ebbbd41 	.word	0x3ebbbd41
 800eb28:	af25de2c 	.word	0xaf25de2c
 800eb2c:	3f11566a 	.word	0x3f11566a
 800eb30:	16bebd93 	.word	0x16bebd93
 800eb34:	3f66c16c 	.word	0x3f66c16c
 800eb38:	5555553e 	.word	0x5555553e
 800eb3c:	3fc55555 	.word	0x3fc55555
 800eb40:	3fe00000 	.word	0x3fe00000
 800eb44:	000fffff 	.word	0x000fffff
 800eb48:	3ff00000 	.word	0x3ff00000
 800eb4c:	4090cbff 	.word	0x4090cbff
 800eb50:	3f6f3400 	.word	0x3f6f3400
 800eb54:	652b82fe 	.word	0x652b82fe
 800eb58:	3c971547 	.word	0x3c971547

0800eb5c <__ieee754_sqrt>:
 800eb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb60:	ec55 4b10 	vmov	r4, r5, d0
 800eb64:	4e55      	ldr	r6, [pc, #340]	; (800ecbc <__ieee754_sqrt+0x160>)
 800eb66:	43ae      	bics	r6, r5
 800eb68:	ee10 0a10 	vmov	r0, s0
 800eb6c:	ee10 3a10 	vmov	r3, s0
 800eb70:	462a      	mov	r2, r5
 800eb72:	4629      	mov	r1, r5
 800eb74:	d110      	bne.n	800eb98 <__ieee754_sqrt+0x3c>
 800eb76:	ee10 2a10 	vmov	r2, s0
 800eb7a:	462b      	mov	r3, r5
 800eb7c:	f7f1 fd44 	bl	8000608 <__aeabi_dmul>
 800eb80:	4602      	mov	r2, r0
 800eb82:	460b      	mov	r3, r1
 800eb84:	4620      	mov	r0, r4
 800eb86:	4629      	mov	r1, r5
 800eb88:	f7f1 fb88 	bl	800029c <__adddf3>
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	460d      	mov	r5, r1
 800eb90:	ec45 4b10 	vmov	d0, r4, r5
 800eb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb98:	2d00      	cmp	r5, #0
 800eb9a:	dc10      	bgt.n	800ebbe <__ieee754_sqrt+0x62>
 800eb9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eba0:	4330      	orrs	r0, r6
 800eba2:	d0f5      	beq.n	800eb90 <__ieee754_sqrt+0x34>
 800eba4:	b15d      	cbz	r5, 800ebbe <__ieee754_sqrt+0x62>
 800eba6:	ee10 2a10 	vmov	r2, s0
 800ebaa:	462b      	mov	r3, r5
 800ebac:	ee10 0a10 	vmov	r0, s0
 800ebb0:	f7f1 fb72 	bl	8000298 <__aeabi_dsub>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	f7f1 fe50 	bl	800085c <__aeabi_ddiv>
 800ebbc:	e7e6      	b.n	800eb8c <__ieee754_sqrt+0x30>
 800ebbe:	1512      	asrs	r2, r2, #20
 800ebc0:	d074      	beq.n	800ecac <__ieee754_sqrt+0x150>
 800ebc2:	07d4      	lsls	r4, r2, #31
 800ebc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ebc8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ebcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ebd0:	bf5e      	ittt	pl
 800ebd2:	0fda      	lsrpl	r2, r3, #31
 800ebd4:	005b      	lslpl	r3, r3, #1
 800ebd6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ebda:	2400      	movs	r4, #0
 800ebdc:	0fda      	lsrs	r2, r3, #31
 800ebde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ebe2:	107f      	asrs	r7, r7, #1
 800ebe4:	005b      	lsls	r3, r3, #1
 800ebe6:	2516      	movs	r5, #22
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ebee:	1886      	adds	r6, r0, r2
 800ebf0:	428e      	cmp	r6, r1
 800ebf2:	bfde      	ittt	le
 800ebf4:	1b89      	suble	r1, r1, r6
 800ebf6:	18b0      	addle	r0, r6, r2
 800ebf8:	18a4      	addle	r4, r4, r2
 800ebfa:	0049      	lsls	r1, r1, #1
 800ebfc:	3d01      	subs	r5, #1
 800ebfe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ec02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ec06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec0a:	d1f0      	bne.n	800ebee <__ieee754_sqrt+0x92>
 800ec0c:	462a      	mov	r2, r5
 800ec0e:	f04f 0e20 	mov.w	lr, #32
 800ec12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ec16:	4281      	cmp	r1, r0
 800ec18:	eb06 0c05 	add.w	ip, r6, r5
 800ec1c:	dc02      	bgt.n	800ec24 <__ieee754_sqrt+0xc8>
 800ec1e:	d113      	bne.n	800ec48 <__ieee754_sqrt+0xec>
 800ec20:	459c      	cmp	ip, r3
 800ec22:	d811      	bhi.n	800ec48 <__ieee754_sqrt+0xec>
 800ec24:	f1bc 0f00 	cmp.w	ip, #0
 800ec28:	eb0c 0506 	add.w	r5, ip, r6
 800ec2c:	da43      	bge.n	800ecb6 <__ieee754_sqrt+0x15a>
 800ec2e:	2d00      	cmp	r5, #0
 800ec30:	db41      	blt.n	800ecb6 <__ieee754_sqrt+0x15a>
 800ec32:	f100 0801 	add.w	r8, r0, #1
 800ec36:	1a09      	subs	r1, r1, r0
 800ec38:	459c      	cmp	ip, r3
 800ec3a:	bf88      	it	hi
 800ec3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ec40:	eba3 030c 	sub.w	r3, r3, ip
 800ec44:	4432      	add	r2, r6
 800ec46:	4640      	mov	r0, r8
 800ec48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ec4c:	f1be 0e01 	subs.w	lr, lr, #1
 800ec50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ec54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ec5c:	d1db      	bne.n	800ec16 <__ieee754_sqrt+0xba>
 800ec5e:	430b      	orrs	r3, r1
 800ec60:	d006      	beq.n	800ec70 <__ieee754_sqrt+0x114>
 800ec62:	1c50      	adds	r0, r2, #1
 800ec64:	bf13      	iteet	ne
 800ec66:	3201      	addne	r2, #1
 800ec68:	3401      	addeq	r4, #1
 800ec6a:	4672      	moveq	r2, lr
 800ec6c:	f022 0201 	bicne.w	r2, r2, #1
 800ec70:	1063      	asrs	r3, r4, #1
 800ec72:	0852      	lsrs	r2, r2, #1
 800ec74:	07e1      	lsls	r1, r4, #31
 800ec76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ec7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ec7e:	bf48      	it	mi
 800ec80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ec84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ec88:	4614      	mov	r4, r2
 800ec8a:	e781      	b.n	800eb90 <__ieee754_sqrt+0x34>
 800ec8c:	0ad9      	lsrs	r1, r3, #11
 800ec8e:	3815      	subs	r0, #21
 800ec90:	055b      	lsls	r3, r3, #21
 800ec92:	2900      	cmp	r1, #0
 800ec94:	d0fa      	beq.n	800ec8c <__ieee754_sqrt+0x130>
 800ec96:	02cd      	lsls	r5, r1, #11
 800ec98:	d50a      	bpl.n	800ecb0 <__ieee754_sqrt+0x154>
 800ec9a:	f1c2 0420 	rsb	r4, r2, #32
 800ec9e:	fa23 f404 	lsr.w	r4, r3, r4
 800eca2:	1e55      	subs	r5, r2, #1
 800eca4:	4093      	lsls	r3, r2
 800eca6:	4321      	orrs	r1, r4
 800eca8:	1b42      	subs	r2, r0, r5
 800ecaa:	e78a      	b.n	800ebc2 <__ieee754_sqrt+0x66>
 800ecac:	4610      	mov	r0, r2
 800ecae:	e7f0      	b.n	800ec92 <__ieee754_sqrt+0x136>
 800ecb0:	0049      	lsls	r1, r1, #1
 800ecb2:	3201      	adds	r2, #1
 800ecb4:	e7ef      	b.n	800ec96 <__ieee754_sqrt+0x13a>
 800ecb6:	4680      	mov	r8, r0
 800ecb8:	e7bd      	b.n	800ec36 <__ieee754_sqrt+0xda>
 800ecba:	bf00      	nop
 800ecbc:	7ff00000 	.word	0x7ff00000

0800ecc0 <with_errno>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	460d      	mov	r5, r1
 800ecc6:	4616      	mov	r6, r2
 800ecc8:	f7fe f820 	bl	800cd0c <__errno>
 800eccc:	4629      	mov	r1, r5
 800ecce:	6006      	str	r6, [r0, #0]
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	bd70      	pop	{r4, r5, r6, pc}

0800ecd4 <xflow>:
 800ecd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecd6:	4614      	mov	r4, r2
 800ecd8:	461d      	mov	r5, r3
 800ecda:	b108      	cbz	r0, 800ece0 <xflow+0xc>
 800ecdc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ece0:	e9cd 2300 	strd	r2, r3, [sp]
 800ece4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ece8:	4620      	mov	r0, r4
 800ecea:	4629      	mov	r1, r5
 800ecec:	f7f1 fc8c 	bl	8000608 <__aeabi_dmul>
 800ecf0:	2222      	movs	r2, #34	; 0x22
 800ecf2:	b003      	add	sp, #12
 800ecf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecf8:	f7ff bfe2 	b.w	800ecc0 <with_errno>

0800ecfc <__math_uflow>:
 800ecfc:	b508      	push	{r3, lr}
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ed04:	f7ff ffe6 	bl	800ecd4 <xflow>
 800ed08:	ec41 0b10 	vmov	d0, r0, r1
 800ed0c:	bd08      	pop	{r3, pc}

0800ed0e <__math_oflow>:
 800ed0e:	b508      	push	{r3, lr}
 800ed10:	2200      	movs	r2, #0
 800ed12:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ed16:	f7ff ffdd 	bl	800ecd4 <xflow>
 800ed1a:	ec41 0b10 	vmov	d0, r0, r1
 800ed1e:	bd08      	pop	{r3, pc}

0800ed20 <fabs>:
 800ed20:	ec51 0b10 	vmov	r0, r1, d0
 800ed24:	ee10 2a10 	vmov	r2, s0
 800ed28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed2c:	ec43 2b10 	vmov	d0, r2, r3
 800ed30:	4770      	bx	lr

0800ed32 <finite>:
 800ed32:	b082      	sub	sp, #8
 800ed34:	ed8d 0b00 	vstr	d0, [sp]
 800ed38:	9801      	ldr	r0, [sp, #4]
 800ed3a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ed3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ed42:	0fc0      	lsrs	r0, r0, #31
 800ed44:	b002      	add	sp, #8
 800ed46:	4770      	bx	lr

0800ed48 <scalbn>:
 800ed48:	b570      	push	{r4, r5, r6, lr}
 800ed4a:	ec55 4b10 	vmov	r4, r5, d0
 800ed4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ed52:	4606      	mov	r6, r0
 800ed54:	462b      	mov	r3, r5
 800ed56:	b99a      	cbnz	r2, 800ed80 <scalbn+0x38>
 800ed58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ed5c:	4323      	orrs	r3, r4
 800ed5e:	d036      	beq.n	800edce <scalbn+0x86>
 800ed60:	4b39      	ldr	r3, [pc, #228]	; (800ee48 <scalbn+0x100>)
 800ed62:	4629      	mov	r1, r5
 800ed64:	ee10 0a10 	vmov	r0, s0
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f7f1 fc4d 	bl	8000608 <__aeabi_dmul>
 800ed6e:	4b37      	ldr	r3, [pc, #220]	; (800ee4c <scalbn+0x104>)
 800ed70:	429e      	cmp	r6, r3
 800ed72:	4604      	mov	r4, r0
 800ed74:	460d      	mov	r5, r1
 800ed76:	da10      	bge.n	800ed9a <scalbn+0x52>
 800ed78:	a32b      	add	r3, pc, #172	; (adr r3, 800ee28 <scalbn+0xe0>)
 800ed7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7e:	e03a      	b.n	800edf6 <scalbn+0xae>
 800ed80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ed84:	428a      	cmp	r2, r1
 800ed86:	d10c      	bne.n	800eda2 <scalbn+0x5a>
 800ed88:	ee10 2a10 	vmov	r2, s0
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	4629      	mov	r1, r5
 800ed90:	f7f1 fa84 	bl	800029c <__adddf3>
 800ed94:	4604      	mov	r4, r0
 800ed96:	460d      	mov	r5, r1
 800ed98:	e019      	b.n	800edce <scalbn+0x86>
 800ed9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ed9e:	460b      	mov	r3, r1
 800eda0:	3a36      	subs	r2, #54	; 0x36
 800eda2:	4432      	add	r2, r6
 800eda4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800eda8:	428a      	cmp	r2, r1
 800edaa:	dd08      	ble.n	800edbe <scalbn+0x76>
 800edac:	2d00      	cmp	r5, #0
 800edae:	a120      	add	r1, pc, #128	; (adr r1, 800ee30 <scalbn+0xe8>)
 800edb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edb4:	da1c      	bge.n	800edf0 <scalbn+0xa8>
 800edb6:	a120      	add	r1, pc, #128	; (adr r1, 800ee38 <scalbn+0xf0>)
 800edb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edbc:	e018      	b.n	800edf0 <scalbn+0xa8>
 800edbe:	2a00      	cmp	r2, #0
 800edc0:	dd08      	ble.n	800edd4 <scalbn+0x8c>
 800edc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800edc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800edca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800edce:	ec45 4b10 	vmov	d0, r4, r5
 800edd2:	bd70      	pop	{r4, r5, r6, pc}
 800edd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800edd8:	da19      	bge.n	800ee0e <scalbn+0xc6>
 800edda:	f24c 3350 	movw	r3, #50000	; 0xc350
 800edde:	429e      	cmp	r6, r3
 800ede0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ede4:	dd0a      	ble.n	800edfc <scalbn+0xb4>
 800ede6:	a112      	add	r1, pc, #72	; (adr r1, 800ee30 <scalbn+0xe8>)
 800ede8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1e2      	bne.n	800edb6 <scalbn+0x6e>
 800edf0:	a30f      	add	r3, pc, #60	; (adr r3, 800ee30 <scalbn+0xe8>)
 800edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf6:	f7f1 fc07 	bl	8000608 <__aeabi_dmul>
 800edfa:	e7cb      	b.n	800ed94 <scalbn+0x4c>
 800edfc:	a10a      	add	r1, pc, #40	; (adr r1, 800ee28 <scalbn+0xe0>)
 800edfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d0b8      	beq.n	800ed78 <scalbn+0x30>
 800ee06:	a10e      	add	r1, pc, #56	; (adr r1, 800ee40 <scalbn+0xf8>)
 800ee08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee0c:	e7b4      	b.n	800ed78 <scalbn+0x30>
 800ee0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee12:	3236      	adds	r2, #54	; 0x36
 800ee14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ee18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	4b0c      	ldr	r3, [pc, #48]	; (800ee50 <scalbn+0x108>)
 800ee20:	2200      	movs	r2, #0
 800ee22:	e7e8      	b.n	800edf6 <scalbn+0xae>
 800ee24:	f3af 8000 	nop.w
 800ee28:	c2f8f359 	.word	0xc2f8f359
 800ee2c:	01a56e1f 	.word	0x01a56e1f
 800ee30:	8800759c 	.word	0x8800759c
 800ee34:	7e37e43c 	.word	0x7e37e43c
 800ee38:	8800759c 	.word	0x8800759c
 800ee3c:	fe37e43c 	.word	0xfe37e43c
 800ee40:	c2f8f359 	.word	0xc2f8f359
 800ee44:	81a56e1f 	.word	0x81a56e1f
 800ee48:	43500000 	.word	0x43500000
 800ee4c:	ffff3cb0 	.word	0xffff3cb0
 800ee50:	3c900000 	.word	0x3c900000

0800ee54 <_init>:
 800ee54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee56:	bf00      	nop
 800ee58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee5a:	bc08      	pop	{r3}
 800ee5c:	469e      	mov	lr, r3
 800ee5e:	4770      	bx	lr

0800ee60 <_fini>:
 800ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee62:	bf00      	nop
 800ee64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee66:	bc08      	pop	{r3}
 800ee68:	469e      	mov	lr, r3
 800ee6a:	4770      	bx	lr
