
Robot_Vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800aa74  0800aa74  0001aa74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac38  0800ac38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac38  0800ac38  0001ac38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac40  0800ac40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac40  0800ac40  0001ac40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac44  0800ac44  0001ac44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ac48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000391c  20000074  0800acbc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003990  0800acbc  00023990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5f4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003909  00000000  00000000  0003b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  0003efa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00040770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a86a  00000000  00000000  00041de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4d8  00000000  00000000  0005c652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a62a8  00000000  00000000  00078b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011edd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000686c  00000000  00000000  0011ee24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aa5c 	.word	0x0800aa5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800aa5c 	.word	0x0800aa5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000090 	.word	0x20000090
 80005b4:	200000ec 	.word	0x200000ec

080005b8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetTimerTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200002ec 	.word	0x200002ec
 80005e8:	20000348 	.word	0x20000348

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b0b4      	sub	sp, #208	; 0xd0
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	instr4motors = &buffer.instruction_for_motors;
 80005f2:	4b7a      	ldr	r3, [pc, #488]	; (80007dc <main+0x1f0>)
 80005f4:	4a7a      	ldr	r2, [pc, #488]	; (80007e0 <main+0x1f4>)
 80005f6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 fc9e 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f924 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fb96 	bl	8000d30 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000604:	f000 fb4a 	bl	8000c9c <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000608:	f000 fab2 	bl	8000b70 <MX_TIM10_Init>
  MX_DMA_Init();
 800060c:	f000 fb76 	bl	8000cfc <MX_DMA_Init>
  MX_TIM11_Init();
 8000610:	f000 faf6 	bl	8000c00 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000614:	f000 f982 	bl	800091c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000618:	f000 fa10 	bl	8000a3c <MX_TIM3_Init>
  MX_I2C1_Init();
 800061c:	f000 f9e0 	bl	80009e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_DeInit(&hi2c1);
 8000620:	4870      	ldr	r0, [pc, #448]	; (80007e4 <main+0x1f8>)
 8000622:	f002 fff5 	bl	8003610 <HAL_I2C_DeInit>
  HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 8000626:	2100      	movs	r1, #0
 8000628:	486f      	ldr	r0, [pc, #444]	; (80007e8 <main+0x1fc>)
 800062a:	f004 ff51 	bl	80054d0 <HAL_TIM_IC_Start_IT>
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0, GPIO_PIN_SET);
  GPIOC->ODR |= GPIO_ODR_OD10;
 800062e:	4b6f      	ldr	r3, [pc, #444]	; (80007ec <main+0x200>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a6e      	ldr	r2, [pc, #440]	; (80007ec <main+0x200>)
 8000634:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000638:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD12;
 800063a:	4b6c      	ldr	r3, [pc, #432]	; (80007ec <main+0x200>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a6b      	ldr	r2, [pc, #428]	; (80007ec <main+0x200>)
 8000640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000644:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD11;
 8000646:	4b69      	ldr	r3, [pc, #420]	; (80007ec <main+0x200>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a68      	ldr	r2, [pc, #416]	; (80007ec <main+0x200>)
 800064c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000650:	6153      	str	r3, [r2, #20]
  GPIOD->ODR |= GPIO_ODR_OD2;
 8000652:	4b67      	ldr	r3, [pc, #412]	; (80007f0 <main+0x204>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a66      	ldr	r2, [pc, #408]	; (80007f0 <main+0x204>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6153      	str	r3, [r2, #20]
  GPIOB->ODR |= GPIO_ODR_OD15;
 800065e:	4b65      	ldr	r3, [pc, #404]	; (80007f4 <main+0x208>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a64      	ldr	r2, [pc, #400]	; (80007f4 <main+0x208>)
 8000664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000668:	6153      	str	r3, [r2, #20]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800066a:	4863      	ldr	r0, [pc, #396]	; (80007f8 <main+0x20c>)
 800066c:	f002 f97a 	bl	8002964 <HAL_DMA_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <main+0x8e>
  {
    Error_Handler();
 8000676:	f000 fe24 	bl	80012c2 <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1,DMA_Handle,hdma_adc1);
 800067a:	4b60      	ldr	r3, [pc, #384]	; (80007fc <main+0x210>)
 800067c:	4a5e      	ldr	r2, [pc, #376]	; (80007f8 <main+0x20c>)
 800067e:	639a      	str	r2, [r3, #56]	; 0x38
 8000680:	4b5d      	ldr	r3, [pc, #372]	; (80007f8 <main+0x20c>)
 8000682:	4a5e      	ldr	r2, [pc, #376]	; (80007fc <main+0x210>)
 8000684:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer.encod_data, sizeof(buffer.encod_data));
 8000686:	2202      	movs	r2, #2
 8000688:	495d      	ldr	r1, [pc, #372]	; (8000800 <main+0x214>)
 800068a:	485c      	ldr	r0, [pc, #368]	; (80007fc <main+0x210>)
 800068c:	f001 fcda 	bl	8002044 <HAL_ADC_Start_DMA>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  buffer.xTimer1_ultrs = xTimerCreate("Timer ultrs trigger", pdMS_TO_TICKS( 40 ), pdTRUE, 101, vCallbackFunctionTimer1);
 8000690:	4b5c      	ldr	r3, [pc, #368]	; (8000804 <main+0x218>)
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2365      	movs	r3, #101	; 0x65
 8000696:	2201      	movs	r2, #1
 8000698:	2128      	movs	r1, #40	; 0x28
 800069a:	485b      	ldr	r0, [pc, #364]	; (8000808 <main+0x21c>)
 800069c:	f008 fda6 	bl	80091ec <xTimerCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a5a      	ldr	r2, [pc, #360]	; (800080c <main+0x220>)
 80006a4:	6093      	str	r3, [r2, #8]
  xTimerStart(buffer.xTimer1_ultrs, portMAX_DELAY);
 80006a6:	4b59      	ldr	r3, [pc, #356]	; (800080c <main+0x220>)
 80006a8:	689c      	ldr	r4, [r3, #8]
 80006aa:	f008 f91b 	bl	80088e4 <xTaskGetTickCount>
 80006ae:	4602      	mov	r2, r0
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	4620      	mov	r0, r4
 80006bc:	f008 fdf2 	bl	80092a4 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  buffer.xQueue1_ultrs = xQueueCreate(10, sizeof(uint16_t));
 80006c0:	2200      	movs	r2, #0
 80006c2:	2102      	movs	r1, #2
 80006c4:	200a      	movs	r0, #10
 80006c6:	f007 f9f3 	bl	8007ab0 <xQueueGenericCreate>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a4f      	ldr	r2, [pc, #316]	; (800080c <main+0x220>)
 80006ce:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UltrasonicDistance */
  osThreadDef(UltrasonicDistance, ultrasonic_dis, osPriorityNormal, 0, 128);
 80006d0:	4b4f      	ldr	r3, [pc, #316]	; (8000810 <main+0x224>)
 80006d2:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UltrasonicDistanceHandle = osThreadCreate(osThread(UltrasonicDistance), NULL);
 80006e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 ffeb 	bl	80076c6 <osThreadCreate>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a48      	ldr	r2, [pc, #288]	; (8000814 <main+0x228>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of LineTracking */
  osThreadDef(LineTracking, line_tracking, osPriorityNormal, 0, 128);
 80006f6:	4b48      	ldr	r3, [pc, #288]	; (8000818 <main+0x22c>)
 80006f8:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80006fc:	461d      	mov	r5, r3
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LineTrackingHandle = osThreadCreate(osThread(LineTracking), NULL);
 800070a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f006 ffd8 	bl	80076c6 <osThreadCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a40      	ldr	r2, [pc, #256]	; (800081c <main+0x230>)
 800071a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LimitSwitch */
  osThreadDef(LimitSwitch, limit_switch, osPriorityNormal, 0, 128);
 800071c:	4b40      	ldr	r3, [pc, #256]	; (8000820 <main+0x234>)
 800071e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000722:	461d      	mov	r5, r3
 8000724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000728:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LimitSwitchHandle = osThreadCreate(osThread(LimitSwitch), NULL);
 8000730:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f006 ffc5 	bl	80076c6 <osThreadCreate>
 800073c:	4603      	mov	r3, r0
 800073e:	4a39      	ldr	r2, [pc, #228]	; (8000824 <main+0x238>)
 8000740:	6013      	str	r3, [r2, #0]

  /* definition and creation of InfraredMotion */
  osThreadDef(InfraredMotion, infrared_motion, osPriorityNormal, 0, 128);
 8000742:	4b39      	ldr	r3, [pc, #228]	; (8000828 <main+0x23c>)
 8000744:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000748:	461d      	mov	r5, r3
 800074a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InfraredMotionHandle = osThreadCreate(osThread(InfraredMotion), NULL);
 8000756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f006 ffb2 	bl	80076c6 <osThreadCreate>
 8000762:	4603      	mov	r3, r0
 8000764:	4a31      	ldr	r2, [pc, #196]	; (800082c <main+0x240>)
 8000766:	6013      	str	r3, [r2, #0]

  /* definition and creation of Accelerometer */
  osThreadDef(Accelerometer, accelerometer, osPriorityNormal, 0, 160);
 8000768:	4b31      	ldr	r3, [pc, #196]	; (8000830 <main+0x244>)
 800076a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800076e:	461d      	mov	r5, r3
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000778:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelerometerHandle = osThreadCreate(osThread(Accelerometer), NULL);
 800077c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f006 ff9f 	bl	80076c6 <osThreadCreate>
 8000788:	4603      	mov	r3, r0
 800078a:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <main+0x248>)
 800078c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motors */
  osThreadDef(Motors, motors, osPriorityNormal, 0, 160);
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <main+0x24c>)
 8000790:	f107 0420 	add.w	r4, r7, #32
 8000794:	461d      	mov	r5, r3
 8000796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800079e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorsHandle = osThreadCreate(osThread(Motors), NULL);
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f006 ff8c 	bl	80076c6 <osThreadCreate>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a22      	ldr	r2, [pc, #136]	; (800083c <main+0x250>)
 80007b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Encoders */
  osThreadDef(Encoders, encoders, osPriorityNormal, 0, 160);
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <main+0x254>)
 80007b6:	1d3c      	adds	r4, r7, #4
 80007b8:	461d      	mov	r5, r3
 80007ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncodersHandle = osThreadCreate(osThread(Encoders), NULL);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f006 ff7b 	bl	80076c6 <osThreadCreate>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <main+0x258>)
 80007d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007d6:	f006 ff6f 	bl	80076b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007da:	e7fe      	b.n	80007da <main+0x1ee>
 80007dc:	20000794 	.word	0x20000794
 80007e0:	20000788 	.word	0x20000788
 80007e4:	200005f0 	.word	0x200005f0
 80007e8:	2000068c 	.word	0x2000068c
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	40020400 	.word	0x40020400
 80007f8:	20000590 	.word	0x20000590
 80007fc:	20000548 	.word	0x20000548
 8000800:	20000789 	.word	0x20000789
 8000804:	08000f15 	.word	0x08000f15
 8000808:	0800aad8 	.word	0x0800aad8
 800080c:	2000077c 	.word	0x2000077c
 8000810:	0800aaec 	.word	0x0800aaec
 8000814:	20000760 	.word	0x20000760
 8000818:	0800ab08 	.word	0x0800ab08
 800081c:	20000764 	.word	0x20000764
 8000820:	0800ab24 	.word	0x0800ab24
 8000824:	20000768 	.word	0x20000768
 8000828:	0800ab40 	.word	0x0800ab40
 800082c:	2000076c 	.word	0x2000076c
 8000830:	0800ab5c 	.word	0x0800ab5c
 8000834:	20000770 	.word	0x20000770
 8000838:	0800ab78 	.word	0x0800ab78
 800083c:	20000774 	.word	0x20000774
 8000840:	0800ab94 	.word	0x0800ab94
 8000844:	20000778 	.word	0x20000778

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	; 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f009 fc98 	bl	800a18c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <SystemClock_Config+0xcc>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	4a27      	ldr	r2, [pc, #156]	; (8000914 <SystemClock_Config+0xcc>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	; 0x40
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <SystemClock_Config+0xcc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <SystemClock_Config+0xd0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000894:	4a20      	ldr	r2, [pc, #128]	; (8000918 <SystemClock_Config+0xd0>)
 8000896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b0:	2310      	movs	r3, #16
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b4:	2302      	movs	r3, #2
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008bc:	2308      	movs	r3, #8
 80008be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80008c0:	2354      	movs	r3, #84	; 0x54
 80008c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fd49 	bl	8004368 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008dc:	f000 fcf1 	bl	80012c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2302      	movs	r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2102      	movs	r1, #2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 ffab 	bl	8004858 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000908:	f000 fcdb 	bl	80012c2 <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3750      	adds	r7, #80	; 0x50
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <MX_ADC1_Init+0xb8>)
 8000930:	4a29      	ldr	r2, [pc, #164]	; (80009d8 <MX_ADC1_Init+0xbc>)
 8000932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000934:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <MX_ADC1_Init+0xb8>)
 8000936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800093a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <MX_ADC1_Init+0xb8>)
 800093e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000942:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000944:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <MX_ADC1_Init+0xb8>)
 8000946:	2201      	movs	r2, #1
 8000948:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_ADC1_Init+0xb8>)
 800094c:	2201      	movs	r2, #1
 800094e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <MX_ADC1_Init+0xb8>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_ADC1_Init+0xb8>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_ADC1_Init+0xb8>)
 8000960:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_ADC1_Init+0xb8>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_ADC1_Init+0xb8>)
 800096c:	2202      	movs	r2, #2
 800096e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_ADC1_Init+0xb8>)
 8000972:	2201      	movs	r2, #1
 8000974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_ADC1_Init+0xb8>)
 800097a:	2201      	movs	r2, #1
 800097c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097e:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_ADC1_Init+0xb8>)
 8000980:	f001 fb1c 	bl	8001fbc <HAL_ADC_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800098a:	f000 fc9a 	bl	80012c2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_ADC1_Init+0xb8>)
 80009a0:	f001 fc5e 	bl	8002260 <HAL_ADC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009aa:	f000 fc8a 	bl	80012c2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_ADC1_Init+0xb8>)
 80009bc:	f001 fc50 	bl	8002260 <HAL_ADC_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009c6:	f000 fc7c 	bl	80012c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000548 	.word	0x20000548
 80009d8:	40012000 	.word	0x40012000
 80009dc:	0f000001 	.word	0x0f000001

080009e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009e6:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <MX_I2C1_Init+0x54>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009ec:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x58>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a1e:	f002 fcb3 	bl	8003388 <HAL_I2C_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a28:	f000 fc4b 	bl	80012c2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200005f0 	.word	0x200005f0
 8000a34:	40005400 	.word	0x40005400
 8000a38:	000186a0 	.word	0x000186a0

08000a3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a6c:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000a6e:	4a3f      	ldr	r2, [pc, #252]	; (8000b6c <MX_TIM3_Init+0x130>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640;
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000a74:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000a78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000a80:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000a82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b37      	ldr	r3, [pc, #220]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a8e:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a94:	4834      	ldr	r0, [pc, #208]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000a96:	f004 f8f1 	bl	8004c7c <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000aa0:	f000 fc0f 	bl	80012c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	482d      	ldr	r0, [pc, #180]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000ab2:	f005 f88d 	bl	8005bd0 <HAL_TIM_ConfigClockSource>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000abc:	f000 fc01 	bl	80012c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ac0:	4829      	ldr	r0, [pc, #164]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000ac2:	f004 f98d 	bl	8004de0 <HAL_TIM_PWM_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000acc:	f000 fbf9 	bl	80012c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4619      	mov	r1, r3
 8000ade:	4822      	ldr	r0, [pc, #136]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000ae0:	f005 fd3c 	bl	800655c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000aea:	f000 fbea 	bl	80012c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000aee:	2370      	movs	r3, #112	; 0x70
 8000af0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 8000af2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000af6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	4619      	mov	r1, r3
 8000b06:	4818      	ldr	r0, [pc, #96]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000b08:	f004 ffa0 	bl	8005a4c <HAL_TIM_PWM_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b12:	f000 fbd6 	bl	80012c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2204      	movs	r2, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4812      	ldr	r0, [pc, #72]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000b1e:	f004 ff95 	bl	8005a4c <HAL_TIM_PWM_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000b28:	f000 fbcb 	bl	80012c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2208      	movs	r2, #8
 8000b30:	4619      	mov	r1, r3
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000b34:	f004 ff8a 	bl	8005a4c <HAL_TIM_PWM_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000b3e:	f000 fbc0 	bl	80012c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	220c      	movs	r2, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000b4a:	f004 ff7f 	bl	8005a4c <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8000b54:	f000 fbb5 	bl	80012c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <MX_TIM3_Init+0x12c>)
 8000b5a:	f000 fff1 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 8000b5e:	bf00      	nop
 8000b60:	3738      	adds	r7, #56	; 0x38
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000644 	.word	0x20000644
 8000b6c:	40000400 	.word	0x40000400

08000b70 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b76:	463b      	mov	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000b82:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_TIM10_Init+0x88>)
 8000b84:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <MX_TIM10_Init+0x8c>)
 8000b86:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 194;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_TIM10_Init+0x88>)
 8000b8a:	22c2      	movs	r2, #194	; 0xc2
 8000b8c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_TIM10_Init+0x88>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_TIM10_Init+0x88>)
 8000b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_TIM10_Init+0x88>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_TIM10_Init+0x88>)
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_TIM10_Init+0x88>)
 8000baa:	f004 f867 	bl	8004c7c <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8000bb4:	f000 fb85 	bl	80012c2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8000bb8:	480f      	ldr	r0, [pc, #60]	; (8000bf8 <MX_TIM10_Init+0x88>)
 8000bba:	f004 fc2f 	bl	800541c <HAL_TIM_IC_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f000 fb7d 	bl	80012c2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000bc8:	230a      	movs	r3, #10
 8000bca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_TIM10_Init+0x88>)
 8000be0:	f004 fe98 	bl	8005914 <HAL_TIM_IC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8000bea:	f000 fb6a 	bl	80012c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000068c 	.word	0x2000068c
 8000bfc:	40014400 	.word	0x40014400

08000c00 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_TIM11_Init+0x94>)
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <MX_TIM11_Init+0x98>)
 8000c1c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 31;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_TIM11_Init+0x94>)
 8000c20:	221f      	movs	r2, #31
 8000c22:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_TIM11_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_TIM11_Init+0x94>)
 8000c2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c30:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_TIM11_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_TIM11_Init+0x94>)
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c3e:	4815      	ldr	r0, [pc, #84]	; (8000c94 <MX_TIM11_Init+0x94>)
 8000c40:	f004 f81c 	bl	8004c7c <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000c4a:	f000 fb3a 	bl	80012c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000c4e:	4811      	ldr	r0, [pc, #68]	; (8000c94 <MX_TIM11_Init+0x94>)
 8000c50:	f004 f8c6 	bl	8004de0 <HAL_TIM_PWM_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000c5a:	f000 fb32 	bl	80012c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5e:	2360      	movs	r3, #96	; 0x60
 8000c60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8000c62:	2314      	movs	r3, #20
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <MX_TIM11_Init+0x94>)
 8000c76:	f004 fee9 	bl	8005a4c <HAL_TIM_PWM_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000c80:	f000 fb1f 	bl	80012c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <MX_TIM11_Init+0x94>)
 8000c86:	f000 ff5b 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200006d4 	.word	0x200006d4
 8000c98:	40014800 	.word	0x40014800

08000c9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_USART1_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000ca8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cd4:	f005 fcc4 	bl	8006660 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cde:	f000 faf0 	bl	80012c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <MX_USART1_UART_Init+0x5c>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <MX_USART1_UART_Init+0x5c>)
 8000ce8:	f043 0320 	orr.w	r3, r3, #32
 8000cec:	60d3      	str	r3, [r2, #12]
  /* USER CODE END USART1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000071c 	.word	0x2000071c
 8000cf8:	40011000 	.word	0x40011000

08000cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_DMA_Init+0x30>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <MX_DMA_Init+0x30>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_DMA_Init+0x30>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b57      	ldr	r3, [pc, #348]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a56      	ldr	r2, [pc, #344]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b50      	ldr	r3, [pc, #320]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b46      	ldr	r3, [pc, #280]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a41      	ldr	r2, [pc, #260]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a3a      	ldr	r2, [pc, #232]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <MX_GPIO_Init+0x178>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 411c 	mov.w	r1, #39936	; 0x9c00
 8000dd8:	4834      	ldr	r0, [pc, #208]	; (8000eac <MX_GPIO_Init+0x17c>)
 8000dda:	f002 faa3 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2101      	movs	r1, #1
 8000de2:	4833      	ldr	r0, [pc, #204]	; (8000eb0 <MX_GPIO_Init+0x180>)
 8000de4:	f002 fa9e 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dee:	4831      	ldr	r0, [pc, #196]	; (8000eb4 <MX_GPIO_Init+0x184>)
 8000df0:	f002 fa98 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2104      	movs	r1, #4
 8000df8:	482f      	ldr	r0, [pc, #188]	; (8000eb8 <MX_GPIO_Init+0x188>)
 8000dfa:	f002 fa93 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC15 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000dfe:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4825      	ldr	r0, [pc, #148]	; (8000eac <MX_GPIO_Init+0x17c>)
 8000e18:	f002 f81c 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <MX_GPIO_Init+0x180>)
 8000e34:	f002 f80e 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e38:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <MX_GPIO_Init+0x184>)
 8000e50:	f002 f800 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <MX_GPIO_Init+0x184>)
 8000e6e:	f001 fff1 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e72:	2304      	movs	r3, #4
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <MX_GPIO_Init+0x188>)
 8000e8a:	f001 ffe3 	bl	8002e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	2028      	movs	r0, #40	; 0x28
 8000e94:	f001 fd3c 	bl	8002910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e98:	2028      	movs	r0, #40	; 0x28
 8000e9a:	f001 fd55 	bl	8002948 <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	40021c00 	.word	0x40021c00
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	if(htim == &htim10 )
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d106      	bne.n	8000eda <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		xQueueSendToBackFromISR(buffer.xQueue1_ultrs, (void*)(&(TIM10->CCR1)) ,NULL);
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4905      	ldr	r1, [pc, #20]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x30>)
 8000ed6:	f006 ff43 	bl	8007d60 <xQueueGenericSendFromISR>
	}
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000068c 	.word	0x2000068c
 8000ee8:	2000077c 	.word	0x2000077c
 8000eec:	40014434 	.word	0x40014434

08000ef0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d103      	bne.n	8000f08 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
	{
		HAL_TIM_PWM_Stop_IT(&htim11, TIM_CHANNEL_1);
 8000f00:	2100      	movs	r1, #0
 8000f02:	4803      	ldr	r0, [pc, #12]	; (8000f10 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f04:	f004 f9d8 	bl	80052b8 <HAL_TIM_PWM_Stop_IT>
	}
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200006d4 	.word	0x200006d4

08000f14 <vCallbackFunctionTimer1>:

void vCallbackFunctionTimer1( TimerHandle_t xTimer )
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_IT(&htim11, TIM_CHANNEL_1);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <vCallbackFunctionTimer1+0x18>)
 8000f20:	f004 f8cc 	bl	80050bc <HAL_TIM_PWM_Start_IT>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200006d4 	.word	0x200006d4

08000f30 <vApplicationIdleHook>:

void vApplicationIdleHook(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8000f34:	bf00      	nop
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <HAL_GPIO_EXTI_Callback>:

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af04      	add	r7, sp, #16
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) // Freefall/Motion interrupt
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f50:	d10d      	bne.n	8000f6e <HAL_GPIO_EXTI_Callback+0x2e>
	{
		uint8_t result;
		HAL_I2C_Mem_Read(&hi2c1, (0x1D<<1), FF_MT_SRC, 1, &result, sizeof(uint8_t), 100);
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f107 030f 	add.w	r3, r7, #15
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	2216      	movs	r2, #22
 8000f64:	213a      	movs	r1, #58	; 0x3a
 8000f66:	4808      	ldr	r0, [pc, #32]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f68:	f002 fc7c 	bl	8003864 <HAL_I2C_Mem_Read>
		__asm__ volatile("NOP");
 8000f6c:	bf00      	nop
	}
	if(GPIO_Pin == GPIO_PIN_14) //Data ready
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f74:	d104      	bne.n	8000f80 <HAL_GPIO_EXTI_Callback+0x40>
	{
		mma8452x_ReadData(&hi2c1, MMA8452X_I2C_ADDRESS, buffer.accelerm_data);
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f78:	213a      	movs	r1, #58	; 0x3a
 8000f7a:	4803      	ldr	r0, [pc, #12]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f7c:	f000 fc1f 	bl	80017be <mma8452x_ReadData>
	}
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200005f0 	.word	0x200005f0
 8000f8c:	2000078b 	.word	0x2000078b

08000f90 <ultrasonic_dis>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ultrasonic_dis */
void ultrasonic_dis(void const * argument)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <ultrasonic_dis+0x80>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	491c      	ldr	r1, [pc, #112]	; (8001014 <ultrasonic_dis+0x84>)
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 ff78 	bl	8007e98 <xQueueReceive>
	  uint16_t temp1 = buffer.distance_ultrs;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <ultrasonic_dis+0x80>)
 8000faa:	889b      	ldrh	r3, [r3, #4]
 8000fac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <ultrasonic_dis+0x80>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb6:	4917      	ldr	r1, [pc, #92]	; (8001014 <ultrasonic_dis+0x84>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 ff6d 	bl	8007e98 <xQueueReceive>
	  uint16_t temp2 = buffer.distance_ultrs;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <ultrasonic_dis+0x80>)
 8000fc0:	889b      	ldrh	r3, [r3, #4]
 8000fc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  uint16_t temp3 = temp2 - temp1;
 8000fc4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000fc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	857b      	strh	r3, [r7, #42]	; 0x2a
	  char string_buff[30] = {0};
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	831a      	strh	r2, [r3, #24]
      sprintf(string_buff, "%d \r\n", temp3);
 8000fe4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	490b      	ldr	r1, [pc, #44]	; (8001018 <ultrasonic_dis+0x88>)
 8000fec:	4618      	mov	r0, r3
 8000fee:	f009 f8d5 	bl	800a19c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 8000ff2:	f107 010c 	add.w	r1, r7, #12
 8000ff6:	2364      	movs	r3, #100	; 0x64
 8000ff8:	221e      	movs	r2, #30
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <ultrasonic_dis+0x8c>)
 8000ffc:	f005 fb7d 	bl	80066fa <HAL_UART_Transmit>
	  xQueueReset(buffer.xQueue1_ultrs);
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <ultrasonic_dis+0x80>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f006 fc72 	bl	80078f0 <xQueueGenericReset>
	  __asm__ volatile("NOP");
 800100c:	bf00      	nop
  {
 800100e:	e7c3      	b.n	8000f98 <ultrasonic_dis+0x8>
 8001010:	2000077c 	.word	0x2000077c
 8001014:	20000780 	.word	0x20000780
 8001018:	0800abb0 	.word	0x0800abb0
 800101c:	2000071c 	.word	0x2000071c

08001020 <line_tracking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_line_tracking */
void line_tracking(void const * argument)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN line_tracking */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f006 fb98 	bl	800775e <osDelay>
 800102e:	e7fb      	b.n	8001028 <line_tracking+0x8>

08001030 <limit_switch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_limit_switch */
void limit_switch(void const * argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN limit_switch */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f006 fb90 	bl	800775e <osDelay>
 800103e:	e7fb      	b.n	8001038 <limit_switch+0x8>

08001040 <infrared_motion>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infrared_motion */
void infrared_motion(void const * argument)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN infrared_motion */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f006 fb88 	bl	800775e <osDelay>
 800104e:	e7fb      	b.n	8001048 <infrared_motion+0x8>

08001050 <accelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_accelerometer */
void accelerometer(void const * argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af02      	add	r7, sp, #8
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accelerometer */
	  HAL_StatusTypeDef result;
	  HAL_StatusTypeDef result2;
	  HAL_I2C_Init(&hi2c1);
 8001058:	481c      	ldr	r0, [pc, #112]	; (80010cc <accelerometer+0x7c>)
 800105a:	f002 f995 	bl	8003388 <HAL_I2C_Init>
	  mma8452x_Standby(&hi2c1, MMA8452X_I2C_ADDRESS);
 800105e:	213a      	movs	r1, #58	; 0x3a
 8001060:	481a      	ldr	r0, [pc, #104]	; (80010cc <accelerometer+0x7c>)
 8001062:	f000 f933 	bl	80012cc <mma8452x_Standby>
	  mma8452x_DataFormat(&hi2c1, MMA8452X_I2C_ADDRESS, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	213a      	movs	r1, #58	; 0x3a
 800106a:	4818      	ldr	r0, [pc, #96]	; (80010cc <accelerometer+0x7c>)
 800106c:	f000 f984 	bl	8001378 <mma8452x_DataFormat>
	  mma8452x_DataRateSelection(&hi2c1, MMA8452X_I2C_ADDRESS, 4); //Output Data Rate (ODR) 50Hz
 8001070:	2204      	movs	r2, #4
 8001072:	213a      	movs	r1, #58	; 0x3a
 8001074:	4815      	ldr	r0, [pc, #84]	; (80010cc <accelerometer+0x7c>)
 8001076:	f000 f9bf 	bl	80013f8 <mma8452x_DataRateSelection>
	  mma8452x_InterruptPolarityConfig(&hi2c1, MMA8452X_I2C_ADDRESS, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	213a      	movs	r1, #58	; 0x3a
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <accelerometer+0x7c>)
 8001080:	f000 fa07 	bl	8001492 <mma8452x_InterruptPolarityConfig>
	  mma8452x_InterruptEnable(&hi2c1, MMA8452X_I2C_ADDRESS, EN_FF_MT, CFG_FF_MT);
 8001084:	2302      	movs	r3, #2
 8001086:	2202      	movs	r2, #2
 8001088:	213a      	movs	r1, #58	; 0x3a
 800108a:	4810      	ldr	r0, [pc, #64]	; (80010cc <accelerometer+0x7c>)
 800108c:	f000 fa42 	bl	8001514 <mma8452x_InterruptEnable>
	  mma8452x_InterruptEnable(&hi2c1, MMA8452X_I2C_ADDRESS, EN_DRDY, CFG_DEFAULT);
 8001090:	2300      	movs	r3, #0
 8001092:	2201      	movs	r2, #1
 8001094:	213a      	movs	r1, #58	; 0x3a
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <accelerometer+0x7c>)
 8001098:	f000 fa3c 	bl	8001514 <mma8452x_InterruptEnable>
	  mma8452x_MotionDetectionConfig(&hi2c1, MMA8452X_I2C_ADDRESS, 0xF8, 0, 20, 2);
 800109c:	2302      	movs	r3, #2
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	2314      	movs	r3, #20
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	22f8      	movs	r2, #248	; 0xf8
 80010a8:	213a      	movs	r1, #58	; 0x3a
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <accelerometer+0x7c>)
 80010ac:	f000 faf6 	bl	800169c <mma8452x_MotionDetectionConfig>
	  mma8452x_Active(&hi2c1, MMA8452X_I2C_ADDRESS);
 80010b0:	213a      	movs	r1, #58	; 0x3a
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <accelerometer+0x7c>)
 80010b4:	f000 f935 	bl	8001322 <mma8452x_Active>
	  taskYIELD();
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <accelerometer+0x80>)
 80010ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	f3bf 8f4f 	dsb	sy
 80010c4:	f3bf 8f6f 	isb	sy
  /* Infinite loop */
  for(;;)
 80010c8:	e7fe      	b.n	80010c8 <accelerometer+0x78>
 80010ca:	bf00      	nop
 80010cc:	200005f0 	.word	0x200005f0
 80010d0:	e000ed04 	.word	0xe000ed04

080010d4 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void const * argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
  /* Infinite loop */
  for(;;)
  {

	  switch (buffer.instruction_for_motors) {
 80010dc:	4b5b      	ldr	r3, [pc, #364]	; (800124c <motors+0x178>)
 80010de:	7b1b      	ldrb	r3, [r3, #12]
 80010e0:	3b44      	subs	r3, #68	; 0x44
 80010e2:	2b31      	cmp	r3, #49	; 0x31
 80010e4:	f200 80b0 	bhi.w	8001248 <motors+0x174>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <motors+0x1c>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	080011dd 	.word	0x080011dd
 80010f4:	08001249 	.word	0x08001249
 80010f8:	08001249 	.word	0x08001249
 80010fc:	08001249 	.word	0x08001249
 8001100:	08001249 	.word	0x08001249
 8001104:	08001249 	.word	0x08001249
 8001108:	08001249 	.word	0x08001249
 800110c:	08001249 	.word	0x08001249
 8001110:	08001225 	.word	0x08001225
 8001114:	08001249 	.word	0x08001249
 8001118:	08001249 	.word	0x08001249
 800111c:	08001249 	.word	0x08001249
 8001120:	08001249 	.word	0x08001249
 8001124:	08001249 	.word	0x08001249
 8001128:	08001201 	.word	0x08001201
 800112c:	08001249 	.word	0x08001249
 8001130:	08001249 	.word	0x08001249
 8001134:	080011b9 	.word	0x080011b9
 8001138:	08001249 	.word	0x08001249
 800113c:	08001249 	.word	0x08001249
 8001140:	08001249 	.word	0x08001249
 8001144:	08001249 	.word	0x08001249
 8001148:	08001249 	.word	0x08001249
 800114c:	08001249 	.word	0x08001249
 8001150:	08001249 	.word	0x08001249
 8001154:	08001249 	.word	0x08001249
 8001158:	08001249 	.word	0x08001249
 800115c:	08001249 	.word	0x08001249
 8001160:	08001249 	.word	0x08001249
 8001164:	08001249 	.word	0x08001249
 8001168:	08001249 	.word	0x08001249
 800116c:	08001249 	.word	0x08001249
 8001170:	080011ef 	.word	0x080011ef
 8001174:	08001249 	.word	0x08001249
 8001178:	08001249 	.word	0x08001249
 800117c:	08001249 	.word	0x08001249
 8001180:	08001249 	.word	0x08001249
 8001184:	08001249 	.word	0x08001249
 8001188:	08001249 	.word	0x08001249
 800118c:	08001249 	.word	0x08001249
 8001190:	08001237 	.word	0x08001237
 8001194:	08001249 	.word	0x08001249
 8001198:	08001249 	.word	0x08001249
 800119c:	08001249 	.word	0x08001249
 80011a0:	08001249 	.word	0x08001249
 80011a4:	08001249 	.word	0x08001249
 80011a8:	08001213 	.word	0x08001213
 80011ac:	08001249 	.word	0x08001249
 80011b0:	08001249 	.word	0x08001249
 80011b4:	080011cb 	.word	0x080011cb
	         case 'U':
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011b8:	2104      	movs	r1, #4
 80011ba:	4825      	ldr	r0, [pc, #148]	; (8001250 <motors+0x17c>)
 80011bc:	f003 fe6a 	bl	8004e94 <HAL_TIM_PWM_Start>
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80011c0:	210c      	movs	r1, #12
 80011c2:	4823      	ldr	r0, [pc, #140]	; (8001250 <motors+0x17c>)
 80011c4:	f003 fe66 	bl	8004e94 <HAL_TIM_PWM_Start>
	             break;
 80011c8:	e03f      	b.n	800124a <motors+0x176>
	         case 'u':
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80011ca:	2104      	movs	r1, #4
 80011cc:	4820      	ldr	r0, [pc, #128]	; (8001250 <motors+0x17c>)
 80011ce:	f003 ff11 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80011d2:	210c      	movs	r1, #12
 80011d4:	481e      	ldr	r0, [pc, #120]	; (8001250 <motors+0x17c>)
 80011d6:	f003 ff0d 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	             break;
 80011da:	e036      	b.n	800124a <motors+0x176>
	         case 'D':
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011dc:	2100      	movs	r1, #0
 80011de:	481c      	ldr	r0, [pc, #112]	; (8001250 <motors+0x17c>)
 80011e0:	f003 fe58 	bl	8004e94 <HAL_TIM_PWM_Start>
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011e4:	2108      	movs	r1, #8
 80011e6:	481a      	ldr	r0, [pc, #104]	; (8001250 <motors+0x17c>)
 80011e8:	f003 fe54 	bl	8004e94 <HAL_TIM_PWM_Start>
	             break;
 80011ec:	e02d      	b.n	800124a <motors+0x176>
	         case 'd':
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80011ee:	2100      	movs	r1, #0
 80011f0:	4817      	ldr	r0, [pc, #92]	; (8001250 <motors+0x17c>)
 80011f2:	f003 feff 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80011f6:	2108      	movs	r1, #8
 80011f8:	4815      	ldr	r0, [pc, #84]	; (8001250 <motors+0x17c>)
 80011fa:	f003 fefb 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	             break;
 80011fe:	e024      	b.n	800124a <motors+0x176>
	         case 'R':
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001200:	2104      	movs	r1, #4
 8001202:	4813      	ldr	r0, [pc, #76]	; (8001250 <motors+0x17c>)
 8001204:	f003 fe46 	bl	8004e94 <HAL_TIM_PWM_Start>
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001208:	2108      	movs	r1, #8
 800120a:	4811      	ldr	r0, [pc, #68]	; (8001250 <motors+0x17c>)
 800120c:	f003 fe42 	bl	8004e94 <HAL_TIM_PWM_Start>
	             break;
 8001210:	e01b      	b.n	800124a <motors+0x176>
	         case 'r':
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001212:	2104      	movs	r1, #4
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <motors+0x17c>)
 8001216:	f003 feed 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800121a:	2108      	movs	r1, #8
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <motors+0x17c>)
 800121e:	f003 fee9 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	             break;
 8001222:	e012      	b.n	800124a <motors+0x176>
	         case 'L':
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001224:	2100      	movs	r1, #0
 8001226:	480a      	ldr	r0, [pc, #40]	; (8001250 <motors+0x17c>)
 8001228:	f003 fe34 	bl	8004e94 <HAL_TIM_PWM_Start>
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800122c:	210c      	movs	r1, #12
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <motors+0x17c>)
 8001230:	f003 fe30 	bl	8004e94 <HAL_TIM_PWM_Start>
	             break;
 8001234:	e009      	b.n	800124a <motors+0x176>
	         case 'l':
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001236:	2100      	movs	r1, #0
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <motors+0x17c>)
 800123a:	f003 fedb 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800123e:	210c      	movs	r1, #12
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <motors+0x17c>)
 8001242:	f003 fed7 	bl	8004ff4 <HAL_TIM_PWM_Stop>
	             break;
 8001246:	e000      	b.n	800124a <motors+0x176>
	         default:
	        	 __asm__ volatile("NOP");
 8001248:	bf00      	nop
	  switch (buffer.instruction_for_motors) {
 800124a:	e747      	b.n	80010dc <motors+0x8>
 800124c:	2000077c 	.word	0x2000077c
 8001250:	20000644 	.word	0x20000644

08001254 <encoders>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoders */
void encoders(void const * argument)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoders */
  /* Infinite loop */
  for(;;)
  {
	  char string_buff[20] = {0};
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
      sprintf(string_buff, "         %d 		%d\r\n", buffer.encod_data[0], buffer.encod_data[1]);
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <encoders+0x44>)
 8001270:	7b5b      	ldrb	r3, [r3, #13]
 8001272:	461a      	mov	r2, r3
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <encoders+0x44>)
 8001276:	7b9b      	ldrb	r3, [r3, #14]
 8001278:	f107 000c 	add.w	r0, r7, #12
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <encoders+0x48>)
 800127e:	f008 ff8d 	bl	800a19c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 8001282:	f107 010c 	add.w	r1, r7, #12
 8001286:	2364      	movs	r3, #100	; 0x64
 8001288:	2214      	movs	r2, #20
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <encoders+0x4c>)
 800128c:	f005 fa35 	bl	80066fa <HAL_UART_Transmit>
	  vTaskDelay(100);
 8001290:	2064      	movs	r0, #100	; 0x64
 8001292:	f007 f9e3 	bl	800865c <vTaskDelay>
  {
 8001296:	e7e1      	b.n	800125c <encoders+0x8>
 8001298:	2000077c 	.word	0x2000077c
 800129c:	0800abb8 	.word	0x0800abb8
 80012a0:	2000071c 	.word	0x2000071c

080012a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b4:	d101      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b6:	f000 fe61 	bl	8001f7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c6:	b672      	cpsid	i
}
 80012c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ca:	e7fe      	b.n	80012ca <Error_Handler+0x8>

080012cc <mma8452x_Standby>:
 *                the configuration information for the specified I2C.
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 */
void mma8452x_Standby(I2C_HandleTypeDef * hi2c, uint16_t DevAddress)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
	uint8_t register_value = 0x0;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80012dc:	8879      	ldrh	r1, [r7, #2]
 80012de:	2364      	movs	r3, #100	; 0x64
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2301      	movs	r3, #1
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	f107 030f 	add.w	r3, r7, #15
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	222a      	movs	r2, #42	; 0x2a
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f002 fab7 	bl	8003864 <HAL_I2C_Mem_Read>
	register_value &= ~CTRL_REG1_ACTIVE;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001300:	8879      	ldrh	r1, [r7, #2]
 8001302:	2364      	movs	r3, #100	; 0x64
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	2301      	movs	r3, #1
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	f107 030f 	add.w	r3, r7, #15
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	222a      	movs	r2, #42	; 0x2a
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f002 f9ab 	bl	8003670 <HAL_I2C_Mem_Write>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <mma8452x_Active>:
 *                the configuration information for the specified I2C.
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 */
void mma8452x_Active(I2C_HandleTypeDef * hi2c, uint16_t DevAddress)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b088      	sub	sp, #32
 8001326:	af04      	add	r7, sp, #16
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	807b      	strh	r3, [r7, #2]
	uint8_t register_value = 0x0;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001332:	8879      	ldrh	r1, [r7, #2]
 8001334:	2364      	movs	r3, #100	; 0x64
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f107 030f 	add.w	r3, r7, #15
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	222a      	movs	r2, #42	; 0x2a
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f002 fa8c 	bl	8003864 <HAL_I2C_Mem_Read>
	register_value |= CTRL_REG1_ACTIVE;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001356:	8879      	ldrh	r1, [r7, #2]
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	f107 030f 	add.w	r3, r7, #15
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	222a      	movs	r2, #42	; 0x2a
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f002 f980 	bl	8003670 <HAL_I2C_Mem_Write>
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <mma8452x_DataFormat>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  d_format If d_format is 1 then Data format limited to single Byte.
 * 		   If d_format is 0 then Data format limited to 12 Bits.
 */
void mma8452x_DataFormat(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t d_format)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af04      	add	r7, sp, #16
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff9d 	bl	80012cc <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001396:	8879      	ldrh	r1, [r7, #2]
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2301      	movs	r3, #1
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	f107 030f 	add.w	r3, r7, #15
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	222a      	movs	r2, #42	; 0x2a
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f002 fa5a 	bl	8003864 <HAL_I2C_Mem_Read>
	if(d_format == 1)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d105      	bne.n	80013c2 <mma8452x_DataFormat+0x4a>
	{
		register_value |= CTRL_REG1_F_READ;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e004      	b.n	80013cc <mma8452x_DataFormat+0x54>
	}
	else
	{
		register_value &= ~CTRL_REG1_F_READ;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	f023 0302 	bic.w	r3, r3, #2
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80013cc:	8879      	ldrh	r1, [r7, #2]
 80013ce:	2364      	movs	r3, #100	; 0x64
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	f107 030f 	add.w	r3, r7, #15
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	222a      	movs	r2, #42	; 0x2a
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f002 f945 	bl	8003670 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ff99 	bl	8001322 <mma8452x_Active>
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <mma8452x_DataRateSelection>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  d_rate Value from 0 to 7 for selection output data rate for acceleration samples.
 * 		   The default value is 000 for a data rate of 800 Hz.
 */
void mma8452x_DataRateSelection(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t d_rate)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af04      	add	r7, sp, #16
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	4619      	mov	r1, r3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff5d 	bl	80012cc <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001416:	8879      	ldrh	r1, [r7, #2]
 8001418:	2364      	movs	r3, #100	; 0x64
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2301      	movs	r3, #1
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	f107 030f 	add.w	r3, r7, #15
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	222a      	movs	r2, #42	; 0x2a
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f002 fa1a 	bl	8003864 <HAL_I2C_Mem_Read>
	register_value &= ~((7<<3));
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001436:	b2db      	uxtb	r3, r3
 8001438:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800143a:	8879      	ldrh	r1, [r7, #2]
 800143c:	2364      	movs	r3, #100	; 0x64
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	2301      	movs	r3, #1
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	f107 030f 	add.w	r3, r7, #15
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	222a      	movs	r2, #42	; 0x2a
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f002 f90e 	bl	8003670 <HAL_I2C_Mem_Write>
	register_value |= (d_rate<<3);
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	b25a      	sxtb	r2, r3
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	b25b      	sxtb	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b25b      	sxtb	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001466:	8879      	ldrh	r1, [r7, #2]
 8001468:	2364      	movs	r3, #100	; 0x64
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	2301      	movs	r3, #1
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	f107 030f 	add.w	r3, r7, #15
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	222a      	movs	r2, #42	; 0x2a
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f002 f8f8 	bl	8003670 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff4c 	bl	8001322 <mma8452x_Active>
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <mma8452x_InterruptPolarityConfig>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  ipol Interrupt polarity ACTIVE high, or ACTIVE low. Default value: 0.
 *         0: ACTIVE low; 1: ACTIVE high
 */
void mma8452x_InterruptPolarityConfig(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t ipol)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b088      	sub	sp, #32
 8001496:	af04      	add	r7, sp, #16
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
 800149e:	4613      	mov	r3, r2
 80014a0:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	4619      	mov	r1, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ff10 	bl	80012cc <mma8452x_Standby>
	uint8_t register_value = 0x0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG3, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80014b0:	8879      	ldrh	r1, [r7, #2]
 80014b2:	2364      	movs	r3, #100	; 0x64
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	2301      	movs	r3, #1
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	f107 030f 	add.w	r3, r7, #15
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	222c      	movs	r2, #44	; 0x2c
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f002 f9cd 	bl	8003864 <HAL_I2C_Mem_Read>
	if(ipol == 1)
 80014ca:	787b      	ldrb	r3, [r7, #1]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <mma8452x_InterruptPolarityConfig+0x4a>
	{
		register_value |= CTRL_REG3_IPOL;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	e004      	b.n	80014e6 <mma8452x_InterruptPolarityConfig+0x54>
	}
	else
	{
		register_value &= ~CTRL_REG3_IPOL;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	f023 0302 	bic.w	r3, r3, #2
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG3, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80014e6:	8879      	ldrh	r1, [r7, #2]
 80014e8:	2364      	movs	r3, #100	; 0x64
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	2301      	movs	r3, #1
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	f107 030f 	add.w	r3, r7, #15
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2301      	movs	r3, #1
 80014f8:	222c      	movs	r2, #44	; 0x2c
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f002 f8b8 	bl	8003670 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4619      	mov	r1, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff0c 	bl	8001322 <mma8452x_Active>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <mma8452x_InterruptEnable>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  int_en The corresponding interrupt
 * @param  int_cfg The corresponding interrupt pin
 */
void mma8452x_InterruptEnable(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t int_en, uint8_t int_cfg)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af04      	add	r7, sp, #16
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	4608      	mov	r0, r1
 800151e:	4611      	mov	r1, r2
 8001520:	461a      	mov	r2, r3
 8001522:	4603      	mov	r3, r0
 8001524:	807b      	strh	r3, [r7, #2]
 8001526:	460b      	mov	r3, r1
 8001528:	707b      	strb	r3, [r7, #1]
 800152a:	4613      	mov	r3, r2
 800152c:	703b      	strb	r3, [r7, #0]
	mma8452x_Standby(hi2c, DevAddress);
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff feca 	bl	80012cc <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG4, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800153c:	8879      	ldrh	r1, [r7, #2]
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	2301      	movs	r3, #1
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	f107 030f 	add.w	r3, r7, #15
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	222d      	movs	r2, #45	; 0x2d
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f002 f987 	bl	8003864 <HAL_I2C_Mem_Read>
	switch (int_en)
 8001556:	787b      	ldrb	r3, [r7, #1]
 8001558:	3b01      	subs	r3, #1
 800155a:	2b05      	cmp	r3, #5
 800155c:	d832      	bhi.n	80015c4 <mma8452x_InterruptEnable+0xb0>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <mma8452x_InterruptEnable+0x50>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	080015b9 	.word	0x080015b9
 8001568:	080015ad 	.word	0x080015ad
 800156c:	080015a1 	.word	0x080015a1
 8001570:	08001595 	.word	0x08001595
 8001574:	08001589 	.word	0x08001589
 8001578:	0800157d 	.word	0x0800157d
	{
		 case EN_ASLP:
			 register_value |= CTRL_REG4_ASLP;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001582:	b2db      	uxtb	r3, r3
 8001584:	73fb      	strb	r3, [r7, #15]
			 break;
 8001586:	e01e      	b.n	80015c6 <mma8452x_InterruptEnable+0xb2>
		 case EN_TRANS:
			 register_value |= CTRL_REG4_TRANS;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	f043 0320 	orr.w	r3, r3, #32
 800158e:	b2db      	uxtb	r3, r3
 8001590:	73fb      	strb	r3, [r7, #15]
			 break;
 8001592:	e018      	b.n	80015c6 <mma8452x_InterruptEnable+0xb2>
		 case EN_LNDPRT:
			 register_value |= CTRL_REG4_LNDPRT;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f043 0310 	orr.w	r3, r3, #16
 800159a:	b2db      	uxtb	r3, r3
 800159c:	73fb      	strb	r3, [r7, #15]
			 break;
 800159e:	e012      	b.n	80015c6 <mma8452x_InterruptEnable+0xb2>
		 case EN_PULSE:
			 register_value |= CTRL_REG4_PULSE;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	73fb      	strb	r3, [r7, #15]
			 break;
 80015aa:	e00c      	b.n	80015c6 <mma8452x_InterruptEnable+0xb2>
		 case EN_FF_MT:
			 register_value |= CTRL_REG4_FF_MT;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	73fb      	strb	r3, [r7, #15]
			 break;
 80015b6:	e006      	b.n	80015c6 <mma8452x_InterruptEnable+0xb2>
		 case EN_DRDY:
			 register_value |= CTRL_REG4_DRDY;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	73fb      	strb	r3, [r7, #15]
			 break;
 80015c2:	e000      	b.n	80015c6 <mma8452x_InterruptEnable+0xb2>
		 default:
        	 __asm__ volatile("NOP");
 80015c4:	bf00      	nop
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG4, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80015c6:	8879      	ldrh	r1, [r7, #2]
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	2301      	movs	r3, #1
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	f107 030f 	add.w	r3, r7, #15
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2301      	movs	r3, #1
 80015d8:	222d      	movs	r2, #45	; 0x2d
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f002 f848 	bl	8003670 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG5, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80015e4:	8879      	ldrh	r1, [r7, #2]
 80015e6:	2364      	movs	r3, #100	; 0x64
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	f107 030f 	add.w	r3, r7, #15
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	222e      	movs	r2, #46	; 0x2e
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f002 f933 	bl	8003864 <HAL_I2C_Mem_Read>
	switch (int_cfg)
 80015fe:	783b      	ldrb	r3, [r7, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	2b05      	cmp	r3, #5
 8001604:	d832      	bhi.n	800166c <mma8452x_InterruptEnable+0x158>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <mma8452x_InterruptEnable+0xf8>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	08001661 	.word	0x08001661
 8001610:	08001655 	.word	0x08001655
 8001614:	08001649 	.word	0x08001649
 8001618:	0800163d 	.word	0x0800163d
 800161c:	08001631 	.word	0x08001631
 8001620:	08001625 	.word	0x08001625
	{
		 case CFG_ASLP:
			 register_value |= CTRL_REG5_ASLP;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800162a:	b2db      	uxtb	r3, r3
 800162c:	73fb      	strb	r3, [r7, #15]
			 break;
 800162e:	e01e      	b.n	800166e <mma8452x_InterruptEnable+0x15a>
		 case CFG_TRANS:
			 register_value |= CTRL_REG5_TRANS;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	f043 0320 	orr.w	r3, r3, #32
 8001636:	b2db      	uxtb	r3, r3
 8001638:	73fb      	strb	r3, [r7, #15]
			 break;
 800163a:	e018      	b.n	800166e <mma8452x_InterruptEnable+0x15a>
		 case CFG_LNDPRT:
			 register_value |= CTRL_REG5_LNDPRT;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	b2db      	uxtb	r3, r3
 8001644:	73fb      	strb	r3, [r7, #15]
			 break;
 8001646:	e012      	b.n	800166e <mma8452x_InterruptEnable+0x15a>
		 case CFG_PULSE:
			 register_value |= CTRL_REG5_PULSE;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	f043 0308 	orr.w	r3, r3, #8
 800164e:	b2db      	uxtb	r3, r3
 8001650:	73fb      	strb	r3, [r7, #15]
			 break;
 8001652:	e00c      	b.n	800166e <mma8452x_InterruptEnable+0x15a>
		 case CFG_FF_MT:
			 register_value |= CTRL_REG5_FF_MT;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	b2db      	uxtb	r3, r3
 800165c:	73fb      	strb	r3, [r7, #15]
			 break;
 800165e:	e006      	b.n	800166e <mma8452x_InterruptEnable+0x15a>
		 case CFG_DRDY:
			 register_value |= CTRL_REG5_DRDY;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	73fb      	strb	r3, [r7, #15]
			 break;
 800166a:	e000      	b.n	800166e <mma8452x_InterruptEnable+0x15a>
		 default:
			 __asm__ volatile("NOP");
 800166c:	bf00      	nop
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG5, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800166e:	8879      	ldrh	r1, [r7, #2]
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	2301      	movs	r3, #1
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	f107 030f 	add.w	r3, r7, #15
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	222e      	movs	r2, #46	; 0x2e
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f001 fff4 	bl	8003670 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8001688:	887b      	ldrh	r3, [r7, #2]
 800168a:	4619      	mov	r1, r3
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fe48 	bl	8001322 <mma8452x_Active>
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop

0800169c <mma8452x_MotionDetectionConfig>:
									uint16_t DevAddress,
									uint8_t byte_cfg,
									uint8_t dbcntm,
									uint8_t threshold,
									uint8_t d_count)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	807b      	strh	r3, [r7, #2]
 80016ae:	460b      	mov	r3, r1
 80016b0:	707b      	strb	r3, [r7, #1]
 80016b2:	4613      	mov	r3, r2
 80016b4:	703b      	strb	r3, [r7, #0]
	mma8452x_Standby(hi2c, DevAddress);
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	4619      	mov	r1, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fe06 	bl	80012cc <mma8452x_Standby>
	uint8_t register_value = 0x0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_CFG, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80016c4:	8879      	ldrh	r1, [r7, #2]
 80016c6:	2364      	movs	r3, #100	; 0x64
 80016c8:	9302      	str	r3, [sp, #8]
 80016ca:	2301      	movs	r3, #1
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	f107 030f 	add.w	r3, r7, #15
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	2215      	movs	r2, #21
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f002 f8c3 	bl	8003864 <HAL_I2C_Mem_Read>
	register_value |= byte_cfg;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_CFG, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80016e8:	8879      	ldrh	r1, [r7, #2]
 80016ea:	2364      	movs	r3, #100	; 0x64
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	2301      	movs	r3, #1
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	f107 030f 	add.w	r3, r7, #15
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2301      	movs	r3, #1
 80016fa:	2215      	movs	r2, #21
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f001 ffb7 	bl	8003670 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_THS, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001706:	8879      	ldrh	r1, [r7, #2]
 8001708:	2364      	movs	r3, #100	; 0x64
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	2301      	movs	r3, #1
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	f107 030f 	add.w	r3, r7, #15
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	2217      	movs	r2, #23
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f002 f8a2 	bl	8003864 <HAL_I2C_Mem_Read>
	if(dbcntm == 1)
 8001720:	783b      	ldrb	r3, [r7, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d105      	bne.n	8001732 <mma8452x_MotionDetectionConfig+0x96>
	{
		register_value |= FF_MT_THS_DBCNTM;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800172c:	b2db      	uxtb	r3, r3
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e007      	b.n	8001742 <mma8452x_MotionDetectionConfig+0xa6>
	}
	else if(dbcntm == 0)
 8001732:	783b      	ldrb	r3, [r7, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d104      	bne.n	8001742 <mma8452x_MotionDetectionConfig+0xa6>
	{
		register_value &= ~FF_MT_THS_DBCNTM;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800173e:	b2db      	uxtb	r3, r3
 8001740:	73fb      	strb	r3, [r7, #15]
	}
	register_value &= ~127;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001748:	b2db      	uxtb	r3, r3
 800174a:	73fb      	strb	r3, [r7, #15]
	register_value |= threshold;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	7e3b      	ldrb	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_THS, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001756:	8879      	ldrh	r1, [r7, #2]
 8001758:	2364      	movs	r3, #100	; 0x64
 800175a:	9302      	str	r3, [sp, #8]
 800175c:	2301      	movs	r3, #1
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	f107 030f 	add.w	r3, r7, #15
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2301      	movs	r3, #1
 8001768:	2217      	movs	r2, #23
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f001 ff80 	bl	8003670 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_COUNT, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001774:	8879      	ldrh	r1, [r7, #2]
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	2301      	movs	r3, #1
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	f107 030f 	add.w	r3, r7, #15
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	2218      	movs	r2, #24
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f002 f86b 	bl	8003864 <HAL_I2C_Mem_Read>
	register_value = d_count;
 800178e:	7f3b      	ldrb	r3, [r7, #28]
 8001790:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_COUNT, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001792:	8879      	ldrh	r1, [r7, #2]
 8001794:	2364      	movs	r3, #100	; 0x64
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	2301      	movs	r3, #1
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	f107 030f 	add.w	r3, r7, #15
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2301      	movs	r3, #1
 80017a4:	2218      	movs	r2, #24
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f001 ff62 	bl	8003670 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	4619      	mov	r1, r3
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fdb6 	bl	8001322 <mma8452x_Active>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <mma8452x_ReadData>:
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 * @param  pData Pointer to data buffer
 */
void mma8452x_ReadData(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, int8_t* pData)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b08a      	sub	sp, #40	; 0x28
 80017c2:	af04      	add	r7, sp, #16
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	460b      	mov	r3, r1
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	817b      	strh	r3, [r7, #10]
	uint8_t register_value = 0x0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	757b      	strb	r3, [r7, #21]
	uint16_t size_of_data;
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80017d0:	8979      	ldrh	r1, [r7, #10]
 80017d2:	2364      	movs	r3, #100	; 0x64
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	2301      	movs	r3, #1
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	f107 0315 	add.w	r3, r7, #21
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2301      	movs	r3, #1
 80017e2:	222a      	movs	r2, #42	; 0x2a
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f002 f83d 	bl	8003864 <HAL_I2C_Mem_Read>
	if((register_value & CTRL_REG1_F_READ) == CTRL_REG1_F_READ)
 80017ea:	7d7b      	ldrb	r3, [r7, #21]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <mma8452x_ReadData+0x3c>
	{
		size_of_data = 3;
 80017f4:	2303      	movs	r3, #3
 80017f6:	82fb      	strh	r3, [r7, #22]
 80017f8:	e001      	b.n	80017fe <mma8452x_ReadData+0x40>
	}
	else
	{
		size_of_data = 6;
 80017fa:	2306      	movs	r3, #6
 80017fc:	82fb      	strh	r3, [r7, #22]
	}
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)OUT_X_MSB, 1, (uint8_t*)pData, size_of_data, 100);
 80017fe:	8979      	ldrh	r1, [r7, #10]
 8001800:	2364      	movs	r3, #100	; 0x64
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	8afb      	ldrh	r3, [r7, #22]
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	2201      	movs	r2, #1
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f002 f827 	bl	8003864 <HAL_I2C_Mem_Read>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_MspInit+0x54>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a11      	ldr	r2, [pc, #68]	; (8001874 <HAL_MspInit+0x54>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_MspInit+0x54>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_MspInit+0x54>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_MspInit+0x54>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_MspInit+0x54>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	210f      	movs	r1, #15
 8001862:	f06f 0001 	mvn.w	r0, #1
 8001866:	f001 f853 	bl	8002910 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2e      	ldr	r2, [pc, #184]	; (8001950 <HAL_ADC_MspInit+0xd8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d155      	bne.n	8001946 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_ADC_MspInit+0xdc>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a2c      	ldr	r2, [pc, #176]	; (8001954 <HAL_ADC_MspInit+0xdc>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_ADC_MspInit+0xdc>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_ADC_MspInit+0xdc>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a25      	ldr	r2, [pc, #148]	; (8001954 <HAL_ADC_MspInit+0xdc>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_ADC_MspInit+0xdc>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d2:	2303      	movs	r3, #3
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d6:	2303      	movs	r3, #3
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	481c      	ldr	r0, [pc, #112]	; (8001958 <HAL_ADC_MspInit+0xe0>)
 80018e6:	f001 fab5 	bl	8002e54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_ADC_MspInit+0xe4>)
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_ADC_MspInit+0xe8>)
 80018ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_ADC_MspInit+0xe4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_ADC_MspInit+0xe4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_ADC_MspInit+0xe4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_ADC_MspInit+0xe4>)
 8001904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001908:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_ADC_MspInit+0xe4>)
 800190c:	2200      	movs	r2, #0
 800190e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_ADC_MspInit+0xe4>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_ADC_MspInit+0xe4>)
 8001918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_ADC_MspInit+0xe4>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_ADC_MspInit+0xe4>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800192a:	480c      	ldr	r0, [pc, #48]	; (800195c <HAL_ADC_MspInit+0xe4>)
 800192c:	f001 f81a 	bl	8002964 <HAL_DMA_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001936:	f7ff fcc4 	bl	80012c2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_ADC_MspInit+0xe4>)
 800193e:	639a      	str	r2, [r3, #56]	; 0x38
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_ADC_MspInit+0xe4>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40012000 	.word	0x40012000
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000
 800195c:	20000590 	.word	0x20000590
 8001960:	40026410 	.word	0x40026410

08001964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_I2C_MspInit+0x84>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d12b      	bne.n	80019de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_I2C_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_I2C_MspInit+0x88>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_I2C_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019a2:	23c0      	movs	r3, #192	; 0xc0
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a6:	2312      	movs	r3, #18
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b2:	2304      	movs	r3, #4
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <HAL_I2C_MspInit+0x8c>)
 80019be:	f001 fa49 	bl	8002e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_I2C_MspInit+0x88>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_I2C_MspInit+0x88>)
 80019cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_I2C_MspInit+0x88>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40005400 	.word	0x40005400
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020400 	.word	0x40020400

080019f4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_I2C_MspDeInit+0x38>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10d      	bne.n	8001a22 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_I2C_MspDeInit+0x3c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_I2C_MspDeInit+0x3c>)
 8001a0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001a12:	2140      	movs	r1, #64	; 0x40
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <HAL_I2C_MspDeInit+0x40>)
 8001a16:	f001 fba1 	bl	800315c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <HAL_I2C_MspDeInit+0x40>)
 8001a1e:	f001 fb9d 	bl	800315c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40005400 	.word	0x40005400
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020400 	.word	0x40020400

08001a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a35      	ldr	r2, [pc, #212]	; (8001b2c <HAL_TIM_Base_MspInit+0xf4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10e      	bne.n	8001a78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a33      	ldr	r2, [pc, #204]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001a76:	e055      	b.n	8001b24 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM10)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <HAL_TIM_Base_MspInit+0xfc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d135      	bne.n	8001aee <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a29      	ldr	r2, [pc, #164]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a22      	ldr	r2, [pc, #136]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001acc:	2303      	movs	r3, #3
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4818      	ldr	r0, [pc, #96]	; (8001b38 <HAL_TIM_Base_MspInit+0x100>)
 8001ad8:	f001 f9bc 	bl	8002e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2105      	movs	r1, #5
 8001ae0:	2019      	movs	r0, #25
 8001ae2:	f000 ff15 	bl	8002910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ae6:	2019      	movs	r0, #25
 8001ae8:	f000 ff2e 	bl	8002948 <HAL_NVIC_EnableIRQ>
}
 8001aec:	e01a      	b.n	8001b24 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM11)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_TIM_Base_MspInit+0x104>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d115      	bne.n	8001b24 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b06:	6453      	str	r3, [r2, #68]	; 0x44
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_TIM_Base_MspInit+0xf8>)
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2105      	movs	r1, #5
 8001b18:	201a      	movs	r0, #26
 8001b1a:	f000 fef9 	bl	8002910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b1e:	201a      	movs	r0, #26
 8001b20:	f000 ff12 	bl	8002948 <HAL_NVIC_EnableIRQ>
}
 8001b24:	bf00      	nop
 8001b26:	3730      	adds	r7, #48	; 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40000400 	.word	0x40000400
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40014400 	.word	0x40014400
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40014800 	.word	0x40014800

08001b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a33      	ldr	r2, [pc, #204]	; (8001c2c <HAL_TIM_MspPostInit+0xec>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d13c      	bne.n	8001bdc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <HAL_TIM_MspPostInit+0xf0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <HAL_TIM_MspPostInit+0xf0>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <HAL_TIM_MspPostInit+0xf0>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_TIM_MspPostInit+0xf0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <HAL_TIM_MspPostInit+0xf0>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_TIM_MspPostInit+0xf0>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001baa:	2302      	movs	r3, #2
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481f      	ldr	r0, [pc, #124]	; (8001c34 <HAL_TIM_MspPostInit+0xf4>)
 8001bb6:	f001 f94d 	bl	8002e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4818      	ldr	r0, [pc, #96]	; (8001c38 <HAL_TIM_MspPostInit+0xf8>)
 8001bd6:	f001 f93d 	bl	8002e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001bda:	e023      	b.n	8001c24 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM11)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <HAL_TIM_MspPostInit+0xfc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d11e      	bne.n	8001c24 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_TIM_MspPostInit+0xf0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_TIM_MspPostInit+0xf0>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_TIM_MspPostInit+0xf0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001c14:	2303      	movs	r3, #3
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <HAL_TIM_MspPostInit+0xf8>)
 8001c20:	f001 f918 	bl	8002e54 <HAL_GPIO_Init>
}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	40014800 	.word	0x40014800

08001c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_UART_MspInit+0x94>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d134      	bne.n	8001ccc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cac:	2307      	movs	r3, #7
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4809      	ldr	r0, [pc, #36]	; (8001cdc <HAL_UART_MspInit+0x9c>)
 8001cb8:	f001 f8cc 	bl	8002e54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2105      	movs	r1, #5
 8001cc0:	2025      	movs	r0, #37	; 0x25
 8001cc2:	f000 fe25 	bl	8002910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cc6:	2025      	movs	r0, #37	; 0x25
 8001cc8:	f000 fe3e 	bl	8002948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	; 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40011000 	.word	0x40011000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	; 0x30
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	201c      	movs	r0, #28
 8001cf6:	f000 fe0b 	bl	8002910 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cfa:	201c      	movs	r0, #28
 8001cfc:	f000 fe24 	bl	8002948 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_InitTick+0xa8>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_InitTick+0xa8>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_InitTick+0xa8>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d1c:	f107 0210 	add.w	r2, r7, #16
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 ff76 	bl	8004c18 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d2c:	f002 ff4c 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 8001d30:	4603      	mov	r3, r0
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_InitTick+0xac>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9b      	lsrs	r3, r3, #18
 8001d40:	3b01      	subs	r3, #1
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_InitTick+0xb0>)
 8001d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_InitTick+0xb0>)
 8001d4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d52:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001d54:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_InitTick+0xb0>)
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_InitTick+0xb0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_InitTick+0xb0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001d66:	480a      	ldr	r0, [pc, #40]	; (8001d90 <HAL_InitTick+0xb0>)
 8001d68:	f002 ff88 	bl	8004c7c <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001d72:	4807      	ldr	r0, [pc, #28]	; (8001d90 <HAL_InitTick+0xb0>)
 8001d74:	f002 ffd2 	bl	8004d1c <HAL_TIM_Base_Start_IT>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	e000      	b.n	8001d7e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3730      	adds	r7, #48	; 0x30
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	431bde83 	.word	0x431bde83
 8001d90:	20000798 	.word	0x20000798

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <NMI_Handler+0x4>

08001d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <HardFault_Handler+0x4>

08001da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <MemManage_Handler+0x4>

08001da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <BusFault_Handler+0x4>

08001dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <UsageFault_Handler+0x4>

08001db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dc6:	f003 fc9d 	bl	8005704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000068c 	.word	0x2000068c

08001dd4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001dda:	f003 fc93 	bl	8005704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200006d4 	.word	0x200006d4

08001de8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <TIM2_IRQHandler+0x10>)
 8001dee:	f003 fc89 	bl	8005704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000798 	.word	0x20000798

08001dfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if((USART1->SR & USART_SR_RXNE) == USART_SR_RXNE)
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <USART1_IRQHandler+0x34>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d10b      	bne.n	8001e24 <USART1_IRQHandler+0x28>
	{
		USART1->SR &= ~USART_SR_RXNE;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <USART1_IRQHandler+0x34>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <USART1_IRQHandler+0x34>)
 8001e12:	f023 0320 	bic.w	r3, r3, #32
 8001e16:	6013      	str	r3, [r2, #0]
		*instr4motors = USART1->DR;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <USART1_IRQHandler+0x34>)
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <USART1_IRQHandler+0x38>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <USART1_IRQHandler+0x3c>)
 8001e26:	f004 fcfb 	bl	8006820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40011000 	.word	0x40011000
 8001e34:	20000794 	.word	0x20000794
 8001e38:	2000071c 	.word	0x2000071c

08001e3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e44:	f001 fa88 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e4c:	f001 fa84 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f008 f94a 	bl	800a11c <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20018000 	.word	0x20018000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	200007e0 	.word	0x200007e0
 8001ebc:	20003990 	.word	0x20003990

08001ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eea:	490e      	ldr	r1, [pc, #56]	; (8001f24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f00:	4c0b      	ldr	r4, [pc, #44]	; (8001f30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f0e:	f7ff ffd7 	bl	8001ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f008 f909 	bl	800a128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7fe fb69 	bl	80005ec <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f28:	0800ac48 	.word	0x0800ac48
  ldr r2, =_sbss
 8001f2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f30:	20003990 	.word	0x20003990

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_Init+0x40>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_Init+0x40>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_Init+0x40>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 fcca 	bl	80028fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	2001      	movs	r0, #1
 8001f68:	f7ff feba 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff fc58 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_IncTick+0x20>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x24>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_IncTick+0x24>)
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	200007e4 	.word	0x200007e4

08001fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_GetTick+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200007e4 	.word	0x200007e4

08001fbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e033      	b.n	800203a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fc4c 	bl	8001878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002002:	f023 0302 	bic.w	r3, r3, #2
 8002006:	f043 0202 	orr.w	r2, r3, #2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fa48 	bl	80024a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	f043 0201 	orr.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
 800202a:	e001      	b.n	8002030 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_ADC_Start_DMA+0x1e>
 800205e:	2302      	movs	r3, #2
 8002060:	e0ce      	b.n	8002200 <HAL_ADC_Start_DMA+0x1bc>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d018      	beq.n	80020aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002088:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_ADC_Start_DMA+0x1c4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a5f      	ldr	r2, [pc, #380]	; (800220c <HAL_ADC_Start_DMA+0x1c8>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0c9a      	lsrs	r2, r3, #18
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800209c:	e002      	b.n	80020a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f9      	bne.n	800209e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b8:	d107      	bne.n	80020ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	f040 8086 	bne.w	80021e6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002104:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002118:	d106      	bne.n	8002128 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f023 0206 	bic.w	r2, r3, #6
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
 8002126:	e002      	b.n	800212e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002136:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_ADC_Start_DMA+0x1cc>)
 8002138:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213e:	4a35      	ldr	r2, [pc, #212]	; (8002214 <HAL_ADC_Start_DMA+0x1d0>)
 8002140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_ADC_Start_DMA+0x1d4>)
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	4a33      	ldr	r2, [pc, #204]	; (800221c <HAL_ADC_Start_DMA+0x1d8>)
 8002150:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800215a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800216a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	334c      	adds	r3, #76	; 0x4c
 8002186:	4619      	mov	r1, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f000 fc98 	bl	8002ac0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10f      	bne.n	80021bc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d129      	bne.n	80021fe <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	e020      	b.n	80021fe <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_ADC_Start_DMA+0x1dc>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d11b      	bne.n	80021fe <HAL_ADC_Start_DMA+0x1ba>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d114      	bne.n	80021fe <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e00b      	b.n	80021fe <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000000 	.word	0x20000000
 800220c:	431bde83 	.word	0x431bde83
 8002210:	40012300 	.word	0x40012300
 8002214:	0800269d 	.word	0x0800269d
 8002218:	08002757 	.word	0x08002757
 800221c:	08002773 	.word	0x08002773
 8002220:	40012000 	.word	0x40012000

08002224 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x1c>
 8002278:	2302      	movs	r3, #2
 800227a:	e105      	b.n	8002488 <HAL_ADC_ConfigChannel+0x228>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b09      	cmp	r3, #9
 800228a:	d925      	bls.n	80022d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68d9      	ldr	r1, [r3, #12]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	2207      	movs	r2, #7
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43da      	mvns	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	400a      	ands	r2, r1
 80022b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68d9      	ldr	r1, [r3, #12]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	4603      	mov	r3, r0
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4403      	add	r3, r0
 80022ca:	3b1e      	subs	r3, #30
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	e022      	b.n	800231e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	2207      	movs	r2, #7
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	400a      	ands	r2, r1
 80022fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6919      	ldr	r1, [r3, #16]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	4603      	mov	r3, r0
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4403      	add	r3, r0
 8002314:	409a      	lsls	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b06      	cmp	r3, #6
 8002324:	d824      	bhi.n	8002370 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	3b05      	subs	r3, #5
 8002338:	221f      	movs	r2, #31
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	400a      	ands	r2, r1
 8002346:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	4618      	mov	r0, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	3b05      	subs	r3, #5
 8002362:	fa00 f203 	lsl.w	r2, r0, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	635a      	str	r2, [r3, #52]	; 0x34
 800236e:	e04c      	b.n	800240a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d824      	bhi.n	80023c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	3b23      	subs	r3, #35	; 0x23
 800238a:	221f      	movs	r2, #31
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43da      	mvns	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	400a      	ands	r2, r1
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b23      	subs	r3, #35	; 0x23
 80023b4:	fa00 f203 	lsl.w	r2, r0, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
 80023c0:	e023      	b.n	800240a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b41      	subs	r3, #65	; 0x41
 80023d4:	221f      	movs	r2, #31
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	400a      	ands	r2, r1
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3b41      	subs	r3, #65	; 0x41
 80023fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_ADC_ConfigChannel+0x234>)
 800240c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <HAL_ADC_ConfigChannel+0x238>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d109      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1cc>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b12      	cmp	r3, #18
 800241e:	d105      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_ADC_ConfigChannel+0x238>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d123      	bne.n	800247e <HAL_ADC_ConfigChannel+0x21e>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b10      	cmp	r3, #16
 800243c:	d003      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x1e6>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b11      	cmp	r3, #17
 8002444:	d11b      	bne.n	800247e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b10      	cmp	r3, #16
 8002458:	d111      	bne.n	800247e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_ADC_ConfigChannel+0x23c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a10      	ldr	r2, [pc, #64]	; (80024a0 <HAL_ADC_ConfigChannel+0x240>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	0c9a      	lsrs	r2, r3, #18
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002470:	e002      	b.n	8002478 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3b01      	subs	r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f9      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40012300 	.word	0x40012300
 8002498:	40012000 	.word	0x40012000
 800249c:	20000000 	.word	0x20000000
 80024a0:	431bde83 	.word	0x431bde83

080024a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ac:	4b79      	ldr	r3, [pc, #484]	; (8002694 <ADC_Init+0x1f0>)
 80024ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	021a      	lsls	r2, r3, #8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	4a58      	ldr	r2, [pc, #352]	; (8002698 <ADC_Init+0x1f4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800254a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6899      	ldr	r1, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800256c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6899      	ldr	r1, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	e00f      	b.n	80025a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0202 	bic.w	r2, r2, #2
 80025b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6899      	ldr	r1, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7e1b      	ldrb	r3, [r3, #24]
 80025bc:	005a      	lsls	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01b      	beq.n	8002608 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	3b01      	subs	r3, #1
 80025fc:	035a      	lsls	r2, r3, #13
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	e007      	b.n	8002618 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002616:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	3b01      	subs	r3, #1
 8002634:	051a      	lsls	r2, r3, #20
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800264c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800265a:	025a      	lsls	r2, r3, #9
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6899      	ldr	r1, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	029a      	lsls	r2, r3, #10
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40012300 	.word	0x40012300
 8002698:	0f000001 	.word	0x0f000001

0800269c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d13c      	bne.n	8002730 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d12b      	bne.n	8002728 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d127      	bne.n	8002728 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d119      	bne.n	8002728 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0220 	bic.w	r2, r2, #32
 8002702:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f043 0201 	orr.w	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff fd7b 	bl	8002224 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800272e:	e00e      	b.n	800274e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff fd85 	bl	800224c <HAL_ADC_ErrorCallback>
}
 8002742:	e004      	b.n	800274e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff fd67 	bl	8002238 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f043 0204 	orr.w	r2, r3, #4
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff fd5a 	bl	800224c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ff4c 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002922:	f7ff ff61 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 8002926:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	6978      	ldr	r0, [r7, #20]
 800292e:	f7ff ffb1 	bl	8002894 <NVIC_EncodePriority>
 8002932:	4602      	mov	r2, r0
 8002934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff80 	bl	8002840 <__NVIC_SetPriority>
}
 8002940:	bf00      	nop
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff54 	bl	8002804 <__NVIC_EnableIRQ>
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7ff fb18 	bl	8001fa4 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e099      	b.n	8002ab4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a0:	e00f      	b.n	80029c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a2:	f7ff faff 	bl	8001fa4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d908      	bls.n	80029c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2203      	movs	r2, #3
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e078      	b.n	8002ab4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e8      	bne.n	80029a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_DMA_Init+0x158>)
 80029dc:	4013      	ands	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d107      	bne.n	8002a2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	4313      	orrs	r3, r2
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0307 	bic.w	r3, r3, #7
 8002a42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d117      	bne.n	8002a86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00e      	beq.n	8002a86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f977 	bl	8002d5c <DMA_CheckFifoParam>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2240      	movs	r2, #64	; 0x40
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a82:	2301      	movs	r3, #1
 8002a84:	e016      	b.n	8002ab4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f92e 	bl	8002cf0 <DMA_CalcBaseAndBitshift>
 8002a94:	4603      	mov	r3, r0
 8002a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	223f      	movs	r2, #63	; 0x3f
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	f010803f 	.word	0xf010803f

08002ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_DMA_Start_IT+0x26>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e040      	b.n	8002b68 <HAL_DMA_Start_IT+0xa8>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d12f      	bne.n	8002b5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f8c0 	bl	8002c94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	223f      	movs	r2, #63	; 0x3f
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0216 	orr.w	r2, r2, #22
 8002b2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0208 	orr.w	r2, r2, #8
 8002b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e005      	b.n	8002b66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b7e:	f7ff fa11 	bl	8001fa4 <HAL_GetTick>
 8002b82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d008      	beq.n	8002ba2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e052      	b.n	8002c48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0216 	bic.w	r2, r2, #22
 8002bb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <HAL_DMA_Abort+0x62>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0208 	bic.w	r2, r2, #8
 8002be0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf2:	e013      	b.n	8002c1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bf4:	f7ff f9d6 	bl	8001fa4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	d90c      	bls.n	8002c1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e015      	b.n	8002c48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e4      	bne.n	8002bf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2e:	223f      	movs	r2, #63	; 0x3f
 8002c30:	409a      	lsls	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d004      	beq.n	8002c6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00c      	b.n	8002c88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2205      	movs	r2, #5
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d108      	bne.n	8002cd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cd2:	e007      	b.n	8002ce4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	60da      	str	r2, [r3, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3b10      	subs	r3, #16
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <DMA_CalcBaseAndBitshift+0x64>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d0a:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <DMA_CalcBaseAndBitshift+0x68>)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d909      	bls.n	8002d32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d26:	f023 0303 	bic.w	r3, r3, #3
 8002d2a:	1d1a      	adds	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002d30:	e007      	b.n	8002d42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d3a:	f023 0303 	bic.w	r3, r3, #3
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	aaaaaaab 	.word	0xaaaaaaab
 8002d58:	0800abfc 	.word	0x0800abfc

08002d5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11f      	bne.n	8002db6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d856      	bhi.n	8002e2a <DMA_CheckFifoParam+0xce>
 8002d7c:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <DMA_CheckFifoParam+0x28>)
 8002d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d82:	bf00      	nop
 8002d84:	08002d95 	.word	0x08002d95
 8002d88:	08002da7 	.word	0x08002da7
 8002d8c:	08002d95 	.word	0x08002d95
 8002d90:	08002e2b 	.word	0x08002e2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d046      	beq.n	8002e2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da4:	e043      	b.n	8002e2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dae:	d140      	bne.n	8002e32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db4:	e03d      	b.n	8002e32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbe:	d121      	bne.n	8002e04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d837      	bhi.n	8002e36 <DMA_CheckFifoParam+0xda>
 8002dc6:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <DMA_CheckFifoParam+0x70>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002ddd 	.word	0x08002ddd
 8002dd0:	08002de3 	.word	0x08002de3
 8002dd4:	08002ddd 	.word	0x08002ddd
 8002dd8:	08002df5 	.word	0x08002df5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
      break;
 8002de0:	e030      	b.n	8002e44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d025      	beq.n	8002e3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df2:	e022      	b.n	8002e3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dfc:	d11f      	bne.n	8002e3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e02:	e01c      	b.n	8002e3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d903      	bls.n	8002e12 <DMA_CheckFifoParam+0xb6>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d003      	beq.n	8002e18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e10:	e018      	b.n	8002e44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      break;
 8002e16:	e015      	b.n	8002e44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00e      	beq.n	8002e42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      break;
 8002e28:	e00b      	b.n	8002e42 <DMA_CheckFifoParam+0xe6>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e00a      	b.n	8002e44 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e008      	b.n	8002e44 <DMA_CheckFifoParam+0xe8>
      break;
 8002e32:	bf00      	nop
 8002e34:	e006      	b.n	8002e44 <DMA_CheckFifoParam+0xe8>
      break;
 8002e36:	bf00      	nop
 8002e38:	e004      	b.n	8002e44 <DMA_CheckFifoParam+0xe8>
      break;
 8002e3a:	bf00      	nop
 8002e3c:	e002      	b.n	8002e44 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <DMA_CheckFifoParam+0xe8>
      break;
 8002e42:	bf00      	nop
    }
  } 
  
  return status; 
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop

08002e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e159      	b.n	8003124 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e70:	2201      	movs	r2, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	f040 8148 	bne.w	800311e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d005      	beq.n	8002ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d130      	bne.n	8002f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 0201 	and.w	r2, r3, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d017      	beq.n	8002f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d123      	bne.n	8002f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	08da      	lsrs	r2, r3, #3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3208      	adds	r2, #8
 8002f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	220f      	movs	r2, #15
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3208      	adds	r2, #8
 8002f92:	69b9      	ldr	r1, [r7, #24]
 8002f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0203 	and.w	r2, r3, #3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a2 	beq.w	800311e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_GPIO_Init+0x2e8>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	4a56      	ldr	r2, [pc, #344]	; (800313c <HAL_GPIO_Init+0x2e8>)
 8002fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fea:	4b54      	ldr	r3, [pc, #336]	; (800313c <HAL_GPIO_Init+0x2e8>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff6:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_GPIO_Init+0x2ec>)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	220f      	movs	r2, #15
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a49      	ldr	r2, [pc, #292]	; (8003144 <HAL_GPIO_Init+0x2f0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d019      	beq.n	8003056 <HAL_GPIO_Init+0x202>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a48      	ldr	r2, [pc, #288]	; (8003148 <HAL_GPIO_Init+0x2f4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_GPIO_Init+0x1fe>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a47      	ldr	r2, [pc, #284]	; (800314c <HAL_GPIO_Init+0x2f8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00d      	beq.n	800304e <HAL_GPIO_Init+0x1fa>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a46      	ldr	r2, [pc, #280]	; (8003150 <HAL_GPIO_Init+0x2fc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <HAL_GPIO_Init+0x1f6>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a45      	ldr	r2, [pc, #276]	; (8003154 <HAL_GPIO_Init+0x300>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_GPIO_Init+0x1f2>
 8003042:	2304      	movs	r3, #4
 8003044:	e008      	b.n	8003058 <HAL_GPIO_Init+0x204>
 8003046:	2307      	movs	r3, #7
 8003048:	e006      	b.n	8003058 <HAL_GPIO_Init+0x204>
 800304a:	2303      	movs	r3, #3
 800304c:	e004      	b.n	8003058 <HAL_GPIO_Init+0x204>
 800304e:	2302      	movs	r3, #2
 8003050:	e002      	b.n	8003058 <HAL_GPIO_Init+0x204>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_GPIO_Init+0x204>
 8003056:	2300      	movs	r3, #0
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	f002 0203 	and.w	r2, r2, #3
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	4093      	lsls	r3, r2
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003068:	4935      	ldr	r1, [pc, #212]	; (8003140 <HAL_GPIO_Init+0x2ec>)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	3302      	adds	r3, #2
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_GPIO_Init+0x304>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800309a:	4a2f      	ldr	r2, [pc, #188]	; (8003158 <HAL_GPIO_Init+0x304>)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030a0:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_GPIO_Init+0x304>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c4:	4a24      	ldr	r2, [pc, #144]	; (8003158 <HAL_GPIO_Init+0x304>)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ca:	4b23      	ldr	r3, [pc, #140]	; (8003158 <HAL_GPIO_Init+0x304>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ee:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <HAL_GPIO_Init+0x304>)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f4:	4b18      	ldr	r3, [pc, #96]	; (8003158 <HAL_GPIO_Init+0x304>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003118:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <HAL_GPIO_Init+0x304>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3301      	adds	r3, #1
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2b0f      	cmp	r3, #15
 8003128:	f67f aea2 	bls.w	8002e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	40013800 	.word	0x40013800
 8003144:	40020000 	.word	0x40020000
 8003148:	40020400 	.word	0x40020400
 800314c:	40020800 	.word	0x40020800
 8003150:	40020c00 	.word	0x40020c00
 8003154:	40021000 	.word	0x40021000
 8003158:	40013c00 	.word	0x40013c00

0800315c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e0bb      	b.n	80032f0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003178:	2201      	movs	r2, #1
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	429a      	cmp	r2, r3
 8003190:	f040 80ab 	bne.w	80032ea <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003194:	4a5c      	ldr	r2, [pc, #368]	; (8003308 <HAL_GPIO_DeInit+0x1ac>)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	3302      	adds	r3, #2
 800319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	220f      	movs	r2, #15
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a54      	ldr	r2, [pc, #336]	; (800330c <HAL_GPIO_DeInit+0x1b0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d019      	beq.n	80031f2 <HAL_GPIO_DeInit+0x96>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a53      	ldr	r2, [pc, #332]	; (8003310 <HAL_GPIO_DeInit+0x1b4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_GPIO_DeInit+0x92>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_GPIO_DeInit+0x1b8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00d      	beq.n	80031ea <HAL_GPIO_DeInit+0x8e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a51      	ldr	r2, [pc, #324]	; (8003318 <HAL_GPIO_DeInit+0x1bc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <HAL_GPIO_DeInit+0x8a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a50      	ldr	r2, [pc, #320]	; (800331c <HAL_GPIO_DeInit+0x1c0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d101      	bne.n	80031e2 <HAL_GPIO_DeInit+0x86>
 80031de:	2304      	movs	r3, #4
 80031e0:	e008      	b.n	80031f4 <HAL_GPIO_DeInit+0x98>
 80031e2:	2307      	movs	r3, #7
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_DeInit+0x98>
 80031e6:	2303      	movs	r3, #3
 80031e8:	e004      	b.n	80031f4 <HAL_GPIO_DeInit+0x98>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_DeInit+0x98>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_GPIO_DeInit+0x98>
 80031f2:	2300      	movs	r3, #0
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	f002 0203 	and.w	r2, r2, #3
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	4093      	lsls	r3, r2
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	429a      	cmp	r2, r3
 8003202:	d132      	bne.n	800326a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003204:	4b46      	ldr	r3, [pc, #280]	; (8003320 <HAL_GPIO_DeInit+0x1c4>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43db      	mvns	r3, r3
 800320c:	4944      	ldr	r1, [pc, #272]	; (8003320 <HAL_GPIO_DeInit+0x1c4>)
 800320e:	4013      	ands	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003212:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_GPIO_DeInit+0x1c4>)
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43db      	mvns	r3, r3
 800321a:	4941      	ldr	r1, [pc, #260]	; (8003320 <HAL_GPIO_DeInit+0x1c4>)
 800321c:	4013      	ands	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003220:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_GPIO_DeInit+0x1c4>)
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43db      	mvns	r3, r3
 8003228:	493d      	ldr	r1, [pc, #244]	; (8003320 <HAL_GPIO_DeInit+0x1c4>)
 800322a:	4013      	ands	r3, r2
 800322c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800322e:	4b3c      	ldr	r3, [pc, #240]	; (8003320 <HAL_GPIO_DeInit+0x1c4>)
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43db      	mvns	r3, r3
 8003236:	493a      	ldr	r1, [pc, #232]	; (8003320 <HAL_GPIO_DeInit+0x1c4>)
 8003238:	4013      	ands	r3, r2
 800323a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800324c:	4a2e      	ldr	r2, [pc, #184]	; (8003308 <HAL_GPIO_DeInit+0x1ac>)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3302      	adds	r3, #2
 8003254:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	43da      	mvns	r2, r3
 800325c:	482a      	ldr	r0, [pc, #168]	; (8003308 <HAL_GPIO_DeInit+0x1ac>)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	400a      	ands	r2, r1
 8003264:	3302      	adds	r3, #2
 8003266:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2103      	movs	r1, #3
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	401a      	ands	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	08da      	lsrs	r2, r3, #3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3208      	adds	r2, #8
 8003288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	220f      	movs	r2, #15
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	08d2      	lsrs	r2, r2, #3
 80032a0:	4019      	ands	r1, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3208      	adds	r2, #8
 80032a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2103      	movs	r1, #3
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	2101      	movs	r1, #1
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	401a      	ands	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	2103      	movs	r1, #3
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	401a      	ands	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	f67f af40 	bls.w	8003178 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40013800 	.word	0x40013800
 800330c:	40020000 	.word	0x40020000
 8003310:	40020400 	.word	0x40020400
 8003314:	40020800 	.word	0x40020800
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40021000 	.word	0x40021000
 8003320:	40013c00 	.word	0x40013c00

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003340:	e003      	b.n	800334a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	041a      	lsls	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	619a      	str	r2, [r3, #24]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fde2 	bl	8000f40 <HAL_GPIO_EXTI_Callback>
  }
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40013c00 	.word	0x40013c00

08003388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e12b      	b.n	80035f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe fad8 	bl	8001964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033ec:	f001 fbec 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 80033f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4a81      	ldr	r2, [pc, #516]	; (80035fc <HAL_I2C_Init+0x274>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d807      	bhi.n	800340c <HAL_I2C_Init+0x84>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a80      	ldr	r2, [pc, #512]	; (8003600 <HAL_I2C_Init+0x278>)
 8003400:	4293      	cmp	r3, r2
 8003402:	bf94      	ite	ls
 8003404:	2301      	movls	r3, #1
 8003406:	2300      	movhi	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e006      	b.n	800341a <HAL_I2C_Init+0x92>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a7d      	ldr	r2, [pc, #500]	; (8003604 <HAL_I2C_Init+0x27c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	bf94      	ite	ls
 8003414:	2301      	movls	r3, #1
 8003416:	2300      	movhi	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0e7      	b.n	80035f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a78      	ldr	r2, [pc, #480]	; (8003608 <HAL_I2C_Init+0x280>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	0c9b      	lsrs	r3, r3, #18
 800342c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a6a      	ldr	r2, [pc, #424]	; (80035fc <HAL_I2C_Init+0x274>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d802      	bhi.n	800345c <HAL_I2C_Init+0xd4>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3301      	adds	r3, #1
 800345a:	e009      	b.n	8003470 <HAL_I2C_Init+0xe8>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	4a69      	ldr	r2, [pc, #420]	; (800360c <HAL_I2C_Init+0x284>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	3301      	adds	r3, #1
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	430b      	orrs	r3, r1
 8003476:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003482:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	495c      	ldr	r1, [pc, #368]	; (80035fc <HAL_I2C_Init+0x274>)
 800348c:	428b      	cmp	r3, r1
 800348e:	d819      	bhi.n	80034c4 <HAL_I2C_Init+0x13c>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e59      	subs	r1, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fbb1 f3f3 	udiv	r3, r1, r3
 800349e:	1c59      	adds	r1, r3, #1
 80034a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034a4:	400b      	ands	r3, r1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_I2C_Init+0x138>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1e59      	subs	r1, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034be:	e051      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 80034c0:	2304      	movs	r3, #4
 80034c2:	e04f      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d111      	bne.n	80034f0 <HAL_I2C_Init+0x168>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	440b      	add	r3, r1
 80034da:	fbb0 f3f3 	udiv	r3, r0, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e012      	b.n	8003516 <HAL_I2C_Init+0x18e>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e58      	subs	r0, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	0099      	lsls	r1, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	fbb0 f3f3 	udiv	r3, r0, r3
 8003506:	3301      	adds	r3, #1
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_Init+0x196>
 800351a:	2301      	movs	r3, #1
 800351c:	e022      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10e      	bne.n	8003544 <HAL_I2C_Init+0x1bc>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1e58      	subs	r0, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	440b      	add	r3, r1
 8003534:	fbb0 f3f3 	udiv	r3, r0, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003542:	e00f      	b.n	8003564 <HAL_I2C_Init+0x1dc>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1e58      	subs	r0, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	0099      	lsls	r1, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	fbb0 f3f3 	udiv	r3, r0, r3
 800355a:	3301      	adds	r3, #1
 800355c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	6809      	ldr	r1, [r1, #0]
 8003568:	4313      	orrs	r3, r2
 800356a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003592:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6911      	ldr	r1, [r2, #16]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68d2      	ldr	r2, [r2, #12]
 800359e:	4311      	orrs	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	000186a0 	.word	0x000186a0
 8003600:	001e847f 	.word	0x001e847f
 8003604:	003d08ff 	.word	0x003d08ff
 8003608:	431bde83 	.word	0x431bde83
 800360c:	10624dd3 	.word	0x10624dd3

08003610 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e021      	b.n	8003666 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2224      	movs	r2, #36	; 0x24
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe f9da 	bl	80019f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	461a      	mov	r2, r3
 800367e:	4603      	mov	r3, r0
 8003680:	817b      	strh	r3, [r7, #10]
 8003682:	460b      	mov	r3, r1
 8003684:	813b      	strh	r3, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800368a:	f7fe fc8b 	bl	8001fa4 <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b20      	cmp	r3, #32
 800369a:	f040 80d9 	bne.w	8003850 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2319      	movs	r3, #25
 80036a4:	2201      	movs	r2, #1
 80036a6:	496d      	ldr	r1, [pc, #436]	; (800385c <HAL_I2C_Mem_Write+0x1ec>)
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fc7f 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036b4:	2302      	movs	r3, #2
 80036b6:	e0cc      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_I2C_Mem_Write+0x56>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0c5      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d007      	beq.n	80036ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2221      	movs	r2, #33	; 0x21
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2240      	movs	r2, #64	; 0x40
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a4d      	ldr	r2, [pc, #308]	; (8003860 <HAL_I2C_Mem_Write+0x1f0>)
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800372e:	88f8      	ldrh	r0, [r7, #6]
 8003730:	893a      	ldrh	r2, [r7, #8]
 8003732:	8979      	ldrh	r1, [r7, #10]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4603      	mov	r3, r0
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fab6 	bl	8003cb0 <I2C_RequestMemoryWrite>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d052      	beq.n	80037f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e081      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fd00 	bl	8004158 <I2C_WaitOnTXEFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	2b04      	cmp	r3, #4
 8003764:	d107      	bne.n	8003776 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06b      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d11b      	bne.n	80037f0 <HAL_I2C_Mem_Write+0x180>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d017      	beq.n	80037f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1aa      	bne.n	800374e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fcec 	bl	80041da <I2C_WaitOnBTFFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b04      	cmp	r3, #4
 800380e:	d107      	bne.n	8003820 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e016      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e000      	b.n	8003852 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	00100002 	.word	0x00100002
 8003860:	ffff0000 	.word	0xffff0000

08003864 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08c      	sub	sp, #48	; 0x30
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	817b      	strh	r3, [r7, #10]
 8003876:	460b      	mov	r3, r1
 8003878:	813b      	strh	r3, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387e:	f7fe fb91 	bl	8001fa4 <HAL_GetTick>
 8003882:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	f040 8208 	bne.w	8003ca2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2319      	movs	r3, #25
 8003898:	2201      	movs	r2, #1
 800389a:	497b      	ldr	r1, [pc, #492]	; (8003a88 <HAL_I2C_Mem_Read+0x224>)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fb85 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	e1fb      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_I2C_Mem_Read+0x56>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e1f4      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d007      	beq.n	80038e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2222      	movs	r2, #34	; 0x22
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2240      	movs	r2, #64	; 0x40
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a5b      	ldr	r2, [pc, #364]	; (8003a8c <HAL_I2C_Mem_Read+0x228>)
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003922:	88f8      	ldrh	r0, [r7, #6]
 8003924:	893a      	ldrh	r2, [r7, #8]
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4603      	mov	r3, r0
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fa52 	bl	8003ddc <I2C_RequestMemoryRead>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e1b0      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	623b      	str	r3, [r7, #32]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	623b      	str	r3, [r7, #32]
 800395e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e184      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	2b01      	cmp	r3, #1
 8003978:	d11b      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	e164      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d11b      	bne.n	80039f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	e144      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a08:	e138      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	f200 80f1 	bhi.w	8003bf6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d123      	bne.n	8003a64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fc1b 	bl	800425c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e139      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a62:	e10b      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d14e      	bne.n	8003b0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	2200      	movs	r2, #0
 8003a74:	4906      	ldr	r1, [pc, #24]	; (8003a90 <HAL_I2C_Mem_Read+0x22c>)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 fa98 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e10e      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
 8003a86:	bf00      	nop
 8003a88:	00100002 	.word	0x00100002
 8003a8c:	ffff0000 	.word	0xffff0000
 8003a90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b08:	e0b8      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	2200      	movs	r2, #0
 8003b12:	4966      	ldr	r1, [pc, #408]	; (8003cac <HAL_I2C_Mem_Read+0x448>)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fa49 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0bf      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	494f      	ldr	r1, [pc, #316]	; (8003cac <HAL_I2C_Mem_Read+0x448>)
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fa1b 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e091      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf4:	e042      	b.n	8003c7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fb2e 	bl	800425c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e04c      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d118      	bne.n	8003c7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f47f aec2 	bne.w	8003a0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3728      	adds	r7, #40	; 0x28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	00010004 	.word	0x00010004

08003cb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	4608      	mov	r0, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	817b      	strh	r3, [r7, #10]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	813b      	strh	r3, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f960 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d00:	d103      	bne.n	8003d0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e05f      	b.n	8003dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d0e:	897b      	ldrh	r3, [r7, #10]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	6a3a      	ldr	r2, [r7, #32]
 8003d22:	492d      	ldr	r1, [pc, #180]	; (8003dd8 <I2C_RequestMemoryWrite+0x128>)
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f998 	bl	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e04c      	b.n	8003dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4c:	6a39      	ldr	r1, [r7, #32]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fa02 	bl	8004158 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d107      	bne.n	8003d72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e02b      	b.n	8003dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7c:	893b      	ldrh	r3, [r7, #8]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]
 8003d86:	e021      	b.n	8003dcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d88:	893b      	ldrh	r3, [r7, #8]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	6a39      	ldr	r1, [r7, #32]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f9dc 	bl	8004158 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d107      	bne.n	8003dbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e005      	b.n	8003dce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc2:	893b      	ldrh	r3, [r7, #8]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	00010002 	.word	0x00010002

08003ddc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	4608      	mov	r0, r1
 8003de6:	4611      	mov	r1, r2
 8003de8:	461a      	mov	r2, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	817b      	strh	r3, [r7, #10]
 8003dee:	460b      	mov	r3, r1
 8003df0:	813b      	strh	r3, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f8c2 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3c:	d103      	bne.n	8003e46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0aa      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	4952      	ldr	r1, [pc, #328]	; (8003fa8 <I2C_RequestMemoryRead+0x1cc>)
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f8fa 	bl	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e097      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e88:	6a39      	ldr	r1, [r7, #32]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f964 	bl	8004158 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d107      	bne.n	8003eae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e076      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d105      	bne.n	8003ec4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb8:	893b      	ldrh	r3, [r7, #8]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	611a      	str	r2, [r3, #16]
 8003ec2:	e021      	b.n	8003f08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec4:	893b      	ldrh	r3, [r7, #8]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	6a39      	ldr	r1, [r7, #32]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f93e 	bl	8004158 <I2C_WaitOnTXEFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d107      	bne.n	8003efa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e050      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003efe:	893b      	ldrh	r3, [r7, #8]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0a:	6a39      	ldr	r1, [r7, #32]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f923 	bl	8004158 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00d      	beq.n	8003f34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d107      	bne.n	8003f30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e035      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f82b 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6a:	d103      	bne.n	8003f74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e013      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f78:	897b      	ldrh	r3, [r7, #10]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	4906      	ldr	r1, [pc, #24]	; (8003fa8 <I2C_RequestMemoryRead+0x1cc>)
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f863 	bl	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	00010002 	.word	0x00010002

08003fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fbc:	e025      	b.n	800400a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d021      	beq.n	800400a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc6:	f7fd ffed 	bl	8001fa4 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d302      	bcc.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d116      	bne.n	800400a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f043 0220 	orr.w	r2, r3, #32
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e023      	b.n	8004052 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10d      	bne.n	8004030 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	43da      	mvns	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4013      	ands	r3, r2
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	e00c      	b.n	800404a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	43da      	mvns	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	429a      	cmp	r2, r3
 800404e:	d0b6      	beq.n	8003fbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004068:	e051      	b.n	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004078:	d123      	bne.n	80040c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004088:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004092:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f043 0204 	orr.w	r2, r3, #4
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e046      	b.n	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d021      	beq.n	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ca:	f7fd ff6b 	bl	8001fa4 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d116      	bne.n	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e020      	b.n	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	0c1b      	lsrs	r3, r3, #16
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10c      	bne.n	8004132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	43da      	mvns	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	e00b      	b.n	800414a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	43da      	mvns	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4013      	ands	r3, r2
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d18d      	bne.n	800406a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004164:	e02d      	b.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f8ce 	bl	8004308 <I2C_IsAcknowledgeFailed>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e02d      	b.n	80041d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d021      	beq.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7fd ff11 	bl	8001fa4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d116      	bne.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e007      	b.n	80041d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041cc:	2b80      	cmp	r3, #128	; 0x80
 80041ce:	d1ca      	bne.n	8004166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041e6:	e02d      	b.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f88d 	bl	8004308 <I2C_IsAcknowledgeFailed>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e02d      	b.n	8004254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d021      	beq.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004200:	f7fd fed0 	bl	8001fa4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	d302      	bcc.n	8004216 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d116      	bne.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	f043 0220 	orr.w	r2, r3, #32
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e007      	b.n	8004254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b04      	cmp	r3, #4
 8004250:	d1ca      	bne.n	80041e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004268:	e042      	b.n	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b10      	cmp	r3, #16
 8004276:	d119      	bne.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0210 	mvn.w	r2, #16
 8004280:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e029      	b.n	8004300 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ac:	f7fd fe7a 	bl	8001fa4 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d302      	bcc.n	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d116      	bne.n	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e007      	b.n	8004300 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	d1b5      	bne.n	800426a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431e:	d11b      	bne.n	8004358 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004328:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	f043 0204 	orr.w	r2, r3, #4
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e267      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d075      	beq.n	8004472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004386:	4b88      	ldr	r3, [pc, #544]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b04      	cmp	r3, #4
 8004390:	d00c      	beq.n	80043ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004392:	4b85      	ldr	r3, [pc, #532]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800439a:	2b08      	cmp	r3, #8
 800439c:	d112      	bne.n	80043c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439e:	4b82      	ldr	r3, [pc, #520]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043aa:	d10b      	bne.n	80043c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	4b7e      	ldr	r3, [pc, #504]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d05b      	beq.n	8004470 <HAL_RCC_OscConfig+0x108>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d157      	bne.n	8004470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e242      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d106      	bne.n	80043dc <HAL_RCC_OscConfig+0x74>
 80043ce:	4b76      	ldr	r3, [pc, #472]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a75      	ldr	r2, [pc, #468]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e01d      	b.n	8004418 <HAL_RCC_OscConfig+0xb0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x98>
 80043e6:	4b70      	ldr	r3, [pc, #448]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6f      	ldr	r2, [pc, #444]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b6d      	ldr	r3, [pc, #436]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6c      	ldr	r2, [pc, #432]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0xb0>
 8004400:	4b69      	ldr	r3, [pc, #420]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a68      	ldr	r2, [pc, #416]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a65      	ldr	r2, [pc, #404]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fd fdc0 	bl	8001fa4 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004428:	f7fd fdbc 	bl	8001fa4 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e207      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	4b5b      	ldr	r3, [pc, #364]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0xc0>
 8004446:	e014      	b.n	8004472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fd fdac 	bl	8001fa4 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004450:	f7fd fda8 	bl	8001fa4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	; 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e1f3      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004462:	4b51      	ldr	r3, [pc, #324]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0xe8>
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d063      	beq.n	8004546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800447e:	4b4a      	ldr	r3, [pc, #296]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448a:	4b47      	ldr	r3, [pc, #284]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004492:	2b08      	cmp	r3, #8
 8004494:	d11c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004496:	4b44      	ldr	r3, [pc, #272]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d116      	bne.n	80044d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_RCC_OscConfig+0x152>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d001      	beq.n	80044ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e1c7      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ba:	4b3b      	ldr	r3, [pc, #236]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4937      	ldr	r1, [pc, #220]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ce:	e03a      	b.n	8004546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d8:	4b34      	ldr	r3, [pc, #208]	; (80045ac <HAL_RCC_OscConfig+0x244>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fd fd61 	bl	8001fa4 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e6:	f7fd fd5d 	bl	8001fa4 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e1a8      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f8:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004504:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4925      	ldr	r1, [pc, #148]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 8004514:	4313      	orrs	r3, r2
 8004516:	600b      	str	r3, [r1, #0]
 8004518:	e015      	b.n	8004546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451a:	4b24      	ldr	r3, [pc, #144]	; (80045ac <HAL_RCC_OscConfig+0x244>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fd40 	bl	8001fa4 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004528:	f7fd fd3c 	bl	8001fa4 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e187      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453a:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d036      	beq.n	80045c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <HAL_RCC_OscConfig+0x248>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fd fd20 	bl	8001fa4 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004568:	f7fd fd1c 	bl	8001fa4 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e167      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_OscConfig+0x240>)
 800457c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x200>
 8004586:	e01b      	b.n	80045c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <HAL_RCC_OscConfig+0x248>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fd fd09 	bl	8001fa4 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004594:	e00e      	b.n	80045b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004596:	f7fd fd05 	bl	8001fa4 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d907      	bls.n	80045b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e150      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
 80045a8:	40023800 	.word	0x40023800
 80045ac:	42470000 	.word	0x42470000
 80045b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b4:	4b88      	ldr	r3, [pc, #544]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80045b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ea      	bne.n	8004596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8097 	beq.w	80046fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d2:	4b81      	ldr	r3, [pc, #516]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	4b7d      	ldr	r3, [pc, #500]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	4a7c      	ldr	r2, [pc, #496]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80045e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ec:	6413      	str	r3, [r2, #64]	; 0x40
 80045ee:	4b7a      	ldr	r3, [pc, #488]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fe:	4b77      	ldr	r3, [pc, #476]	; (80047dc <HAL_RCC_OscConfig+0x474>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d118      	bne.n	800463c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800460a:	4b74      	ldr	r3, [pc, #464]	; (80047dc <HAL_RCC_OscConfig+0x474>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a73      	ldr	r2, [pc, #460]	; (80047dc <HAL_RCC_OscConfig+0x474>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004616:	f7fd fcc5 	bl	8001fa4 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461e:	f7fd fcc1 	bl	8001fa4 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e10c      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	4b6a      	ldr	r3, [pc, #424]	; (80047dc <HAL_RCC_OscConfig+0x474>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d106      	bne.n	8004652 <HAL_RCC_OscConfig+0x2ea>
 8004644:	4b64      	ldr	r3, [pc, #400]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	4a63      	ldr	r2, [pc, #396]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6713      	str	r3, [r2, #112]	; 0x70
 8004650:	e01c      	b.n	800468c <HAL_RCC_OscConfig+0x324>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b05      	cmp	r3, #5
 8004658:	d10c      	bne.n	8004674 <HAL_RCC_OscConfig+0x30c>
 800465a:	4b5f      	ldr	r3, [pc, #380]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a5e      	ldr	r2, [pc, #376]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
 8004666:	4b5c      	ldr	r3, [pc, #368]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a5b      	ldr	r2, [pc, #364]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
 8004672:	e00b      	b.n	800468c <HAL_RCC_OscConfig+0x324>
 8004674:	4b58      	ldr	r3, [pc, #352]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a57      	ldr	r2, [pc, #348]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	4b55      	ldr	r3, [pc, #340]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a54      	ldr	r2, [pc, #336]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004686:	f023 0304 	bic.w	r3, r3, #4
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d015      	beq.n	80046c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fd fc86 	bl	8001fa4 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f7fd fc82 	bl	8001fa4 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e0cb      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b2:	4b49      	ldr	r3, [pc, #292]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0ee      	beq.n	800469c <HAL_RCC_OscConfig+0x334>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c0:	f7fd fc70 	bl	8001fa4 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c6:	e00a      	b.n	80046de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fd fc6c 	bl	8001fa4 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e0b5      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046de:	4b3e      	ldr	r3, [pc, #248]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ee      	bne.n	80046c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d105      	bne.n	80046fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f0:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	4a38      	ldr	r2, [pc, #224]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80046f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80a1 	beq.w	8004848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004706:	4b34      	ldr	r3, [pc, #208]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b08      	cmp	r3, #8
 8004710:	d05c      	beq.n	80047cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d141      	bne.n	800479e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471a:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <HAL_RCC_OscConfig+0x478>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fd fc40 	bl	8001fa4 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004728:	f7fd fc3c 	bl	8001fa4 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e087      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473a:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	019b      	lsls	r3, r3, #6
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	3b01      	subs	r3, #1
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	491b      	ldr	r1, [pc, #108]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 800476c:	4313      	orrs	r3, r2
 800476e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004770:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <HAL_RCC_OscConfig+0x478>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004776:	f7fd fc15 	bl	8001fa4 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800477e:	f7fd fc11 	bl	8001fa4 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e05c      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x416>
 800479c:	e054      	b.n	8004848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479e:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <HAL_RCC_OscConfig+0x478>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fd fbfe 	bl	8001fa4 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ac:	f7fd fbfa 	bl	8001fa4 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e045      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_RCC_OscConfig+0x470>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x444>
 80047ca:	e03d      	b.n	8004848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d107      	bne.n	80047e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e038      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40007000 	.word	0x40007000
 80047e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_RCC_OscConfig+0x4ec>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d028      	beq.n	8004844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d121      	bne.n	8004844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d11a      	bne.n	8004844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800481a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800481c:	4293      	cmp	r3, r2
 800481e:	d111      	bne.n	8004844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	3b01      	subs	r3, #1
 800482e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d107      	bne.n	8004844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800

08004858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0cc      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800486c:	4b68      	ldr	r3, [pc, #416]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d90c      	bls.n	8004894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b65      	ldr	r3, [pc, #404]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b63      	ldr	r3, [pc, #396]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0b8      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d020      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ac:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4a58      	ldr	r2, [pc, #352]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c4:	4b53      	ldr	r3, [pc, #332]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a52      	ldr	r2, [pc, #328]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b50      	ldr	r3, [pc, #320]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	494d      	ldr	r1, [pc, #308]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d044      	beq.n	8004978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d119      	bne.n	8004936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e07f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d003      	beq.n	8004916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004912:	2b03      	cmp	r3, #3
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004916:	4b3f      	ldr	r3, [pc, #252]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e06f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004926:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e067      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004936:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f023 0203 	bic.w	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	4934      	ldr	r1, [pc, #208]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	4313      	orrs	r3, r2
 8004946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004948:	f7fd fb2c 	bl	8001fa4 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494e:	e00a      	b.n	8004966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004950:	f7fd fb28 	bl	8001fa4 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e04f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004966:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 020c 	and.w	r2, r3, #12
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	429a      	cmp	r2, r3
 8004976:	d1eb      	bne.n	8004950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d20c      	bcs.n	80049a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e032      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4916      	ldr	r1, [pc, #88]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	490e      	ldr	r1, [pc, #56]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049de:	f000 f821 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80049e2:	4602      	mov	r2, r0
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	490a      	ldr	r1, [pc, #40]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 80049f0:	5ccb      	ldrb	r3, [r1, r3]
 80049f2:	fa22 f303 	lsr.w	r3, r2, r3
 80049f6:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd f96e 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023c00 	.word	0x40023c00
 8004a14:	40023800 	.word	0x40023800
 8004a18:	0800abe4 	.word	0x0800abe4
 8004a1c:	20000000 	.word	0x20000000
 8004a20:	20000004 	.word	0x20000004

08004a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a28:	b090      	sub	sp, #64	; 0x40
 8004a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a30:	2300      	movs	r3, #0
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a34:	2300      	movs	r3, #0
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a3c:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d00d      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x40>
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	f200 80a1 	bhi.w	8004b90 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x34>
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d003      	beq.n	8004a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a56:	e09b      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a58:	4b53      	ldr	r3, [pc, #332]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a5c:	e09b      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a5e:	4b53      	ldr	r3, [pc, #332]	; (8004bac <HAL_RCC_GetSysClockFreq+0x188>)
 8004a60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a62:	e098      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a64:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a6e:	4b4d      	ldr	r3, [pc, #308]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d028      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	099b      	lsrs	r3, r3, #6
 8004a80:	2200      	movs	r2, #0
 8004a82:	623b      	str	r3, [r7, #32]
 8004a84:	627a      	str	r2, [r7, #36]	; 0x24
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4b47      	ldr	r3, [pc, #284]	; (8004bac <HAL_RCC_GetSysClockFreq+0x188>)
 8004a90:	fb03 f201 	mul.w	r2, r3, r1
 8004a94:	2300      	movs	r3, #0
 8004a96:	fb00 f303 	mul.w	r3, r0, r3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	4a43      	ldr	r2, [pc, #268]	; (8004bac <HAL_RCC_GetSysClockFreq+0x188>)
 8004a9e:	fba0 1202 	umull	r1, r2, r0, r2
 8004aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aa4:	460a      	mov	r2, r1
 8004aa6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aaa:	4413      	add	r3, r2
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	61bb      	str	r3, [r7, #24]
 8004ab4:	61fa      	str	r2, [r7, #28]
 8004ab6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004abe:	f7fb fbdf 	bl	8000280 <__aeabi_uldivmod>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aca:	e053      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004acc:	4b35      	ldr	r3, [pc, #212]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	099b      	lsrs	r3, r3, #6
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	617a      	str	r2, [r7, #20]
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ade:	f04f 0b00 	mov.w	fp, #0
 8004ae2:	4652      	mov	r2, sl
 8004ae4:	465b      	mov	r3, fp
 8004ae6:	f04f 0000 	mov.w	r0, #0
 8004aea:	f04f 0100 	mov.w	r1, #0
 8004aee:	0159      	lsls	r1, r3, #5
 8004af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af4:	0150      	lsls	r0, r2, #5
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	ebb2 080a 	subs.w	r8, r2, sl
 8004afe:	eb63 090b 	sbc.w	r9, r3, fp
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b16:	ebb2 0408 	subs.w	r4, r2, r8
 8004b1a:	eb63 0509 	sbc.w	r5, r3, r9
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	00eb      	lsls	r3, r5, #3
 8004b28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2c:	00e2      	lsls	r2, r4, #3
 8004b2e:	4614      	mov	r4, r2
 8004b30:	461d      	mov	r5, r3
 8004b32:	eb14 030a 	adds.w	r3, r4, sl
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	eb45 030b 	adc.w	r3, r5, fp
 8004b3c:	607b      	str	r3, [r7, #4]
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	028b      	lsls	r3, r1, #10
 8004b4e:	4621      	mov	r1, r4
 8004b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b54:	4621      	mov	r1, r4
 8004b56:	028a      	lsls	r2, r1, #10
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	2200      	movs	r2, #0
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	60fa      	str	r2, [r7, #12]
 8004b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b68:	f7fb fb8a 	bl	8000280 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4613      	mov	r3, r2
 8004b72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	0c1b      	lsrs	r3, r3, #16
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b8e:	e002      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3740      	adds	r7, #64	; 0x40
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	00f42400 	.word	0x00f42400
 8004bac:	017d7840 	.word	0x017d7840

08004bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000000 	.word	0x20000000

08004bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bcc:	f7ff fff0 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0a9b      	lsrs	r3, r3, #10
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	4903      	ldr	r1, [pc, #12]	; (8004bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bde:	5ccb      	ldrb	r3, [r1, r3]
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40023800 	.word	0x40023800
 8004bec:	0800abf4 	.word	0x0800abf4

08004bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bf4:	f7ff ffdc 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0b5b      	lsrs	r3, r3, #13
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4903      	ldr	r1, [pc, #12]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023800 	.word	0x40023800
 8004c14:	0800abf4 	.word	0x0800abf4

08004c18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	220f      	movs	r2, #15
 8004c26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c28:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0203 	and.w	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c34:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <HAL_RCC_GetClockConfig+0x5c>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <HAL_RCC_GetClockConfig+0x5c>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c4c:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <HAL_RCC_GetClockConfig+0x5c>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	08db      	lsrs	r3, r3, #3
 8004c52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <HAL_RCC_GetClockConfig+0x60>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0207 	and.w	r2, r3, #7
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800
 8004c78:	40023c00 	.word	0x40023c00

08004c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e041      	b.n	8004d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc fec8 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f001 f864 	bl	8005d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d001      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e044      	b.n	8004dbe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <HAL_TIM_Base_Start_IT+0xb0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d018      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x6c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5e:	d013      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x6c>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00e      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x6c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a19      	ldr	r2, [pc, #100]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d009      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x6c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a17      	ldr	r2, [pc, #92]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x6c>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a16      	ldr	r2, [pc, #88]	; (8004ddc <HAL_TIM_Base_Start_IT+0xc0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d111      	bne.n	8004dac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b06      	cmp	r3, #6
 8004d98:	d010      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004daa:	e007      	b.n	8004dbc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800
 8004dd8:	40000c00 	.word	0x40000c00
 8004ddc:	40014000 	.word	0x40014000

08004de0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e041      	b.n	8004e76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f839 	bl	8004e7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f000 ffb2 	bl	8005d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d109      	bne.n	8004eb8 <HAL_TIM_PWM_Start+0x24>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	bf14      	ite	ne
 8004eb0:	2301      	movne	r3, #1
 8004eb2:	2300      	moveq	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e022      	b.n	8004efe <HAL_TIM_PWM_Start+0x6a>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d109      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0x3e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	bf14      	ite	ne
 8004eca:	2301      	movne	r3, #1
 8004ecc:	2300      	moveq	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	e015      	b.n	8004efe <HAL_TIM_PWM_Start+0x6a>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d109      	bne.n	8004eec <HAL_TIM_PWM_Start+0x58>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	e008      	b.n	8004efe <HAL_TIM_PWM_Start+0x6a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	bf14      	ite	ne
 8004ef8:	2301      	movne	r3, #1
 8004efa:	2300      	moveq	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e068      	b.n	8004fd8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_PWM_Start+0x82>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f14:	e013      	b.n	8004f3e <HAL_TIM_PWM_Start+0xaa>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x92>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f24:	e00b      	b.n	8004f3e <HAL_TIM_PWM_Start+0xaa>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_PWM_Start+0xa2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f34:	e003      	b.n	8004f3e <HAL_TIM_PWM_Start+0xaa>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2201      	movs	r2, #1
 8004f44:	6839      	ldr	r1, [r7, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 fae2 	bl	8006510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <HAL_TIM_PWM_Start+0x14c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d107      	bne.n	8004f66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <HAL_TIM_PWM_Start+0x14c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d018      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0x10e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f78:	d013      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0x10e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_TIM_PWM_Start+0x150>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00e      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0x10e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <HAL_TIM_PWM_Start+0x154>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d009      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0x10e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a16      	ldr	r2, [pc, #88]	; (8004fec <HAL_TIM_PWM_Start+0x158>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0x10e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <HAL_TIM_PWM_Start+0x15c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d111      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b06      	cmp	r3, #6
 8004fb2:	d010      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc4:	e007      	b.n	8004fd6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800
 8004fec:	40000c00 	.word	0x40000c00
 8004ff0:	40014000 	.word	0x40014000

08004ff4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2200      	movs	r2, #0
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f001 fa82 	bl	8006510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a29      	ldr	r2, [pc, #164]	; (80050b8 <HAL_TIM_PWM_Stop+0xc4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d117      	bne.n	8005046 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005020:	4013      	ands	r3, r2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10f      	bne.n	8005046 <HAL_TIM_PWM_Stop+0x52>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	f240 4344 	movw	r3, #1092	; 0x444
 8005030:	4013      	ands	r3, r2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d107      	bne.n	8005046 <HAL_TIM_PWM_Stop+0x52>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <HAL_TIM_PWM_Stop+0x82>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a1a      	ldr	r2, [r3, #32]
 800505c:	f240 4344 	movw	r3, #1092	; 0x444
 8005060:	4013      	ands	r3, r2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <HAL_TIM_PWM_Stop+0x82>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <HAL_TIM_PWM_Stop+0x92>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005084:	e013      	b.n	80050ae <HAL_TIM_PWM_Stop+0xba>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d104      	bne.n	8005096 <HAL_TIM_PWM_Stop+0xa2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005094:	e00b      	b.n	80050ae <HAL_TIM_PWM_Stop+0xba>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_PWM_Stop+0xb2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a4:	e003      	b.n	80050ae <HAL_TIM_PWM_Stop+0xba>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40010000 	.word	0x40010000

080050bc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <HAL_TIM_PWM_Start_IT+0x28>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	e022      	b.n	800512a <HAL_TIM_PWM_Start_IT+0x6e>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d109      	bne.n	80050fe <HAL_TIM_PWM_Start_IT+0x42>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	bf14      	ite	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	2300      	moveq	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	e015      	b.n	800512a <HAL_TIM_PWM_Start_IT+0x6e>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d109      	bne.n	8005118 <HAL_TIM_PWM_Start_IT+0x5c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e008      	b.n	800512a <HAL_TIM_PWM_Start_IT+0x6e>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e0b3      	b.n	800529a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <HAL_TIM_PWM_Start_IT+0x86>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005140:	e013      	b.n	800516a <HAL_TIM_PWM_Start_IT+0xae>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b04      	cmp	r3, #4
 8005146:	d104      	bne.n	8005152 <HAL_TIM_PWM_Start_IT+0x96>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005150:	e00b      	b.n	800516a <HAL_TIM_PWM_Start_IT+0xae>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d104      	bne.n	8005162 <HAL_TIM_PWM_Start_IT+0xa6>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005160:	e003      	b.n	800516a <HAL_TIM_PWM_Start_IT+0xae>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b0c      	cmp	r3, #12
 800516e:	d841      	bhi.n	80051f4 <HAL_TIM_PWM_Start_IT+0x138>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051f5 	.word	0x080051f5
 8005180:	080051f5 	.word	0x080051f5
 8005184:	080051f5 	.word	0x080051f5
 8005188:	080051bf 	.word	0x080051bf
 800518c:	080051f5 	.word	0x080051f5
 8005190:	080051f5 	.word	0x080051f5
 8005194:	080051f5 	.word	0x080051f5
 8005198:	080051d1 	.word	0x080051d1
 800519c:	080051f5 	.word	0x080051f5
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	080051f5 	.word	0x080051f5
 80051a8:	080051e3 	.word	0x080051e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0202 	orr.w	r2, r2, #2
 80051ba:	60da      	str	r2, [r3, #12]
      break;
 80051bc:	e01d      	b.n	80051fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0204 	orr.w	r2, r2, #4
 80051cc:	60da      	str	r2, [r3, #12]
      break;
 80051ce:	e014      	b.n	80051fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0208 	orr.w	r2, r2, #8
 80051de:	60da      	str	r2, [r3, #12]
      break;
 80051e0:	e00b      	b.n	80051fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0210 	orr.w	r2, r2, #16
 80051f0:	60da      	str	r2, [r3, #12]
      break;
 80051f2:	e002      	b.n	80051fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
      break;
 80051f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d14b      	bne.n	8005298 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2201      	movs	r2, #1
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f001 f981 	bl	8006510 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a24      	ldr	r2, [pc, #144]	; (80052a4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d107      	bne.n	8005228 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005226:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d018      	beq.n	8005264 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d013      	beq.n	8005264 <HAL_TIM_PWM_Start_IT+0x1a8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00e      	beq.n	8005264 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_TIM_PWM_Start_IT+0x1f0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_TIM_PWM_Start_IT+0x1a8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d111      	bne.n	8005288 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b06      	cmp	r3, #6
 8005274:	d010      	beq.n	8005298 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005286:	e007      	b.n	8005298 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40014000 	.word	0x40014000

080052b8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b0c      	cmp	r3, #12
 80052ca:	d841      	bhi.n	8005350 <HAL_TIM_PWM_Stop_IT+0x98>
 80052cc:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	08005309 	.word	0x08005309
 80052d8:	08005351 	.word	0x08005351
 80052dc:	08005351 	.word	0x08005351
 80052e0:	08005351 	.word	0x08005351
 80052e4:	0800531b 	.word	0x0800531b
 80052e8:	08005351 	.word	0x08005351
 80052ec:	08005351 	.word	0x08005351
 80052f0:	08005351 	.word	0x08005351
 80052f4:	0800532d 	.word	0x0800532d
 80052f8:	08005351 	.word	0x08005351
 80052fc:	08005351 	.word	0x08005351
 8005300:	08005351 	.word	0x08005351
 8005304:	0800533f 	.word	0x0800533f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0202 	bic.w	r2, r2, #2
 8005316:	60da      	str	r2, [r3, #12]
      break;
 8005318:	e01d      	b.n	8005356 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0204 	bic.w	r2, r2, #4
 8005328:	60da      	str	r2, [r3, #12]
      break;
 800532a:	e014      	b.n	8005356 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0208 	bic.w	r2, r2, #8
 800533a:	60da      	str	r2, [r3, #12]
      break;
 800533c:	e00b      	b.n	8005356 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0210 	bic.w	r2, r2, #16
 800534c:	60da      	str	r2, [r3, #12]
      break;
 800534e:	e002      	b.n	8005356 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
      break;
 8005354:	bf00      	nop
  }

  if (status == HAL_OK)
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d157      	bne.n	800540c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2200      	movs	r2, #0
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f001 f8d3 	bl	8006510 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2a      	ldr	r2, [pc, #168]	; (8005418 <HAL_TIM_PWM_Stop_IT+0x160>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d117      	bne.n	80053a4 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6a1a      	ldr	r2, [r3, #32]
 800537a:	f241 1311 	movw	r3, #4369	; 0x1111
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10f      	bne.n	80053a4 <HAL_TIM_PWM_Stop_IT+0xec>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	f240 4344 	movw	r3, #1092	; 0x444
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_PWM_Stop_IT+0xec>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6a1a      	ldr	r2, [r3, #32]
 80053aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80053ae:	4013      	ands	r3, r2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10f      	bne.n	80053d4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	f240 4344 	movw	r3, #1092	; 0x444
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d107      	bne.n	80053d4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <HAL_TIM_PWM_Stop_IT+0x12c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e2:	e013      	b.n	800540c <HAL_TIM_PWM_Stop_IT+0x154>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d104      	bne.n	80053f4 <HAL_TIM_PWM_Stop_IT+0x13c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f2:	e00b      	b.n	800540c <HAL_TIM_PWM_Stop_IT+0x154>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d104      	bne.n	8005404 <HAL_TIM_PWM_Stop_IT+0x14c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005402:	e003      	b.n	800540c <HAL_TIM_PWM_Stop_IT+0x154>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40010000 	.word	0x40010000

0800541c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e041      	b.n	80054b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f839 	bl	80054ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f000 fc94 	bl	8005d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_IC_Start_IT+0x1e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	e013      	b.n	8005516 <HAL_TIM_IC_Start_IT+0x46>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_IC_Start_IT+0x2e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	e00b      	b.n	8005516 <HAL_TIM_IC_Start_IT+0x46>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d104      	bne.n	800550e <HAL_TIM_IC_Start_IT+0x3e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550a:	b2db      	uxtb	r3, r3
 800550c:	e003      	b.n	8005516 <HAL_TIM_IC_Start_IT+0x46>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005514:	b2db      	uxtb	r3, r3
 8005516:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <HAL_TIM_IC_Start_IT+0x58>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005524:	b2db      	uxtb	r3, r3
 8005526:	e013      	b.n	8005550 <HAL_TIM_IC_Start_IT+0x80>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b04      	cmp	r3, #4
 800552c:	d104      	bne.n	8005538 <HAL_TIM_IC_Start_IT+0x68>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005534:	b2db      	uxtb	r3, r3
 8005536:	e00b      	b.n	8005550 <HAL_TIM_IC_Start_IT+0x80>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b08      	cmp	r3, #8
 800553c:	d104      	bne.n	8005548 <HAL_TIM_IC_Start_IT+0x78>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005544:	b2db      	uxtb	r3, r3
 8005546:	e003      	b.n	8005550 <HAL_TIM_IC_Start_IT+0x80>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800554e:	b2db      	uxtb	r3, r3
 8005550:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005552:	7bbb      	ldrb	r3, [r7, #14]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d102      	bne.n	800555e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005558:	7b7b      	ldrb	r3, [r7, #13]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d001      	beq.n	8005562 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0c2      	b.n	80056e8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d104      	bne.n	8005572 <HAL_TIM_IC_Start_IT+0xa2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005570:	e013      	b.n	800559a <HAL_TIM_IC_Start_IT+0xca>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b04      	cmp	r3, #4
 8005576:	d104      	bne.n	8005582 <HAL_TIM_IC_Start_IT+0xb2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005580:	e00b      	b.n	800559a <HAL_TIM_IC_Start_IT+0xca>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b08      	cmp	r3, #8
 8005586:	d104      	bne.n	8005592 <HAL_TIM_IC_Start_IT+0xc2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005590:	e003      	b.n	800559a <HAL_TIM_IC_Start_IT+0xca>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d104      	bne.n	80055aa <HAL_TIM_IC_Start_IT+0xda>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a8:	e013      	b.n	80055d2 <HAL_TIM_IC_Start_IT+0x102>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_IC_Start_IT+0xea>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055b8:	e00b      	b.n	80055d2 <HAL_TIM_IC_Start_IT+0x102>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d104      	bne.n	80055ca <HAL_TIM_IC_Start_IT+0xfa>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c8:	e003      	b.n	80055d2 <HAL_TIM_IC_Start_IT+0x102>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b0c      	cmp	r3, #12
 80055d6:	d841      	bhi.n	800565c <HAL_TIM_IC_Start_IT+0x18c>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <HAL_TIM_IC_Start_IT+0x110>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	08005615 	.word	0x08005615
 80055e4:	0800565d 	.word	0x0800565d
 80055e8:	0800565d 	.word	0x0800565d
 80055ec:	0800565d 	.word	0x0800565d
 80055f0:	08005627 	.word	0x08005627
 80055f4:	0800565d 	.word	0x0800565d
 80055f8:	0800565d 	.word	0x0800565d
 80055fc:	0800565d 	.word	0x0800565d
 8005600:	08005639 	.word	0x08005639
 8005604:	0800565d 	.word	0x0800565d
 8005608:	0800565d 	.word	0x0800565d
 800560c:	0800565d 	.word	0x0800565d
 8005610:	0800564b 	.word	0x0800564b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0202 	orr.w	r2, r2, #2
 8005622:	60da      	str	r2, [r3, #12]
      break;
 8005624:	e01d      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0204 	orr.w	r2, r2, #4
 8005634:	60da      	str	r2, [r3, #12]
      break;
 8005636:	e014      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0208 	orr.w	r2, r2, #8
 8005646:	60da      	str	r2, [r3, #12]
      break;
 8005648:	e00b      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0210 	orr.w	r2, r2, #16
 8005658:	60da      	str	r2, [r3, #12]
      break;
 800565a:	e002      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
      break;
 8005660:	bf00      	nop
  }

  if (status == HAL_OK)
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d13e      	bne.n	80056e6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2201      	movs	r2, #1
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 ff4d 	bl	8006510 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <HAL_TIM_IC_Start_IT+0x220>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d018      	beq.n	80056b2 <HAL_TIM_IC_Start_IT+0x1e2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005688:	d013      	beq.n	80056b2 <HAL_TIM_IC_Start_IT+0x1e2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a19      	ldr	r2, [pc, #100]	; (80056f4 <HAL_TIM_IC_Start_IT+0x224>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00e      	beq.n	80056b2 <HAL_TIM_IC_Start_IT+0x1e2>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <HAL_TIM_IC_Start_IT+0x228>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d009      	beq.n	80056b2 <HAL_TIM_IC_Start_IT+0x1e2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a16      	ldr	r2, [pc, #88]	; (80056fc <HAL_TIM_IC_Start_IT+0x22c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_TIM_IC_Start_IT+0x1e2>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a14      	ldr	r2, [pc, #80]	; (8005700 <HAL_TIM_IC_Start_IT+0x230>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d111      	bne.n	80056d6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b06      	cmp	r3, #6
 80056c2:	d010      	beq.n	80056e6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	e007      	b.n	80056e6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0201 	orr.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40014000 	.word	0x40014000

08005704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b02      	cmp	r3, #2
 8005718:	d122      	bne.n	8005760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b02      	cmp	r3, #2
 8005726:	d11b      	bne.n	8005760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0202 	mvn.w	r2, #2
 8005730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fb fbb8 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800574c:	e005      	b.n	800575a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fb05 	bl	8005d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7fb fbcb 	bl	8000ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b04      	cmp	r3, #4
 800576c:	d122      	bne.n	80057b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b04      	cmp	r3, #4
 800577a:	d11b      	bne.n	80057b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0204 	mvn.w	r2, #4
 8005784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fb fb8e 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fadb 	bl	8005d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7fb fba1 	bl	8000ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d122      	bne.n	8005808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d11b      	bne.n	8005808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0208 	mvn.w	r2, #8
 80057d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2204      	movs	r2, #4
 80057de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fb fb64 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fab1 	bl	8005d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fb fb77 	bl	8000ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b10      	cmp	r3, #16
 8005814:	d122      	bne.n	800585c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b10      	cmp	r3, #16
 8005822:	d11b      	bne.n	800585c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0210 	mvn.w	r2, #16
 800582c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2208      	movs	r2, #8
 8005832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fb fb3a 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa87 	bl	8005d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7fb fb4d 	bl	8000ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b01      	cmp	r3, #1
 8005868:	d10e      	bne.n	8005888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d107      	bne.n	8005888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0201 	mvn.w	r2, #1
 8005880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fb fd0e 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d10e      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a0:	2b80      	cmp	r3, #128	; 0x80
 80058a2:	d107      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fecc 	bl	800664c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d10e      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d107      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa49 	bl	8005d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d10e      	bne.n	800590c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d107      	bne.n	800590c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0220 	mvn.w	r2, #32
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fe96 	bl	8006638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_TIM_IC_ConfigChannel+0x1e>
 800592e:	2302      	movs	r3, #2
 8005930:	e088      	b.n	8005a44 <HAL_TIM_IC_ConfigChannel+0x130>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11b      	bne.n	8005978 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6819      	ldr	r1, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f000 fc26 	bl	80061a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 020c 	bic.w	r2, r2, #12
 8005962:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6999      	ldr	r1, [r3, #24]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	619a      	str	r2, [r3, #24]
 8005976:	e060      	b.n	8005a3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b04      	cmp	r3, #4
 800597c:	d11c      	bne.n	80059b8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f000 fc9e 	bl	80062ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6999      	ldr	r1, [r3, #24]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	021a      	lsls	r2, r3, #8
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	619a      	str	r2, [r3, #24]
 80059b6:	e040      	b.n	8005a3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d11b      	bne.n	80059f6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6819      	ldr	r1, [r3, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f000 fceb 	bl	80063a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 020c 	bic.w	r2, r2, #12
 80059e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69d9      	ldr	r1, [r3, #28]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	61da      	str	r2, [r3, #28]
 80059f4:	e021      	b.n	8005a3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b0c      	cmp	r3, #12
 80059fa:	d11c      	bne.n	8005a36 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f000 fd08 	bl	8006420 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a1e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69d9      	ldr	r1, [r3, #28]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	021a      	lsls	r2, r3, #8
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	61da      	str	r2, [r3, #28]
 8005a34:	e001      	b.n	8005a3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e0ae      	b.n	8005bc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b0c      	cmp	r3, #12
 8005a76:	f200 809f 	bhi.w	8005bb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a7a:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005ab5 	.word	0x08005ab5
 8005a84:	08005bb9 	.word	0x08005bb9
 8005a88:	08005bb9 	.word	0x08005bb9
 8005a8c:	08005bb9 	.word	0x08005bb9
 8005a90:	08005af5 	.word	0x08005af5
 8005a94:	08005bb9 	.word	0x08005bb9
 8005a98:	08005bb9 	.word	0x08005bb9
 8005a9c:	08005bb9 	.word	0x08005bb9
 8005aa0:	08005b37 	.word	0x08005b37
 8005aa4:	08005bb9 	.word	0x08005bb9
 8005aa8:	08005bb9 	.word	0x08005bb9
 8005aac:	08005bb9 	.word	0x08005bb9
 8005ab0:	08005b77 	.word	0x08005b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f9e4 	bl	8005e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0208 	orr.w	r2, r2, #8
 8005ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0204 	bic.w	r2, r2, #4
 8005ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6999      	ldr	r1, [r3, #24]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	619a      	str	r2, [r3, #24]
      break;
 8005af2:	e064      	b.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fa2a 	bl	8005f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6999      	ldr	r1, [r3, #24]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	021a      	lsls	r2, r3, #8
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	619a      	str	r2, [r3, #24]
      break;
 8005b34:	e043      	b.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fa75 	bl	800602c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0208 	orr.w	r2, r2, #8
 8005b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0204 	bic.w	r2, r2, #4
 8005b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69d9      	ldr	r1, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	61da      	str	r2, [r3, #28]
      break;
 8005b74:	e023      	b.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fabf 	bl	8006100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69d9      	ldr	r1, [r3, #28]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	021a      	lsls	r2, r3, #8
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	61da      	str	r2, [r3, #28]
      break;
 8005bb6:	e002      	b.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	75fb      	strb	r3, [r7, #23]
      break;
 8005bbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_TIM_ConfigClockSource+0x1c>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e0b4      	b.n	8005d56 <HAL_TIM_ConfigClockSource+0x186>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c24:	d03e      	beq.n	8005ca4 <HAL_TIM_ConfigClockSource+0xd4>
 8005c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2a:	f200 8087 	bhi.w	8005d3c <HAL_TIM_ConfigClockSource+0x16c>
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c32:	f000 8086 	beq.w	8005d42 <HAL_TIM_ConfigClockSource+0x172>
 8005c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3a:	d87f      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x16c>
 8005c3c:	2b70      	cmp	r3, #112	; 0x70
 8005c3e:	d01a      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0xa6>
 8005c40:	2b70      	cmp	r3, #112	; 0x70
 8005c42:	d87b      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x16c>
 8005c44:	2b60      	cmp	r3, #96	; 0x60
 8005c46:	d050      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x11a>
 8005c48:	2b60      	cmp	r3, #96	; 0x60
 8005c4a:	d877      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x16c>
 8005c4c:	2b50      	cmp	r3, #80	; 0x50
 8005c4e:	d03c      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0xfa>
 8005c50:	2b50      	cmp	r3, #80	; 0x50
 8005c52:	d873      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x16c>
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d058      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0x13a>
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d86f      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x16c>
 8005c5c:	2b30      	cmp	r3, #48	; 0x30
 8005c5e:	d064      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15a>
 8005c60:	2b30      	cmp	r3, #48	; 0x30
 8005c62:	d86b      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x16c>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d060      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15a>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d867      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x16c>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d05c      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15a>
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d05a      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15a>
 8005c74:	e062      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6899      	ldr	r1, [r3, #8]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f000 fc23 	bl	80064d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	609a      	str	r2, [r3, #8]
      break;
 8005ca2:	e04f      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	6899      	ldr	r1, [r3, #8]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f000 fc0c 	bl	80064d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc6:	609a      	str	r2, [r3, #8]
      break;
 8005cc8:	e03c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6859      	ldr	r1, [r3, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f000 faca 	bl	8006270 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2150      	movs	r1, #80	; 0x50
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fbd9 	bl	800649a <TIM_ITRx_SetConfig>
      break;
 8005ce8:	e02c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6859      	ldr	r1, [r3, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f000 fb26 	bl	8006348 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2160      	movs	r1, #96	; 0x60
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fbc9 	bl	800649a <TIM_ITRx_SetConfig>
      break;
 8005d08:	e01c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 faaa 	bl	8006270 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2140      	movs	r1, #64	; 0x40
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fbb9 	bl	800649a <TIM_ITRx_SetConfig>
      break;
 8005d28:	e00c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f000 fbb0 	bl	800649a <TIM_ITRx_SetConfig>
      break;
 8005d3a:	e003      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d40:	e000      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a34      	ldr	r2, [pc, #208]	; (8005e6c <TIM_Base_SetConfig+0xe4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00f      	beq.n	8005dc0 <TIM_Base_SetConfig+0x38>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da6:	d00b      	beq.n	8005dc0 <TIM_Base_SetConfig+0x38>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a31      	ldr	r2, [pc, #196]	; (8005e70 <TIM_Base_SetConfig+0xe8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d007      	beq.n	8005dc0 <TIM_Base_SetConfig+0x38>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a30      	ldr	r2, [pc, #192]	; (8005e74 <TIM_Base_SetConfig+0xec>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_Base_SetConfig+0x38>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a2f      	ldr	r2, [pc, #188]	; (8005e78 <TIM_Base_SetConfig+0xf0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d108      	bne.n	8005dd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a25      	ldr	r2, [pc, #148]	; (8005e6c <TIM_Base_SetConfig+0xe4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01b      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de0:	d017      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <TIM_Base_SetConfig+0xe8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a21      	ldr	r2, [pc, #132]	; (8005e74 <TIM_Base_SetConfig+0xec>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00f      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a20      	ldr	r2, [pc, #128]	; (8005e78 <TIM_Base_SetConfig+0xf0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00b      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <TIM_Base_SetConfig+0xf4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1e      	ldr	r2, [pc, #120]	; (8005e80 <TIM_Base_SetConfig+0xf8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <TIM_Base_SetConfig+0xfc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d108      	bne.n	8005e24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <TIM_Base_SetConfig+0xe4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d103      	bne.n	8005e58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	615a      	str	r2, [r3, #20]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40000c00 	.word	0x40000c00
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f023 0201 	bic.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f023 0302 	bic.w	r3, r3, #2
 8005ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a1c      	ldr	r2, [pc, #112]	; (8005f50 <TIM_OC1_SetConfig+0xc8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d10c      	bne.n	8005efe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f023 0308 	bic.w	r3, r3, #8
 8005eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f023 0304 	bic.w	r3, r3, #4
 8005efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a13      	ldr	r2, [pc, #76]	; (8005f50 <TIM_OC1_SetConfig+0xc8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d111      	bne.n	8005f2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40010000 	.word	0x40010000

08005f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0210 	bic.w	r2, r3, #16
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0320 	bic.w	r3, r3, #32
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <TIM_OC2_SetConfig+0xd4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d10d      	bne.n	8005fd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a15      	ldr	r2, [pc, #84]	; (8006028 <TIM_OC2_SetConfig+0xd4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d113      	bne.n	8006000 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000

0800602c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1d      	ldr	r2, [pc, #116]	; (80060fc <TIM_OC3_SetConfig+0xd0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d10d      	bne.n	80060a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a14      	ldr	r2, [pc, #80]	; (80060fc <TIM_OC3_SetConfig+0xd0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d113      	bne.n	80060d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	40010000 	.word	0x40010000

08006100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800614a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	031b      	lsls	r3, r3, #12
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a10      	ldr	r2, [pc, #64]	; (800619c <TIM_OC4_SetConfig+0x9c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d109      	bne.n	8006174 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	019b      	lsls	r3, r3, #6
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40010000 	.word	0x40010000

080061a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0201 	bic.w	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4a24      	ldr	r2, [pc, #144]	; (800625c <TIM_TI1_SetConfig+0xbc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <TIM_TI1_SetConfig+0x56>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d4:	d00f      	beq.n	80061f6 <TIM_TI1_SetConfig+0x56>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4a21      	ldr	r2, [pc, #132]	; (8006260 <TIM_TI1_SetConfig+0xc0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00b      	beq.n	80061f6 <TIM_TI1_SetConfig+0x56>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a20      	ldr	r2, [pc, #128]	; (8006264 <TIM_TI1_SetConfig+0xc4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d007      	beq.n	80061f6 <TIM_TI1_SetConfig+0x56>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <TIM_TI1_SetConfig+0xc8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d003      	beq.n	80061f6 <TIM_TI1_SetConfig+0x56>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a1e      	ldr	r2, [pc, #120]	; (800626c <TIM_TI1_SetConfig+0xcc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d101      	bne.n	80061fa <TIM_TI1_SetConfig+0x5a>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <TIM_TI1_SetConfig+0x5c>
 80061fa:	2300      	movs	r3, #0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0303 	bic.w	r3, r3, #3
 8006206:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e003      	b.n	800621a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	b2db      	uxtb	r3, r3
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f023 030a 	bic.w	r3, r3, #10
 8006234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f003 030a 	and.w	r3, r3, #10
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800
 8006268:	40000c00 	.word	0x40000c00
 800626c:	40014000 	.word	0x40014000

08006270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	f023 0201 	bic.w	r2, r3, #1
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800629a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f023 030a 	bic.w	r3, r3, #10
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b087      	sub	sp, #28
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
 80062da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f023 0210 	bic.w	r2, r3, #16
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800630c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	031b      	lsls	r3, r3, #12
 8006312:	b29b      	uxth	r3, r3
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006320:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	621a      	str	r2, [r3, #32]
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	f023 0210 	bic.w	r2, r3, #16
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006372:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	031b      	lsls	r3, r3, #12
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006384:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	bf00      	nop
 800639e:	371c      	adds	r7, #28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 0303 	bic.w	r3, r3, #3
 80063d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80063f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	621a      	str	r2, [r3, #32]
}
 8006414:	bf00      	nop
 8006416:	371c      	adds	r7, #28
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	021b      	lsls	r3, r3, #8
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800645e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	031b      	lsls	r3, r3, #12
 8006464:	b29b      	uxth	r3, r3
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006472:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	031b      	lsls	r3, r3, #12
 8006478:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f043 0307 	orr.w	r3, r3, #7
 80064bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	609a      	str	r2, [r3, #8]
}
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	021a      	lsls	r2, r3, #8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	609a      	str	r2, [r3, #8]
}
 8006504:	bf00      	nop
 8006506:	371c      	adds	r7, #28
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	2201      	movs	r2, #1
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a1a      	ldr	r2, [r3, #32]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	43db      	mvns	r3, r3
 8006532:	401a      	ands	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a1a      	ldr	r2, [r3, #32]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	431a      	orrs	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006570:	2302      	movs	r3, #2
 8006572:	e050      	b.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1c      	ldr	r2, [pc, #112]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d018      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c0:	d013      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a18      	ldr	r2, [pc, #96]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00e      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a16      	ldr	r2, [pc, #88]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d009      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a15      	ldr	r2, [pc, #84]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d004      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a13      	ldr	r2, [pc, #76]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d10c      	bne.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40010000 	.word	0x40010000
 8006628:	40000400 	.word	0x40000400
 800662c:	40000800 	.word	0x40000800
 8006630:	40000c00 	.word	0x40000c00
 8006634:	40014000 	.word	0x40014000

08006638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e03f      	b.n	80066f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fb fada 	bl	8001c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2224      	movs	r2, #36	; 0x24
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fd7b 	bl	80071a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b08a      	sub	sp, #40	; 0x28
 80066fe:	af02      	add	r7, sp, #8
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b20      	cmp	r3, #32
 8006718:	d17c      	bne.n	8006814 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <HAL_UART_Transmit+0x2c>
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e075      	b.n	8006816 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_UART_Transmit+0x3e>
 8006734:	2302      	movs	r3, #2
 8006736:	e06e      	b.n	8006816 <HAL_UART_Transmit+0x11c>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2221      	movs	r2, #33	; 0x21
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800674e:	f7fb fc29 	bl	8001fa4 <HAL_GetTick>
 8006752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	88fa      	ldrh	r2, [r7, #6]
 8006758:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	88fa      	ldrh	r2, [r7, #6]
 800675e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006768:	d108      	bne.n	800677c <HAL_UART_Transmit+0x82>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e003      	b.n	8006784 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006780:	2300      	movs	r3, #0
 8006782:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800678c:	e02a      	b.n	80067e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2200      	movs	r2, #0
 8006796:	2180      	movs	r1, #128	; 0x80
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 faf9 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e036      	b.n	8006816 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10b      	bne.n	80067c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	3302      	adds	r3, #2
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	e007      	b.n	80067d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	3301      	adds	r3, #1
 80067d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1cf      	bne.n	800678e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2200      	movs	r2, #0
 80067f6:	2140      	movs	r1, #64	; 0x40
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fac9 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e006      	b.n	8006816 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	e000      	b.n	8006816 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006814:	2302      	movs	r3, #2
  }
}
 8006816:	4618      	mov	r0, r3
 8006818:	3720      	adds	r7, #32
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b0ba      	sub	sp, #232	; 0xe8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006846:	2300      	movs	r3, #0
 8006848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800685e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10f      	bne.n	8006886 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <HAL_UART_IRQHandler+0x66>
 8006872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fbd3 	bl	800702a <UART_Receive_IT>
      return;
 8006884:	e256      	b.n	8006d34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 80de 	beq.w	8006a4c <HAL_UART_IRQHandler+0x22c>
 8006890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800689c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80d1 	beq.w	8006a4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <HAL_UART_IRQHandler+0xae>
 80068b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0201 	orr.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00b      	beq.n	80068f2 <HAL_UART_IRQHandler+0xd2>
 80068da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f043 0202 	orr.w	r2, r3, #2
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <HAL_UART_IRQHandler+0xf6>
 80068fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d005      	beq.n	8006916 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	f043 0204 	orr.w	r2, r3, #4
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d011      	beq.n	8006946 <HAL_UART_IRQHandler+0x126>
 8006922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800692e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	f043 0208 	orr.w	r2, r3, #8
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 81ed 	beq.w	8006d2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d008      	beq.n	800696e <HAL_UART_IRQHandler+0x14e>
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fb5e 	bl	800702a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <HAL_UART_IRQHandler+0x17a>
 8006992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d04f      	beq.n	8006a3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa66 	bl	8006e6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069aa:	2b40      	cmp	r3, #64	; 0x40
 80069ac:	d141      	bne.n	8006a32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3314      	adds	r3, #20
 80069b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3314      	adds	r3, #20
 80069d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1d9      	bne.n	80069ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d013      	beq.n	8006a2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	4a7d      	ldr	r2, [pc, #500]	; (8006bfc <HAL_UART_IRQHandler+0x3dc>)
 8006a08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fc f91e 	bl	8002c50 <HAL_DMA_Abort_IT>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d016      	beq.n	8006a48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	e00e      	b.n	8006a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f99a 	bl	8006d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a30:	e00a      	b.n	8006a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f996 	bl	8006d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a38:	e006      	b.n	8006a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f992 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a46:	e170      	b.n	8006d2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	bf00      	nop
    return;
 8006a4a:	e16e      	b.n	8006d2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	f040 814a 	bne.w	8006cea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8143 	beq.w	8006cea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 813c 	beq.w	8006cea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	60bb      	str	r3, [r7, #8]
 8006a86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	f040 80b4 	bne.w	8006c00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006aa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8140 	beq.w	8006d2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	f080 8139 	bcs.w	8006d2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ac2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ace:	f000 8088 	beq.w	8006be2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006afe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1d9      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3314      	adds	r3, #20
 8006b24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b30:	f023 0301 	bic.w	r3, r3, #1
 8006b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3314      	adds	r3, #20
 8006b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e1      	bne.n	8006b1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3314      	adds	r3, #20
 8006b60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3314      	adds	r3, #20
 8006b7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e3      	bne.n	8006b5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	330c      	adds	r3, #12
 8006ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb2:	f023 0310 	bic.w	r3, r3, #16
 8006bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006bc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e3      	bne.n	8006ba0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fb ffc7 	bl	8002b70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f8c0 	bl	8006d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bf8:	e099      	b.n	8006d2e <HAL_UART_IRQHandler+0x50e>
 8006bfa:	bf00      	nop
 8006bfc:	08006f33 	.word	0x08006f33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 808b 	beq.w	8006d32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8086 	beq.w	8006d32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	330c      	adds	r3, #12
 8006c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	330c      	adds	r3, #12
 8006c46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c4a:	647a      	str	r2, [r7, #68]	; 0x44
 8006c4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e3      	bne.n	8006c26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3314      	adds	r3, #20
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	f023 0301 	bic.w	r3, r3, #1
 8006c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3314      	adds	r3, #20
 8006c7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c82:	633a      	str	r2, [r7, #48]	; 0x30
 8006c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e3      	bne.n	8006c5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0310 	bic.w	r3, r3, #16
 8006cba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006cc8:	61fa      	str	r2, [r7, #28]
 8006cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	69b9      	ldr	r1, [r7, #24]
 8006cce:	69fa      	ldr	r2, [r7, #28]
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e3      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f848 	bl	8006d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ce8:	e023      	b.n	8006d32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <HAL_UART_IRQHandler+0x4ea>
 8006cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f929 	bl	8006f5a <UART_Transmit_IT>
    return;
 8006d08:	e014      	b.n	8006d34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00e      	beq.n	8006d34 <HAL_UART_IRQHandler+0x514>
 8006d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d008      	beq.n	8006d34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f969 	bl	8006ffa <UART_EndTransmit_IT>
    return;
 8006d28:	e004      	b.n	8006d34 <HAL_UART_IRQHandler+0x514>
    return;
 8006d2a:	bf00      	nop
 8006d2c:	e002      	b.n	8006d34 <HAL_UART_IRQHandler+0x514>
      return;
 8006d2e:	bf00      	nop
 8006d30:	e000      	b.n	8006d34 <HAL_UART_IRQHandler+0x514>
      return;
 8006d32:	bf00      	nop
  }
}
 8006d34:	37e8      	adds	r7, #232	; 0xe8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop

08006d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b090      	sub	sp, #64	; 0x40
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da0:	e050      	b.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d04c      	beq.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006db0:	f7fb f8f8 	bl	8001fa4 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d241      	bcs.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	330c      	adds	r3, #12
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	330c      	adds	r3, #12
 8006dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006de0:	637a      	str	r2, [r7, #52]	; 0x34
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e5      	bne.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3314      	adds	r3, #20
 8006dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	613b      	str	r3, [r7, #16]
   return(result);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f023 0301 	bic.w	r3, r3, #1
 8006e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3314      	adds	r3, #20
 8006e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e14:	623a      	str	r2, [r7, #32]
 8006e16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	69f9      	ldr	r1, [r7, #28]
 8006e1a:	6a3a      	ldr	r2, [r7, #32]
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e5      	bne.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e00f      	b.n	8006e64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	bf0c      	ite	eq
 8006e54:	2301      	moveq	r3, #1
 8006e56:	2300      	movne	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	79fb      	ldrb	r3, [r7, #7]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d09f      	beq.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3740      	adds	r7, #64	; 0x40
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b095      	sub	sp, #84	; 0x54
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e94:	643a      	str	r2, [r7, #64]	; 0x40
 8006e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e5      	bne.n	8006e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3314      	adds	r3, #20
 8006eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3314      	adds	r3, #20
 8006ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e5      	bne.n	8006ea8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d119      	bne.n	8006f18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f023 0310 	bic.w	r3, r3, #16
 8006efa:	647b      	str	r3, [r7, #68]	; 0x44
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	330c      	adds	r3, #12
 8006f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f04:	61ba      	str	r2, [r7, #24]
 8006f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6979      	ldr	r1, [r7, #20]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	613b      	str	r3, [r7, #16]
   return(result);
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e5      	bne.n	8006ee4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f26:	bf00      	nop
 8006f28:	3754      	adds	r7, #84	; 0x54
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff ff09 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b21      	cmp	r3, #33	; 0x21
 8006f6c:	d13e      	bne.n	8006fec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f76:	d114      	bne.n	8006fa2 <UART_Transmit_IT+0x48>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d110      	bne.n	8006fa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	1c9a      	adds	r2, r3, #2
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	621a      	str	r2, [r3, #32]
 8006fa0:	e008      	b.n	8006fb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	1c59      	adds	r1, r3, #1
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6211      	str	r1, [r2, #32]
 8006fac:	781a      	ldrb	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10f      	bne.n	8006fe8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fe6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e000      	b.n	8006fee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fec:	2302      	movs	r3, #2
  }
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff fe8e 	bl	8006d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b08c      	sub	sp, #48	; 0x30
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b22      	cmp	r3, #34	; 0x22
 800703c:	f040 80ab 	bne.w	8007196 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007048:	d117      	bne.n	800707a <UART_Receive_IT+0x50>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d113      	bne.n	800707a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007052:	2300      	movs	r3, #0
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007068:	b29a      	uxth	r2, r3
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007072:	1c9a      	adds	r2, r3, #2
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	629a      	str	r2, [r3, #40]	; 0x28
 8007078:	e026      	b.n	80070c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007080:	2300      	movs	r3, #0
 8007082:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708c:	d007      	beq.n	800709e <UART_Receive_IT+0x74>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <UART_Receive_IT+0x82>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d106      	bne.n	80070ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	e008      	b.n	80070be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	4619      	mov	r1, r3
 80070d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d15a      	bne.n	8007192 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0220 	bic.w	r2, r2, #32
 80070ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695a      	ldr	r2, [r3, #20]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0201 	bic.w	r2, r2, #1
 800710a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	2b01      	cmp	r3, #1
 800711a:	d135      	bne.n	8007188 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	330c      	adds	r3, #12
 8007128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	613b      	str	r3, [r7, #16]
   return(result);
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f023 0310 	bic.w	r3, r3, #16
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	330c      	adds	r3, #12
 8007140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007142:	623a      	str	r2, [r7, #32]
 8007144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	69f9      	ldr	r1, [r7, #28]
 8007148:	6a3a      	ldr	r2, [r7, #32]
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e5      	bne.n	8007122 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b10      	cmp	r3, #16
 8007162:	d10a      	bne.n	800717a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fdf9 	bl	8006d78 <HAL_UARTEx_RxEventCallback>
 8007186:	e002      	b.n	800718e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff fde1 	bl	8006d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	e002      	b.n	8007198 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e000      	b.n	8007198 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
  }
}
 8007198:	4618      	mov	r0, r3
 800719a:	3730      	adds	r7, #48	; 0x30
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071a4:	b0c0      	sub	sp, #256	; 0x100
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071bc:	68d9      	ldr	r1, [r3, #12]
 80071be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	ea40 0301 	orr.w	r3, r0, r1
 80071c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	431a      	orrs	r2, r3
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071f8:	f021 010c 	bic.w	r1, r1, #12
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007206:	430b      	orrs	r3, r1
 8007208:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721a:	6999      	ldr	r1, [r3, #24]
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	ea40 0301 	orr.w	r3, r0, r1
 8007226:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4b8f      	ldr	r3, [pc, #572]	; (800746c <UART_SetConfig+0x2cc>)
 8007230:	429a      	cmp	r2, r3
 8007232:	d005      	beq.n	8007240 <UART_SetConfig+0xa0>
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b8d      	ldr	r3, [pc, #564]	; (8007470 <UART_SetConfig+0x2d0>)
 800723c:	429a      	cmp	r2, r3
 800723e:	d104      	bne.n	800724a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007240:	f7fd fcd6 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 8007244:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007248:	e003      	b.n	8007252 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800724a:	f7fd fcbd 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 800724e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800725c:	f040 810c 	bne.w	8007478 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007264:	2200      	movs	r2, #0
 8007266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800726a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800726e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007272:	4622      	mov	r2, r4
 8007274:	462b      	mov	r3, r5
 8007276:	1891      	adds	r1, r2, r2
 8007278:	65b9      	str	r1, [r7, #88]	; 0x58
 800727a:	415b      	adcs	r3, r3
 800727c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800727e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007282:	4621      	mov	r1, r4
 8007284:	eb12 0801 	adds.w	r8, r2, r1
 8007288:	4629      	mov	r1, r5
 800728a:	eb43 0901 	adc.w	r9, r3, r1
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800729a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800729e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072a2:	4690      	mov	r8, r2
 80072a4:	4699      	mov	r9, r3
 80072a6:	4623      	mov	r3, r4
 80072a8:	eb18 0303 	adds.w	r3, r8, r3
 80072ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072b0:	462b      	mov	r3, r5
 80072b2:	eb49 0303 	adc.w	r3, r9, r3
 80072b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072ce:	460b      	mov	r3, r1
 80072d0:	18db      	adds	r3, r3, r3
 80072d2:	653b      	str	r3, [r7, #80]	; 0x50
 80072d4:	4613      	mov	r3, r2
 80072d6:	eb42 0303 	adc.w	r3, r2, r3
 80072da:	657b      	str	r3, [r7, #84]	; 0x54
 80072dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072e4:	f7f8 ffcc 	bl	8000280 <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4b61      	ldr	r3, [pc, #388]	; (8007474 <UART_SetConfig+0x2d4>)
 80072ee:	fba3 2302 	umull	r2, r3, r3, r2
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	011c      	lsls	r4, r3, #4
 80072f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007300:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007304:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007308:	4642      	mov	r2, r8
 800730a:	464b      	mov	r3, r9
 800730c:	1891      	adds	r1, r2, r2
 800730e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007310:	415b      	adcs	r3, r3
 8007312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007314:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007318:	4641      	mov	r1, r8
 800731a:	eb12 0a01 	adds.w	sl, r2, r1
 800731e:	4649      	mov	r1, r9
 8007320:	eb43 0b01 	adc.w	fp, r3, r1
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007330:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007338:	4692      	mov	sl, r2
 800733a:	469b      	mov	fp, r3
 800733c:	4643      	mov	r3, r8
 800733e:	eb1a 0303 	adds.w	r3, sl, r3
 8007342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007346:	464b      	mov	r3, r9
 8007348:	eb4b 0303 	adc.w	r3, fp, r3
 800734c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800735c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007360:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007364:	460b      	mov	r3, r1
 8007366:	18db      	adds	r3, r3, r3
 8007368:	643b      	str	r3, [r7, #64]	; 0x40
 800736a:	4613      	mov	r3, r2
 800736c:	eb42 0303 	adc.w	r3, r2, r3
 8007370:	647b      	str	r3, [r7, #68]	; 0x44
 8007372:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007376:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800737a:	f7f8 ff81 	bl	8000280 <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4611      	mov	r1, r2
 8007384:	4b3b      	ldr	r3, [pc, #236]	; (8007474 <UART_SetConfig+0x2d4>)
 8007386:	fba3 2301 	umull	r2, r3, r3, r1
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	2264      	movs	r2, #100	; 0x64
 800738e:	fb02 f303 	mul.w	r3, r2, r3
 8007392:	1acb      	subs	r3, r1, r3
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800739a:	4b36      	ldr	r3, [pc, #216]	; (8007474 <UART_SetConfig+0x2d4>)
 800739c:	fba3 2302 	umull	r2, r3, r3, r2
 80073a0:	095b      	lsrs	r3, r3, #5
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073a8:	441c      	add	r4, r3
 80073aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073bc:	4642      	mov	r2, r8
 80073be:	464b      	mov	r3, r9
 80073c0:	1891      	adds	r1, r2, r2
 80073c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80073c4:	415b      	adcs	r3, r3
 80073c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073cc:	4641      	mov	r1, r8
 80073ce:	1851      	adds	r1, r2, r1
 80073d0:	6339      	str	r1, [r7, #48]	; 0x30
 80073d2:	4649      	mov	r1, r9
 80073d4:	414b      	adcs	r3, r1
 80073d6:	637b      	str	r3, [r7, #52]	; 0x34
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073e4:	4659      	mov	r1, fp
 80073e6:	00cb      	lsls	r3, r1, #3
 80073e8:	4651      	mov	r1, sl
 80073ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ee:	4651      	mov	r1, sl
 80073f0:	00ca      	lsls	r2, r1, #3
 80073f2:	4610      	mov	r0, r2
 80073f4:	4619      	mov	r1, r3
 80073f6:	4603      	mov	r3, r0
 80073f8:	4642      	mov	r2, r8
 80073fa:	189b      	adds	r3, r3, r2
 80073fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007400:	464b      	mov	r3, r9
 8007402:	460a      	mov	r2, r1
 8007404:	eb42 0303 	adc.w	r3, r2, r3
 8007408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800740c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007418:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800741c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007420:	460b      	mov	r3, r1
 8007422:	18db      	adds	r3, r3, r3
 8007424:	62bb      	str	r3, [r7, #40]	; 0x28
 8007426:	4613      	mov	r3, r2
 8007428:	eb42 0303 	adc.w	r3, r2, r3
 800742c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800742e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007432:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007436:	f7f8 ff23 	bl	8000280 <__aeabi_uldivmod>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <UART_SetConfig+0x2d4>)
 8007440:	fba3 1302 	umull	r1, r3, r3, r2
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	2164      	movs	r1, #100	; 0x64
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	3332      	adds	r3, #50	; 0x32
 8007452:	4a08      	ldr	r2, [pc, #32]	; (8007474 <UART_SetConfig+0x2d4>)
 8007454:	fba2 2303 	umull	r2, r3, r2, r3
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	f003 0207 	and.w	r2, r3, #7
 800745e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4422      	add	r2, r4
 8007466:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007468:	e105      	b.n	8007676 <UART_SetConfig+0x4d6>
 800746a:	bf00      	nop
 800746c:	40011000 	.word	0x40011000
 8007470:	40011400 	.word	0x40011400
 8007474:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800747c:	2200      	movs	r2, #0
 800747e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007482:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007486:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800748a:	4642      	mov	r2, r8
 800748c:	464b      	mov	r3, r9
 800748e:	1891      	adds	r1, r2, r2
 8007490:	6239      	str	r1, [r7, #32]
 8007492:	415b      	adcs	r3, r3
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
 8007496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800749a:	4641      	mov	r1, r8
 800749c:	1854      	adds	r4, r2, r1
 800749e:	4649      	mov	r1, r9
 80074a0:	eb43 0501 	adc.w	r5, r3, r1
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	f04f 0300 	mov.w	r3, #0
 80074ac:	00eb      	lsls	r3, r5, #3
 80074ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074b2:	00e2      	lsls	r2, r4, #3
 80074b4:	4614      	mov	r4, r2
 80074b6:	461d      	mov	r5, r3
 80074b8:	4643      	mov	r3, r8
 80074ba:	18e3      	adds	r3, r4, r3
 80074bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074c0:	464b      	mov	r3, r9
 80074c2:	eb45 0303 	adc.w	r3, r5, r3
 80074c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074e6:	4629      	mov	r1, r5
 80074e8:	008b      	lsls	r3, r1, #2
 80074ea:	4621      	mov	r1, r4
 80074ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074f0:	4621      	mov	r1, r4
 80074f2:	008a      	lsls	r2, r1, #2
 80074f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074f8:	f7f8 fec2 	bl	8000280 <__aeabi_uldivmod>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4b60      	ldr	r3, [pc, #384]	; (8007684 <UART_SetConfig+0x4e4>)
 8007502:	fba3 2302 	umull	r2, r3, r3, r2
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	011c      	lsls	r4, r3, #4
 800750a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800750e:	2200      	movs	r2, #0
 8007510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007514:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007518:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800751c:	4642      	mov	r2, r8
 800751e:	464b      	mov	r3, r9
 8007520:	1891      	adds	r1, r2, r2
 8007522:	61b9      	str	r1, [r7, #24]
 8007524:	415b      	adcs	r3, r3
 8007526:	61fb      	str	r3, [r7, #28]
 8007528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800752c:	4641      	mov	r1, r8
 800752e:	1851      	adds	r1, r2, r1
 8007530:	6139      	str	r1, [r7, #16]
 8007532:	4649      	mov	r1, r9
 8007534:	414b      	adcs	r3, r1
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007544:	4659      	mov	r1, fp
 8007546:	00cb      	lsls	r3, r1, #3
 8007548:	4651      	mov	r1, sl
 800754a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800754e:	4651      	mov	r1, sl
 8007550:	00ca      	lsls	r2, r1, #3
 8007552:	4610      	mov	r0, r2
 8007554:	4619      	mov	r1, r3
 8007556:	4603      	mov	r3, r0
 8007558:	4642      	mov	r2, r8
 800755a:	189b      	adds	r3, r3, r2
 800755c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007560:	464b      	mov	r3, r9
 8007562:	460a      	mov	r2, r1
 8007564:	eb42 0303 	adc.w	r3, r2, r3
 8007568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800756c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	67bb      	str	r3, [r7, #120]	; 0x78
 8007576:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007578:	f04f 0200 	mov.w	r2, #0
 800757c:	f04f 0300 	mov.w	r3, #0
 8007580:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007584:	4649      	mov	r1, r9
 8007586:	008b      	lsls	r3, r1, #2
 8007588:	4641      	mov	r1, r8
 800758a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800758e:	4641      	mov	r1, r8
 8007590:	008a      	lsls	r2, r1, #2
 8007592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007596:	f7f8 fe73 	bl	8000280 <__aeabi_uldivmod>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4b39      	ldr	r3, [pc, #228]	; (8007684 <UART_SetConfig+0x4e4>)
 80075a0:	fba3 1302 	umull	r1, r3, r3, r2
 80075a4:	095b      	lsrs	r3, r3, #5
 80075a6:	2164      	movs	r1, #100	; 0x64
 80075a8:	fb01 f303 	mul.w	r3, r1, r3
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	3332      	adds	r3, #50	; 0x32
 80075b2:	4a34      	ldr	r2, [pc, #208]	; (8007684 <UART_SetConfig+0x4e4>)
 80075b4:	fba2 2303 	umull	r2, r3, r2, r3
 80075b8:	095b      	lsrs	r3, r3, #5
 80075ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075be:	441c      	add	r4, r3
 80075c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075c4:	2200      	movs	r2, #0
 80075c6:	673b      	str	r3, [r7, #112]	; 0x70
 80075c8:	677a      	str	r2, [r7, #116]	; 0x74
 80075ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075ce:	4642      	mov	r2, r8
 80075d0:	464b      	mov	r3, r9
 80075d2:	1891      	adds	r1, r2, r2
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	415b      	adcs	r3, r3
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075de:	4641      	mov	r1, r8
 80075e0:	1851      	adds	r1, r2, r1
 80075e2:	6039      	str	r1, [r7, #0]
 80075e4:	4649      	mov	r1, r9
 80075e6:	414b      	adcs	r3, r1
 80075e8:	607b      	str	r3, [r7, #4]
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075f6:	4659      	mov	r1, fp
 80075f8:	00cb      	lsls	r3, r1, #3
 80075fa:	4651      	mov	r1, sl
 80075fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007600:	4651      	mov	r1, sl
 8007602:	00ca      	lsls	r2, r1, #3
 8007604:	4610      	mov	r0, r2
 8007606:	4619      	mov	r1, r3
 8007608:	4603      	mov	r3, r0
 800760a:	4642      	mov	r2, r8
 800760c:	189b      	adds	r3, r3, r2
 800760e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007610:	464b      	mov	r3, r9
 8007612:	460a      	mov	r2, r1
 8007614:	eb42 0303 	adc.w	r3, r2, r3
 8007618:	66fb      	str	r3, [r7, #108]	; 0x6c
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	663b      	str	r3, [r7, #96]	; 0x60
 8007624:	667a      	str	r2, [r7, #100]	; 0x64
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	f04f 0300 	mov.w	r3, #0
 800762e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007632:	4649      	mov	r1, r9
 8007634:	008b      	lsls	r3, r1, #2
 8007636:	4641      	mov	r1, r8
 8007638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800763c:	4641      	mov	r1, r8
 800763e:	008a      	lsls	r2, r1, #2
 8007640:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007644:	f7f8 fe1c 	bl	8000280 <__aeabi_uldivmod>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <UART_SetConfig+0x4e4>)
 800764e:	fba3 1302 	umull	r1, r3, r3, r2
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	2164      	movs	r1, #100	; 0x64
 8007656:	fb01 f303 	mul.w	r3, r1, r3
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	3332      	adds	r3, #50	; 0x32
 8007660:	4a08      	ldr	r2, [pc, #32]	; (8007684 <UART_SetConfig+0x4e4>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	f003 020f 	and.w	r2, r3, #15
 800766c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4422      	add	r2, r4
 8007674:	609a      	str	r2, [r3, #8]
}
 8007676:	bf00      	nop
 8007678:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800767c:	46bd      	mov	sp, r7
 800767e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007682:	bf00      	nop
 8007684:	51eb851f 	.word	0x51eb851f

08007688 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800769a:	2b84      	cmp	r3, #132	; 0x84
 800769c:	d005      	beq.n	80076aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800769e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	3303      	adds	r3, #3
 80076a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80076aa:	68fb      	ldr	r3, [r7, #12]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80076bc:	f001 f802 	bl	80086c4 <vTaskStartScheduler>
  
  return osOK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80076c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c8:	b089      	sub	sp, #36	; 0x24
 80076ca:	af04      	add	r7, sp, #16
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d020      	beq.n	800771a <osThreadCreate+0x54>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01c      	beq.n	800771a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685c      	ldr	r4, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681d      	ldr	r5, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	691e      	ldr	r6, [r3, #16]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff ffc8 	bl	8007688 <makeFreeRtosPriority>
 80076f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007702:	9202      	str	r2, [sp, #8]
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	9100      	str	r1, [sp, #0]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	4632      	mov	r2, r6
 800770c:	4629      	mov	r1, r5
 800770e:	4620      	mov	r0, r4
 8007710:	f000 fe10 	bl	8008334 <xTaskCreateStatic>
 8007714:	4603      	mov	r3, r0
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	e01c      	b.n	8007754 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685c      	ldr	r4, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007726:	b29e      	uxth	r6, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff ffaa 	bl	8007688 <makeFreeRtosPriority>
 8007734:	4602      	mov	r2, r0
 8007736:	f107 030c 	add.w	r3, r7, #12
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	9200      	str	r2, [sp, #0]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	4632      	mov	r2, r6
 8007742:	4629      	mov	r1, r5
 8007744:	4620      	mov	r0, r4
 8007746:	f000 fe52 	bl	80083ee <xTaskCreate>
 800774a:	4603      	mov	r3, r0
 800774c:	2b01      	cmp	r3, #1
 800774e:	d001      	beq.n	8007754 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007750:	2300      	movs	r3, #0
 8007752:	e000      	b.n	8007756 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007754:	68fb      	ldr	r3, [r7, #12]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800775e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <osDelay+0x16>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	e000      	b.n	8007776 <osDelay+0x18>
 8007774:	2301      	movs	r3, #1
 8007776:	4618      	mov	r0, r3
 8007778:	f000 ff70 	bl	800865c <vTaskDelay>
  
  return osOK;
 800777c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f103 0208 	add.w	r2, r3, #8
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f04f 32ff 	mov.w	r2, #4294967295
 800779e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f103 0208 	add.w	r2, r3, #8
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f103 0208 	add.w	r2, r3, #8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	601a      	str	r2, [r3, #0]
}
 800781c:	bf00      	nop
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783e:	d103      	bne.n	8007848 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	e00c      	b.n	8007862 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3308      	adds	r3, #8
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	e002      	b.n	8007856 <vListInsert+0x2e>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	429a      	cmp	r2, r3
 8007860:	d2f6      	bcs.n	8007850 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]
}
 800788e:	bf00      	nop
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800789a:	b480      	push	{r7}
 800789c:	b085      	sub	sp, #20
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6892      	ldr	r2, [r2, #8]
 80078b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6852      	ldr	r2, [r2, #4]
 80078ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d103      	bne.n	80078ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	1e5a      	subs	r2, r3, #1
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
	...

080078f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10a      	bne.n	800791a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800791a:	f002 f8f3 	bl	8009b04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	441a      	add	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794a:	3b01      	subs	r3, #1
 800794c:	68f9      	ldr	r1, [r7, #12]
 800794e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	441a      	add	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	22ff      	movs	r2, #255	; 0xff
 800795e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	22ff      	movs	r2, #255	; 0xff
 8007966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d114      	bne.n	800799a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01a      	beq.n	80079ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3310      	adds	r3, #16
 800797c:	4618      	mov	r0, r3
 800797e:	f001 f925 	bl	8008bcc <xTaskRemoveFromEventList>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d012      	beq.n	80079ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <xQueueGenericReset+0xcc>)
 800798a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	e009      	b.n	80079ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3310      	adds	r3, #16
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff fef1 	bl	8007786 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3324      	adds	r3, #36	; 0x24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7ff feec 	bl	8007786 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079ae:	f002 f8d9 	bl	8009b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079b2:	2301      	movs	r3, #1
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08e      	sub	sp, #56	; 0x38
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <xQueueGenericCreateStatic+0x52>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <xQueueGenericCreateStatic+0x56>
 8007a12:	2301      	movs	r3, #1
 8007a14:	e000      	b.n	8007a18 <xQueueGenericCreateStatic+0x58>
 8007a16:	2300      	movs	r3, #0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	623b      	str	r3, [r7, #32]
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <xQueueGenericCreateStatic+0x7e>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <xQueueGenericCreateStatic+0x82>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <xQueueGenericCreateStatic+0x84>
 8007a42:	2300      	movs	r3, #0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	61fb      	str	r3, [r7, #28]
}
 8007a5a:	bf00      	nop
 8007a5c:	e7fe      	b.n	8007a5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a5e:	2348      	movs	r3, #72	; 0x48
 8007a60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b48      	cmp	r3, #72	; 0x48
 8007a66:	d00a      	beq.n	8007a7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	61bb      	str	r3, [r7, #24]
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f83f 	bl	8007b24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3730      	adds	r7, #48	; 0x30
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08a      	sub	sp, #40	; 0x28
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10a      	bne.n	8007ada <xQueueGenericCreate+0x2a>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	613b      	str	r3, [r7, #16]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	fb02 f303 	mul.w	r3, r2, r3
 8007ae2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	3348      	adds	r3, #72	; 0x48
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f002 f92d 	bl	8009d48 <pvPortMalloc>
 8007aee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d011      	beq.n	8007b1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	3348      	adds	r3, #72	; 0x48
 8007afe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b08:	79fa      	ldrb	r2, [r7, #7]
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f805 	bl	8007b24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
	}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3720      	adds	r7, #32
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d103      	bne.n	8007b40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	e002      	b.n	8007b46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b52:	2101      	movs	r1, #1
 8007b54:	69b8      	ldr	r0, [r7, #24]
 8007b56:	f7ff fecb 	bl	80078f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08e      	sub	sp, #56	; 0x38
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b72:	2300      	movs	r3, #0
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <xQueueGenericSend+0x32>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d103      	bne.n	8007ba4 <xQueueGenericSend+0x40>
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <xQueueGenericSend+0x44>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e000      	b.n	8007baa <xQueueGenericSend+0x46>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <xQueueGenericSend+0x60>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d103      	bne.n	8007bd2 <xQueueGenericSend+0x6e>
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d101      	bne.n	8007bd6 <xQueueGenericSend+0x72>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e000      	b.n	8007bd8 <xQueueGenericSend+0x74>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <xQueueGenericSend+0x8e>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	623b      	str	r3, [r7, #32]
}
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bf2:	f001 f9a9 	bl	8008f48 <xTaskGetSchedulerState>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <xQueueGenericSend+0x9e>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <xQueueGenericSend+0xa2>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <xQueueGenericSend+0xa4>
 8007c06:	2300      	movs	r3, #0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <xQueueGenericSend+0xbe>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	61fb      	str	r3, [r7, #28]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c22:	f001 ff6f 	bl	8009b04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d302      	bcc.n	8007c38 <xQueueGenericSend+0xd4>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d129      	bne.n	8007c8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c3e:	f000 fa0b 	bl	8008058 <prvCopyDataToQueue>
 8007c42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d010      	beq.n	8007c6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	3324      	adds	r3, #36	; 0x24
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 ffbb 	bl	8008bcc <xTaskRemoveFromEventList>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d013      	beq.n	8007c84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c5c:	4b3f      	ldr	r3, [pc, #252]	; (8007d5c <xQueueGenericSend+0x1f8>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	e00a      	b.n	8007c84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d007      	beq.n	8007c84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c74:	4b39      	ldr	r3, [pc, #228]	; (8007d5c <xQueueGenericSend+0x1f8>)
 8007c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c84:	f001 ff6e 	bl	8009b64 <vPortExitCritical>
				return pdPASS;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e063      	b.n	8007d54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d103      	bne.n	8007c9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c92:	f001 ff67 	bl	8009b64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e05c      	b.n	8007d54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d106      	bne.n	8007cae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ca0:	f107 0314 	add.w	r3, r7, #20
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fff3 	bl	8008c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007caa:	2301      	movs	r3, #1
 8007cac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cae:	f001 ff59 	bl	8009b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cb2:	f000 fd6d 	bl	8008790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cb6:	f001 ff25 	bl	8009b04 <vPortEnterCritical>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cc0:	b25b      	sxtb	r3, r3
 8007cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc6:	d103      	bne.n	8007cd0 <xQueueGenericSend+0x16c>
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cd6:	b25b      	sxtb	r3, r3
 8007cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cdc:	d103      	bne.n	8007ce6 <xQueueGenericSend+0x182>
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ce6:	f001 ff3d 	bl	8009b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cea:	1d3a      	adds	r2, r7, #4
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 ffe2 	bl	8008cbc <xTaskCheckForTimeOut>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d124      	bne.n	8007d48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d00:	f000 faa2 	bl	8008248 <prvIsQueueFull>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d018      	beq.n	8007d3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	3310      	adds	r3, #16
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	4611      	mov	r1, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 ff0a 	bl	8008b2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d1a:	f000 fa2d 	bl	8008178 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d1e:	f000 fd45 	bl	80087ac <xTaskResumeAll>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f47f af7c 	bne.w	8007c22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <xQueueGenericSend+0x1f8>)
 8007d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	e772      	b.n	8007c22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d3e:	f000 fa1b 	bl	8008178 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d42:	f000 fd33 	bl	80087ac <xTaskResumeAll>
 8007d46:	e76c      	b.n	8007c22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d4a:	f000 fa15 	bl	8008178 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d4e:	f000 fd2d 	bl	80087ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3738      	adds	r7, #56	; 0x38
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	e000ed04 	.word	0xe000ed04

08007d60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b090      	sub	sp, #64	; 0x40
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d103      	bne.n	8007d9c <xQueueGenericSendFromISR+0x3c>
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <xQueueGenericSendFromISR+0x40>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e000      	b.n	8007da2 <xQueueGenericSendFromISR+0x42>
 8007da0:	2300      	movs	r3, #0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d103      	bne.n	8007dca <xQueueGenericSendFromISR+0x6a>
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d101      	bne.n	8007dce <xQueueGenericSendFromISR+0x6e>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <xQueueGenericSendFromISR+0x70>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	623b      	str	r3, [r7, #32]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007dea:	f001 ff6d 	bl	8009cc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007dee:	f3ef 8211 	mrs	r2, BASEPRI
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	61fa      	str	r2, [r7, #28]
 8007e04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d302      	bcc.n	8007e1c <xQueueGenericSendFromISR+0xbc>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d12f      	bne.n	8007e7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e32:	f000 f911 	bl	8008058 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3e:	d112      	bne.n	8007e66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d016      	beq.n	8007e76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	3324      	adds	r3, #36	; 0x24
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 febd 	bl	8008bcc <xTaskRemoveFromEventList>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00e      	beq.n	8007e76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00b      	beq.n	8007e76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	e007      	b.n	8007e76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	b25a      	sxtb	r2, r3
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e76:	2301      	movs	r3, #1
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007e7a:	e001      	b.n	8007e80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3740      	adds	r7, #64	; 0x40
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08c      	sub	sp, #48	; 0x30
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <xQueueReceive+0x30>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	623b      	str	r3, [r7, #32]
}
 8007ec4:	bf00      	nop
 8007ec6:	e7fe      	b.n	8007ec6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d103      	bne.n	8007ed6 <xQueueReceive+0x3e>
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <xQueueReceive+0x42>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e000      	b.n	8007edc <xQueueReceive+0x44>
 8007eda:	2300      	movs	r3, #0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <xQueueReceive+0x5e>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	61fb      	str	r3, [r7, #28]
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ef6:	f001 f827 	bl	8008f48 <xTaskGetSchedulerState>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d102      	bne.n	8007f06 <xQueueReceive+0x6e>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <xQueueReceive+0x72>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <xQueueReceive+0x74>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <xQueueReceive+0x8e>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	61bb      	str	r3, [r7, #24]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f26:	f001 fded 	bl	8009b04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01f      	beq.n	8007f76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3a:	f000 f8f7 	bl	800812c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	1e5a      	subs	r2, r3, #1
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00f      	beq.n	8007f6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	3310      	adds	r3, #16
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fe3a 	bl	8008bcc <xTaskRemoveFromEventList>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f5e:	4b3d      	ldr	r3, [pc, #244]	; (8008054 <xQueueReceive+0x1bc>)
 8007f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f6e:	f001 fdf9 	bl	8009b64 <vPortExitCritical>
				return pdPASS;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e069      	b.n	800804a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d103      	bne.n	8007f84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f7c:	f001 fdf2 	bl	8009b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f80:	2300      	movs	r3, #0
 8007f82:	e062      	b.n	800804a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f8a:	f107 0310 	add.w	r3, r7, #16
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fe7e 	bl	8008c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f94:	2301      	movs	r3, #1
 8007f96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f98:	f001 fde4 	bl	8009b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f9c:	f000 fbf8 	bl	8008790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fa0:	f001 fdb0 	bl	8009b04 <vPortEnterCritical>
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007faa:	b25b      	sxtb	r3, r3
 8007fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb0:	d103      	bne.n	8007fba <xQueueReceive+0x122>
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fc0:	b25b      	sxtb	r3, r3
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc6:	d103      	bne.n	8007fd0 <xQueueReceive+0x138>
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fd0:	f001 fdc8 	bl	8009b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fd4:	1d3a      	adds	r2, r7, #4
 8007fd6:	f107 0310 	add.w	r3, r7, #16
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fe6d 	bl	8008cbc <xTaskCheckForTimeOut>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d123      	bne.n	8008030 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fea:	f000 f917 	bl	800821c <prvIsQueueEmpty>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d017      	beq.n	8008024 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	3324      	adds	r3, #36	; 0x24
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fd95 	bl	8008b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008004:	f000 f8b8 	bl	8008178 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008008:	f000 fbd0 	bl	80087ac <xTaskResumeAll>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d189      	bne.n	8007f26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008012:	4b10      	ldr	r3, [pc, #64]	; (8008054 <xQueueReceive+0x1bc>)
 8008014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	e780      	b.n	8007f26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008026:	f000 f8a7 	bl	8008178 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800802a:	f000 fbbf 	bl	80087ac <xTaskResumeAll>
 800802e:	e77a      	b.n	8007f26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008032:	f000 f8a1 	bl	8008178 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008036:	f000 fbb9 	bl	80087ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800803a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800803c:	f000 f8ee 	bl	800821c <prvIsQueueEmpty>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	f43f af6f 	beq.w	8007f26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008048:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800804a:	4618      	mov	r0, r3
 800804c:	3730      	adds	r7, #48	; 0x30
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10d      	bne.n	8008092 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d14d      	bne.n	800811a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 ff7e 	bl	8008f84 <xTaskPriorityDisinherit>
 8008088:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	609a      	str	r2, [r3, #8]
 8008090:	e043      	b.n	800811a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d119      	bne.n	80080cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6858      	ldr	r0, [r3, #4]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	461a      	mov	r2, r3
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	f002 f864 	bl	800a170 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	441a      	add	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d32b      	bcc.n	800811a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	605a      	str	r2, [r3, #4]
 80080ca:	e026      	b.n	800811a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	68d8      	ldr	r0, [r3, #12]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	461a      	mov	r2, r3
 80080d6:	68b9      	ldr	r1, [r7, #8]
 80080d8:	f002 f84a 	bl	800a170 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	425b      	negs	r3, r3
 80080e6:	441a      	add	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d207      	bcs.n	8008108 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	425b      	negs	r3, r3
 8008102:	441a      	add	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d105      	bne.n	800811a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	3b01      	subs	r3, #1
 8008118:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008122:	697b      	ldr	r3, [r7, #20]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d018      	beq.n	8008170 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	441a      	add	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	429a      	cmp	r2, r3
 8008156:	d303      	bcc.n	8008160 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68d9      	ldr	r1, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008168:	461a      	mov	r2, r3
 800816a:	6838      	ldr	r0, [r7, #0]
 800816c:	f002 f800 	bl	800a170 <memcpy>
	}
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008180:	f001 fcc0 	bl	8009b04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800818a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800818c:	e011      	b.n	80081b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d012      	beq.n	80081bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3324      	adds	r3, #36	; 0x24
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fd16 	bl	8008bcc <xTaskRemoveFromEventList>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081a6:	f000 fdeb 	bl	8008d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	dce9      	bgt.n	800818e <prvUnlockQueue+0x16>
 80081ba:	e000      	b.n	80081be <prvUnlockQueue+0x46>
					break;
 80081bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	22ff      	movs	r2, #255	; 0xff
 80081c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081c6:	f001 fccd 	bl	8009b64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081ca:	f001 fc9b 	bl	8009b04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081d6:	e011      	b.n	80081fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d012      	beq.n	8008206 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3310      	adds	r3, #16
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fcf1 	bl	8008bcc <xTaskRemoveFromEventList>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081f0:	f000 fdc6 	bl	8008d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008200:	2b00      	cmp	r3, #0
 8008202:	dce9      	bgt.n	80081d8 <prvUnlockQueue+0x60>
 8008204:	e000      	b.n	8008208 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008206:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	22ff      	movs	r2, #255	; 0xff
 800820c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008210:	f001 fca8 	bl	8009b64 <vPortExitCritical>
}
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008224:	f001 fc6e 	bl	8009b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008230:	2301      	movs	r3, #1
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e001      	b.n	800823a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800823a:	f001 fc93 	bl	8009b64 <vPortExitCritical>

	return xReturn;
 800823e:	68fb      	ldr	r3, [r7, #12]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008250:	f001 fc58 	bl	8009b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825c:	429a      	cmp	r2, r3
 800825e:	d102      	bne.n	8008266 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e001      	b.n	800826a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008266:	2300      	movs	r3, #0
 8008268:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800826a:	f001 fc7b 	bl	8009b64 <vPortExitCritical>

	return xReturn;
 800826e:	68fb      	ldr	r3, [r7, #12]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e014      	b.n	80082b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008288:	4a0f      	ldr	r2, [pc, #60]	; (80082c8 <vQueueAddToRegistry+0x50>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10b      	bne.n	80082ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008294:	490c      	ldr	r1, [pc, #48]	; (80082c8 <vQueueAddToRegistry+0x50>)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800829e:	4a0a      	ldr	r2, [pc, #40]	; (80082c8 <vQueueAddToRegistry+0x50>)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4413      	add	r3, r2
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082aa:	e006      	b.n	80082ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3301      	adds	r3, #1
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b07      	cmp	r3, #7
 80082b6:	d9e7      	bls.n	8008288 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	200007e8 	.word	0x200007e8

080082cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082dc:	f001 fc12 	bl	8009b04 <vPortEnterCritical>
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082e6:	b25b      	sxtb	r3, r3
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ec:	d103      	bne.n	80082f6 <vQueueWaitForMessageRestricted+0x2a>
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082fc:	b25b      	sxtb	r3, r3
 80082fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008302:	d103      	bne.n	800830c <vQueueWaitForMessageRestricted+0x40>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800830c:	f001 fc2a 	bl	8009b64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	3324      	adds	r3, #36	; 0x24
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fc27 	bl	8008b74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008326:	6978      	ldr	r0, [r7, #20]
 8008328:	f7ff ff26 	bl	8008178 <prvUnlockQueue>
	}
 800832c:	bf00      	nop
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08e      	sub	sp, #56	; 0x38
 8008338:	af04      	add	r7, sp, #16
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10a      	bne.n	800835e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	623b      	str	r3, [r7, #32]
}
 800835a:	bf00      	nop
 800835c:	e7fe      	b.n	800835c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <xTaskCreateStatic+0x46>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	61fb      	str	r3, [r7, #28]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800837a:	235c      	movs	r3, #92	; 0x5c
 800837c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b5c      	cmp	r3, #92	; 0x5c
 8008382:	d00a      	beq.n	800839a <xTaskCreateStatic+0x66>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	61bb      	str	r3, [r7, #24]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800839a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800839c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01e      	beq.n	80083e0 <xTaskCreateStatic+0xac>
 80083a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01b      	beq.n	80083e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	2202      	movs	r2, #2
 80083b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083ba:	2300      	movs	r3, #0
 80083bc:	9303      	str	r3, [sp, #12]
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	9302      	str	r3, [sp, #8]
 80083c2:	f107 0314 	add.w	r3, r7, #20
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	68b9      	ldr	r1, [r7, #8]
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 f850 	bl	8008478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083da:	f000 f8d5 	bl	8008588 <prvAddNewTaskToReadyList>
 80083de:	e001      	b.n	80083e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083e4:	697b      	ldr	r3, [r7, #20]
	}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3728      	adds	r7, #40	; 0x28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b08c      	sub	sp, #48	; 0x30
 80083f2:	af04      	add	r7, sp, #16
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	60b9      	str	r1, [r7, #8]
 80083f8:	603b      	str	r3, [r7, #0]
 80083fa:	4613      	mov	r3, r2
 80083fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4618      	mov	r0, r3
 8008404:	f001 fca0 	bl	8009d48 <pvPortMalloc>
 8008408:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008410:	205c      	movs	r0, #92	; 0x5c
 8008412:	f001 fc99 	bl	8009d48 <pvPortMalloc>
 8008416:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	631a      	str	r2, [r3, #48]	; 0x30
 8008424:	e005      	b.n	8008432 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008426:	6978      	ldr	r0, [r7, #20]
 8008428:	f001 fd5a 	bl	8009ee0 <vPortFree>
 800842c:	e001      	b.n	8008432 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800842e:	2300      	movs	r3, #0
 8008430:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d017      	beq.n	8008468 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008440:	88fa      	ldrh	r2, [r7, #6]
 8008442:	2300      	movs	r3, #0
 8008444:	9303      	str	r3, [sp, #12]
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	9302      	str	r3, [sp, #8]
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 f80e 	bl	8008478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800845c:	69f8      	ldr	r0, [r7, #28]
 800845e:	f000 f893 	bl	8008588 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008462:	2301      	movs	r3, #1
 8008464:	61bb      	str	r3, [r7, #24]
 8008466:	e002      	b.n	800846e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008468:	f04f 33ff 	mov.w	r3, #4294967295
 800846c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800846e:	69bb      	ldr	r3, [r7, #24]
	}
 8008470:	4618      	mov	r0, r3
 8008472:	3720      	adds	r7, #32
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008490:	3b01      	subs	r3, #1
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	f023 0307 	bic.w	r3, r3, #7
 800849e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	617b      	str	r3, [r7, #20]
}
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01f      	beq.n	8008506 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084c6:	2300      	movs	r3, #0
 80084c8:	61fb      	str	r3, [r7, #28]
 80084ca:	e012      	b.n	80084f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	4413      	add	r3, r2
 80084d2:	7819      	ldrb	r1, [r3, #0]
 80084d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	4413      	add	r3, r2
 80084da:	3334      	adds	r3, #52	; 0x34
 80084dc:	460a      	mov	r2, r1
 80084de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d006      	beq.n	80084fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	3301      	adds	r3, #1
 80084f0:	61fb      	str	r3, [r7, #28]
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	2b17      	cmp	r3, #23
 80084f6:	d9e9      	bls.n	80084cc <prvInitialiseNewTask+0x54>
 80084f8:	e000      	b.n	80084fc <prvInitialiseNewTask+0x84>
			{
				break;
 80084fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8008504:	e003      	b.n	800850e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	2b06      	cmp	r3, #6
 8008512:	d901      	bls.n	8008518 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008514:	2306      	movs	r3, #6
 8008516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800851c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	2200      	movs	r2, #0
 8008528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	3304      	adds	r3, #4
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff f949 	bl	80077c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	3318      	adds	r3, #24
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff f944 	bl	80077c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	f1c3 0207 	rsb	r2, r3, #7
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	2200      	movs	r2, #0
 8008558:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	68f9      	ldr	r1, [r7, #12]
 8008566:	69b8      	ldr	r0, [r7, #24]
 8008568:	f001 f9a2 	bl	80098b0 <pxPortInitialiseStack>
 800856c:	4602      	mov	r2, r0
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800857c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800857e:	bf00      	nop
 8008580:	3720      	adds	r7, #32
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
	...

08008588 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008590:	f001 fab8 	bl	8009b04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008594:	4b2a      	ldr	r3, [pc, #168]	; (8008640 <prvAddNewTaskToReadyList+0xb8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3301      	adds	r3, #1
 800859a:	4a29      	ldr	r2, [pc, #164]	; (8008640 <prvAddNewTaskToReadyList+0xb8>)
 800859c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800859e:	4b29      	ldr	r3, [pc, #164]	; (8008644 <prvAddNewTaskToReadyList+0xbc>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d109      	bne.n	80085ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085a6:	4a27      	ldr	r2, [pc, #156]	; (8008644 <prvAddNewTaskToReadyList+0xbc>)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085ac:	4b24      	ldr	r3, [pc, #144]	; (8008640 <prvAddNewTaskToReadyList+0xb8>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d110      	bne.n	80085d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085b4:	f000 fc0a 	bl	8008dcc <prvInitialiseTaskLists>
 80085b8:	e00d      	b.n	80085d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085ba:	4b23      	ldr	r3, [pc, #140]	; (8008648 <prvAddNewTaskToReadyList+0xc0>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d109      	bne.n	80085d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085c2:	4b20      	ldr	r3, [pc, #128]	; (8008644 <prvAddNewTaskToReadyList+0xbc>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d802      	bhi.n	80085d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085d0:	4a1c      	ldr	r2, [pc, #112]	; (8008644 <prvAddNewTaskToReadyList+0xbc>)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085d6:	4b1d      	ldr	r3, [pc, #116]	; (800864c <prvAddNewTaskToReadyList+0xc4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3301      	adds	r3, #1
 80085dc:	4a1b      	ldr	r2, [pc, #108]	; (800864c <prvAddNewTaskToReadyList+0xc4>)
 80085de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	2201      	movs	r2, #1
 80085e6:	409a      	lsls	r2, r3
 80085e8:	4b19      	ldr	r3, [pc, #100]	; (8008650 <prvAddNewTaskToReadyList+0xc8>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	4a18      	ldr	r2, [pc, #96]	; (8008650 <prvAddNewTaskToReadyList+0xc8>)
 80085f0:	6013      	str	r3, [r2, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f6:	4613      	mov	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4a15      	ldr	r2, [pc, #84]	; (8008654 <prvAddNewTaskToReadyList+0xcc>)
 8008600:	441a      	add	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3304      	adds	r3, #4
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7ff f8e9 	bl	80077e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800860e:	f001 faa9 	bl	8009b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008612:	4b0d      	ldr	r3, [pc, #52]	; (8008648 <prvAddNewTaskToReadyList+0xc0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00e      	beq.n	8008638 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800861a:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <prvAddNewTaskToReadyList+0xbc>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	429a      	cmp	r2, r3
 8008626:	d207      	bcs.n	8008638 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008628:	4b0b      	ldr	r3, [pc, #44]	; (8008658 <prvAddNewTaskToReadyList+0xd0>)
 800862a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008638:	bf00      	nop
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	20000928 	.word	0x20000928
 8008644:	20000828 	.word	0x20000828
 8008648:	20000934 	.word	0x20000934
 800864c:	20000944 	.word	0x20000944
 8008650:	20000930 	.word	0x20000930
 8008654:	2000082c 	.word	0x2000082c
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d017      	beq.n	800869e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800866e:	4b13      	ldr	r3, [pc, #76]	; (80086bc <vTaskDelay+0x60>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <vTaskDelay+0x30>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	60bb      	str	r3, [r7, #8]
}
 8008688:	bf00      	nop
 800868a:	e7fe      	b.n	800868a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800868c:	f000 f880 	bl	8008790 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008690:	2100      	movs	r1, #0
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fcfc 	bl	8009090 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008698:	f000 f888 	bl	80087ac <xTaskResumeAll>
 800869c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d107      	bne.n	80086b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80086a4:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <vTaskDelay+0x64>)
 80086a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20000950 	.word	0x20000950
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08a      	sub	sp, #40	; 0x28
 80086c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086d2:	463a      	mov	r2, r7
 80086d4:	1d39      	adds	r1, r7, #4
 80086d6:	f107 0308 	add.w	r3, r7, #8
 80086da:	4618      	mov	r0, r3
 80086dc:	f7f7 ff52 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	9202      	str	r2, [sp, #8]
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	2300      	movs	r3, #0
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	2300      	movs	r3, #0
 80086f0:	460a      	mov	r2, r1
 80086f2:	4921      	ldr	r1, [pc, #132]	; (8008778 <vTaskStartScheduler+0xb4>)
 80086f4:	4821      	ldr	r0, [pc, #132]	; (800877c <vTaskStartScheduler+0xb8>)
 80086f6:	f7ff fe1d 	bl	8008334 <xTaskCreateStatic>
 80086fa:	4603      	mov	r3, r0
 80086fc:	4a20      	ldr	r2, [pc, #128]	; (8008780 <vTaskStartScheduler+0xbc>)
 80086fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008700:	4b1f      	ldr	r3, [pc, #124]	; (8008780 <vTaskStartScheduler+0xbc>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008708:	2301      	movs	r3, #1
 800870a:	617b      	str	r3, [r7, #20]
 800870c:	e001      	b.n	8008712 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800870e:	2300      	movs	r3, #0
 8008710:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d102      	bne.n	800871e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008718:	f000 fd20 	bl	800915c <xTimerCreateTimerTask>
 800871c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d116      	bne.n	8008752 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	613b      	str	r3, [r7, #16]
}
 8008736:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008738:	4b12      	ldr	r3, [pc, #72]	; (8008784 <vTaskStartScheduler+0xc0>)
 800873a:	f04f 32ff 	mov.w	r2, #4294967295
 800873e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008740:	4b11      	ldr	r3, [pc, #68]	; (8008788 <vTaskStartScheduler+0xc4>)
 8008742:	2201      	movs	r2, #1
 8008744:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008746:	4b11      	ldr	r3, [pc, #68]	; (800878c <vTaskStartScheduler+0xc8>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800874c:	f001 f938 	bl	80099c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008750:	e00e      	b.n	8008770 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d10a      	bne.n	8008770 <vTaskStartScheduler+0xac>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	60fb      	str	r3, [r7, #12]
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <vTaskStartScheduler+0xaa>
}
 8008770:	bf00      	nop
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	0800abcc 	.word	0x0800abcc
 800877c:	08008d99 	.word	0x08008d99
 8008780:	2000094c 	.word	0x2000094c
 8008784:	20000948 	.word	0x20000948
 8008788:	20000934 	.word	0x20000934
 800878c:	2000092c 	.word	0x2000092c

08008790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008790:	b480      	push	{r7}
 8008792:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <vTaskSuspendAll+0x18>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3301      	adds	r3, #1
 800879a:	4a03      	ldr	r2, [pc, #12]	; (80087a8 <vTaskSuspendAll+0x18>)
 800879c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800879e:	bf00      	nop
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	20000950 	.word	0x20000950

080087ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087ba:	4b41      	ldr	r3, [pc, #260]	; (80088c0 <xTaskResumeAll+0x114>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10a      	bne.n	80087d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	603b      	str	r3, [r7, #0]
}
 80087d4:	bf00      	nop
 80087d6:	e7fe      	b.n	80087d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087d8:	f001 f994 	bl	8009b04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087dc:	4b38      	ldr	r3, [pc, #224]	; (80088c0 <xTaskResumeAll+0x114>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	4a37      	ldr	r2, [pc, #220]	; (80088c0 <xTaskResumeAll+0x114>)
 80087e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087e6:	4b36      	ldr	r3, [pc, #216]	; (80088c0 <xTaskResumeAll+0x114>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d161      	bne.n	80088b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087ee:	4b35      	ldr	r3, [pc, #212]	; (80088c4 <xTaskResumeAll+0x118>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d05d      	beq.n	80088b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087f6:	e02e      	b.n	8008856 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f8:	4b33      	ldr	r3, [pc, #204]	; (80088c8 <xTaskResumeAll+0x11c>)
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3318      	adds	r3, #24
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff f848 	bl	800789a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3304      	adds	r3, #4
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff f843 	bl	800789a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008818:	2201      	movs	r2, #1
 800881a:	409a      	lsls	r2, r3
 800881c:	4b2b      	ldr	r3, [pc, #172]	; (80088cc <xTaskResumeAll+0x120>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4313      	orrs	r3, r2
 8008822:	4a2a      	ldr	r2, [pc, #168]	; (80088cc <xTaskResumeAll+0x120>)
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4a27      	ldr	r2, [pc, #156]	; (80088d0 <xTaskResumeAll+0x124>)
 8008834:	441a      	add	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3304      	adds	r3, #4
 800883a:	4619      	mov	r1, r3
 800883c:	4610      	mov	r0, r2
 800883e:	f7fe ffcf 	bl	80077e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008846:	4b23      	ldr	r3, [pc, #140]	; (80088d4 <xTaskResumeAll+0x128>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	429a      	cmp	r2, r3
 800884e:	d302      	bcc.n	8008856 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008850:	4b21      	ldr	r3, [pc, #132]	; (80088d8 <xTaskResumeAll+0x12c>)
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008856:	4b1c      	ldr	r3, [pc, #112]	; (80088c8 <xTaskResumeAll+0x11c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1cc      	bne.n	80087f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008864:	f000 fb50 	bl	8008f08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008868:	4b1c      	ldr	r3, [pc, #112]	; (80088dc <xTaskResumeAll+0x130>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d010      	beq.n	8008896 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008874:	f000 f846 	bl	8008904 <xTaskIncrementTick>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800887e:	4b16      	ldr	r3, [pc, #88]	; (80088d8 <xTaskResumeAll+0x12c>)
 8008880:	2201      	movs	r2, #1
 8008882:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3b01      	subs	r3, #1
 8008888:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1f1      	bne.n	8008874 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008890:	4b12      	ldr	r3, [pc, #72]	; (80088dc <xTaskResumeAll+0x130>)
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008896:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <xTaskResumeAll+0x12c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800889e:	2301      	movs	r3, #1
 80088a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088a2:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <xTaskResumeAll+0x134>)
 80088a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088b2:	f001 f957 	bl	8009b64 <vPortExitCritical>

	return xAlreadyYielded;
 80088b6:	68bb      	ldr	r3, [r7, #8]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20000950 	.word	0x20000950
 80088c4:	20000928 	.word	0x20000928
 80088c8:	200008e8 	.word	0x200008e8
 80088cc:	20000930 	.word	0x20000930
 80088d0:	2000082c 	.word	0x2000082c
 80088d4:	20000828 	.word	0x20000828
 80088d8:	2000093c 	.word	0x2000093c
 80088dc:	20000938 	.word	0x20000938
 80088e0:	e000ed04 	.word	0xe000ed04

080088e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088ea:	4b05      	ldr	r3, [pc, #20]	; (8008900 <xTaskGetTickCount+0x1c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088f0:	687b      	ldr	r3, [r7, #4]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	2000092c 	.word	0x2000092c

08008904 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800890a:	2300      	movs	r3, #0
 800890c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800890e:	4b4e      	ldr	r3, [pc, #312]	; (8008a48 <xTaskIncrementTick+0x144>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	f040 808e 	bne.w	8008a34 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008918:	4b4c      	ldr	r3, [pc, #304]	; (8008a4c <xTaskIncrementTick+0x148>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3301      	adds	r3, #1
 800891e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008920:	4a4a      	ldr	r2, [pc, #296]	; (8008a4c <xTaskIncrementTick+0x148>)
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d120      	bne.n	800896e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800892c:	4b48      	ldr	r3, [pc, #288]	; (8008a50 <xTaskIncrementTick+0x14c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <xTaskIncrementTick+0x48>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	603b      	str	r3, [r7, #0]
}
 8008948:	bf00      	nop
 800894a:	e7fe      	b.n	800894a <xTaskIncrementTick+0x46>
 800894c:	4b40      	ldr	r3, [pc, #256]	; (8008a50 <xTaskIncrementTick+0x14c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	4b40      	ldr	r3, [pc, #256]	; (8008a54 <xTaskIncrementTick+0x150>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a3e      	ldr	r2, [pc, #248]	; (8008a50 <xTaskIncrementTick+0x14c>)
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	4a3e      	ldr	r2, [pc, #248]	; (8008a54 <xTaskIncrementTick+0x150>)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	4b3d      	ldr	r3, [pc, #244]	; (8008a58 <xTaskIncrementTick+0x154>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	4a3c      	ldr	r2, [pc, #240]	; (8008a58 <xTaskIncrementTick+0x154>)
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	f000 facd 	bl	8008f08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800896e:	4b3b      	ldr	r3, [pc, #236]	; (8008a5c <xTaskIncrementTick+0x158>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	429a      	cmp	r2, r3
 8008976:	d348      	bcc.n	8008a0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008978:	4b35      	ldr	r3, [pc, #212]	; (8008a50 <xTaskIncrementTick+0x14c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d104      	bne.n	800898c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008982:	4b36      	ldr	r3, [pc, #216]	; (8008a5c <xTaskIncrementTick+0x158>)
 8008984:	f04f 32ff 	mov.w	r2, #4294967295
 8008988:	601a      	str	r2, [r3, #0]
					break;
 800898a:	e03e      	b.n	8008a0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800898c:	4b30      	ldr	r3, [pc, #192]	; (8008a50 <xTaskIncrementTick+0x14c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d203      	bcs.n	80089ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089a4:	4a2d      	ldr	r2, [pc, #180]	; (8008a5c <xTaskIncrementTick+0x158>)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089aa:	e02e      	b.n	8008a0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	3304      	adds	r3, #4
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe ff72 	bl	800789a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d004      	beq.n	80089c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	3318      	adds	r3, #24
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe ff69 	bl	800789a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	2201      	movs	r2, #1
 80089ce:	409a      	lsls	r2, r3
 80089d0:	4b23      	ldr	r3, [pc, #140]	; (8008a60 <xTaskIncrementTick+0x15c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	4a22      	ldr	r2, [pc, #136]	; (8008a60 <xTaskIncrementTick+0x15c>)
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4a1f      	ldr	r2, [pc, #124]	; (8008a64 <xTaskIncrementTick+0x160>)
 80089e8:	441a      	add	r2, r3
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f7fe fef5 	bl	80077e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fa:	4b1b      	ldr	r3, [pc, #108]	; (8008a68 <xTaskIncrementTick+0x164>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d3b9      	bcc.n	8008978 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a04:	2301      	movs	r3, #1
 8008a06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a08:	e7b6      	b.n	8008978 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a0a:	4b17      	ldr	r3, [pc, #92]	; (8008a68 <xTaskIncrementTick+0x164>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a10:	4914      	ldr	r1, [pc, #80]	; (8008a64 <xTaskIncrementTick+0x160>)
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d901      	bls.n	8008a26 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008a22:	2301      	movs	r3, #1
 8008a24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a26:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <xTaskIncrementTick+0x168>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d007      	beq.n	8008a3e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	e004      	b.n	8008a3e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a34:	4b0e      	ldr	r3, [pc, #56]	; (8008a70 <xTaskIncrementTick+0x16c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	4a0d      	ldr	r2, [pc, #52]	; (8008a70 <xTaskIncrementTick+0x16c>)
 8008a3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a3e:	697b      	ldr	r3, [r7, #20]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20000950 	.word	0x20000950
 8008a4c:	2000092c 	.word	0x2000092c
 8008a50:	200008e0 	.word	0x200008e0
 8008a54:	200008e4 	.word	0x200008e4
 8008a58:	20000940 	.word	0x20000940
 8008a5c:	20000948 	.word	0x20000948
 8008a60:	20000930 	.word	0x20000930
 8008a64:	2000082c 	.word	0x2000082c
 8008a68:	20000828 	.word	0x20000828
 8008a6c:	2000093c 	.word	0x2000093c
 8008a70:	20000938 	.word	0x20000938

08008a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a7a:	4b27      	ldr	r3, [pc, #156]	; (8008b18 <vTaskSwitchContext+0xa4>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a82:	4b26      	ldr	r3, [pc, #152]	; (8008b1c <vTaskSwitchContext+0xa8>)
 8008a84:	2201      	movs	r2, #1
 8008a86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a88:	e03f      	b.n	8008b0a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008a8a:	4b24      	ldr	r3, [pc, #144]	; (8008b1c <vTaskSwitchContext+0xa8>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a90:	4b23      	ldr	r3, [pc, #140]	; (8008b20 <vTaskSwitchContext+0xac>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	fab3 f383 	clz	r3, r3
 8008a9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a9e:	7afb      	ldrb	r3, [r7, #11]
 8008aa0:	f1c3 031f 	rsb	r3, r3, #31
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	491f      	ldr	r1, [pc, #124]	; (8008b24 <vTaskSwitchContext+0xb0>)
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	440b      	add	r3, r1
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10a      	bne.n	8008ad0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	607b      	str	r3, [r7, #4]
}
 8008acc:	bf00      	nop
 8008ace:	e7fe      	b.n	8008ace <vTaskSwitchContext+0x5a>
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4a12      	ldr	r2, [pc, #72]	; (8008b24 <vTaskSwitchContext+0xb0>)
 8008adc:	4413      	add	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	605a      	str	r2, [r3, #4]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	3308      	adds	r3, #8
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d104      	bne.n	8008b00 <vTaskSwitchContext+0x8c>
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	605a      	str	r2, [r3, #4]
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	4a08      	ldr	r2, [pc, #32]	; (8008b28 <vTaskSwitchContext+0xb4>)
 8008b08:	6013      	str	r3, [r2, #0]
}
 8008b0a:	bf00      	nop
 8008b0c:	371c      	adds	r7, #28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	20000950 	.word	0x20000950
 8008b1c:	2000093c 	.word	0x2000093c
 8008b20:	20000930 	.word	0x20000930
 8008b24:	2000082c 	.word	0x2000082c
 8008b28:	20000828 	.word	0x20000828

08008b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10a      	bne.n	8008b52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	60fb      	str	r3, [r7, #12]
}
 8008b4e:	bf00      	nop
 8008b50:	e7fe      	b.n	8008b50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <vTaskPlaceOnEventList+0x44>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3318      	adds	r3, #24
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7fe fe64 	bl	8007828 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b60:	2101      	movs	r1, #1
 8008b62:	6838      	ldr	r0, [r7, #0]
 8008b64:	f000 fa94 	bl	8009090 <prvAddCurrentTaskToDelayedList>
}
 8008b68:	bf00      	nop
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	20000828 	.word	0x20000828

08008b74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10a      	bne.n	8008b9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	617b      	str	r3, [r7, #20]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3318      	adds	r3, #24
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7fe fe1b 	bl	80077e0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	68b8      	ldr	r0, [r7, #8]
 8008bba:	f000 fa69 	bl	8009090 <prvAddCurrentTaskToDelayedList>
	}
 8008bbe:	bf00      	nop
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000828 	.word	0x20000828

08008bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	60fb      	str	r3, [r7, #12]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	3318      	adds	r3, #24
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fe fe4c 	bl	800789a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c02:	4b1d      	ldr	r3, [pc, #116]	; (8008c78 <xTaskRemoveFromEventList+0xac>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11c      	bne.n	8008c44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fe43 	bl	800789a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c18:	2201      	movs	r2, #1
 8008c1a:	409a      	lsls	r2, r3
 8008c1c:	4b17      	ldr	r3, [pc, #92]	; (8008c7c <xTaskRemoveFromEventList+0xb0>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	4a16      	ldr	r2, [pc, #88]	; (8008c7c <xTaskRemoveFromEventList+0xb0>)
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4a13      	ldr	r2, [pc, #76]	; (8008c80 <xTaskRemoveFromEventList+0xb4>)
 8008c34:	441a      	add	r2, r3
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	f7fe fdcf 	bl	80077e0 <vListInsertEnd>
 8008c42:	e005      	b.n	8008c50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	3318      	adds	r3, #24
 8008c48:	4619      	mov	r1, r3
 8008c4a:	480e      	ldr	r0, [pc, #56]	; (8008c84 <xTaskRemoveFromEventList+0xb8>)
 8008c4c:	f7fe fdc8 	bl	80077e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c54:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <xTaskRemoveFromEventList+0xbc>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d905      	bls.n	8008c6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c62:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <xTaskRemoveFromEventList+0xc0>)
 8008c64:	2201      	movs	r2, #1
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	e001      	b.n	8008c6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c6e:	697b      	ldr	r3, [r7, #20]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	20000950 	.word	0x20000950
 8008c7c:	20000930 	.word	0x20000930
 8008c80:	2000082c 	.word	0x2000082c
 8008c84:	200008e8 	.word	0x200008e8
 8008c88:	20000828 	.word	0x20000828
 8008c8c:	2000093c 	.word	0x2000093c

08008c90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c98:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <vTaskInternalSetTimeOutState+0x24>)
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ca0:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <vTaskInternalSetTimeOutState+0x28>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	605a      	str	r2, [r3, #4]
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	20000940 	.word	0x20000940
 8008cb8:	2000092c 	.word	0x2000092c

08008cbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10a      	bne.n	8008ce2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	613b      	str	r3, [r7, #16]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cec:	f383 8811 	msr	BASEPRI, r3
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	60fb      	str	r3, [r7, #12]
}
 8008cfa:	bf00      	nop
 8008cfc:	e7fe      	b.n	8008cfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008cfe:	f000 ff01 	bl	8009b04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d02:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <xTaskCheckForTimeOut+0xbc>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1a:	d102      	bne.n	8008d22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	e023      	b.n	8008d6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	4b15      	ldr	r3, [pc, #84]	; (8008d7c <xTaskCheckForTimeOut+0xc0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d007      	beq.n	8008d3e <xTaskCheckForTimeOut+0x82>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d302      	bcc.n	8008d3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	e015      	b.n	8008d6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d20b      	bcs.n	8008d60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	1ad2      	subs	r2, r2, r3
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff ff9b 	bl	8008c90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	61fb      	str	r3, [r7, #28]
 8008d5e:	e004      	b.n	8008d6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d66:	2301      	movs	r3, #1
 8008d68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d6a:	f000 fefb 	bl	8009b64 <vPortExitCritical>

	return xReturn;
 8008d6e:	69fb      	ldr	r3, [r7, #28]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3720      	adds	r7, #32
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	2000092c 	.word	0x2000092c
 8008d7c:	20000940 	.word	0x20000940

08008d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d80:	b480      	push	{r7}
 8008d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d84:	4b03      	ldr	r3, [pc, #12]	; (8008d94 <vTaskMissedYield+0x14>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	601a      	str	r2, [r3, #0]
}
 8008d8a:	bf00      	nop
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	2000093c 	.word	0x2000093c

08008d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008da0:	f000 f854 	bl	8008e4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008da4:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <prvIdleTask+0x2c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d907      	bls.n	8008dbc <prvIdleTask+0x24>
			{
				taskYIELD();
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <prvIdleTask+0x30>)
 8008dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008dbc:	f7f8 f8b8 	bl	8000f30 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008dc0:	e7ee      	b.n	8008da0 <prvIdleTask+0x8>
 8008dc2:	bf00      	nop
 8008dc4:	2000082c 	.word	0x2000082c
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	607b      	str	r3, [r7, #4]
 8008dd6:	e00c      	b.n	8008df2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4a12      	ldr	r2, [pc, #72]	; (8008e2c <prvInitialiseTaskLists+0x60>)
 8008de4:	4413      	add	r3, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fccd 	bl	8007786 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3301      	adds	r3, #1
 8008df0:	607b      	str	r3, [r7, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b06      	cmp	r3, #6
 8008df6:	d9ef      	bls.n	8008dd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008df8:	480d      	ldr	r0, [pc, #52]	; (8008e30 <prvInitialiseTaskLists+0x64>)
 8008dfa:	f7fe fcc4 	bl	8007786 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dfe:	480d      	ldr	r0, [pc, #52]	; (8008e34 <prvInitialiseTaskLists+0x68>)
 8008e00:	f7fe fcc1 	bl	8007786 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e04:	480c      	ldr	r0, [pc, #48]	; (8008e38 <prvInitialiseTaskLists+0x6c>)
 8008e06:	f7fe fcbe 	bl	8007786 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e0a:	480c      	ldr	r0, [pc, #48]	; (8008e3c <prvInitialiseTaskLists+0x70>)
 8008e0c:	f7fe fcbb 	bl	8007786 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e10:	480b      	ldr	r0, [pc, #44]	; (8008e40 <prvInitialiseTaskLists+0x74>)
 8008e12:	f7fe fcb8 	bl	8007786 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e16:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <prvInitialiseTaskLists+0x78>)
 8008e18:	4a05      	ldr	r2, [pc, #20]	; (8008e30 <prvInitialiseTaskLists+0x64>)
 8008e1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <prvInitialiseTaskLists+0x7c>)
 8008e1e:	4a05      	ldr	r2, [pc, #20]	; (8008e34 <prvInitialiseTaskLists+0x68>)
 8008e20:	601a      	str	r2, [r3, #0]
}
 8008e22:	bf00      	nop
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	2000082c 	.word	0x2000082c
 8008e30:	200008b8 	.word	0x200008b8
 8008e34:	200008cc 	.word	0x200008cc
 8008e38:	200008e8 	.word	0x200008e8
 8008e3c:	200008fc 	.word	0x200008fc
 8008e40:	20000914 	.word	0x20000914
 8008e44:	200008e0 	.word	0x200008e0
 8008e48:	200008e4 	.word	0x200008e4

08008e4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e52:	e019      	b.n	8008e88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e54:	f000 fe56 	bl	8009b04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e58:	4b10      	ldr	r3, [pc, #64]	; (8008e9c <prvCheckTasksWaitingTermination+0x50>)
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3304      	adds	r3, #4
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe fd18 	bl	800789a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <prvCheckTasksWaitingTermination+0x54>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	4a0b      	ldr	r2, [pc, #44]	; (8008ea0 <prvCheckTasksWaitingTermination+0x54>)
 8008e72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e74:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <prvCheckTasksWaitingTermination+0x58>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ea4 <prvCheckTasksWaitingTermination+0x58>)
 8008e7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e7e:	f000 fe71 	bl	8009b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f810 	bl	8008ea8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e88:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <prvCheckTasksWaitingTermination+0x58>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e1      	bne.n	8008e54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e90:	bf00      	nop
 8008e92:	bf00      	nop
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	200008fc 	.word	0x200008fc
 8008ea0:	20000928 	.word	0x20000928
 8008ea4:	20000910 	.word	0x20000910

08008ea8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d108      	bne.n	8008ecc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 f80e 	bl	8009ee0 <vPortFree>
				vPortFree( pxTCB );
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f001 f80b 	bl	8009ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008eca:	e018      	b.n	8008efe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d103      	bne.n	8008ede <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 f802 	bl	8009ee0 <vPortFree>
	}
 8008edc:	e00f      	b.n	8008efe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d00a      	beq.n	8008efe <prvDeleteTCB+0x56>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	60fb      	str	r3, [r7, #12]
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <prvDeleteTCB+0x54>
	}
 8008efe:	bf00      	nop
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <prvResetNextTaskUnblockTime+0x38>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <prvResetNextTaskUnblockTime+0x3c>)
 8008f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f20:	e008      	b.n	8008f34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f22:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <prvResetNextTaskUnblockTime+0x38>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	4a04      	ldr	r2, [pc, #16]	; (8008f44 <prvResetNextTaskUnblockTime+0x3c>)
 8008f32:	6013      	str	r3, [r2, #0]
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	200008e0 	.word	0x200008e0
 8008f44:	20000948 	.word	0x20000948

08008f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	; (8008f7c <xTaskGetSchedulerState+0x34>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d102      	bne.n	8008f5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f56:	2301      	movs	r3, #1
 8008f58:	607b      	str	r3, [r7, #4]
 8008f5a:	e008      	b.n	8008f6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f5c:	4b08      	ldr	r3, [pc, #32]	; (8008f80 <xTaskGetSchedulerState+0x38>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d102      	bne.n	8008f6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f64:	2302      	movs	r3, #2
 8008f66:	607b      	str	r3, [r7, #4]
 8008f68:	e001      	b.n	8008f6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f6e:	687b      	ldr	r3, [r7, #4]
	}
 8008f70:	4618      	mov	r0, r3
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	20000934 	.word	0x20000934
 8008f80:	20000950 	.word	0x20000950

08008f84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f90:	2300      	movs	r3, #0
 8008f92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d06e      	beq.n	8009078 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f9a:	4b3a      	ldr	r3, [pc, #232]	; (8009084 <xTaskPriorityDisinherit+0x100>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d00a      	beq.n	8008fba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	60fb      	str	r3, [r7, #12]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10a      	bne.n	8008fd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	60bb      	str	r3, [r7, #8]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fdc:	1e5a      	subs	r2, r3, #1
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d044      	beq.n	8009078 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d140      	bne.n	8009078 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fc4d 	bl	800789a <uxListRemove>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d115      	bne.n	8009032 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900a:	491f      	ldr	r1, [pc, #124]	; (8009088 <xTaskPriorityDisinherit+0x104>)
 800900c:	4613      	mov	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	440b      	add	r3, r1
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10a      	bne.n	8009032 <xTaskPriorityDisinherit+0xae>
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009020:	2201      	movs	r2, #1
 8009022:	fa02 f303 	lsl.w	r3, r2, r3
 8009026:	43da      	mvns	r2, r3
 8009028:	4b18      	ldr	r3, [pc, #96]	; (800908c <xTaskPriorityDisinherit+0x108>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4013      	ands	r3, r2
 800902e:	4a17      	ldr	r2, [pc, #92]	; (800908c <xTaskPriorityDisinherit+0x108>)
 8009030:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903e:	f1c3 0207 	rsb	r2, r3, #7
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	2201      	movs	r2, #1
 800904c:	409a      	lsls	r2, r3
 800904e:	4b0f      	ldr	r3, [pc, #60]	; (800908c <xTaskPriorityDisinherit+0x108>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4313      	orrs	r3, r2
 8009054:	4a0d      	ldr	r2, [pc, #52]	; (800908c <xTaskPriorityDisinherit+0x108>)
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4a08      	ldr	r2, [pc, #32]	; (8009088 <xTaskPriorityDisinherit+0x104>)
 8009066:	441a      	add	r2, r3
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	3304      	adds	r3, #4
 800906c:	4619      	mov	r1, r3
 800906e:	4610      	mov	r0, r2
 8009070:	f7fe fbb6 	bl	80077e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009078:	697b      	ldr	r3, [r7, #20]
	}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	20000828 	.word	0x20000828
 8009088:	2000082c 	.word	0x2000082c
 800908c:	20000930 	.word	0x20000930

08009090 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800909a:	4b29      	ldr	r3, [pc, #164]	; (8009140 <prvAddCurrentTaskToDelayedList+0xb0>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090a0:	4b28      	ldr	r3, [pc, #160]	; (8009144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fbf7 	bl	800789a <uxListRemove>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10b      	bne.n	80090ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80090b2:	4b24      	ldr	r3, [pc, #144]	; (8009144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	2201      	movs	r2, #1
 80090ba:	fa02 f303 	lsl.w	r3, r2, r3
 80090be:	43da      	mvns	r2, r3
 80090c0:	4b21      	ldr	r3, [pc, #132]	; (8009148 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4013      	ands	r3, r2
 80090c6:	4a20      	ldr	r2, [pc, #128]	; (8009148 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d0:	d10a      	bne.n	80090e8 <prvAddCurrentTaskToDelayedList+0x58>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d007      	beq.n	80090e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090d8:	4b1a      	ldr	r3, [pc, #104]	; (8009144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3304      	adds	r3, #4
 80090de:	4619      	mov	r1, r3
 80090e0:	481a      	ldr	r0, [pc, #104]	; (800914c <prvAddCurrentTaskToDelayedList+0xbc>)
 80090e2:	f7fe fb7d 	bl	80077e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090e6:	e026      	b.n	8009136 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4413      	add	r3, r2
 80090ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090f0:	4b14      	ldr	r3, [pc, #80]	; (8009144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d209      	bcs.n	8009114 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009100:	4b13      	ldr	r3, [pc, #76]	; (8009150 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	4b0f      	ldr	r3, [pc, #60]	; (8009144 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3304      	adds	r3, #4
 800910a:	4619      	mov	r1, r3
 800910c:	4610      	mov	r0, r2
 800910e:	f7fe fb8b 	bl	8007828 <vListInsert>
}
 8009112:	e010      	b.n	8009136 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009114:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <prvAddCurrentTaskToDelayedList+0xb4>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3304      	adds	r3, #4
 800911e:	4619      	mov	r1, r3
 8009120:	4610      	mov	r0, r2
 8009122:	f7fe fb81 	bl	8007828 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009126:	4b0c      	ldr	r3, [pc, #48]	; (8009158 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	429a      	cmp	r2, r3
 800912e:	d202      	bcs.n	8009136 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009130:	4a09      	ldr	r2, [pc, #36]	; (8009158 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	6013      	str	r3, [r2, #0]
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	2000092c 	.word	0x2000092c
 8009144:	20000828 	.word	0x20000828
 8009148:	20000930 	.word	0x20000930
 800914c:	20000914 	.word	0x20000914
 8009150:	200008e4 	.word	0x200008e4
 8009154:	200008e0 	.word	0x200008e0
 8009158:	20000948 	.word	0x20000948

0800915c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	; 0x28
 8009160:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009162:	2300      	movs	r3, #0
 8009164:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009166:	f000 fb63 	bl	8009830 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800916a:	4b1c      	ldr	r3, [pc, #112]	; (80091dc <xTimerCreateTimerTask+0x80>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d021      	beq.n	80091b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800917a:	1d3a      	adds	r2, r7, #4
 800917c:	f107 0108 	add.w	r1, r7, #8
 8009180:	f107 030c 	add.w	r3, r7, #12
 8009184:	4618      	mov	r0, r3
 8009186:	f7f7 fa17 	bl	80005b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	9202      	str	r2, [sp, #8]
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	2303      	movs	r3, #3
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	2300      	movs	r3, #0
 800919a:	460a      	mov	r2, r1
 800919c:	4910      	ldr	r1, [pc, #64]	; (80091e0 <xTimerCreateTimerTask+0x84>)
 800919e:	4811      	ldr	r0, [pc, #68]	; (80091e4 <xTimerCreateTimerTask+0x88>)
 80091a0:	f7ff f8c8 	bl	8008334 <xTaskCreateStatic>
 80091a4:	4603      	mov	r3, r0
 80091a6:	4a10      	ldr	r2, [pc, #64]	; (80091e8 <xTimerCreateTimerTask+0x8c>)
 80091a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091aa:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <xTimerCreateTimerTask+0x8c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091b2:	2301      	movs	r3, #1
 80091b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	613b      	str	r3, [r7, #16]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80091d2:	697b      	ldr	r3, [r7, #20]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	20000984 	.word	0x20000984
 80091e0:	0800abd4 	.word	0x0800abd4
 80091e4:	080093d9 	.word	0x080093d9
 80091e8:	20000988 	.word	0x20000988

080091ec <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80091fa:	2028      	movs	r0, #40	; 0x28
 80091fc:	f000 fda4 	bl	8009d48 <pvPortMalloc>
 8009200:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00d      	beq.n	8009224 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 f805 	bl	800922e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009224:	697b      	ldr	r3, [r7, #20]
	}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b086      	sub	sp, #24
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	60b9      	str	r1, [r7, #8]
 8009238:	607a      	str	r2, [r7, #4]
 800923a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	617b      	str	r3, [r7, #20]
}
 8009254:	bf00      	nop
 8009256:	e7fe      	b.n	8009256 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	2b00      	cmp	r3, #0
 800925c:	d01e      	beq.n	800929c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800925e:	f000 fae7 	bl	8009830 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	6a3a      	ldr	r2, [r7, #32]
 8009278:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	3304      	adds	r3, #4
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe faa1 	bl	80077c6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d008      	beq.n	800929c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009290:	f043 0304 	orr.w	r3, r3, #4
 8009294:	b2da      	uxtb	r2, r3
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800929c:	bf00      	nop
 800929e:	3718      	adds	r7, #24
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08a      	sub	sp, #40	; 0x28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	623b      	str	r3, [r7, #32]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092d2:	4b1a      	ldr	r3, [pc, #104]	; (800933c <xTimerGenericCommand+0x98>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d02a      	beq.n	8009330 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b05      	cmp	r3, #5
 80092ea:	dc18      	bgt.n	800931e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092ec:	f7ff fe2c 	bl	8008f48 <xTaskGetSchedulerState>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d109      	bne.n	800930a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092f6:	4b11      	ldr	r3, [pc, #68]	; (800933c <xTimerGenericCommand+0x98>)
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	f107 0110 	add.w	r1, r7, #16
 80092fe:	2300      	movs	r3, #0
 8009300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009302:	f7fe fc2f 	bl	8007b64 <xQueueGenericSend>
 8009306:	6278      	str	r0, [r7, #36]	; 0x24
 8009308:	e012      	b.n	8009330 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800930a:	4b0c      	ldr	r3, [pc, #48]	; (800933c <xTimerGenericCommand+0x98>)
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	f107 0110 	add.w	r1, r7, #16
 8009312:	2300      	movs	r3, #0
 8009314:	2200      	movs	r2, #0
 8009316:	f7fe fc25 	bl	8007b64 <xQueueGenericSend>
 800931a:	6278      	str	r0, [r7, #36]	; 0x24
 800931c:	e008      	b.n	8009330 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800931e:	4b07      	ldr	r3, [pc, #28]	; (800933c <xTimerGenericCommand+0x98>)
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	f107 0110 	add.w	r1, r7, #16
 8009326:	2300      	movs	r3, #0
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	f7fe fd19 	bl	8007d60 <xQueueGenericSendFromISR>
 800932e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009332:	4618      	mov	r0, r3
 8009334:	3728      	adds	r7, #40	; 0x28
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20000984 	.word	0x20000984

08009340 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b088      	sub	sp, #32
 8009344:	af02      	add	r7, sp, #8
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800934a:	4b22      	ldr	r3, [pc, #136]	; (80093d4 <prvProcessExpiredTimer+0x94>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	3304      	adds	r3, #4
 8009358:	4618      	mov	r0, r3
 800935a:	f7fe fa9e 	bl	800789a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b00      	cmp	r3, #0
 800936a:	d022      	beq.n	80093b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	699a      	ldr	r2, [r3, #24]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	18d1      	adds	r1, r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	6978      	ldr	r0, [r7, #20]
 800937a:	f000 f8d1 	bl	8009520 <prvInsertTimerInActiveList>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d01f      	beq.n	80093c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009384:	2300      	movs	r3, #0
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	2300      	movs	r3, #0
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	2100      	movs	r1, #0
 800938e:	6978      	ldr	r0, [r7, #20]
 8009390:	f7ff ff88 	bl	80092a4 <xTimerGenericCommand>
 8009394:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d113      	bne.n	80093c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	60fb      	str	r3, [r7, #12]
}
 80093ae:	bf00      	nop
 80093b0:	e7fe      	b.n	80093b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093b8:	f023 0301 	bic.w	r3, r3, #1
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	6978      	ldr	r0, [r7, #20]
 80093ca:	4798      	blx	r3
}
 80093cc:	bf00      	nop
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	2000097c 	.word	0x2000097c

080093d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093e0:	f107 0308 	add.w	r3, r7, #8
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 f857 	bl	8009498 <prvGetNextExpireTime>
 80093ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	4619      	mov	r1, r3
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 f803 	bl	80093fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093f6:	f000 f8d5 	bl	80095a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093fa:	e7f1      	b.n	80093e0 <prvTimerTask+0x8>

080093fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009406:	f7ff f9c3 	bl	8008790 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800940a:	f107 0308 	add.w	r3, r7, #8
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f866 	bl	80094e0 <prvSampleTimeNow>
 8009414:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d130      	bne.n	800947e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10a      	bne.n	8009438 <prvProcessTimerOrBlockTask+0x3c>
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	429a      	cmp	r2, r3
 8009428:	d806      	bhi.n	8009438 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800942a:	f7ff f9bf 	bl	80087ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800942e:	68f9      	ldr	r1, [r7, #12]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff ff85 	bl	8009340 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009436:	e024      	b.n	8009482 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d008      	beq.n	8009450 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800943e:	4b13      	ldr	r3, [pc, #76]	; (800948c <prvProcessTimerOrBlockTask+0x90>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <prvProcessTimerOrBlockTask+0x50>
 8009448:	2301      	movs	r3, #1
 800944a:	e000      	b.n	800944e <prvProcessTimerOrBlockTask+0x52>
 800944c:	2300      	movs	r3, #0
 800944e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009450:	4b0f      	ldr	r3, [pc, #60]	; (8009490 <prvProcessTimerOrBlockTask+0x94>)
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	4619      	mov	r1, r3
 800945e:	f7fe ff35 	bl	80082cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009462:	f7ff f9a3 	bl	80087ac <xTaskResumeAll>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800946c:	4b09      	ldr	r3, [pc, #36]	; (8009494 <prvProcessTimerOrBlockTask+0x98>)
 800946e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	f3bf 8f6f 	isb	sy
}
 800947c:	e001      	b.n	8009482 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800947e:	f7ff f995 	bl	80087ac <xTaskResumeAll>
}
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20000980 	.word	0x20000980
 8009490:	20000984 	.word	0x20000984
 8009494:	e000ed04 	.word	0xe000ed04

08009498 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094a0:	4b0e      	ldr	r3, [pc, #56]	; (80094dc <prvGetNextExpireTime+0x44>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <prvGetNextExpireTime+0x16>
 80094aa:	2201      	movs	r2, #1
 80094ac:	e000      	b.n	80094b0 <prvGetNextExpireTime+0x18>
 80094ae:	2200      	movs	r2, #0
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d105      	bne.n	80094c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094bc:	4b07      	ldr	r3, [pc, #28]	; (80094dc <prvGetNextExpireTime+0x44>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	60fb      	str	r3, [r7, #12]
 80094c6:	e001      	b.n	80094cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094cc:	68fb      	ldr	r3, [r7, #12]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	2000097c 	.word	0x2000097c

080094e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094e8:	f7ff f9fc 	bl	80088e4 <xTaskGetTickCount>
 80094ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094ee:	4b0b      	ldr	r3, [pc, #44]	; (800951c <prvSampleTimeNow+0x3c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d205      	bcs.n	8009504 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094f8:	f000 f936 	bl	8009768 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	e002      	b.n	800950a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800950a:	4a04      	ldr	r2, [pc, #16]	; (800951c <prvSampleTimeNow+0x3c>)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009510:	68fb      	ldr	r3, [r7, #12]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	2000098c 	.word	0x2000098c

08009520 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
 800952c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800952e:	2300      	movs	r3, #0
 8009530:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	429a      	cmp	r2, r3
 8009544:	d812      	bhi.n	800956c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	1ad2      	subs	r2, r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	429a      	cmp	r2, r3
 8009552:	d302      	bcc.n	800955a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	617b      	str	r3, [r7, #20]
 8009558:	e01b      	b.n	8009592 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800955a:	4b10      	ldr	r3, [pc, #64]	; (800959c <prvInsertTimerInActiveList+0x7c>)
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3304      	adds	r3, #4
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f7fe f95f 	bl	8007828 <vListInsert>
 800956a:	e012      	b.n	8009592 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d206      	bcs.n	8009582 <prvInsertTimerInActiveList+0x62>
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d302      	bcc.n	8009582 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800957c:	2301      	movs	r3, #1
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e007      	b.n	8009592 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009582:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <prvInsertTimerInActiveList+0x80>)
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3304      	adds	r3, #4
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f7fe f94b 	bl	8007828 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009592:	697b      	ldr	r3, [r7, #20]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3718      	adds	r7, #24
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20000980 	.word	0x20000980
 80095a0:	2000097c 	.word	0x2000097c

080095a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08e      	sub	sp, #56	; 0x38
 80095a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095aa:	e0ca      	b.n	8009742 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	da18      	bge.n	80095e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095b2:	1d3b      	adds	r3, r7, #4
 80095b4:	3304      	adds	r3, #4
 80095b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10a      	bne.n	80095d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	61fb      	str	r3, [r7, #28]
}
 80095d0:	bf00      	nop
 80095d2:	e7fe      	b.n	80095d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095da:	6850      	ldr	r0, [r2, #4]
 80095dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095de:	6892      	ldr	r2, [r2, #8]
 80095e0:	4611      	mov	r1, r2
 80095e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f2c0 80aa 	blt.w	8009740 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d004      	beq.n	8009602 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	3304      	adds	r3, #4
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe f94c 	bl	800789a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009602:	463b      	mov	r3, r7
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff ff6b 	bl	80094e0 <prvSampleTimeNow>
 800960a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b09      	cmp	r3, #9
 8009610:	f200 8097 	bhi.w	8009742 <prvProcessReceivedCommands+0x19e>
 8009614:	a201      	add	r2, pc, #4	; (adr r2, 800961c <prvProcessReceivedCommands+0x78>)
 8009616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961a:	bf00      	nop
 800961c:	08009645 	.word	0x08009645
 8009620:	08009645 	.word	0x08009645
 8009624:	08009645 	.word	0x08009645
 8009628:	080096b9 	.word	0x080096b9
 800962c:	080096cd 	.word	0x080096cd
 8009630:	08009717 	.word	0x08009717
 8009634:	08009645 	.word	0x08009645
 8009638:	08009645 	.word	0x08009645
 800963c:	080096b9 	.word	0x080096b9
 8009640:	080096cd 	.word	0x080096cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800964a:	f043 0301 	orr.w	r3, r3, #1
 800964e:	b2da      	uxtb	r2, r3
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	18d1      	adds	r1, r2, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009664:	f7ff ff5c 	bl	8009520 <prvInsertTimerInActiveList>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d069      	beq.n	8009742 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009674:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b00      	cmp	r3, #0
 8009682:	d05e      	beq.n	8009742 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	441a      	add	r2, r3
 800968c:	2300      	movs	r3, #0
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	2300      	movs	r3, #0
 8009692:	2100      	movs	r1, #0
 8009694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009696:	f7ff fe05 	bl	80092a4 <xTimerGenericCommand>
 800969a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d14f      	bne.n	8009742 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	61bb      	str	r3, [r7, #24]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096be:	f023 0301 	bic.w	r3, r3, #1
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80096ca:	e03a      	b.n	8009742 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10a      	bne.n	8009702 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	617b      	str	r3, [r7, #20]
}
 80096fe:	bf00      	nop
 8009700:	e7fe      	b.n	8009700 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	699a      	ldr	r2, [r3, #24]
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	18d1      	adds	r1, r2, r3
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800970e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009710:	f7ff ff06 	bl	8009520 <prvInsertTimerInActiveList>
					break;
 8009714:	e015      	b.n	8009742 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009726:	f000 fbdb 	bl	8009ee0 <vPortFree>
 800972a:	e00a      	b.n	8009742 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009732:	f023 0301 	bic.w	r3, r3, #1
 8009736:	b2da      	uxtb	r2, r3
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800973e:	e000      	b.n	8009742 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009740:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009742:	4b08      	ldr	r3, [pc, #32]	; (8009764 <prvProcessReceivedCommands+0x1c0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	1d39      	adds	r1, r7, #4
 8009748:	2200      	movs	r2, #0
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fba4 	bl	8007e98 <xQueueReceive>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	f47f af2a 	bne.w	80095ac <prvProcessReceivedCommands+0x8>
	}
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	3730      	adds	r7, #48	; 0x30
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	20000984 	.word	0x20000984

08009768 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800976e:	e048      	b.n	8009802 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009770:	4b2d      	ldr	r3, [pc, #180]	; (8009828 <prvSwitchTimerLists+0xc0>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800977a:	4b2b      	ldr	r3, [pc, #172]	; (8009828 <prvSwitchTimerLists+0xc0>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3304      	adds	r3, #4
 8009788:	4618      	mov	r0, r3
 800978a:	f7fe f886 	bl	800789a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d02e      	beq.n	8009802 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	4413      	add	r3, r2
 80097ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d90e      	bls.n	80097d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097c2:	4b19      	ldr	r3, [pc, #100]	; (8009828 <prvSwitchTimerLists+0xc0>)
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3304      	adds	r3, #4
 80097ca:	4619      	mov	r1, r3
 80097cc:	4610      	mov	r0, r2
 80097ce:	f7fe f82b 	bl	8007828 <vListInsert>
 80097d2:	e016      	b.n	8009802 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097d4:	2300      	movs	r3, #0
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	2300      	movs	r3, #0
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	2100      	movs	r1, #0
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f7ff fd60 	bl	80092a4 <xTimerGenericCommand>
 80097e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10a      	bne.n	8009802 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	603b      	str	r3, [r7, #0]
}
 80097fe:	bf00      	nop
 8009800:	e7fe      	b.n	8009800 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009802:	4b09      	ldr	r3, [pc, #36]	; (8009828 <prvSwitchTimerLists+0xc0>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1b1      	bne.n	8009770 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800980c:	4b06      	ldr	r3, [pc, #24]	; (8009828 <prvSwitchTimerLists+0xc0>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <prvSwitchTimerLists+0xc4>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a04      	ldr	r2, [pc, #16]	; (8009828 <prvSwitchTimerLists+0xc0>)
 8009818:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800981a:	4a04      	ldr	r2, [pc, #16]	; (800982c <prvSwitchTimerLists+0xc4>)
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	6013      	str	r3, [r2, #0]
}
 8009820:	bf00      	nop
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	2000097c 	.word	0x2000097c
 800982c:	20000980 	.word	0x20000980

08009830 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009836:	f000 f965 	bl	8009b04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800983a:	4b15      	ldr	r3, [pc, #84]	; (8009890 <prvCheckForValidListAndQueue+0x60>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d120      	bne.n	8009884 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009842:	4814      	ldr	r0, [pc, #80]	; (8009894 <prvCheckForValidListAndQueue+0x64>)
 8009844:	f7fd ff9f 	bl	8007786 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009848:	4813      	ldr	r0, [pc, #76]	; (8009898 <prvCheckForValidListAndQueue+0x68>)
 800984a:	f7fd ff9c 	bl	8007786 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <prvCheckForValidListAndQueue+0x6c>)
 8009850:	4a10      	ldr	r2, [pc, #64]	; (8009894 <prvCheckForValidListAndQueue+0x64>)
 8009852:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009854:	4b12      	ldr	r3, [pc, #72]	; (80098a0 <prvCheckForValidListAndQueue+0x70>)
 8009856:	4a10      	ldr	r2, [pc, #64]	; (8009898 <prvCheckForValidListAndQueue+0x68>)
 8009858:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800985a:	2300      	movs	r3, #0
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	4b11      	ldr	r3, [pc, #68]	; (80098a4 <prvCheckForValidListAndQueue+0x74>)
 8009860:	4a11      	ldr	r2, [pc, #68]	; (80098a8 <prvCheckForValidListAndQueue+0x78>)
 8009862:	2110      	movs	r1, #16
 8009864:	200a      	movs	r0, #10
 8009866:	f7fe f8ab 	bl	80079c0 <xQueueGenericCreateStatic>
 800986a:	4603      	mov	r3, r0
 800986c:	4a08      	ldr	r2, [pc, #32]	; (8009890 <prvCheckForValidListAndQueue+0x60>)
 800986e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <prvCheckForValidListAndQueue+0x60>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009878:	4b05      	ldr	r3, [pc, #20]	; (8009890 <prvCheckForValidListAndQueue+0x60>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	490b      	ldr	r1, [pc, #44]	; (80098ac <prvCheckForValidListAndQueue+0x7c>)
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe fcfa 	bl	8008278 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009884:	f000 f96e 	bl	8009b64 <vPortExitCritical>
}
 8009888:	bf00      	nop
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000984 	.word	0x20000984
 8009894:	20000954 	.word	0x20000954
 8009898:	20000968 	.word	0x20000968
 800989c:	2000097c 	.word	0x2000097c
 80098a0:	20000980 	.word	0x20000980
 80098a4:	20000a30 	.word	0x20000a30
 80098a8:	20000990 	.word	0x20000990
 80098ac:	0800abdc 	.word	0x0800abdc

080098b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	3b04      	subs	r3, #4
 80098c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3b04      	subs	r3, #4
 80098ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f023 0201 	bic.w	r2, r3, #1
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3b04      	subs	r3, #4
 80098de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098e0:	4a0c      	ldr	r2, [pc, #48]	; (8009914 <pxPortInitialiseStack+0x64>)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3b14      	subs	r3, #20
 80098ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3b04      	subs	r3, #4
 80098f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f06f 0202 	mvn.w	r2, #2
 80098fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3b20      	subs	r3, #32
 8009904:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009906:	68fb      	ldr	r3, [r7, #12]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	08009919 	.word	0x08009919

08009918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009922:	4b12      	ldr	r3, [pc, #72]	; (800996c <prvTaskExitError+0x54>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992a:	d00a      	beq.n	8009942 <prvTaskExitError+0x2a>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	60fb      	str	r3, [r7, #12]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <prvTaskExitError+0x28>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	60bb      	str	r3, [r7, #8]
}
 8009954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009956:	bf00      	nop
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0fc      	beq.n	8009958 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800995e:	bf00      	nop
 8009960:	bf00      	nop
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	2000000c 	.word	0x2000000c

08009970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009970:	4b07      	ldr	r3, [pc, #28]	; (8009990 <pxCurrentTCBConst2>)
 8009972:	6819      	ldr	r1, [r3, #0]
 8009974:	6808      	ldr	r0, [r1, #0]
 8009976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997a:	f380 8809 	msr	PSP, r0
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f04f 0000 	mov.w	r0, #0
 8009986:	f380 8811 	msr	BASEPRI, r0
 800998a:	4770      	bx	lr
 800998c:	f3af 8000 	nop.w

08009990 <pxCurrentTCBConst2>:
 8009990:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009994:	bf00      	nop
 8009996:	bf00      	nop

08009998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009998:	4808      	ldr	r0, [pc, #32]	; (80099bc <prvPortStartFirstTask+0x24>)
 800999a:	6800      	ldr	r0, [r0, #0]
 800999c:	6800      	ldr	r0, [r0, #0]
 800999e:	f380 8808 	msr	MSP, r0
 80099a2:	f04f 0000 	mov.w	r0, #0
 80099a6:	f380 8814 	msr	CONTROL, r0
 80099aa:	b662      	cpsie	i
 80099ac:	b661      	cpsie	f
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	df00      	svc	0
 80099b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099ba:	bf00      	nop
 80099bc:	e000ed08 	.word	0xe000ed08

080099c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099c6:	4b46      	ldr	r3, [pc, #280]	; (8009ae0 <xPortStartScheduler+0x120>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a46      	ldr	r2, [pc, #280]	; (8009ae4 <xPortStartScheduler+0x124>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d10a      	bne.n	80099e6 <xPortStartScheduler+0x26>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	613b      	str	r3, [r7, #16]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099e6:	4b3e      	ldr	r3, [pc, #248]	; (8009ae0 <xPortStartScheduler+0x120>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a3f      	ldr	r2, [pc, #252]	; (8009ae8 <xPortStartScheduler+0x128>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d10a      	bne.n	8009a06 <xPortStartScheduler+0x46>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	60fb      	str	r3, [r7, #12]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a06:	4b39      	ldr	r3, [pc, #228]	; (8009aec <xPortStartScheduler+0x12c>)
 8009a08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	22ff      	movs	r2, #255	; 0xff
 8009a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	4b31      	ldr	r3, [pc, #196]	; (8009af0 <xPortStartScheduler+0x130>)
 8009a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a2e:	4b31      	ldr	r3, [pc, #196]	; (8009af4 <xPortStartScheduler+0x134>)
 8009a30:	2207      	movs	r2, #7
 8009a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a34:	e009      	b.n	8009a4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a36:	4b2f      	ldr	r3, [pc, #188]	; (8009af4 <xPortStartScheduler+0x134>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	4a2d      	ldr	r2, [pc, #180]	; (8009af4 <xPortStartScheduler+0x134>)
 8009a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a4a:	78fb      	ldrb	r3, [r7, #3]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a52:	2b80      	cmp	r3, #128	; 0x80
 8009a54:	d0ef      	beq.n	8009a36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a56:	4b27      	ldr	r3, [pc, #156]	; (8009af4 <xPortStartScheduler+0x134>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f1c3 0307 	rsb	r3, r3, #7
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d00a      	beq.n	8009a78 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	60bb      	str	r3, [r7, #8]
}
 8009a74:	bf00      	nop
 8009a76:	e7fe      	b.n	8009a76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a78:	4b1e      	ldr	r3, [pc, #120]	; (8009af4 <xPortStartScheduler+0x134>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	021b      	lsls	r3, r3, #8
 8009a7e:	4a1d      	ldr	r2, [pc, #116]	; (8009af4 <xPortStartScheduler+0x134>)
 8009a80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a82:	4b1c      	ldr	r3, [pc, #112]	; (8009af4 <xPortStartScheduler+0x134>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a8a:	4a1a      	ldr	r2, [pc, #104]	; (8009af4 <xPortStartScheduler+0x134>)
 8009a8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a96:	4b18      	ldr	r3, [pc, #96]	; (8009af8 <xPortStartScheduler+0x138>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a17      	ldr	r2, [pc, #92]	; (8009af8 <xPortStartScheduler+0x138>)
 8009a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009aa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009aa2:	4b15      	ldr	r3, [pc, #84]	; (8009af8 <xPortStartScheduler+0x138>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a14      	ldr	r2, [pc, #80]	; (8009af8 <xPortStartScheduler+0x138>)
 8009aa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009aac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009aae:	f000 f8dd 	bl	8009c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ab2:	4b12      	ldr	r3, [pc, #72]	; (8009afc <xPortStartScheduler+0x13c>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ab8:	f000 f8fc 	bl	8009cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009abc:	4b10      	ldr	r3, [pc, #64]	; (8009b00 <xPortStartScheduler+0x140>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a0f      	ldr	r2, [pc, #60]	; (8009b00 <xPortStartScheduler+0x140>)
 8009ac2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ac6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ac8:	f7ff ff66 	bl	8009998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009acc:	f7fe ffd2 	bl	8008a74 <vTaskSwitchContext>
	prvTaskExitError();
 8009ad0:	f7ff ff22 	bl	8009918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	e000ed00 	.word	0xe000ed00
 8009ae4:	410fc271 	.word	0x410fc271
 8009ae8:	410fc270 	.word	0x410fc270
 8009aec:	e000e400 	.word	0xe000e400
 8009af0:	20000a78 	.word	0x20000a78
 8009af4:	20000a7c 	.word	0x20000a7c
 8009af8:	e000ed20 	.word	0xe000ed20
 8009afc:	2000000c 	.word	0x2000000c
 8009b00:	e000ef34 	.word	0xe000ef34

08009b04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	607b      	str	r3, [r7, #4]
}
 8009b1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <vPortEnterCritical+0x58>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3301      	adds	r3, #1
 8009b24:	4a0d      	ldr	r2, [pc, #52]	; (8009b5c <vPortEnterCritical+0x58>)
 8009b26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b28:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <vPortEnterCritical+0x58>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d10f      	bne.n	8009b50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b30:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <vPortEnterCritical+0x5c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00a      	beq.n	8009b50 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	603b      	str	r3, [r7, #0]
}
 8009b4c:	bf00      	nop
 8009b4e:	e7fe      	b.n	8009b4e <vPortEnterCritical+0x4a>
	}
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	2000000c 	.word	0x2000000c
 8009b60:	e000ed04 	.word	0xe000ed04

08009b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b6a:	4b12      	ldr	r3, [pc, #72]	; (8009bb4 <vPortExitCritical+0x50>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10a      	bne.n	8009b88 <vPortExitCritical+0x24>
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	607b      	str	r3, [r7, #4]
}
 8009b84:	bf00      	nop
 8009b86:	e7fe      	b.n	8009b86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b88:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <vPortExitCritical+0x50>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	4a09      	ldr	r2, [pc, #36]	; (8009bb4 <vPortExitCritical+0x50>)
 8009b90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b92:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <vPortExitCritical+0x50>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d105      	bne.n	8009ba6 <vPortExitCritical+0x42>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	f383 8811 	msr	BASEPRI, r3
}
 8009ba4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ba6:	bf00      	nop
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	2000000c 	.word	0x2000000c
	...

08009bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bc0:	f3ef 8009 	mrs	r0, PSP
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	4b15      	ldr	r3, [pc, #84]	; (8009c20 <pxCurrentTCBConst>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	f01e 0f10 	tst.w	lr, #16
 8009bd0:	bf08      	it	eq
 8009bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bda:	6010      	str	r0, [r2, #0]
 8009bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009be4:	f380 8811 	msr	BASEPRI, r0
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f7fe ff40 	bl	8008a74 <vTaskSwitchContext>
 8009bf4:	f04f 0000 	mov.w	r0, #0
 8009bf8:	f380 8811 	msr	BASEPRI, r0
 8009bfc:	bc09      	pop	{r0, r3}
 8009bfe:	6819      	ldr	r1, [r3, #0]
 8009c00:	6808      	ldr	r0, [r1, #0]
 8009c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c06:	f01e 0f10 	tst.w	lr, #16
 8009c0a:	bf08      	it	eq
 8009c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c10:	f380 8809 	msr	PSP, r0
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	f3af 8000 	nop.w

08009c20 <pxCurrentTCBConst>:
 8009c20:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop

08009c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	607b      	str	r3, [r7, #4]
}
 8009c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c42:	f7fe fe5f 	bl	8008904 <xTaskIncrementTick>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <SysTick_Handler+0x40>)
 8009c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	2300      	movs	r3, #0
 8009c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	f383 8811 	msr	BASEPRI, r3
}
 8009c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	e000ed04 	.word	0xe000ed04

08009c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c70:	4b0b      	ldr	r3, [pc, #44]	; (8009ca0 <vPortSetupTimerInterrupt+0x34>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c76:	4b0b      	ldr	r3, [pc, #44]	; (8009ca4 <vPortSetupTimerInterrupt+0x38>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ca8 <vPortSetupTimerInterrupt+0x3c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a0a      	ldr	r2, [pc, #40]	; (8009cac <vPortSetupTimerInterrupt+0x40>)
 8009c82:	fba2 2303 	umull	r2, r3, r2, r3
 8009c86:	099b      	lsrs	r3, r3, #6
 8009c88:	4a09      	ldr	r2, [pc, #36]	; (8009cb0 <vPortSetupTimerInterrupt+0x44>)
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c8e:	4b04      	ldr	r3, [pc, #16]	; (8009ca0 <vPortSetupTimerInterrupt+0x34>)
 8009c90:	2207      	movs	r2, #7
 8009c92:	601a      	str	r2, [r3, #0]
}
 8009c94:	bf00      	nop
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	e000e010 	.word	0xe000e010
 8009ca4:	e000e018 	.word	0xe000e018
 8009ca8:	20000000 	.word	0x20000000
 8009cac:	10624dd3 	.word	0x10624dd3
 8009cb0:	e000e014 	.word	0xe000e014

08009cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cc4 <vPortEnableVFP+0x10>
 8009cb8:	6801      	ldr	r1, [r0, #0]
 8009cba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cbe:	6001      	str	r1, [r0, #0]
 8009cc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cc2:	bf00      	nop
 8009cc4:	e000ed88 	.word	0xe000ed88

08009cc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cce:	f3ef 8305 	mrs	r3, IPSR
 8009cd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b0f      	cmp	r3, #15
 8009cd8:	d914      	bls.n	8009d04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cda:	4a17      	ldr	r2, [pc, #92]	; (8009d38 <vPortValidateInterruptPriority+0x70>)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ce4:	4b15      	ldr	r3, [pc, #84]	; (8009d3c <vPortValidateInterruptPriority+0x74>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	7afa      	ldrb	r2, [r7, #11]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d20a      	bcs.n	8009d04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	607b      	str	r3, [r7, #4]
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d04:	4b0e      	ldr	r3, [pc, #56]	; (8009d40 <vPortValidateInterruptPriority+0x78>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d0c:	4b0d      	ldr	r3, [pc, #52]	; (8009d44 <vPortValidateInterruptPriority+0x7c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d90a      	bls.n	8009d2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	603b      	str	r3, [r7, #0]
}
 8009d26:	bf00      	nop
 8009d28:	e7fe      	b.n	8009d28 <vPortValidateInterruptPriority+0x60>
	}
 8009d2a:	bf00      	nop
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	e000e3f0 	.word	0xe000e3f0
 8009d3c:	20000a78 	.word	0x20000a78
 8009d40:	e000ed0c 	.word	0xe000ed0c
 8009d44:	20000a7c 	.word	0x20000a7c

08009d48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08a      	sub	sp, #40	; 0x28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d54:	f7fe fd1c 	bl	8008790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d58:	4b5b      	ldr	r3, [pc, #364]	; (8009ec8 <pvPortMalloc+0x180>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d60:	f000 f920 	bl	8009fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d64:	4b59      	ldr	r3, [pc, #356]	; (8009ecc <pvPortMalloc+0x184>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f040 8093 	bne.w	8009e98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d01d      	beq.n	8009db4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d78:	2208      	movs	r2, #8
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f003 0307 	and.w	r3, r3, #7
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d014      	beq.n	8009db4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f023 0307 	bic.w	r3, r3, #7
 8009d90:	3308      	adds	r3, #8
 8009d92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <pvPortMalloc+0x6c>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	617b      	str	r3, [r7, #20]
}
 8009db0:	bf00      	nop
 8009db2:	e7fe      	b.n	8009db2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d06e      	beq.n	8009e98 <pvPortMalloc+0x150>
 8009dba:	4b45      	ldr	r3, [pc, #276]	; (8009ed0 <pvPortMalloc+0x188>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d869      	bhi.n	8009e98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dc4:	4b43      	ldr	r3, [pc, #268]	; (8009ed4 <pvPortMalloc+0x18c>)
 8009dc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dc8:	4b42      	ldr	r3, [pc, #264]	; (8009ed4 <pvPortMalloc+0x18c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dce:	e004      	b.n	8009dda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d903      	bls.n	8009dec <pvPortMalloc+0xa4>
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1f1      	bne.n	8009dd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009dec:	4b36      	ldr	r3, [pc, #216]	; (8009ec8 <pvPortMalloc+0x180>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d050      	beq.n	8009e98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2208      	movs	r2, #8
 8009dfc:	4413      	add	r3, r2
 8009dfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	1ad2      	subs	r2, r2, r3
 8009e10:	2308      	movs	r3, #8
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d91f      	bls.n	8009e58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <pvPortMalloc+0xf8>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	613b      	str	r3, [r7, #16]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	1ad2      	subs	r2, r2, r3
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e52:	69b8      	ldr	r0, [r7, #24]
 8009e54:	f000 f908 	bl	800a068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e58:	4b1d      	ldr	r3, [pc, #116]	; (8009ed0 <pvPortMalloc+0x188>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	4a1b      	ldr	r2, [pc, #108]	; (8009ed0 <pvPortMalloc+0x188>)
 8009e64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e66:	4b1a      	ldr	r3, [pc, #104]	; (8009ed0 <pvPortMalloc+0x188>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	4b1b      	ldr	r3, [pc, #108]	; (8009ed8 <pvPortMalloc+0x190>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d203      	bcs.n	8009e7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e72:	4b17      	ldr	r3, [pc, #92]	; (8009ed0 <pvPortMalloc+0x188>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a18      	ldr	r2, [pc, #96]	; (8009ed8 <pvPortMalloc+0x190>)
 8009e78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	4b13      	ldr	r3, [pc, #76]	; (8009ecc <pvPortMalloc+0x184>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	431a      	orrs	r2, r3
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e8e:	4b13      	ldr	r3, [pc, #76]	; (8009edc <pvPortMalloc+0x194>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3301      	adds	r3, #1
 8009e94:	4a11      	ldr	r2, [pc, #68]	; (8009edc <pvPortMalloc+0x194>)
 8009e96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e98:	f7fe fc88 	bl	80087ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	f003 0307 	and.w	r3, r3, #7
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <pvPortMalloc+0x174>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	60fb      	str	r3, [r7, #12]
}
 8009eb8:	bf00      	nop
 8009eba:	e7fe      	b.n	8009eba <pvPortMalloc+0x172>
	return pvReturn;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3728      	adds	r7, #40	; 0x28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20003968 	.word	0x20003968
 8009ecc:	2000397c 	.word	0x2000397c
 8009ed0:	2000396c 	.word	0x2000396c
 8009ed4:	20003960 	.word	0x20003960
 8009ed8:	20003970 	.word	0x20003970
 8009edc:	20003974 	.word	0x20003974

08009ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d04d      	beq.n	8009f8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ef2:	2308      	movs	r3, #8
 8009ef4:	425b      	negs	r3, r3
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	4413      	add	r3, r2
 8009efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	4b24      	ldr	r3, [pc, #144]	; (8009f98 <vPortFree+0xb8>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4013      	ands	r3, r2
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10a      	bne.n	8009f24 <vPortFree+0x44>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	60fb      	str	r3, [r7, #12]
}
 8009f20:	bf00      	nop
 8009f22:	e7fe      	b.n	8009f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00a      	beq.n	8009f42 <vPortFree+0x62>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	60bb      	str	r3, [r7, #8]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	4b14      	ldr	r3, [pc, #80]	; (8009f98 <vPortFree+0xb8>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01e      	beq.n	8009f8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d11a      	bne.n	8009f8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	4b0e      	ldr	r3, [pc, #56]	; (8009f98 <vPortFree+0xb8>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	43db      	mvns	r3, r3
 8009f62:	401a      	ands	r2, r3
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f68:	f7fe fc12 	bl	8008790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	685a      	ldr	r2, [r3, #4]
 8009f70:	4b0a      	ldr	r3, [pc, #40]	; (8009f9c <vPortFree+0xbc>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4413      	add	r3, r2
 8009f76:	4a09      	ldr	r2, [pc, #36]	; (8009f9c <vPortFree+0xbc>)
 8009f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f7a:	6938      	ldr	r0, [r7, #16]
 8009f7c:	f000 f874 	bl	800a068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f80:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <vPortFree+0xc0>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3301      	adds	r3, #1
 8009f86:	4a06      	ldr	r2, [pc, #24]	; (8009fa0 <vPortFree+0xc0>)
 8009f88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f8a:	f7fe fc0f 	bl	80087ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f8e:	bf00      	nop
 8009f90:	3718      	adds	r7, #24
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	2000397c 	.word	0x2000397c
 8009f9c:	2000396c 	.word	0x2000396c
 8009fa0:	20003978 	.word	0x20003978

08009fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009faa:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8009fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fb0:	4b27      	ldr	r3, [pc, #156]	; (800a050 <prvHeapInit+0xac>)
 8009fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00c      	beq.n	8009fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3307      	adds	r3, #7
 8009fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f023 0307 	bic.w	r3, r3, #7
 8009fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	4a1f      	ldr	r2, [pc, #124]	; (800a050 <prvHeapInit+0xac>)
 8009fd4:	4413      	add	r3, r2
 8009fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fdc:	4a1d      	ldr	r2, [pc, #116]	; (800a054 <prvHeapInit+0xb0>)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fe2:	4b1c      	ldr	r3, [pc, #112]	; (800a054 <prvHeapInit+0xb0>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	4413      	add	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f023 0307 	bic.w	r3, r3, #7
 8009ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4a15      	ldr	r2, [pc, #84]	; (800a058 <prvHeapInit+0xb4>)
 800a004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a006:	4b14      	ldr	r3, [pc, #80]	; (800a058 <prvHeapInit+0xb4>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2200      	movs	r2, #0
 800a00c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a00e:	4b12      	ldr	r3, [pc, #72]	; (800a058 <prvHeapInit+0xb4>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	1ad2      	subs	r2, r2, r3
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <prvHeapInit+0xb4>)
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	4a0a      	ldr	r2, [pc, #40]	; (800a05c <prvHeapInit+0xb8>)
 800a032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	4a09      	ldr	r2, [pc, #36]	; (800a060 <prvHeapInit+0xbc>)
 800a03a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a03c:	4b09      	ldr	r3, [pc, #36]	; (800a064 <prvHeapInit+0xc0>)
 800a03e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a042:	601a      	str	r2, [r3, #0]
}
 800a044:	bf00      	nop
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	20000a80 	.word	0x20000a80
 800a054:	20003960 	.word	0x20003960
 800a058:	20003968 	.word	0x20003968
 800a05c:	20003970 	.word	0x20003970
 800a060:	2000396c 	.word	0x2000396c
 800a064:	2000397c 	.word	0x2000397c

0800a068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a070:	4b28      	ldr	r3, [pc, #160]	; (800a114 <prvInsertBlockIntoFreeList+0xac>)
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	e002      	b.n	800a07c <prvInsertBlockIntoFreeList+0x14>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	429a      	cmp	r2, r3
 800a084:	d8f7      	bhi.n	800a076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	4413      	add	r3, r2
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	429a      	cmp	r2, r3
 800a096:	d108      	bne.n	800a0aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	441a      	add	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d118      	bne.n	800a0f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	4b15      	ldr	r3, [pc, #84]	; (800a118 <prvInsertBlockIntoFreeList+0xb0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d00d      	beq.n	800a0e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	441a      	add	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	e008      	b.n	800a0f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0e6:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <prvInsertBlockIntoFreeList+0xb0>)
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	e003      	b.n	800a0f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d002      	beq.n	800a106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a106:	bf00      	nop
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20003960 	.word	0x20003960
 800a118:	20003968 	.word	0x20003968

0800a11c <__errno>:
 800a11c:	4b01      	ldr	r3, [pc, #4]	; (800a124 <__errno+0x8>)
 800a11e:	6818      	ldr	r0, [r3, #0]
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	20000010 	.word	0x20000010

0800a128 <__libc_init_array>:
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	4d0d      	ldr	r5, [pc, #52]	; (800a160 <__libc_init_array+0x38>)
 800a12c:	4c0d      	ldr	r4, [pc, #52]	; (800a164 <__libc_init_array+0x3c>)
 800a12e:	1b64      	subs	r4, r4, r5
 800a130:	10a4      	asrs	r4, r4, #2
 800a132:	2600      	movs	r6, #0
 800a134:	42a6      	cmp	r6, r4
 800a136:	d109      	bne.n	800a14c <__libc_init_array+0x24>
 800a138:	4d0b      	ldr	r5, [pc, #44]	; (800a168 <__libc_init_array+0x40>)
 800a13a:	4c0c      	ldr	r4, [pc, #48]	; (800a16c <__libc_init_array+0x44>)
 800a13c:	f000 fc8e 	bl	800aa5c <_init>
 800a140:	1b64      	subs	r4, r4, r5
 800a142:	10a4      	asrs	r4, r4, #2
 800a144:	2600      	movs	r6, #0
 800a146:	42a6      	cmp	r6, r4
 800a148:	d105      	bne.n	800a156 <__libc_init_array+0x2e>
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a150:	4798      	blx	r3
 800a152:	3601      	adds	r6, #1
 800a154:	e7ee      	b.n	800a134 <__libc_init_array+0xc>
 800a156:	f855 3b04 	ldr.w	r3, [r5], #4
 800a15a:	4798      	blx	r3
 800a15c:	3601      	adds	r6, #1
 800a15e:	e7f2      	b.n	800a146 <__libc_init_array+0x1e>
 800a160:	0800ac40 	.word	0x0800ac40
 800a164:	0800ac40 	.word	0x0800ac40
 800a168:	0800ac40 	.word	0x0800ac40
 800a16c:	0800ac44 	.word	0x0800ac44

0800a170 <memcpy>:
 800a170:	440a      	add	r2, r1
 800a172:	4291      	cmp	r1, r2
 800a174:	f100 33ff 	add.w	r3, r0, #4294967295
 800a178:	d100      	bne.n	800a17c <memcpy+0xc>
 800a17a:	4770      	bx	lr
 800a17c:	b510      	push	{r4, lr}
 800a17e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a182:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a186:	4291      	cmp	r1, r2
 800a188:	d1f9      	bne.n	800a17e <memcpy+0xe>
 800a18a:	bd10      	pop	{r4, pc}

0800a18c <memset>:
 800a18c:	4402      	add	r2, r0
 800a18e:	4603      	mov	r3, r0
 800a190:	4293      	cmp	r3, r2
 800a192:	d100      	bne.n	800a196 <memset+0xa>
 800a194:	4770      	bx	lr
 800a196:	f803 1b01 	strb.w	r1, [r3], #1
 800a19a:	e7f9      	b.n	800a190 <memset+0x4>

0800a19c <siprintf>:
 800a19c:	b40e      	push	{r1, r2, r3}
 800a19e:	b500      	push	{lr}
 800a1a0:	b09c      	sub	sp, #112	; 0x70
 800a1a2:	ab1d      	add	r3, sp, #116	; 0x74
 800a1a4:	9002      	str	r0, [sp, #8]
 800a1a6:	9006      	str	r0, [sp, #24]
 800a1a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1ac:	4809      	ldr	r0, [pc, #36]	; (800a1d4 <siprintf+0x38>)
 800a1ae:	9107      	str	r1, [sp, #28]
 800a1b0:	9104      	str	r1, [sp, #16]
 800a1b2:	4909      	ldr	r1, [pc, #36]	; (800a1d8 <siprintf+0x3c>)
 800a1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b8:	9105      	str	r1, [sp, #20]
 800a1ba:	6800      	ldr	r0, [r0, #0]
 800a1bc:	9301      	str	r3, [sp, #4]
 800a1be:	a902      	add	r1, sp, #8
 800a1c0:	f000 f868 	bl	800a294 <_svfiprintf_r>
 800a1c4:	9b02      	ldr	r3, [sp, #8]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	701a      	strb	r2, [r3, #0]
 800a1ca:	b01c      	add	sp, #112	; 0x70
 800a1cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d0:	b003      	add	sp, #12
 800a1d2:	4770      	bx	lr
 800a1d4:	20000010 	.word	0x20000010
 800a1d8:	ffff0208 	.word	0xffff0208

0800a1dc <__ssputs_r>:
 800a1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e0:	688e      	ldr	r6, [r1, #8]
 800a1e2:	429e      	cmp	r6, r3
 800a1e4:	4682      	mov	sl, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	4690      	mov	r8, r2
 800a1ea:	461f      	mov	r7, r3
 800a1ec:	d838      	bhi.n	800a260 <__ssputs_r+0x84>
 800a1ee:	898a      	ldrh	r2, [r1, #12]
 800a1f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1f4:	d032      	beq.n	800a25c <__ssputs_r+0x80>
 800a1f6:	6825      	ldr	r5, [r4, #0]
 800a1f8:	6909      	ldr	r1, [r1, #16]
 800a1fa:	eba5 0901 	sub.w	r9, r5, r1
 800a1fe:	6965      	ldr	r5, [r4, #20]
 800a200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a204:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a208:	3301      	adds	r3, #1
 800a20a:	444b      	add	r3, r9
 800a20c:	106d      	asrs	r5, r5, #1
 800a20e:	429d      	cmp	r5, r3
 800a210:	bf38      	it	cc
 800a212:	461d      	movcc	r5, r3
 800a214:	0553      	lsls	r3, r2, #21
 800a216:	d531      	bpl.n	800a27c <__ssputs_r+0xa0>
 800a218:	4629      	mov	r1, r5
 800a21a:	f000 fb55 	bl	800a8c8 <_malloc_r>
 800a21e:	4606      	mov	r6, r0
 800a220:	b950      	cbnz	r0, 800a238 <__ssputs_r+0x5c>
 800a222:	230c      	movs	r3, #12
 800a224:	f8ca 3000 	str.w	r3, [sl]
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22e:	81a3      	strh	r3, [r4, #12]
 800a230:	f04f 30ff 	mov.w	r0, #4294967295
 800a234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a238:	6921      	ldr	r1, [r4, #16]
 800a23a:	464a      	mov	r2, r9
 800a23c:	f7ff ff98 	bl	800a170 <memcpy>
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	6126      	str	r6, [r4, #16]
 800a24e:	6165      	str	r5, [r4, #20]
 800a250:	444e      	add	r6, r9
 800a252:	eba5 0509 	sub.w	r5, r5, r9
 800a256:	6026      	str	r6, [r4, #0]
 800a258:	60a5      	str	r5, [r4, #8]
 800a25a:	463e      	mov	r6, r7
 800a25c:	42be      	cmp	r6, r7
 800a25e:	d900      	bls.n	800a262 <__ssputs_r+0x86>
 800a260:	463e      	mov	r6, r7
 800a262:	6820      	ldr	r0, [r4, #0]
 800a264:	4632      	mov	r2, r6
 800a266:	4641      	mov	r1, r8
 800a268:	f000 faa8 	bl	800a7bc <memmove>
 800a26c:	68a3      	ldr	r3, [r4, #8]
 800a26e:	1b9b      	subs	r3, r3, r6
 800a270:	60a3      	str	r3, [r4, #8]
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	4433      	add	r3, r6
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	2000      	movs	r0, #0
 800a27a:	e7db      	b.n	800a234 <__ssputs_r+0x58>
 800a27c:	462a      	mov	r2, r5
 800a27e:	f000 fb97 	bl	800a9b0 <_realloc_r>
 800a282:	4606      	mov	r6, r0
 800a284:	2800      	cmp	r0, #0
 800a286:	d1e1      	bne.n	800a24c <__ssputs_r+0x70>
 800a288:	6921      	ldr	r1, [r4, #16]
 800a28a:	4650      	mov	r0, sl
 800a28c:	f000 fab0 	bl	800a7f0 <_free_r>
 800a290:	e7c7      	b.n	800a222 <__ssputs_r+0x46>
	...

0800a294 <_svfiprintf_r>:
 800a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a298:	4698      	mov	r8, r3
 800a29a:	898b      	ldrh	r3, [r1, #12]
 800a29c:	061b      	lsls	r3, r3, #24
 800a29e:	b09d      	sub	sp, #116	; 0x74
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	460d      	mov	r5, r1
 800a2a4:	4614      	mov	r4, r2
 800a2a6:	d50e      	bpl.n	800a2c6 <_svfiprintf_r+0x32>
 800a2a8:	690b      	ldr	r3, [r1, #16]
 800a2aa:	b963      	cbnz	r3, 800a2c6 <_svfiprintf_r+0x32>
 800a2ac:	2140      	movs	r1, #64	; 0x40
 800a2ae:	f000 fb0b 	bl	800a8c8 <_malloc_r>
 800a2b2:	6028      	str	r0, [r5, #0]
 800a2b4:	6128      	str	r0, [r5, #16]
 800a2b6:	b920      	cbnz	r0, 800a2c2 <_svfiprintf_r+0x2e>
 800a2b8:	230c      	movs	r3, #12
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	e0d1      	b.n	800a466 <_svfiprintf_r+0x1d2>
 800a2c2:	2340      	movs	r3, #64	; 0x40
 800a2c4:	616b      	str	r3, [r5, #20]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ca:	2320      	movs	r3, #32
 800a2cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d4:	2330      	movs	r3, #48	; 0x30
 800a2d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a480 <_svfiprintf_r+0x1ec>
 800a2da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2de:	f04f 0901 	mov.w	r9, #1
 800a2e2:	4623      	mov	r3, r4
 800a2e4:	469a      	mov	sl, r3
 800a2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ea:	b10a      	cbz	r2, 800a2f0 <_svfiprintf_r+0x5c>
 800a2ec:	2a25      	cmp	r2, #37	; 0x25
 800a2ee:	d1f9      	bne.n	800a2e4 <_svfiprintf_r+0x50>
 800a2f0:	ebba 0b04 	subs.w	fp, sl, r4
 800a2f4:	d00b      	beq.n	800a30e <_svfiprintf_r+0x7a>
 800a2f6:	465b      	mov	r3, fp
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f7ff ff6d 	bl	800a1dc <__ssputs_r>
 800a302:	3001      	adds	r0, #1
 800a304:	f000 80aa 	beq.w	800a45c <_svfiprintf_r+0x1c8>
 800a308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a30a:	445a      	add	r2, fp
 800a30c:	9209      	str	r2, [sp, #36]	; 0x24
 800a30e:	f89a 3000 	ldrb.w	r3, [sl]
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 80a2 	beq.w	800a45c <_svfiprintf_r+0x1c8>
 800a318:	2300      	movs	r3, #0
 800a31a:	f04f 32ff 	mov.w	r2, #4294967295
 800a31e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a322:	f10a 0a01 	add.w	sl, sl, #1
 800a326:	9304      	str	r3, [sp, #16]
 800a328:	9307      	str	r3, [sp, #28]
 800a32a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a32e:	931a      	str	r3, [sp, #104]	; 0x68
 800a330:	4654      	mov	r4, sl
 800a332:	2205      	movs	r2, #5
 800a334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a338:	4851      	ldr	r0, [pc, #324]	; (800a480 <_svfiprintf_r+0x1ec>)
 800a33a:	f7f5 ff51 	bl	80001e0 <memchr>
 800a33e:	9a04      	ldr	r2, [sp, #16]
 800a340:	b9d8      	cbnz	r0, 800a37a <_svfiprintf_r+0xe6>
 800a342:	06d0      	lsls	r0, r2, #27
 800a344:	bf44      	itt	mi
 800a346:	2320      	movmi	r3, #32
 800a348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a34c:	0711      	lsls	r1, r2, #28
 800a34e:	bf44      	itt	mi
 800a350:	232b      	movmi	r3, #43	; 0x2b
 800a352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a356:	f89a 3000 	ldrb.w	r3, [sl]
 800a35a:	2b2a      	cmp	r3, #42	; 0x2a
 800a35c:	d015      	beq.n	800a38a <_svfiprintf_r+0xf6>
 800a35e:	9a07      	ldr	r2, [sp, #28]
 800a360:	4654      	mov	r4, sl
 800a362:	2000      	movs	r0, #0
 800a364:	f04f 0c0a 	mov.w	ip, #10
 800a368:	4621      	mov	r1, r4
 800a36a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a36e:	3b30      	subs	r3, #48	; 0x30
 800a370:	2b09      	cmp	r3, #9
 800a372:	d94e      	bls.n	800a412 <_svfiprintf_r+0x17e>
 800a374:	b1b0      	cbz	r0, 800a3a4 <_svfiprintf_r+0x110>
 800a376:	9207      	str	r2, [sp, #28]
 800a378:	e014      	b.n	800a3a4 <_svfiprintf_r+0x110>
 800a37a:	eba0 0308 	sub.w	r3, r0, r8
 800a37e:	fa09 f303 	lsl.w	r3, r9, r3
 800a382:	4313      	orrs	r3, r2
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	46a2      	mov	sl, r4
 800a388:	e7d2      	b.n	800a330 <_svfiprintf_r+0x9c>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	1d19      	adds	r1, r3, #4
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	9103      	str	r1, [sp, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bfbb      	ittet	lt
 800a396:	425b      	neglt	r3, r3
 800a398:	f042 0202 	orrlt.w	r2, r2, #2
 800a39c:	9307      	strge	r3, [sp, #28]
 800a39e:	9307      	strlt	r3, [sp, #28]
 800a3a0:	bfb8      	it	lt
 800a3a2:	9204      	strlt	r2, [sp, #16]
 800a3a4:	7823      	ldrb	r3, [r4, #0]
 800a3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a8:	d10c      	bne.n	800a3c4 <_svfiprintf_r+0x130>
 800a3aa:	7863      	ldrb	r3, [r4, #1]
 800a3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ae:	d135      	bne.n	800a41c <_svfiprintf_r+0x188>
 800a3b0:	9b03      	ldr	r3, [sp, #12]
 800a3b2:	1d1a      	adds	r2, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	9203      	str	r2, [sp, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bfb8      	it	lt
 800a3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3c0:	3402      	adds	r4, #2
 800a3c2:	9305      	str	r3, [sp, #20]
 800a3c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a490 <_svfiprintf_r+0x1fc>
 800a3c8:	7821      	ldrb	r1, [r4, #0]
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	4650      	mov	r0, sl
 800a3ce:	f7f5 ff07 	bl	80001e0 <memchr>
 800a3d2:	b140      	cbz	r0, 800a3e6 <_svfiprintf_r+0x152>
 800a3d4:	2340      	movs	r3, #64	; 0x40
 800a3d6:	eba0 000a 	sub.w	r0, r0, sl
 800a3da:	fa03 f000 	lsl.w	r0, r3, r0
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	4303      	orrs	r3, r0
 800a3e2:	3401      	adds	r4, #1
 800a3e4:	9304      	str	r3, [sp, #16]
 800a3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ea:	4826      	ldr	r0, [pc, #152]	; (800a484 <_svfiprintf_r+0x1f0>)
 800a3ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3f0:	2206      	movs	r2, #6
 800a3f2:	f7f5 fef5 	bl	80001e0 <memchr>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d038      	beq.n	800a46c <_svfiprintf_r+0x1d8>
 800a3fa:	4b23      	ldr	r3, [pc, #140]	; (800a488 <_svfiprintf_r+0x1f4>)
 800a3fc:	bb1b      	cbnz	r3, 800a446 <_svfiprintf_r+0x1b2>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	3307      	adds	r3, #7
 800a402:	f023 0307 	bic.w	r3, r3, #7
 800a406:	3308      	adds	r3, #8
 800a408:	9303      	str	r3, [sp, #12]
 800a40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40c:	4433      	add	r3, r6
 800a40e:	9309      	str	r3, [sp, #36]	; 0x24
 800a410:	e767      	b.n	800a2e2 <_svfiprintf_r+0x4e>
 800a412:	fb0c 3202 	mla	r2, ip, r2, r3
 800a416:	460c      	mov	r4, r1
 800a418:	2001      	movs	r0, #1
 800a41a:	e7a5      	b.n	800a368 <_svfiprintf_r+0xd4>
 800a41c:	2300      	movs	r3, #0
 800a41e:	3401      	adds	r4, #1
 800a420:	9305      	str	r3, [sp, #20]
 800a422:	4619      	mov	r1, r3
 800a424:	f04f 0c0a 	mov.w	ip, #10
 800a428:	4620      	mov	r0, r4
 800a42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42e:	3a30      	subs	r2, #48	; 0x30
 800a430:	2a09      	cmp	r2, #9
 800a432:	d903      	bls.n	800a43c <_svfiprintf_r+0x1a8>
 800a434:	2b00      	cmp	r3, #0
 800a436:	d0c5      	beq.n	800a3c4 <_svfiprintf_r+0x130>
 800a438:	9105      	str	r1, [sp, #20]
 800a43a:	e7c3      	b.n	800a3c4 <_svfiprintf_r+0x130>
 800a43c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a440:	4604      	mov	r4, r0
 800a442:	2301      	movs	r3, #1
 800a444:	e7f0      	b.n	800a428 <_svfiprintf_r+0x194>
 800a446:	ab03      	add	r3, sp, #12
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	462a      	mov	r2, r5
 800a44c:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <_svfiprintf_r+0x1f8>)
 800a44e:	a904      	add	r1, sp, #16
 800a450:	4638      	mov	r0, r7
 800a452:	f3af 8000 	nop.w
 800a456:	1c42      	adds	r2, r0, #1
 800a458:	4606      	mov	r6, r0
 800a45a:	d1d6      	bne.n	800a40a <_svfiprintf_r+0x176>
 800a45c:	89ab      	ldrh	r3, [r5, #12]
 800a45e:	065b      	lsls	r3, r3, #25
 800a460:	f53f af2c 	bmi.w	800a2bc <_svfiprintf_r+0x28>
 800a464:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a466:	b01d      	add	sp, #116	; 0x74
 800a468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46c:	ab03      	add	r3, sp, #12
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	462a      	mov	r2, r5
 800a472:	4b06      	ldr	r3, [pc, #24]	; (800a48c <_svfiprintf_r+0x1f8>)
 800a474:	a904      	add	r1, sp, #16
 800a476:	4638      	mov	r0, r7
 800a478:	f000 f87a 	bl	800a570 <_printf_i>
 800a47c:	e7eb      	b.n	800a456 <_svfiprintf_r+0x1c2>
 800a47e:	bf00      	nop
 800a480:	0800ac04 	.word	0x0800ac04
 800a484:	0800ac0e 	.word	0x0800ac0e
 800a488:	00000000 	.word	0x00000000
 800a48c:	0800a1dd 	.word	0x0800a1dd
 800a490:	0800ac0a 	.word	0x0800ac0a

0800a494 <_printf_common>:
 800a494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a498:	4616      	mov	r6, r2
 800a49a:	4699      	mov	r9, r3
 800a49c:	688a      	ldr	r2, [r1, #8]
 800a49e:	690b      	ldr	r3, [r1, #16]
 800a4a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	bfb8      	it	lt
 800a4a8:	4613      	movlt	r3, r2
 800a4aa:	6033      	str	r3, [r6, #0]
 800a4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	b10a      	cbz	r2, 800a4ba <_printf_common+0x26>
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	6033      	str	r3, [r6, #0]
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	0699      	lsls	r1, r3, #26
 800a4be:	bf42      	ittt	mi
 800a4c0:	6833      	ldrmi	r3, [r6, #0]
 800a4c2:	3302      	addmi	r3, #2
 800a4c4:	6033      	strmi	r3, [r6, #0]
 800a4c6:	6825      	ldr	r5, [r4, #0]
 800a4c8:	f015 0506 	ands.w	r5, r5, #6
 800a4cc:	d106      	bne.n	800a4dc <_printf_common+0x48>
 800a4ce:	f104 0a19 	add.w	sl, r4, #25
 800a4d2:	68e3      	ldr	r3, [r4, #12]
 800a4d4:	6832      	ldr	r2, [r6, #0]
 800a4d6:	1a9b      	subs	r3, r3, r2
 800a4d8:	42ab      	cmp	r3, r5
 800a4da:	dc26      	bgt.n	800a52a <_printf_common+0x96>
 800a4dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4e0:	1e13      	subs	r3, r2, #0
 800a4e2:	6822      	ldr	r2, [r4, #0]
 800a4e4:	bf18      	it	ne
 800a4e6:	2301      	movne	r3, #1
 800a4e8:	0692      	lsls	r2, r2, #26
 800a4ea:	d42b      	bmi.n	800a544 <_printf_common+0xb0>
 800a4ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	4638      	mov	r0, r7
 800a4f4:	47c0      	blx	r8
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d01e      	beq.n	800a538 <_printf_common+0xa4>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	68e5      	ldr	r5, [r4, #12]
 800a4fe:	6832      	ldr	r2, [r6, #0]
 800a500:	f003 0306 	and.w	r3, r3, #6
 800a504:	2b04      	cmp	r3, #4
 800a506:	bf08      	it	eq
 800a508:	1aad      	subeq	r5, r5, r2
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	6922      	ldr	r2, [r4, #16]
 800a50e:	bf0c      	ite	eq
 800a510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a514:	2500      	movne	r5, #0
 800a516:	4293      	cmp	r3, r2
 800a518:	bfc4      	itt	gt
 800a51a:	1a9b      	subgt	r3, r3, r2
 800a51c:	18ed      	addgt	r5, r5, r3
 800a51e:	2600      	movs	r6, #0
 800a520:	341a      	adds	r4, #26
 800a522:	42b5      	cmp	r5, r6
 800a524:	d11a      	bne.n	800a55c <_printf_common+0xc8>
 800a526:	2000      	movs	r0, #0
 800a528:	e008      	b.n	800a53c <_printf_common+0xa8>
 800a52a:	2301      	movs	r3, #1
 800a52c:	4652      	mov	r2, sl
 800a52e:	4649      	mov	r1, r9
 800a530:	4638      	mov	r0, r7
 800a532:	47c0      	blx	r8
 800a534:	3001      	adds	r0, #1
 800a536:	d103      	bne.n	800a540 <_printf_common+0xac>
 800a538:	f04f 30ff 	mov.w	r0, #4294967295
 800a53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a540:	3501      	adds	r5, #1
 800a542:	e7c6      	b.n	800a4d2 <_printf_common+0x3e>
 800a544:	18e1      	adds	r1, r4, r3
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	2030      	movs	r0, #48	; 0x30
 800a54a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a54e:	4422      	add	r2, r4
 800a550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a558:	3302      	adds	r3, #2
 800a55a:	e7c7      	b.n	800a4ec <_printf_common+0x58>
 800a55c:	2301      	movs	r3, #1
 800a55e:	4622      	mov	r2, r4
 800a560:	4649      	mov	r1, r9
 800a562:	4638      	mov	r0, r7
 800a564:	47c0      	blx	r8
 800a566:	3001      	adds	r0, #1
 800a568:	d0e6      	beq.n	800a538 <_printf_common+0xa4>
 800a56a:	3601      	adds	r6, #1
 800a56c:	e7d9      	b.n	800a522 <_printf_common+0x8e>
	...

0800a570 <_printf_i>:
 800a570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a574:	7e0f      	ldrb	r7, [r1, #24]
 800a576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a578:	2f78      	cmp	r7, #120	; 0x78
 800a57a:	4691      	mov	r9, r2
 800a57c:	4680      	mov	r8, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	469a      	mov	sl, r3
 800a582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a586:	d807      	bhi.n	800a598 <_printf_i+0x28>
 800a588:	2f62      	cmp	r7, #98	; 0x62
 800a58a:	d80a      	bhi.n	800a5a2 <_printf_i+0x32>
 800a58c:	2f00      	cmp	r7, #0
 800a58e:	f000 80d8 	beq.w	800a742 <_printf_i+0x1d2>
 800a592:	2f58      	cmp	r7, #88	; 0x58
 800a594:	f000 80a3 	beq.w	800a6de <_printf_i+0x16e>
 800a598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a59c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5a0:	e03a      	b.n	800a618 <_printf_i+0xa8>
 800a5a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5a6:	2b15      	cmp	r3, #21
 800a5a8:	d8f6      	bhi.n	800a598 <_printf_i+0x28>
 800a5aa:	a101      	add	r1, pc, #4	; (adr r1, 800a5b0 <_printf_i+0x40>)
 800a5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5b0:	0800a609 	.word	0x0800a609
 800a5b4:	0800a61d 	.word	0x0800a61d
 800a5b8:	0800a599 	.word	0x0800a599
 800a5bc:	0800a599 	.word	0x0800a599
 800a5c0:	0800a599 	.word	0x0800a599
 800a5c4:	0800a599 	.word	0x0800a599
 800a5c8:	0800a61d 	.word	0x0800a61d
 800a5cc:	0800a599 	.word	0x0800a599
 800a5d0:	0800a599 	.word	0x0800a599
 800a5d4:	0800a599 	.word	0x0800a599
 800a5d8:	0800a599 	.word	0x0800a599
 800a5dc:	0800a729 	.word	0x0800a729
 800a5e0:	0800a64d 	.word	0x0800a64d
 800a5e4:	0800a70b 	.word	0x0800a70b
 800a5e8:	0800a599 	.word	0x0800a599
 800a5ec:	0800a599 	.word	0x0800a599
 800a5f0:	0800a74b 	.word	0x0800a74b
 800a5f4:	0800a599 	.word	0x0800a599
 800a5f8:	0800a64d 	.word	0x0800a64d
 800a5fc:	0800a599 	.word	0x0800a599
 800a600:	0800a599 	.word	0x0800a599
 800a604:	0800a713 	.word	0x0800a713
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	1d1a      	adds	r2, r3, #4
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	602a      	str	r2, [r5, #0]
 800a610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a618:	2301      	movs	r3, #1
 800a61a:	e0a3      	b.n	800a764 <_printf_i+0x1f4>
 800a61c:	6820      	ldr	r0, [r4, #0]
 800a61e:	6829      	ldr	r1, [r5, #0]
 800a620:	0606      	lsls	r6, r0, #24
 800a622:	f101 0304 	add.w	r3, r1, #4
 800a626:	d50a      	bpl.n	800a63e <_printf_i+0xce>
 800a628:	680e      	ldr	r6, [r1, #0]
 800a62a:	602b      	str	r3, [r5, #0]
 800a62c:	2e00      	cmp	r6, #0
 800a62e:	da03      	bge.n	800a638 <_printf_i+0xc8>
 800a630:	232d      	movs	r3, #45	; 0x2d
 800a632:	4276      	negs	r6, r6
 800a634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a638:	485e      	ldr	r0, [pc, #376]	; (800a7b4 <_printf_i+0x244>)
 800a63a:	230a      	movs	r3, #10
 800a63c:	e019      	b.n	800a672 <_printf_i+0x102>
 800a63e:	680e      	ldr	r6, [r1, #0]
 800a640:	602b      	str	r3, [r5, #0]
 800a642:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a646:	bf18      	it	ne
 800a648:	b236      	sxthne	r6, r6
 800a64a:	e7ef      	b.n	800a62c <_printf_i+0xbc>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	6820      	ldr	r0, [r4, #0]
 800a650:	1d19      	adds	r1, r3, #4
 800a652:	6029      	str	r1, [r5, #0]
 800a654:	0601      	lsls	r1, r0, #24
 800a656:	d501      	bpl.n	800a65c <_printf_i+0xec>
 800a658:	681e      	ldr	r6, [r3, #0]
 800a65a:	e002      	b.n	800a662 <_printf_i+0xf2>
 800a65c:	0646      	lsls	r6, r0, #25
 800a65e:	d5fb      	bpl.n	800a658 <_printf_i+0xe8>
 800a660:	881e      	ldrh	r6, [r3, #0]
 800a662:	4854      	ldr	r0, [pc, #336]	; (800a7b4 <_printf_i+0x244>)
 800a664:	2f6f      	cmp	r7, #111	; 0x6f
 800a666:	bf0c      	ite	eq
 800a668:	2308      	moveq	r3, #8
 800a66a:	230a      	movne	r3, #10
 800a66c:	2100      	movs	r1, #0
 800a66e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a672:	6865      	ldr	r5, [r4, #4]
 800a674:	60a5      	str	r5, [r4, #8]
 800a676:	2d00      	cmp	r5, #0
 800a678:	bfa2      	ittt	ge
 800a67a:	6821      	ldrge	r1, [r4, #0]
 800a67c:	f021 0104 	bicge.w	r1, r1, #4
 800a680:	6021      	strge	r1, [r4, #0]
 800a682:	b90e      	cbnz	r6, 800a688 <_printf_i+0x118>
 800a684:	2d00      	cmp	r5, #0
 800a686:	d04d      	beq.n	800a724 <_printf_i+0x1b4>
 800a688:	4615      	mov	r5, r2
 800a68a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a68e:	fb03 6711 	mls	r7, r3, r1, r6
 800a692:	5dc7      	ldrb	r7, [r0, r7]
 800a694:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a698:	4637      	mov	r7, r6
 800a69a:	42bb      	cmp	r3, r7
 800a69c:	460e      	mov	r6, r1
 800a69e:	d9f4      	bls.n	800a68a <_printf_i+0x11a>
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d10b      	bne.n	800a6bc <_printf_i+0x14c>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	07de      	lsls	r6, r3, #31
 800a6a8:	d508      	bpl.n	800a6bc <_printf_i+0x14c>
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	6861      	ldr	r1, [r4, #4]
 800a6ae:	4299      	cmp	r1, r3
 800a6b0:	bfde      	ittt	le
 800a6b2:	2330      	movle	r3, #48	; 0x30
 800a6b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6bc:	1b52      	subs	r2, r2, r5
 800a6be:	6122      	str	r2, [r4, #16]
 800a6c0:	f8cd a000 	str.w	sl, [sp]
 800a6c4:	464b      	mov	r3, r9
 800a6c6:	aa03      	add	r2, sp, #12
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	f7ff fee2 	bl	800a494 <_printf_common>
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	d14c      	bne.n	800a76e <_printf_i+0x1fe>
 800a6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d8:	b004      	add	sp, #16
 800a6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6de:	4835      	ldr	r0, [pc, #212]	; (800a7b4 <_printf_i+0x244>)
 800a6e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a6e4:	6829      	ldr	r1, [r5, #0]
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6ec:	6029      	str	r1, [r5, #0]
 800a6ee:	061d      	lsls	r5, r3, #24
 800a6f0:	d514      	bpl.n	800a71c <_printf_i+0x1ac>
 800a6f2:	07df      	lsls	r7, r3, #31
 800a6f4:	bf44      	itt	mi
 800a6f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a6fa:	6023      	strmi	r3, [r4, #0]
 800a6fc:	b91e      	cbnz	r6, 800a706 <_printf_i+0x196>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	f023 0320 	bic.w	r3, r3, #32
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	2310      	movs	r3, #16
 800a708:	e7b0      	b.n	800a66c <_printf_i+0xfc>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	f043 0320 	orr.w	r3, r3, #32
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	2378      	movs	r3, #120	; 0x78
 800a714:	4828      	ldr	r0, [pc, #160]	; (800a7b8 <_printf_i+0x248>)
 800a716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a71a:	e7e3      	b.n	800a6e4 <_printf_i+0x174>
 800a71c:	0659      	lsls	r1, r3, #25
 800a71e:	bf48      	it	mi
 800a720:	b2b6      	uxthmi	r6, r6
 800a722:	e7e6      	b.n	800a6f2 <_printf_i+0x182>
 800a724:	4615      	mov	r5, r2
 800a726:	e7bb      	b.n	800a6a0 <_printf_i+0x130>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	6826      	ldr	r6, [r4, #0]
 800a72c:	6961      	ldr	r1, [r4, #20]
 800a72e:	1d18      	adds	r0, r3, #4
 800a730:	6028      	str	r0, [r5, #0]
 800a732:	0635      	lsls	r5, r6, #24
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	d501      	bpl.n	800a73c <_printf_i+0x1cc>
 800a738:	6019      	str	r1, [r3, #0]
 800a73a:	e002      	b.n	800a742 <_printf_i+0x1d2>
 800a73c:	0670      	lsls	r0, r6, #25
 800a73e:	d5fb      	bpl.n	800a738 <_printf_i+0x1c8>
 800a740:	8019      	strh	r1, [r3, #0]
 800a742:	2300      	movs	r3, #0
 800a744:	6123      	str	r3, [r4, #16]
 800a746:	4615      	mov	r5, r2
 800a748:	e7ba      	b.n	800a6c0 <_printf_i+0x150>
 800a74a:	682b      	ldr	r3, [r5, #0]
 800a74c:	1d1a      	adds	r2, r3, #4
 800a74e:	602a      	str	r2, [r5, #0]
 800a750:	681d      	ldr	r5, [r3, #0]
 800a752:	6862      	ldr	r2, [r4, #4]
 800a754:	2100      	movs	r1, #0
 800a756:	4628      	mov	r0, r5
 800a758:	f7f5 fd42 	bl	80001e0 <memchr>
 800a75c:	b108      	cbz	r0, 800a762 <_printf_i+0x1f2>
 800a75e:	1b40      	subs	r0, r0, r5
 800a760:	6060      	str	r0, [r4, #4]
 800a762:	6863      	ldr	r3, [r4, #4]
 800a764:	6123      	str	r3, [r4, #16]
 800a766:	2300      	movs	r3, #0
 800a768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a76c:	e7a8      	b.n	800a6c0 <_printf_i+0x150>
 800a76e:	6923      	ldr	r3, [r4, #16]
 800a770:	462a      	mov	r2, r5
 800a772:	4649      	mov	r1, r9
 800a774:	4640      	mov	r0, r8
 800a776:	47d0      	blx	sl
 800a778:	3001      	adds	r0, #1
 800a77a:	d0ab      	beq.n	800a6d4 <_printf_i+0x164>
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	079b      	lsls	r3, r3, #30
 800a780:	d413      	bmi.n	800a7aa <_printf_i+0x23a>
 800a782:	68e0      	ldr	r0, [r4, #12]
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	4298      	cmp	r0, r3
 800a788:	bfb8      	it	lt
 800a78a:	4618      	movlt	r0, r3
 800a78c:	e7a4      	b.n	800a6d8 <_printf_i+0x168>
 800a78e:	2301      	movs	r3, #1
 800a790:	4632      	mov	r2, r6
 800a792:	4649      	mov	r1, r9
 800a794:	4640      	mov	r0, r8
 800a796:	47d0      	blx	sl
 800a798:	3001      	adds	r0, #1
 800a79a:	d09b      	beq.n	800a6d4 <_printf_i+0x164>
 800a79c:	3501      	adds	r5, #1
 800a79e:	68e3      	ldr	r3, [r4, #12]
 800a7a0:	9903      	ldr	r1, [sp, #12]
 800a7a2:	1a5b      	subs	r3, r3, r1
 800a7a4:	42ab      	cmp	r3, r5
 800a7a6:	dcf2      	bgt.n	800a78e <_printf_i+0x21e>
 800a7a8:	e7eb      	b.n	800a782 <_printf_i+0x212>
 800a7aa:	2500      	movs	r5, #0
 800a7ac:	f104 0619 	add.w	r6, r4, #25
 800a7b0:	e7f5      	b.n	800a79e <_printf_i+0x22e>
 800a7b2:	bf00      	nop
 800a7b4:	0800ac15 	.word	0x0800ac15
 800a7b8:	0800ac26 	.word	0x0800ac26

0800a7bc <memmove>:
 800a7bc:	4288      	cmp	r0, r1
 800a7be:	b510      	push	{r4, lr}
 800a7c0:	eb01 0402 	add.w	r4, r1, r2
 800a7c4:	d902      	bls.n	800a7cc <memmove+0x10>
 800a7c6:	4284      	cmp	r4, r0
 800a7c8:	4623      	mov	r3, r4
 800a7ca:	d807      	bhi.n	800a7dc <memmove+0x20>
 800a7cc:	1e43      	subs	r3, r0, #1
 800a7ce:	42a1      	cmp	r1, r4
 800a7d0:	d008      	beq.n	800a7e4 <memmove+0x28>
 800a7d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7da:	e7f8      	b.n	800a7ce <memmove+0x12>
 800a7dc:	4402      	add	r2, r0
 800a7de:	4601      	mov	r1, r0
 800a7e0:	428a      	cmp	r2, r1
 800a7e2:	d100      	bne.n	800a7e6 <memmove+0x2a>
 800a7e4:	bd10      	pop	{r4, pc}
 800a7e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7ee:	e7f7      	b.n	800a7e0 <memmove+0x24>

0800a7f0 <_free_r>:
 800a7f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7f2:	2900      	cmp	r1, #0
 800a7f4:	d044      	beq.n	800a880 <_free_r+0x90>
 800a7f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7fa:	9001      	str	r0, [sp, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a802:	bfb8      	it	lt
 800a804:	18e4      	addlt	r4, r4, r3
 800a806:	f000 f913 	bl	800aa30 <__malloc_lock>
 800a80a:	4a1e      	ldr	r2, [pc, #120]	; (800a884 <_free_r+0x94>)
 800a80c:	9801      	ldr	r0, [sp, #4]
 800a80e:	6813      	ldr	r3, [r2, #0]
 800a810:	b933      	cbnz	r3, 800a820 <_free_r+0x30>
 800a812:	6063      	str	r3, [r4, #4]
 800a814:	6014      	str	r4, [r2, #0]
 800a816:	b003      	add	sp, #12
 800a818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a81c:	f000 b90e 	b.w	800aa3c <__malloc_unlock>
 800a820:	42a3      	cmp	r3, r4
 800a822:	d908      	bls.n	800a836 <_free_r+0x46>
 800a824:	6825      	ldr	r5, [r4, #0]
 800a826:	1961      	adds	r1, r4, r5
 800a828:	428b      	cmp	r3, r1
 800a82a:	bf01      	itttt	eq
 800a82c:	6819      	ldreq	r1, [r3, #0]
 800a82e:	685b      	ldreq	r3, [r3, #4]
 800a830:	1949      	addeq	r1, r1, r5
 800a832:	6021      	streq	r1, [r4, #0]
 800a834:	e7ed      	b.n	800a812 <_free_r+0x22>
 800a836:	461a      	mov	r2, r3
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	b10b      	cbz	r3, 800a840 <_free_r+0x50>
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	d9fa      	bls.n	800a836 <_free_r+0x46>
 800a840:	6811      	ldr	r1, [r2, #0]
 800a842:	1855      	adds	r5, r2, r1
 800a844:	42a5      	cmp	r5, r4
 800a846:	d10b      	bne.n	800a860 <_free_r+0x70>
 800a848:	6824      	ldr	r4, [r4, #0]
 800a84a:	4421      	add	r1, r4
 800a84c:	1854      	adds	r4, r2, r1
 800a84e:	42a3      	cmp	r3, r4
 800a850:	6011      	str	r1, [r2, #0]
 800a852:	d1e0      	bne.n	800a816 <_free_r+0x26>
 800a854:	681c      	ldr	r4, [r3, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	6053      	str	r3, [r2, #4]
 800a85a:	4421      	add	r1, r4
 800a85c:	6011      	str	r1, [r2, #0]
 800a85e:	e7da      	b.n	800a816 <_free_r+0x26>
 800a860:	d902      	bls.n	800a868 <_free_r+0x78>
 800a862:	230c      	movs	r3, #12
 800a864:	6003      	str	r3, [r0, #0]
 800a866:	e7d6      	b.n	800a816 <_free_r+0x26>
 800a868:	6825      	ldr	r5, [r4, #0]
 800a86a:	1961      	adds	r1, r4, r5
 800a86c:	428b      	cmp	r3, r1
 800a86e:	bf04      	itt	eq
 800a870:	6819      	ldreq	r1, [r3, #0]
 800a872:	685b      	ldreq	r3, [r3, #4]
 800a874:	6063      	str	r3, [r4, #4]
 800a876:	bf04      	itt	eq
 800a878:	1949      	addeq	r1, r1, r5
 800a87a:	6021      	streq	r1, [r4, #0]
 800a87c:	6054      	str	r4, [r2, #4]
 800a87e:	e7ca      	b.n	800a816 <_free_r+0x26>
 800a880:	b003      	add	sp, #12
 800a882:	bd30      	pop	{r4, r5, pc}
 800a884:	20003980 	.word	0x20003980

0800a888 <sbrk_aligned>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	4e0e      	ldr	r6, [pc, #56]	; (800a8c4 <sbrk_aligned+0x3c>)
 800a88c:	460c      	mov	r4, r1
 800a88e:	6831      	ldr	r1, [r6, #0]
 800a890:	4605      	mov	r5, r0
 800a892:	b911      	cbnz	r1, 800a89a <sbrk_aligned+0x12>
 800a894:	f000 f8bc 	bl	800aa10 <_sbrk_r>
 800a898:	6030      	str	r0, [r6, #0]
 800a89a:	4621      	mov	r1, r4
 800a89c:	4628      	mov	r0, r5
 800a89e:	f000 f8b7 	bl	800aa10 <_sbrk_r>
 800a8a2:	1c43      	adds	r3, r0, #1
 800a8a4:	d00a      	beq.n	800a8bc <sbrk_aligned+0x34>
 800a8a6:	1cc4      	adds	r4, r0, #3
 800a8a8:	f024 0403 	bic.w	r4, r4, #3
 800a8ac:	42a0      	cmp	r0, r4
 800a8ae:	d007      	beq.n	800a8c0 <sbrk_aligned+0x38>
 800a8b0:	1a21      	subs	r1, r4, r0
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f000 f8ac 	bl	800aa10 <_sbrk_r>
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d101      	bne.n	800a8c0 <sbrk_aligned+0x38>
 800a8bc:	f04f 34ff 	mov.w	r4, #4294967295
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}
 800a8c4:	20003984 	.word	0x20003984

0800a8c8 <_malloc_r>:
 800a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8cc:	1ccd      	adds	r5, r1, #3
 800a8ce:	f025 0503 	bic.w	r5, r5, #3
 800a8d2:	3508      	adds	r5, #8
 800a8d4:	2d0c      	cmp	r5, #12
 800a8d6:	bf38      	it	cc
 800a8d8:	250c      	movcc	r5, #12
 800a8da:	2d00      	cmp	r5, #0
 800a8dc:	4607      	mov	r7, r0
 800a8de:	db01      	blt.n	800a8e4 <_malloc_r+0x1c>
 800a8e0:	42a9      	cmp	r1, r5
 800a8e2:	d905      	bls.n	800a8f0 <_malloc_r+0x28>
 800a8e4:	230c      	movs	r3, #12
 800a8e6:	603b      	str	r3, [r7, #0]
 800a8e8:	2600      	movs	r6, #0
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f0:	4e2e      	ldr	r6, [pc, #184]	; (800a9ac <_malloc_r+0xe4>)
 800a8f2:	f000 f89d 	bl	800aa30 <__malloc_lock>
 800a8f6:	6833      	ldr	r3, [r6, #0]
 800a8f8:	461c      	mov	r4, r3
 800a8fa:	bb34      	cbnz	r4, 800a94a <_malloc_r+0x82>
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	4638      	mov	r0, r7
 800a900:	f7ff ffc2 	bl	800a888 <sbrk_aligned>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	4604      	mov	r4, r0
 800a908:	d14d      	bne.n	800a9a6 <_malloc_r+0xde>
 800a90a:	6834      	ldr	r4, [r6, #0]
 800a90c:	4626      	mov	r6, r4
 800a90e:	2e00      	cmp	r6, #0
 800a910:	d140      	bne.n	800a994 <_malloc_r+0xcc>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	4631      	mov	r1, r6
 800a916:	4638      	mov	r0, r7
 800a918:	eb04 0803 	add.w	r8, r4, r3
 800a91c:	f000 f878 	bl	800aa10 <_sbrk_r>
 800a920:	4580      	cmp	r8, r0
 800a922:	d13a      	bne.n	800a99a <_malloc_r+0xd2>
 800a924:	6821      	ldr	r1, [r4, #0]
 800a926:	3503      	adds	r5, #3
 800a928:	1a6d      	subs	r5, r5, r1
 800a92a:	f025 0503 	bic.w	r5, r5, #3
 800a92e:	3508      	adds	r5, #8
 800a930:	2d0c      	cmp	r5, #12
 800a932:	bf38      	it	cc
 800a934:	250c      	movcc	r5, #12
 800a936:	4629      	mov	r1, r5
 800a938:	4638      	mov	r0, r7
 800a93a:	f7ff ffa5 	bl	800a888 <sbrk_aligned>
 800a93e:	3001      	adds	r0, #1
 800a940:	d02b      	beq.n	800a99a <_malloc_r+0xd2>
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	442b      	add	r3, r5
 800a946:	6023      	str	r3, [r4, #0]
 800a948:	e00e      	b.n	800a968 <_malloc_r+0xa0>
 800a94a:	6822      	ldr	r2, [r4, #0]
 800a94c:	1b52      	subs	r2, r2, r5
 800a94e:	d41e      	bmi.n	800a98e <_malloc_r+0xc6>
 800a950:	2a0b      	cmp	r2, #11
 800a952:	d916      	bls.n	800a982 <_malloc_r+0xba>
 800a954:	1961      	adds	r1, r4, r5
 800a956:	42a3      	cmp	r3, r4
 800a958:	6025      	str	r5, [r4, #0]
 800a95a:	bf18      	it	ne
 800a95c:	6059      	strne	r1, [r3, #4]
 800a95e:	6863      	ldr	r3, [r4, #4]
 800a960:	bf08      	it	eq
 800a962:	6031      	streq	r1, [r6, #0]
 800a964:	5162      	str	r2, [r4, r5]
 800a966:	604b      	str	r3, [r1, #4]
 800a968:	4638      	mov	r0, r7
 800a96a:	f104 060b 	add.w	r6, r4, #11
 800a96e:	f000 f865 	bl	800aa3c <__malloc_unlock>
 800a972:	f026 0607 	bic.w	r6, r6, #7
 800a976:	1d23      	adds	r3, r4, #4
 800a978:	1af2      	subs	r2, r6, r3
 800a97a:	d0b6      	beq.n	800a8ea <_malloc_r+0x22>
 800a97c:	1b9b      	subs	r3, r3, r6
 800a97e:	50a3      	str	r3, [r4, r2]
 800a980:	e7b3      	b.n	800a8ea <_malloc_r+0x22>
 800a982:	6862      	ldr	r2, [r4, #4]
 800a984:	42a3      	cmp	r3, r4
 800a986:	bf0c      	ite	eq
 800a988:	6032      	streq	r2, [r6, #0]
 800a98a:	605a      	strne	r2, [r3, #4]
 800a98c:	e7ec      	b.n	800a968 <_malloc_r+0xa0>
 800a98e:	4623      	mov	r3, r4
 800a990:	6864      	ldr	r4, [r4, #4]
 800a992:	e7b2      	b.n	800a8fa <_malloc_r+0x32>
 800a994:	4634      	mov	r4, r6
 800a996:	6876      	ldr	r6, [r6, #4]
 800a998:	e7b9      	b.n	800a90e <_malloc_r+0x46>
 800a99a:	230c      	movs	r3, #12
 800a99c:	603b      	str	r3, [r7, #0]
 800a99e:	4638      	mov	r0, r7
 800a9a0:	f000 f84c 	bl	800aa3c <__malloc_unlock>
 800a9a4:	e7a1      	b.n	800a8ea <_malloc_r+0x22>
 800a9a6:	6025      	str	r5, [r4, #0]
 800a9a8:	e7de      	b.n	800a968 <_malloc_r+0xa0>
 800a9aa:	bf00      	nop
 800a9ac:	20003980 	.word	0x20003980

0800a9b0 <_realloc_r>:
 800a9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b4:	4680      	mov	r8, r0
 800a9b6:	4614      	mov	r4, r2
 800a9b8:	460e      	mov	r6, r1
 800a9ba:	b921      	cbnz	r1, 800a9c6 <_realloc_r+0x16>
 800a9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	f7ff bf81 	b.w	800a8c8 <_malloc_r>
 800a9c6:	b92a      	cbnz	r2, 800a9d4 <_realloc_r+0x24>
 800a9c8:	f7ff ff12 	bl	800a7f0 <_free_r>
 800a9cc:	4625      	mov	r5, r4
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d4:	f000 f838 	bl	800aa48 <_malloc_usable_size_r>
 800a9d8:	4284      	cmp	r4, r0
 800a9da:	4607      	mov	r7, r0
 800a9dc:	d802      	bhi.n	800a9e4 <_realloc_r+0x34>
 800a9de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a9e2:	d812      	bhi.n	800aa0a <_realloc_r+0x5a>
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	f7ff ff6e 	bl	800a8c8 <_malloc_r>
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d0ed      	beq.n	800a9ce <_realloc_r+0x1e>
 800a9f2:	42bc      	cmp	r4, r7
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	bf28      	it	cs
 800a9fa:	463a      	movcs	r2, r7
 800a9fc:	f7ff fbb8 	bl	800a170 <memcpy>
 800aa00:	4631      	mov	r1, r6
 800aa02:	4640      	mov	r0, r8
 800aa04:	f7ff fef4 	bl	800a7f0 <_free_r>
 800aa08:	e7e1      	b.n	800a9ce <_realloc_r+0x1e>
 800aa0a:	4635      	mov	r5, r6
 800aa0c:	e7df      	b.n	800a9ce <_realloc_r+0x1e>
	...

0800aa10 <_sbrk_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4d06      	ldr	r5, [pc, #24]	; (800aa2c <_sbrk_r+0x1c>)
 800aa14:	2300      	movs	r3, #0
 800aa16:	4604      	mov	r4, r0
 800aa18:	4608      	mov	r0, r1
 800aa1a:	602b      	str	r3, [r5, #0]
 800aa1c:	f7f7 fa1a 	bl	8001e54 <_sbrk>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_sbrk_r+0x1a>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_sbrk_r+0x1a>
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	20003988 	.word	0x20003988

0800aa30 <__malloc_lock>:
 800aa30:	4801      	ldr	r0, [pc, #4]	; (800aa38 <__malloc_lock+0x8>)
 800aa32:	f000 b811 	b.w	800aa58 <__retarget_lock_acquire_recursive>
 800aa36:	bf00      	nop
 800aa38:	2000398c 	.word	0x2000398c

0800aa3c <__malloc_unlock>:
 800aa3c:	4801      	ldr	r0, [pc, #4]	; (800aa44 <__malloc_unlock+0x8>)
 800aa3e:	f000 b80c 	b.w	800aa5a <__retarget_lock_release_recursive>
 800aa42:	bf00      	nop
 800aa44:	2000398c 	.word	0x2000398c

0800aa48 <_malloc_usable_size_r>:
 800aa48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa4c:	1f18      	subs	r0, r3, #4
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	bfbc      	itt	lt
 800aa52:	580b      	ldrlt	r3, [r1, r0]
 800aa54:	18c0      	addlt	r0, r0, r3
 800aa56:	4770      	bx	lr

0800aa58 <__retarget_lock_acquire_recursive>:
 800aa58:	4770      	bx	lr

0800aa5a <__retarget_lock_release_recursive>:
 800aa5a:	4770      	bx	lr

0800aa5c <_init>:
 800aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5e:	bf00      	nop
 800aa60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa62:	bc08      	pop	{r3}
 800aa64:	469e      	mov	lr, r3
 800aa66:	4770      	bx	lr

0800aa68 <_fini>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	bf00      	nop
 800aa6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6e:	bc08      	pop	{r3}
 800aa70:	469e      	mov	lr, r3
 800aa72:	4770      	bx	lr
