
Robot_Vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08009064  08009064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009220  08009220  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009220  08009220  00019220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009228  08009228  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009228  08009228  00019228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800922c  0800922c  0001922c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038c0  20000074  080092a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003934  080092a4  00023934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c08  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e0  00000000  00000000  00037cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0003b190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003c630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ec4  00000000  00000000  0003d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a5a  00000000  00000000  0005684c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1de4  00000000  00000000  0006e2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011008a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a0c  00000000  00000000  001100dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800904c 	.word	0x0800904c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800904c 	.word	0x0800904c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000090 	.word	0x20000090
 80005b4:	200000ec 	.word	0x200000ec

080005b8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetTimerTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200002ec 	.word	0x200002ec
 80005e8:	20000348 	.word	0x20000348

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b0b4      	sub	sp, #208	; 0xd0
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	instr4motors = &buffer.instruction_for_motors;
 80005f2:	4b6f      	ldr	r3, [pc, #444]	; (80007b0 <main+0x1c4>)
 80005f4:	4a6f      	ldr	r2, [pc, #444]	; (80007b4 <main+0x1c8>)
 80005f6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 f880 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f908 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fb4a 	bl	8000c98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000604:	f000 fafe 	bl	8000c04 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000608:	f000 fa66 	bl	8000ad8 <MX_TIM10_Init>
  MX_DMA_Init();
 800060c:	f000 fb2a 	bl	8000c64 <MX_DMA_Init>
  MX_TIM11_Init();
 8000610:	f000 faaa 	bl	8000b68 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000614:	f000 f966 	bl	80008e4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000618:	f000 f9c4 	bl	80009a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 800061c:	2100      	movs	r1, #0
 800061e:	4866      	ldr	r0, [pc, #408]	; (80007b8 <main+0x1cc>)
 8000620:	f003 fa4c 	bl	8003abc <HAL_TIM_IC_Start_IT>
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0, GPIO_PIN_SET);
  GPIOC->ODR |= GPIO_ODR_OD10;
 8000624:	4b65      	ldr	r3, [pc, #404]	; (80007bc <main+0x1d0>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a64      	ldr	r2, [pc, #400]	; (80007bc <main+0x1d0>)
 800062a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800062e:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD12;
 8000630:	4b62      	ldr	r3, [pc, #392]	; (80007bc <main+0x1d0>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a61      	ldr	r2, [pc, #388]	; (80007bc <main+0x1d0>)
 8000636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800063a:	6153      	str	r3, [r2, #20]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800063c:	4860      	ldr	r0, [pc, #384]	; (80007c0 <main+0x1d4>)
 800063e:	f001 fd73 	bl	8002128 <HAL_DMA_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <main+0x60>
  {
    Error_Handler();
 8000648:	f000 fd3d 	bl	80010c6 <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1,DMA_Handle,hdma_adc1);
 800064c:	4b5d      	ldr	r3, [pc, #372]	; (80007c4 <main+0x1d8>)
 800064e:	4a5c      	ldr	r2, [pc, #368]	; (80007c0 <main+0x1d4>)
 8000650:	639a      	str	r2, [r3, #56]	; 0x38
 8000652:	4b5b      	ldr	r3, [pc, #364]	; (80007c0 <main+0x1d4>)
 8000654:	4a5b      	ldr	r2, [pc, #364]	; (80007c4 <main+0x1d8>)
 8000656:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer.encod_data, sizeof(buffer.encod_data));
 8000658:	2202      	movs	r2, #2
 800065a:	495b      	ldr	r1, [pc, #364]	; (80007c8 <main+0x1dc>)
 800065c:	4859      	ldr	r0, [pc, #356]	; (80007c4 <main+0x1d8>)
 800065e:	f001 f8d3 	bl	8001808 <HAL_ADC_Start_DMA>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  buffer.xTimer1_ultrs = xTimerCreate("Timer ultrs trigger", pdMS_TO_TICKS( 30 ), pdTRUE, 101, vCallbackFunctionTimer1);
 8000662:	4b5a      	ldr	r3, [pc, #360]	; (80007cc <main+0x1e0>)
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2365      	movs	r3, #101	; 0x65
 8000668:	2201      	movs	r2, #1
 800066a:	211e      	movs	r1, #30
 800066c:	4858      	ldr	r0, [pc, #352]	; (80007d0 <main+0x1e4>)
 800066e:	f007 f8b3 	bl	80077d8 <xTimerCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a57      	ldr	r2, [pc, #348]	; (80007d4 <main+0x1e8>)
 8000676:	6093      	str	r3, [r2, #8]
  xTimerStart(buffer.xTimer1_ultrs, portMAX_DELAY);
 8000678:	4b56      	ldr	r3, [pc, #344]	; (80007d4 <main+0x1e8>)
 800067a:	689c      	ldr	r4, [r3, #8]
 800067c:	f006 fc28 	bl	8006ed0 <xTaskGetTickCount>
 8000680:	4602      	mov	r2, r0
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2300      	movs	r3, #0
 800068a:	2101      	movs	r1, #1
 800068c:	4620      	mov	r0, r4
 800068e:	f007 f8ff 	bl	8007890 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  buffer.xQueue1_ultrs = xQueueCreate(10, sizeof(uint16_t));
 8000692:	2200      	movs	r2, #0
 8000694:	2102      	movs	r1, #2
 8000696:	200a      	movs	r0, #10
 8000698:	f005 fd00 	bl	800609c <xQueueGenericCreate>
 800069c:	4603      	mov	r3, r0
 800069e:	4a4d      	ldr	r2, [pc, #308]	; (80007d4 <main+0x1e8>)
 80006a0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UltrasonicDistance */
  osThreadDef(UltrasonicDistance, ultrasonic_dis, osPriorityNormal, 0, 128);
 80006a2:	4b4d      	ldr	r3, [pc, #308]	; (80007d8 <main+0x1ec>)
 80006a4:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80006a8:	461d      	mov	r5, r3
 80006aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UltrasonicDistanceHandle = osThreadCreate(osThread(UltrasonicDistance), NULL);
 80006b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f005 faf8 	bl	8005cb2 <osThreadCreate>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a45      	ldr	r2, [pc, #276]	; (80007dc <main+0x1f0>)
 80006c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LineTracking */
  osThreadDef(LineTracking, line_tracking, osPriorityNormal, 0, 128);
 80006c8:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <main+0x1f4>)
 80006ca:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80006ce:	461d      	mov	r5, r3
 80006d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LineTrackingHandle = osThreadCreate(osThread(LineTracking), NULL);
 80006dc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f005 fae5 	bl	8005cb2 <osThreadCreate>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a3e      	ldr	r2, [pc, #248]	; (80007e4 <main+0x1f8>)
 80006ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of LimitSwitch */
  osThreadDef(LimitSwitch, limit_switch, osPriorityNormal, 0, 128);
 80006ee:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <main+0x1fc>)
 80006f0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80006f4:	461d      	mov	r5, r3
 80006f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LimitSwitchHandle = osThreadCreate(osThread(LimitSwitch), NULL);
 8000702:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f005 fad2 	bl	8005cb2 <osThreadCreate>
 800070e:	4603      	mov	r3, r0
 8000710:	4a36      	ldr	r2, [pc, #216]	; (80007ec <main+0x200>)
 8000712:	6013      	str	r3, [r2, #0]

  /* definition and creation of InfraredMotion */
  osThreadDef(InfraredMotion, infrared_motion, osPriorityNormal, 0, 128);
 8000714:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <main+0x204>)
 8000716:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800071a:	461d      	mov	r5, r3
 800071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InfraredMotionHandle = osThreadCreate(osThread(InfraredMotion), NULL);
 8000728:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f005 fabf 	bl	8005cb2 <osThreadCreate>
 8000734:	4603      	mov	r3, r0
 8000736:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <main+0x208>)
 8000738:	6013      	str	r3, [r2, #0]

  /* definition and creation of Accelerometer */
  osThreadDef(Accelerometer, accelerometer, osPriorityNormal, 0, 128);
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <main+0x20c>)
 800073c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000740:	461d      	mov	r5, r3
 8000742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800074a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelerometerHandle = osThreadCreate(osThread(Accelerometer), NULL);
 800074e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f005 faac 	bl	8005cb2 <osThreadCreate>
 800075a:	4603      	mov	r3, r0
 800075c:	4a27      	ldr	r2, [pc, #156]	; (80007fc <main+0x210>)
 800075e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motors */
  osThreadDef(Motors, motors, osPriorityNormal, 0, 160);
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <main+0x214>)
 8000762:	f107 0420 	add.w	r4, r7, #32
 8000766:	461d      	mov	r5, r3
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorsHandle = osThreadCreate(osThread(Motors), NULL);
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f005 fa99 	bl	8005cb2 <osThreadCreate>
 8000780:	4603      	mov	r3, r0
 8000782:	4a20      	ldr	r2, [pc, #128]	; (8000804 <main+0x218>)
 8000784:	6013      	str	r3, [r2, #0]

  /* definition and creation of Encoders */
  osThreadDef(Encoders, encoders, osPriorityNormal, 0, 160);
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <main+0x21c>)
 8000788:	1d3c      	adds	r4, r7, #4
 800078a:	461d      	mov	r5, r3
 800078c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000790:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000794:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncodersHandle = osThreadCreate(osThread(Encoders), NULL);
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f005 fa88 	bl	8005cb2 <osThreadCreate>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a19      	ldr	r2, [pc, #100]	; (800080c <main+0x220>)
 80007a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007a8:	f005 fa7c 	bl	8005ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <main+0x1c0>
 80007ae:	bf00      	nop
 80007b0:	20000738 	.word	0x20000738
 80007b4:	20000734 	.word	0x20000734
 80007b8:	20000638 	.word	0x20000638
 80007bc:	40020800 	.word	0x40020800
 80007c0:	20000590 	.word	0x20000590
 80007c4:	20000548 	.word	0x20000548
 80007c8:	20000735 	.word	0x20000735
 80007cc:	08000ddd 	.word	0x08000ddd
 80007d0:	080090c8 	.word	0x080090c8
 80007d4:	20000728 	.word	0x20000728
 80007d8:	080090dc 	.word	0x080090dc
 80007dc:	2000070c 	.word	0x2000070c
 80007e0:	080090f8 	.word	0x080090f8
 80007e4:	20000710 	.word	0x20000710
 80007e8:	08009114 	.word	0x08009114
 80007ec:	20000714 	.word	0x20000714
 80007f0:	08009130 	.word	0x08009130
 80007f4:	20000718 	.word	0x20000718
 80007f8:	0800914c 	.word	0x0800914c
 80007fc:	2000071c 	.word	0x2000071c
 8000800:	08009168 	.word	0x08009168
 8000804:	20000720 	.word	0x20000720
 8000808:	08009184 	.word	0x08009184
 800080c:	20000724 	.word	0x20000724

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2230      	movs	r2, #48	; 0x30
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f007 ffac 	bl	800877c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <SystemClock_Config+0xcc>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <SystemClock_Config+0xcc>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800085c:	4a20      	ldr	r2, [pc, #128]	; (80008e0 <SystemClock_Config+0xd0>)
 800085e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <SystemClock_Config+0xd0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2310      	movs	r3, #16
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000880:	2300      	movs	r3, #0
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000884:	2308      	movs	r3, #8
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4618      	mov	r0, r3
 800089a:	f002 f85b 	bl	8002954 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a4:	f000 fc0f 	bl	80010c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2102      	movs	r1, #2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 fabd 	bl	8002e44 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008d0:	f000 fbf9 	bl	80010c6 <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3750      	adds	r7, #80	; 0x50
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008f6:	4b28      	ldr	r3, [pc, #160]	; (8000998 <MX_ADC1_Init+0xb4>)
 80008f8:	4a28      	ldr	r2, [pc, #160]	; (800099c <MX_ADC1_Init+0xb8>)
 80008fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_ADC1_Init+0xb4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000902:	4b25      	ldr	r3, [pc, #148]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000908:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_ADC1_Init+0xb4>)
 800090c:	2201      	movs	r2, #1
 800090e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000912:	2201      	movs	r2, #1
 8000914:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000920:	2200      	movs	r2, #0
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <MX_ADC1_Init+0xbc>)
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_ADC1_Init+0xb4>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000932:	2202      	movs	r2, #2
 8000934:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000938:	2201      	movs	r2, #1
 800093a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000940:	2201      	movs	r2, #1
 8000942:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000944:	4814      	ldr	r0, [pc, #80]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000946:	f000 ff1b 	bl	8001780 <HAL_ADC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000950:	f000 fbb9 	bl	80010c6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000958:	2301      	movs	r3, #1
 800095a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000966:	f001 f85d 	bl	8001a24 <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000970:	f000 fba9 	bl	80010c6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000974:	2301      	movs	r3, #1
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_ADC1_Init+0xb4>)
 8000982:	f001 f84f 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800098c:	f000 fb9b 	bl	80010c6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000548 	.word	0x20000548
 800099c:	40012000 	.word	0x40012000
 80009a0:	0f000001 	.word	0x0f000001

080009a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	; 0x38
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009d4:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 80009d6:	4a3f      	ldr	r2, [pc, #252]	; (8000ad4 <MX_TIM3_Init+0x130>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640;
 80009da:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 80009dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80009e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80009e8:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 80009ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f6:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009fc:	4834      	ldr	r0, [pc, #208]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 80009fe:	f002 fc33 	bl	8003268 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a08:	f000 fb5d 	bl	80010c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a16:	4619      	mov	r1, r3
 8000a18:	482d      	ldr	r0, [pc, #180]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 8000a1a:	f003 fbcf 	bl	80041bc <HAL_TIM_ConfigClockSource>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000a24:	f000 fb4f 	bl	80010c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a28:	4829      	ldr	r0, [pc, #164]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 8000a2a:	f002 fccf 	bl	80033cc <HAL_TIM_PWM_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a34:	f000 fb47 	bl	80010c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4619      	mov	r1, r3
 8000a46:	4822      	ldr	r0, [pc, #136]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 8000a48:	f004 f87e 	bl	8004b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a52:	f000 fb38 	bl	80010c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a56:	2370      	movs	r3, #112	; 0x70
 8000a58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 8000a5a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 8000a70:	f003 fae2 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000a7a:	f000 fb24 	bl	80010c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2204      	movs	r2, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 8000a86:	f003 fad7 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000a90:	f000 fb19 	bl	80010c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2208      	movs	r2, #8
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 8000a9c:	f003 facc 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000aa6:	f000 fb0e 	bl	80010c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	220c      	movs	r2, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 8000ab2:	f003 fac1 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8000abc:	f000 fb03 	bl	80010c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ac0:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <MX_TIM3_Init+0x12c>)
 8000ac2:	f000 fc2b 	bl	800131c <HAL_TIM_MspPostInit>

}
 8000ac6:	bf00      	nop
 8000ac8:	3738      	adds	r7, #56	; 0x38
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200005f0 	.word	0x200005f0
 8000ad4:	40000400 	.word	0x40000400

08000ad8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_TIM10_Init+0x88>)
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <MX_TIM10_Init+0x8c>)
 8000aee:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 194;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_TIM10_Init+0x88>)
 8000af2:	22c2      	movs	r2, #194	; 0xc2
 8000af4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_TIM10_Init+0x88>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_TIM10_Init+0x88>)
 8000afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b02:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_TIM10_Init+0x88>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_TIM10_Init+0x88>)
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_TIM10_Init+0x88>)
 8000b12:	f002 fba9 	bl	8003268 <HAL_TIM_Base_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8000b1c:	f000 fad3 	bl	80010c6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8000b20:	480f      	ldr	r0, [pc, #60]	; (8000b60 <MX_TIM10_Init+0x88>)
 8000b22:	f002 ff71 	bl	8003a08 <HAL_TIM_IC_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8000b2c:	f000 facb 	bl	80010c6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000b30:	230a      	movs	r3, #10
 8000b32:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b34:	2301      	movs	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_TIM10_Init+0x88>)
 8000b48:	f003 f9da 	bl	8003f00 <HAL_TIM_IC_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8000b52:	f000 fab8 	bl	80010c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000638 	.word	0x20000638
 8000b64:	40014400 	.word	0x40014400

08000b68 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_TIM11_Init+0x94>)
 8000b82:	4a1f      	ldr	r2, [pc, #124]	; (8000c00 <MX_TIM11_Init+0x98>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 31;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_TIM11_Init+0x94>)
 8000b88:	221f      	movs	r2, #31
 8000b8a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_TIM11_Init+0x94>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_TIM11_Init+0x94>)
 8000b94:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b98:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_TIM11_Init+0x94>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_TIM11_Init+0x94>)
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ba6:	4815      	ldr	r0, [pc, #84]	; (8000bfc <MX_TIM11_Init+0x94>)
 8000ba8:	f002 fb5e 	bl	8003268 <HAL_TIM_Base_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000bb2:	f000 fa88 	bl	80010c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000bb6:	4811      	ldr	r0, [pc, #68]	; (8000bfc <MX_TIM11_Init+0x94>)
 8000bb8:	f002 fc08 	bl	80033cc <HAL_TIM_PWM_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000bc2:	f000 fa80 	bl	80010c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc6:	2360      	movs	r3, #96	; 0x60
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8000bca:	2314      	movs	r3, #20
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <MX_TIM11_Init+0x94>)
 8000bde:	f003 fa2b 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000be8:	f000 fa6d 	bl	80010c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <MX_TIM11_Init+0x94>)
 8000bee:	f000 fb95 	bl	800131c <HAL_TIM_MspPostInit>

}
 8000bf2:	bf00      	nop
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000680 	.word	0x20000680
 8000c00:	40014800 	.word	0x40014800

08000c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_USART1_UART_Init+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3a:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c3c:	f004 f806 	bl	8004c4c <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c46:	f000 fa3e 	bl	80010c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <MX_USART1_UART_Init+0x5c>)
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <MX_USART1_UART_Init+0x5c>)
 8000c50:	f043 0320 	orr.w	r3, r3, #32
 8000c54:	60d3      	str	r3, [r2, #12]
  /* USER CODE END USART1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200006c8 	.word	0x200006c8
 8000c60:	40011000 	.word	0x40011000

08000c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_DMA_Init+0x30>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <MX_DMA_Init+0x30>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_DMA_Init+0x30>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a30      	ldr	r2, [pc, #192]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a29      	ldr	r2, [pc, #164]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_GPIO_Init+0xe0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 4114 	mov.w	r1, #37888	; 0x9400
 8000d24:	4815      	ldr	r0, [pc, #84]	; (8000d7c <MX_GPIO_Init+0xe4>)
 8000d26:	f001 fdfb 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4814      	ldr	r0, [pc, #80]	; (8000d80 <MX_GPIO_Init+0xe8>)
 8000d30:	f001 fdf6 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC15 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_12;
 8000d34:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <MX_GPIO_Init+0xe4>)
 8000d4e:	f001 fc63 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d52:	2301      	movs	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_GPIO_Init+0xe8>)
 8000d6a:	f001 fc55 	bl	8002618 <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	40021c00 	.word	0x40021c00

08000d84 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	if(htim == &htim10 )
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_TIM_IC_CaptureCallback+0x28>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d106      	bne.n	8000da2 <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		xQueueSendToBackFromISR(buffer.xQueue1_ultrs, (void*)(&(TIM10->CCR1)) ,NULL);
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4905      	ldr	r1, [pc, #20]	; (8000db4 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000d9e:	f005 fad5 	bl	800634c <xQueueGenericSendFromISR>
	}
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000638 	.word	0x20000638
 8000db0:	20000728 	.word	0x20000728
 8000db4:	40014434 	.word	0x40014434

08000db8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d103      	bne.n	8000dd0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
	{
		HAL_TIM_PWM_Stop_IT(&htim11, TIM_CHANNEL_1);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000dcc:	f002 fd6a 	bl	80038a4 <HAL_TIM_PWM_Stop_IT>
	}
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000680 	.word	0x20000680

08000ddc <vCallbackFunctionTimer1>:

void vCallbackFunctionTimer1( TimerHandle_t xTimer )
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_IT(&htim11, TIM_CHANNEL_1);
 8000de4:	2100      	movs	r1, #0
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <vCallbackFunctionTimer1+0x18>)
 8000de8:	f002 fc5e 	bl	80036a8 <HAL_TIM_PWM_Start_IT>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000680 	.word	0x20000680

08000df8 <vApplicationIdleHook>:

void vApplicationIdleHook(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8000dfc:	bf00      	nop
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <ultrasonic_dis>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ultrasonic_dis */
void ultrasonic_dis(void const * argument)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <ultrasonic_dis+0x80>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	491c      	ldr	r1, [pc, #112]	; (8000e8c <ultrasonic_dis+0x84>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f005 fb32 	bl	8006484 <xQueueReceive>
	  uint16_t temp1 = buffer.distance_ultrs;
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <ultrasonic_dis+0x80>)
 8000e22:	889b      	ldrh	r3, [r3, #4]
 8000e24:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <ultrasonic_dis+0x80>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2e:	4917      	ldr	r1, [pc, #92]	; (8000e8c <ultrasonic_dis+0x84>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 fb27 	bl	8006484 <xQueueReceive>
	  uint16_t temp2 = buffer.distance_ultrs;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <ultrasonic_dis+0x80>)
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  uint16_t temp3 = temp2 - temp1;
 8000e3c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000e3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	857b      	strh	r3, [r7, #42]	; 0x2a
	  char string_buff[30] = {0};
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
 8000e58:	615a      	str	r2, [r3, #20]
 8000e5a:	831a      	strh	r2, [r3, #24]
      sprintf(string_buff, "%d \r\n", temp3);
 8000e5c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	490b      	ldr	r1, [pc, #44]	; (8000e90 <ultrasonic_dis+0x88>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f007 fc91 	bl	800878c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 8000e6a:	f107 010c 	add.w	r1, r7, #12
 8000e6e:	2364      	movs	r3, #100	; 0x64
 8000e70:	221e      	movs	r2, #30
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <ultrasonic_dis+0x8c>)
 8000e74:	f003 ff37 	bl	8004ce6 <HAL_UART_Transmit>
	  xQueueReset(buffer.xQueue1_ultrs);
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <ultrasonic_dis+0x80>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f005 f82c 	bl	8005edc <xQueueGenericReset>
	  __asm__ volatile("NOP");
 8000e84:	bf00      	nop
  {
 8000e86:	e7c3      	b.n	8000e10 <ultrasonic_dis+0x8>
 8000e88:	20000728 	.word	0x20000728
 8000e8c:	2000072c 	.word	0x2000072c
 8000e90:	080091a0 	.word	0x080091a0
 8000e94:	200006c8 	.word	0x200006c8

08000e98 <line_tracking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_line_tracking */
void line_tracking(void const * argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN line_tracking */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f004 ff52 	bl	8005d4a <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <line_tracking+0x8>

08000ea8 <limit_switch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_limit_switch */
void limit_switch(void const * argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN limit_switch */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f004 ff4a 	bl	8005d4a <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <limit_switch+0x8>

08000eb8 <infrared_motion>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infrared_motion */
void infrared_motion(void const * argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN infrared_motion */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f004 ff42 	bl	8005d4a <osDelay>
 8000ec6:	e7fb      	b.n	8000ec0 <infrared_motion+0x8>

08000ec8 <accelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_accelerometer */
void accelerometer(void const * argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accelerometer */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f004 ff3a 	bl	8005d4a <osDelay>
 8000ed6:	e7fb      	b.n	8000ed0 <accelerometer+0x8>

08000ed8 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void const * argument)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
  /* Infinite loop */
  for(;;)
  {

	  switch (buffer.instruction_for_motors) {
 8000ee0:	4b5b      	ldr	r3, [pc, #364]	; (8001050 <motors+0x178>)
 8000ee2:	7b1b      	ldrb	r3, [r3, #12]
 8000ee4:	3b44      	subs	r3, #68	; 0x44
 8000ee6:	2b31      	cmp	r3, #49	; 0x31
 8000ee8:	f200 80b0 	bhi.w	800104c <motors+0x174>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <motors+0x1c>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000fe1 	.word	0x08000fe1
 8000ef8:	0800104d 	.word	0x0800104d
 8000efc:	0800104d 	.word	0x0800104d
 8000f00:	0800104d 	.word	0x0800104d
 8000f04:	0800104d 	.word	0x0800104d
 8000f08:	0800104d 	.word	0x0800104d
 8000f0c:	0800104d 	.word	0x0800104d
 8000f10:	0800104d 	.word	0x0800104d
 8000f14:	08001029 	.word	0x08001029
 8000f18:	0800104d 	.word	0x0800104d
 8000f1c:	0800104d 	.word	0x0800104d
 8000f20:	0800104d 	.word	0x0800104d
 8000f24:	0800104d 	.word	0x0800104d
 8000f28:	0800104d 	.word	0x0800104d
 8000f2c:	08001005 	.word	0x08001005
 8000f30:	0800104d 	.word	0x0800104d
 8000f34:	0800104d 	.word	0x0800104d
 8000f38:	08000fbd 	.word	0x08000fbd
 8000f3c:	0800104d 	.word	0x0800104d
 8000f40:	0800104d 	.word	0x0800104d
 8000f44:	0800104d 	.word	0x0800104d
 8000f48:	0800104d 	.word	0x0800104d
 8000f4c:	0800104d 	.word	0x0800104d
 8000f50:	0800104d 	.word	0x0800104d
 8000f54:	0800104d 	.word	0x0800104d
 8000f58:	0800104d 	.word	0x0800104d
 8000f5c:	0800104d 	.word	0x0800104d
 8000f60:	0800104d 	.word	0x0800104d
 8000f64:	0800104d 	.word	0x0800104d
 8000f68:	0800104d 	.word	0x0800104d
 8000f6c:	0800104d 	.word	0x0800104d
 8000f70:	0800104d 	.word	0x0800104d
 8000f74:	08000ff3 	.word	0x08000ff3
 8000f78:	0800104d 	.word	0x0800104d
 8000f7c:	0800104d 	.word	0x0800104d
 8000f80:	0800104d 	.word	0x0800104d
 8000f84:	0800104d 	.word	0x0800104d
 8000f88:	0800104d 	.word	0x0800104d
 8000f8c:	0800104d 	.word	0x0800104d
 8000f90:	0800104d 	.word	0x0800104d
 8000f94:	0800103b 	.word	0x0800103b
 8000f98:	0800104d 	.word	0x0800104d
 8000f9c:	0800104d 	.word	0x0800104d
 8000fa0:	0800104d 	.word	0x0800104d
 8000fa4:	0800104d 	.word	0x0800104d
 8000fa8:	0800104d 	.word	0x0800104d
 8000fac:	08001017 	.word	0x08001017
 8000fb0:	0800104d 	.word	0x0800104d
 8000fb4:	0800104d 	.word	0x0800104d
 8000fb8:	08000fcf 	.word	0x08000fcf
	         case 'U':
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4825      	ldr	r0, [pc, #148]	; (8001054 <motors+0x17c>)
 8000fc0:	f002 fa5e 	bl	8003480 <HAL_TIM_PWM_Start>
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000fc4:	210c      	movs	r1, #12
 8000fc6:	4823      	ldr	r0, [pc, #140]	; (8001054 <motors+0x17c>)
 8000fc8:	f002 fa5a 	bl	8003480 <HAL_TIM_PWM_Start>
	             break;
 8000fcc:	e03f      	b.n	800104e <motors+0x176>
	         case 'u':
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4820      	ldr	r0, [pc, #128]	; (8001054 <motors+0x17c>)
 8000fd2:	f002 fb05 	bl	80035e0 <HAL_TIM_PWM_Stop>
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8000fd6:	210c      	movs	r1, #12
 8000fd8:	481e      	ldr	r0, [pc, #120]	; (8001054 <motors+0x17c>)
 8000fda:	f002 fb01 	bl	80035e0 <HAL_TIM_PWM_Stop>
	             break;
 8000fde:	e036      	b.n	800104e <motors+0x176>
	         case 'D':
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	481c      	ldr	r0, [pc, #112]	; (8001054 <motors+0x17c>)
 8000fe4:	f002 fa4c 	bl	8003480 <HAL_TIM_PWM_Start>
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fe8:	2108      	movs	r1, #8
 8000fea:	481a      	ldr	r0, [pc, #104]	; (8001054 <motors+0x17c>)
 8000fec:	f002 fa48 	bl	8003480 <HAL_TIM_PWM_Start>
	             break;
 8000ff0:	e02d      	b.n	800104e <motors+0x176>
	         case 'd':
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4817      	ldr	r0, [pc, #92]	; (8001054 <motors+0x17c>)
 8000ff6:	f002 faf3 	bl	80035e0 <HAL_TIM_PWM_Stop>
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	4815      	ldr	r0, [pc, #84]	; (8001054 <motors+0x17c>)
 8000ffe:	f002 faef 	bl	80035e0 <HAL_TIM_PWM_Stop>
	             break;
 8001002:	e024      	b.n	800104e <motors+0x176>
	         case 'R':
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001004:	2104      	movs	r1, #4
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <motors+0x17c>)
 8001008:	f002 fa3a 	bl	8003480 <HAL_TIM_PWM_Start>
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800100c:	2108      	movs	r1, #8
 800100e:	4811      	ldr	r0, [pc, #68]	; (8001054 <motors+0x17c>)
 8001010:	f002 fa36 	bl	8003480 <HAL_TIM_PWM_Start>
	             break;
 8001014:	e01b      	b.n	800104e <motors+0x176>
	         case 'r':
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001016:	2104      	movs	r1, #4
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <motors+0x17c>)
 800101a:	f002 fae1 	bl	80035e0 <HAL_TIM_PWM_Stop>
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800101e:	2108      	movs	r1, #8
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <motors+0x17c>)
 8001022:	f002 fadd 	bl	80035e0 <HAL_TIM_PWM_Stop>
	             break;
 8001026:	e012      	b.n	800104e <motors+0x176>
	         case 'L':
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001028:	2100      	movs	r1, #0
 800102a:	480a      	ldr	r0, [pc, #40]	; (8001054 <motors+0x17c>)
 800102c:	f002 fa28 	bl	8003480 <HAL_TIM_PWM_Start>
	             HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001030:	210c      	movs	r1, #12
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <motors+0x17c>)
 8001034:	f002 fa24 	bl	8003480 <HAL_TIM_PWM_Start>
	             break;
 8001038:	e009      	b.n	800104e <motors+0x176>
	         case 'l':
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800103a:	2100      	movs	r1, #0
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <motors+0x17c>)
 800103e:	f002 facf 	bl	80035e0 <HAL_TIM_PWM_Stop>
	             HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001042:	210c      	movs	r1, #12
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <motors+0x17c>)
 8001046:	f002 facb 	bl	80035e0 <HAL_TIM_PWM_Stop>
	             break;
 800104a:	e000      	b.n	800104e <motors+0x176>
	         default:
	        	 __asm__ volatile("NOP");
 800104c:	bf00      	nop
	  switch (buffer.instruction_for_motors) {
 800104e:	e747      	b.n	8000ee0 <motors+0x8>
 8001050:	20000728 	.word	0x20000728
 8001054:	200005f0 	.word	0x200005f0

08001058 <encoders>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoders */
void encoders(void const * argument)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoders */
  /* Infinite loop */
  for(;;)
  {
	  char string_buff[20] = {0};
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
      sprintf(string_buff, "%d 		%d\r\n", buffer.encod_data[0], buffer.encod_data[1]);
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <encoders+0x44>)
 8001074:	7b5b      	ldrb	r3, [r3, #13]
 8001076:	461a      	mov	r2, r3
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <encoders+0x44>)
 800107a:	7b9b      	ldrb	r3, [r3, #14]
 800107c:	f107 000c 	add.w	r0, r7, #12
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <encoders+0x48>)
 8001082:	f007 fb83 	bl	800878c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 8001086:	f107 010c 	add.w	r1, r7, #12
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	2214      	movs	r2, #20
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <encoders+0x4c>)
 8001090:	f003 fe29 	bl	8004ce6 <HAL_UART_Transmit>
	  vTaskDelay(100);
 8001094:	2064      	movs	r0, #100	; 0x64
 8001096:	f005 fdd7 	bl	8006c48 <vTaskDelay>
  {
 800109a:	e7e1      	b.n	8001060 <encoders+0x8>
 800109c:	20000728 	.word	0x20000728
 80010a0:	080091a8 	.word	0x080091a8
 80010a4:	200006c8 	.word	0x200006c8

080010a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b8:	d101      	bne.n	80010be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ba:	f000 fb41 	bl	8001740 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ca:	b672      	cpsid	i
}
 80010cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ce:	e7fe      	b.n	80010ce <Error_Handler+0x8>

080010d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_MspInit+0x54>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <HAL_MspInit+0x54>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_MspInit+0x54>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_MspInit+0x54>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_MspInit+0x54>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_MspInit+0x54>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	210f      	movs	r1, #15
 8001112:	f06f 0001 	mvn.w	r0, #1
 8001116:	f000 ffdd 	bl	80020d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a2e      	ldr	r2, [pc, #184]	; (8001200 <HAL_ADC_MspInit+0xd8>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d155      	bne.n	80011f6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a25      	ldr	r2, [pc, #148]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001182:	2303      	movs	r3, #3
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001186:	2303      	movs	r3, #3
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	481c      	ldr	r0, [pc, #112]	; (8001208 <HAL_ADC_MspInit+0xe0>)
 8001196:	f001 fa3f 	bl	8002618 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_ADC_MspInit+0xe4>)
 800119c:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_ADC_MspInit+0xe8>)
 800119e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011dc:	f000 ffa4 	bl	8002128 <HAL_DMA_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80011e6:	f7ff ff6e 	bl	80010c6 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011ee:	639a      	str	r2, [r3, #56]	; 0x38
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40012000 	.word	0x40012000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	20000590 	.word	0x20000590
 8001210:	40026410 	.word	0x40026410

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a35      	ldr	r2, [pc, #212]	; (8001308 <HAL_TIM_Base_MspInit+0xf4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10e      	bne.n	8001254 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a33      	ldr	r2, [pc, #204]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001252:	e055      	b.n	8001300 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM10)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <HAL_TIM_Base_MspInit+0xfc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d135      	bne.n	80012ca <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a29      	ldr	r2, [pc, #164]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012a0:	2302      	movs	r3, #2
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80012a8:	2303      	movs	r3, #3
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4818      	ldr	r0, [pc, #96]	; (8001314 <HAL_TIM_Base_MspInit+0x100>)
 80012b4:	f001 f9b0 	bl	8002618 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2105      	movs	r1, #5
 80012bc:	2019      	movs	r0, #25
 80012be:	f000 ff09 	bl	80020d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012c2:	2019      	movs	r0, #25
 80012c4:	f000 ff22 	bl	800210c <HAL_NVIC_EnableIRQ>
}
 80012c8:	e01a      	b.n	8001300 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM11)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_TIM_Base_MspInit+0x104>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d115      	bne.n	8001300 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	4a0b      	ldr	r2, [pc, #44]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 80012de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e2:	6453      	str	r3, [r2, #68]	; 0x44
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_TIM_Base_MspInit+0xf8>)
 80012e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2105      	movs	r1, #5
 80012f4:	201a      	movs	r0, #26
 80012f6:	f000 feed 	bl	80020d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012fa:	201a      	movs	r0, #26
 80012fc:	f000 ff06 	bl	800210c <HAL_NVIC_EnableIRQ>
}
 8001300:	bf00      	nop
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40000400 	.word	0x40000400
 800130c:	40023800 	.word	0x40023800
 8001310:	40014400 	.word	0x40014400
 8001314:	40020400 	.word	0x40020400
 8001318:	40014800 	.word	0x40014800

0800131c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a33      	ldr	r2, [pc, #204]	; (8001408 <HAL_TIM_MspPostInit+0xec>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d13c      	bne.n	80013b8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_TIM_MspPostInit+0xf0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a31      	ldr	r2, [pc, #196]	; (800140c <HAL_TIM_MspPostInit+0xf0>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <HAL_TIM_MspPostInit+0xf0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <HAL_TIM_MspPostInit+0xf0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a2a      	ldr	r2, [pc, #168]	; (800140c <HAL_TIM_MspPostInit+0xf0>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <HAL_TIM_MspPostInit+0xf0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001376:	23c0      	movs	r3, #192	; 0xc0
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137e:	2301      	movs	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001386:	2302      	movs	r3, #2
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	481f      	ldr	r0, [pc, #124]	; (8001410 <HAL_TIM_MspPostInit+0xf4>)
 8001392:	f001 f941 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001396:	2303      	movs	r3, #3
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013a2:	2301      	movs	r3, #1
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013a6:	2302      	movs	r3, #2
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4818      	ldr	r0, [pc, #96]	; (8001414 <HAL_TIM_MspPostInit+0xf8>)
 80013b2:	f001 f931 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80013b6:	e023      	b.n	8001400 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM11)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a16      	ldr	r2, [pc, #88]	; (8001418 <HAL_TIM_MspPostInit+0xfc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d11e      	bne.n	8001400 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_TIM_MspPostInit+0xf0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <HAL_TIM_MspPostInit+0xf0>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_TIM_MspPostInit+0xf0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ec:	2302      	movs	r3, #2
 80013ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80013f0:	2303      	movs	r3, #3
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <HAL_TIM_MspPostInit+0xf8>)
 80013fc:	f001 f90c 	bl	8002618 <HAL_GPIO_Init>
}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40000400 	.word	0x40000400
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40014800 	.word	0x40014800

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <HAL_UART_MspInit+0x94>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d134      	bne.n	80014a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <HAL_UART_MspInit+0x98>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_UART_MspInit+0x98>)
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_UART_MspInit+0x98>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_UART_MspInit+0x98>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <HAL_UART_MspInit+0x98>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_UART_MspInit+0x98>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001476:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001488:	2307      	movs	r3, #7
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4809      	ldr	r0, [pc, #36]	; (80014b8 <HAL_UART_MspInit+0x9c>)
 8001494:	f001 f8c0 	bl	8002618 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2105      	movs	r1, #5
 800149c:	2025      	movs	r0, #37	; 0x25
 800149e:	f000 fe19 	bl	80020d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014a2:	2025      	movs	r0, #37	; 0x25
 80014a4:	f000 fe32 	bl	800210c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000

080014bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	201c      	movs	r0, #28
 80014d2:	f000 fdff 	bl	80020d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d6:	201c      	movs	r0, #28
 80014d8:	f000 fe18 	bl	800210c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_InitTick+0xa8>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <HAL_InitTick+0xa8>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_InitTick+0xa8>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f8:	f107 0210 	add.w	r2, r7, #16
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fe7e 	bl	8003204 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001508:	f001 fe54 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800150c:	4603      	mov	r3, r0
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_InitTick+0xac>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9b      	lsrs	r3, r3, #18
 800151c:	3b01      	subs	r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0xb0>)
 8001522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001526:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_InitTick+0xb0>)
 800152a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800152e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_InitTick+0xb0>)
 8001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001534:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_InitTick+0xb0>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_InitTick+0xb0>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001542:	480a      	ldr	r0, [pc, #40]	; (800156c <HAL_InitTick+0xb0>)
 8001544:	f001 fe90 	bl	8003268 <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d104      	bne.n	8001558 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <HAL_InitTick+0xb0>)
 8001550:	f001 feda 	bl	8003308 <HAL_TIM_Base_Start_IT>
 8001554:	4603      	mov	r3, r0
 8001556:	e000      	b.n	800155a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	431bde83 	.word	0x431bde83
 800156c:	2000073c 	.word	0x2000073c

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015a2:	f002 fba5 	bl	8003cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000638 	.word	0x20000638

080015b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80015b6:	f002 fb9b 	bl	8003cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000680 	.word	0x20000680

080015c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <TIM2_IRQHandler+0x10>)
 80015ca:	f002 fb91 	bl	8003cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000073c 	.word	0x2000073c

080015d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if((USART1->SR & USART_SR_RXNE) == USART_SR_RXNE)
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <USART1_IRQHandler+0x34>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	d10b      	bne.n	8001600 <USART1_IRQHandler+0x28>
	{
		USART1->SR &= ~USART_SR_RXNE;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <USART1_IRQHandler+0x34>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <USART1_IRQHandler+0x34>)
 80015ee:	f023 0320 	bic.w	r3, r3, #32
 80015f2:	6013      	str	r3, [r2, #0]
		*instr4motors = USART1->DR;
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <USART1_IRQHandler+0x34>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <USART1_IRQHandler+0x38>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <USART1_IRQHandler+0x3c>)
 8001602:	f003 fc03 	bl	8004e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40011000 	.word	0x40011000
 8001610:	20000738 	.word	0x20000738
 8001614:	200006c8 	.word	0x200006c8

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f007 f860 	bl	800870c <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20018000 	.word	0x20018000
 8001678:	00000400 	.word	0x00000400
 800167c:	20000784 	.word	0x20000784
 8001680:	20003938 	.word	0x20003938

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ae:	490e      	ldr	r1, [pc, #56]	; (80016e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b0:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c4:	4c0b      	ldr	r4, [pc, #44]	; (80016f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016d2:	f7ff ffd7 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f007 f81f 	bl	8008718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7fe ff87 	bl	80005ec <main>
  bx  lr    
 80016de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016ec:	08009230 	.word	0x08009230
  ldr r2, =_sbss
 80016f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016f4:	20003934 	.word	0x20003934

080016f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_Init+0x40>)
 8001706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_Init+0x40>)
 8001712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_Init+0x40>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 fcca 	bl	80020be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	200f      	movs	r0, #15
 800172c:	f7ff fec6 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff fcce 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008
 8001764:	20000788 	.word	0x20000788

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000788 	.word	0x20000788

08001780 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e033      	b.n	80017fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fcc2 	bl	8001128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c6:	f023 0302 	bic.w	r3, r3, #2
 80017ca:	f043 0202 	orr.w	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fa48 	bl	8001c68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f023 0303 	bic.w	r3, r3, #3
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
 80017ee:	e001      	b.n	80017f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Start_DMA+0x1e>
 8001822:	2302      	movs	r3, #2
 8001824:	e0ce      	b.n	80019c4 <HAL_ADC_Start_DMA+0x1bc>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d018      	beq.n	800186e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800184c:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <HAL_ADC_Start_DMA+0x1c4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a5f      	ldr	r2, [pc, #380]	; (80019d0 <HAL_ADC_Start_DMA+0x1c8>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0c9a      	lsrs	r2, r3, #18
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001860:	e002      	b.n	8001868 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	3b01      	subs	r3, #1
 8001866:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f9      	bne.n	8001862 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800187c:	d107      	bne.n	800188e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800188c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	f040 8086 	bne.w	80019aa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018dc:	d106      	bne.n	80018ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f023 0206 	bic.w	r2, r3, #6
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44
 80018ea:	e002      	b.n	80018f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_ADC_Start_DMA+0x1cc>)
 80018fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	4a35      	ldr	r2, [pc, #212]	; (80019d8 <HAL_ADC_Start_DMA+0x1d0>)
 8001904:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	4a34      	ldr	r2, [pc, #208]	; (80019dc <HAL_ADC_Start_DMA+0x1d4>)
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001912:	4a33      	ldr	r2, [pc, #204]	; (80019e0 <HAL_ADC_Start_DMA+0x1d8>)
 8001914:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800191e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800192e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800193e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	334c      	adds	r3, #76	; 0x4c
 800194a:	4619      	mov	r1, r3
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f000 fc98 	bl	8002284 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10f      	bne.n	8001980 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d129      	bne.n	80019c2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	e020      	b.n	80019c2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <HAL_ADC_Start_DMA+0x1dc>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11b      	bne.n	80019c2 <HAL_ADC_Start_DMA+0x1ba>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d114      	bne.n	80019c2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	e00b      	b.n	80019c2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f043 0210 	orr.w	r2, r3, #16
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000000 	.word	0x20000000
 80019d0:	431bde83 	.word	0x431bde83
 80019d4:	40012300 	.word	0x40012300
 80019d8:	08001e61 	.word	0x08001e61
 80019dc:	08001f1b 	.word	0x08001f1b
 80019e0:	08001f37 	.word	0x08001f37
 80019e4:	40012000 	.word	0x40012000

080019e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1c>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e105      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x228>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d925      	bls.n	8001a9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68d9      	ldr	r1, [r3, #12]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	3b1e      	subs	r3, #30
 8001a66:	2207      	movs	r2, #7
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	400a      	ands	r2, r1
 8001a74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68d9      	ldr	r1, [r3, #12]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	4603      	mov	r3, r0
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4403      	add	r3, r0
 8001a8e:	3b1e      	subs	r3, #30
 8001a90:	409a      	lsls	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	e022      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6919      	ldr	r1, [r3, #16]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	400a      	ands	r2, r1
 8001abe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6919      	ldr	r1, [r3, #16]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4403      	add	r3, r0
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d824      	bhi.n	8001b34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b05      	subs	r3, #5
 8001afc:	221f      	movs	r2, #31
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	400a      	ands	r2, r1
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b05      	subs	r3, #5
 8001b26:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34
 8001b32:	e04c      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	d824      	bhi.n	8001b86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b23      	subs	r3, #35	; 0x23
 8001b4e:	221f      	movs	r2, #31
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43da      	mvns	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b23      	subs	r3, #35	; 0x23
 8001b78:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
 8001b84:	e023      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b41      	subs	r3, #65	; 0x41
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b41      	subs	r3, #65	; 0x41
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_ADC_ConfigChannel+0x234>)
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_ADC_ConfigChannel+0x238>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1cc>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d105      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_ADC_ConfigChannel+0x238>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d123      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x21e>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d003      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x1e6>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b11      	cmp	r3, #17
 8001c08:	d11b      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d111      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_ADC_ConfigChannel+0x23c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_ADC_ConfigChannel+0x240>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9a      	lsrs	r2, r3, #18
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c34:	e002      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f9      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40012300 	.word	0x40012300
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	20000000 	.word	0x20000000
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c70:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <ADC_Init+0x1f0>)
 8001c72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	021a      	lsls	r2, r3, #8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6899      	ldr	r1, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	4a58      	ldr	r2, [pc, #352]	; (8001e5c <ADC_Init+0x1f4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d022      	beq.n	8001d46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6899      	ldr	r1, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6899      	ldr	r1, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	e00f      	b.n	8001d66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0202 	bic.w	r2, r2, #2
 8001d74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6899      	ldr	r1, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7e1b      	ldrb	r3, [r3, #24]
 8001d80:	005a      	lsls	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01b      	beq.n	8001dcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001db2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6859      	ldr	r1, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	035a      	lsls	r2, r3, #13
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	e007      	b.n	8001ddc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	051a      	lsls	r2, r3, #20
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e1e:	025a      	lsls	r2, r3, #9
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6899      	ldr	r1, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	029a      	lsls	r2, r3, #10
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40012300 	.word	0x40012300
 8001e5c:	0f000001 	.word	0x0f000001

08001e60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d13c      	bne.n	8001ef4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d12b      	bne.n	8001eec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d127      	bne.n	8001eec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d119      	bne.n	8001eec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0220 	bic.w	r2, r2, #32
 8001ec6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d105      	bne.n	8001eec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fd7b 	bl	80019e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ef2:	e00e      	b.n	8001f12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7ff fd85 	bl	8001a10 <HAL_ADC_ErrorCallback>
}
 8001f06:	e004      	b.n	8001f12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff fd67 	bl	80019fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2240      	movs	r2, #64	; 0x40
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f043 0204 	orr.w	r2, r3, #4
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff fd5a 	bl	8001a10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 0307 	and.w	r3, r3, #7
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db0b      	blt.n	8001ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	4907      	ldr	r1, [pc, #28]	; (8002000 <__NVIC_EnableIRQ+0x38>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	2001      	movs	r0, #1
 8001fea:	fa00 f202 	lsl.w	r2, r0, r2
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ff4c 	bl	8001f64 <__NVIC_SetPriorityGrouping>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e6:	f7ff ff61 	bl	8001fac <__NVIC_GetPriorityGrouping>
 80020ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	6978      	ldr	r0, [r7, #20]
 80020f2:	f7ff ffb1 	bl	8002058 <NVIC_EncodePriority>
 80020f6:	4602      	mov	r2, r0
 80020f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff80 	bl	8002004 <__NVIC_SetPriority>
}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ff54 	bl	8001fc8 <__NVIC_EnableIRQ>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7ff fb18 	bl	8001768 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e099      	b.n	8002278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002164:	e00f      	b.n	8002186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002166:	f7ff faff 	bl	8001768 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b05      	cmp	r3, #5
 8002172:	d908      	bls.n	8002186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2203      	movs	r2, #3
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e078      	b.n	8002278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e8      	bne.n	8002166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_DMA_Init+0x158>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d107      	bne.n	80021f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4313      	orrs	r3, r2
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f023 0307 	bic.w	r3, r3, #7
 8002206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	2b04      	cmp	r3, #4
 8002218:	d117      	bne.n	800224a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f977 	bl	8002520 <DMA_CheckFifoParam>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002246:	2301      	movs	r3, #1
 8002248:	e016      	b.n	8002278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f92e 	bl	80024b4 <DMA_CalcBaseAndBitshift>
 8002258:	4603      	mov	r3, r0
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	223f      	movs	r2, #63	; 0x3f
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	f010803f 	.word	0xf010803f

08002284 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_DMA_Start_IT+0x26>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e040      	b.n	800232c <HAL_DMA_Start_IT+0xa8>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d12f      	bne.n	800231e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2202      	movs	r2, #2
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f8c0 	bl	8002458 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	223f      	movs	r2, #63	; 0x3f
 80022de:	409a      	lsls	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0216 	orr.w	r2, r2, #22
 80022f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e005      	b.n	800232a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002326:	2302      	movs	r3, #2
 8002328:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800232a:	7dfb      	ldrb	r3, [r7, #23]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002342:	f7ff fa11 	bl	8001768 <HAL_GetTick>
 8002346:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d008      	beq.n	8002366 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e052      	b.n	800240c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0216 	bic.w	r2, r2, #22
 8002374:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002384:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <HAL_DMA_Abort+0x62>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0208 	bic.w	r2, r2, #8
 80023a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b6:	e013      	b.n	80023e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b8:	f7ff f9d6 	bl	8001768 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d90c      	bls.n	80023e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2203      	movs	r2, #3
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e015      	b.n	800240c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1e4      	bne.n	80023b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	223f      	movs	r2, #63	; 0x3f
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d004      	beq.n	8002432 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00c      	b.n	800244c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2205      	movs	r2, #5
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002474:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d108      	bne.n	8002498 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002496:	e007      	b.n	80024a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3b10      	subs	r3, #16
 80024c4:	4a14      	ldr	r2, [pc, #80]	; (8002518 <DMA_CalcBaseAndBitshift+0x64>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ce:	4a13      	ldr	r2, [pc, #76]	; (800251c <DMA_CalcBaseAndBitshift+0x68>)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d909      	bls.n	80024f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	1d1a      	adds	r2, r3, #4
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	659a      	str	r2, [r3, #88]	; 0x58
 80024f4:	e007      	b.n	8002506 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	aaaaaaab 	.word	0xaaaaaaab
 800251c:	080091e4 	.word	0x080091e4

08002520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11f      	bne.n	800257a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d856      	bhi.n	80025ee <DMA_CheckFifoParam+0xce>
 8002540:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <DMA_CheckFifoParam+0x28>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002559 	.word	0x08002559
 800254c:	0800256b 	.word	0x0800256b
 8002550:	08002559 	.word	0x08002559
 8002554:	080025ef 	.word	0x080025ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d046      	beq.n	80025f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e043      	b.n	80025f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002572:	d140      	bne.n	80025f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002578:	e03d      	b.n	80025f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002582:	d121      	bne.n	80025c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d837      	bhi.n	80025fa <DMA_CheckFifoParam+0xda>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <DMA_CheckFifoParam+0x70>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025a7 	.word	0x080025a7
 8002598:	080025a1 	.word	0x080025a1
 800259c:	080025b9 	.word	0x080025b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      break;
 80025a4:	e030      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d025      	beq.n	80025fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b6:	e022      	b.n	80025fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c0:	d11f      	bne.n	8002602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025c6:	e01c      	b.n	8002602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d903      	bls.n	80025d6 <DMA_CheckFifoParam+0xb6>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d003      	beq.n	80025dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025d4:	e018      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
      break;
 80025da:	e015      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      break;
 80025ec:	e00b      	b.n	8002606 <DMA_CheckFifoParam+0xe6>
      break;
 80025ee:	bf00      	nop
 80025f0:	e00a      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
 80025f4:	e008      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e006      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e004      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
 8002600:	e002      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;   
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
    }
  } 
  
  return status; 
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e159      	b.n	80028e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 8148 	bne.w	80028e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d005      	beq.n	800266a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	2b02      	cmp	r3, #2
 8002668:	d130      	bne.n	80026cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 0201 	and.w	r2, r3, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d017      	beq.n	8002708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d123      	bne.n	800275c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	69b9      	ldr	r1, [r7, #24]
 8002758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0203 	and.w	r2, r3, #3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a2 	beq.w	80028e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_GPIO_Init+0x2e8>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a56      	ldr	r2, [pc, #344]	; (8002900 <HAL_GPIO_Init+0x2e8>)
 80027a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b54      	ldr	r3, [pc, #336]	; (8002900 <HAL_GPIO_Init+0x2e8>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ba:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a49      	ldr	r2, [pc, #292]	; (8002908 <HAL_GPIO_Init+0x2f0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d019      	beq.n	800281a <HAL_GPIO_Init+0x202>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a48      	ldr	r2, [pc, #288]	; (800290c <HAL_GPIO_Init+0x2f4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_Init+0x1fe>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a47      	ldr	r2, [pc, #284]	; (8002910 <HAL_GPIO_Init+0x2f8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00d      	beq.n	8002812 <HAL_GPIO_Init+0x1fa>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a46      	ldr	r2, [pc, #280]	; (8002914 <HAL_GPIO_Init+0x2fc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <HAL_GPIO_Init+0x1f6>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a45      	ldr	r2, [pc, #276]	; (8002918 <HAL_GPIO_Init+0x300>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_GPIO_Init+0x1f2>
 8002806:	2304      	movs	r3, #4
 8002808:	e008      	b.n	800281c <HAL_GPIO_Init+0x204>
 800280a:	2307      	movs	r3, #7
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x204>
 800280e:	2303      	movs	r3, #3
 8002810:	e004      	b.n	800281c <HAL_GPIO_Init+0x204>
 8002812:	2302      	movs	r3, #2
 8002814:	e002      	b.n	800281c <HAL_GPIO_Init+0x204>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_GPIO_Init+0x204>
 800281a:	2300      	movs	r3, #0
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f002 0203 	and.w	r2, r2, #3
 8002822:	0092      	lsls	r2, r2, #2
 8002824:	4093      	lsls	r3, r2
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800282c:	4935      	ldr	r1, [pc, #212]	; (8002904 <HAL_GPIO_Init+0x2ec>)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	3302      	adds	r3, #2
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <HAL_GPIO_Init+0x304>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285e:	4a2f      	ldr	r2, [pc, #188]	; (800291c <HAL_GPIO_Init+0x304>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_GPIO_Init+0x304>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002888:	4a24      	ldr	r2, [pc, #144]	; (800291c <HAL_GPIO_Init+0x304>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288e:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_GPIO_Init+0x304>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b2:	4a1a      	ldr	r2, [pc, #104]	; (800291c <HAL_GPIO_Init+0x304>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b8:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_GPIO_Init+0x304>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <HAL_GPIO_Init+0x304>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3301      	adds	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	f67f aea2 	bls.w	8002634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	40013800 	.word	0x40013800
 8002908:	40020000 	.word	0x40020000
 800290c:	40020400 	.word	0x40020400
 8002910:	40020800 	.word	0x40020800
 8002914:	40020c00 	.word	0x40020c00
 8002918:	40021000 	.word	0x40021000
 800291c:	40013c00 	.word	0x40013c00

08002920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800293c:	e003      	b.n	8002946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	041a      	lsls	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	619a      	str	r2, [r3, #24]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e267      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d075      	beq.n	8002a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002972:	4b88      	ldr	r3, [pc, #544]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b04      	cmp	r3, #4
 800297c:	d00c      	beq.n	8002998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297e:	4b85      	ldr	r3, [pc, #532]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002986:	2b08      	cmp	r3, #8
 8002988:	d112      	bne.n	80029b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298a:	4b82      	ldr	r3, [pc, #520]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002996:	d10b      	bne.n	80029b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	4b7e      	ldr	r3, [pc, #504]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d05b      	beq.n	8002a5c <HAL_RCC_OscConfig+0x108>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d157      	bne.n	8002a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e242      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x74>
 80029ba:	4b76      	ldr	r3, [pc, #472]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a75      	ldr	r2, [pc, #468]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e01d      	b.n	8002a04 <HAL_RCC_OscConfig+0xb0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x98>
 80029d2:	4b70      	ldr	r3, [pc, #448]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a6f      	ldr	r2, [pc, #444]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 80029d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b6d      	ldr	r3, [pc, #436]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6c      	ldr	r2, [pc, #432]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0xb0>
 80029ec:	4b69      	ldr	r3, [pc, #420]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a68      	ldr	r2, [pc, #416]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b66      	ldr	r3, [pc, #408]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a65      	ldr	r2, [pc, #404]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe feac 	bl	8001768 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe fea8 	bl	8001768 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e207      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b5b      	ldr	r3, [pc, #364]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0xc0>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe fe98 	bl	8001768 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fe94 	bl	8001768 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1f3      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	4b51      	ldr	r3, [pc, #324]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0xe8>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d063      	beq.n	8002b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6a:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a76:	4b47      	ldr	r3, [pc, #284]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d11c      	bne.n	8002abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a82:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d116      	bne.n	8002abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x152>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e1c7      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa6:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4937      	ldr	r1, [pc, #220]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	e03a      	b.n	8002b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d020      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac4:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_RCC_OscConfig+0x244>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe fe4d 	bl	8001768 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad2:	f7fe fe49 	bl	8001768 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e1a8      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4925      	ldr	r1, [pc, #148]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
 8002b04:	e015      	b.n	8002b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_OscConfig+0x244>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fe2c 	bl	8001768 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b14:	f7fe fe28 	bl	8001768 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e187      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d036      	beq.n	8002bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <HAL_RCC_OscConfig+0x248>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fe0c 	bl	8001768 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b54:	f7fe fe08 	bl	8001768 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e167      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCC_OscConfig+0x240>)
 8002b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x200>
 8002b72:	e01b      	b.n	8002bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_OscConfig+0x248>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fdf5 	bl	8001768 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	e00e      	b.n	8002ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b82:	f7fe fdf1 	bl	8001768 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d907      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e150      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
 8002b94:	40023800 	.word	0x40023800
 8002b98:	42470000 	.word	0x42470000
 8002b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ea      	bne.n	8002b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8097 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbe:	4b81      	ldr	r3, [pc, #516]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10f      	bne.n	8002bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	4b7d      	ldr	r3, [pc, #500]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	4a7c      	ldr	r2, [pc, #496]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bda:	4b7a      	ldr	r3, [pc, #488]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bea:	4b77      	ldr	r3, [pc, #476]	; (8002dc8 <HAL_RCC_OscConfig+0x474>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d118      	bne.n	8002c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf6:	4b74      	ldr	r3, [pc, #464]	; (8002dc8 <HAL_RCC_OscConfig+0x474>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a73      	ldr	r2, [pc, #460]	; (8002dc8 <HAL_RCC_OscConfig+0x474>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c02:	f7fe fdb1 	bl	8001768 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7fe fdad 	bl	8001768 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e10c      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <HAL_RCC_OscConfig+0x474>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x2ea>
 8002c30:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4a63      	ldr	r2, [pc, #396]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3c:	e01c      	b.n	8002c78 <HAL_RCC_OscConfig+0x324>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x30c>
 8002c46:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4a5e      	ldr	r2, [pc, #376]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	f043 0304 	orr.w	r3, r3, #4
 8002c50:	6713      	str	r3, [r2, #112]	; 0x70
 8002c52:	4b5c      	ldr	r3, [pc, #368]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a5b      	ldr	r2, [pc, #364]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0x324>
 8002c60:	4b58      	ldr	r3, [pc, #352]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a57      	ldr	r2, [pc, #348]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	4b55      	ldr	r3, [pc, #340]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a54      	ldr	r2, [pc, #336]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f023 0304 	bic.w	r3, r3, #4
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d015      	beq.n	8002cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7fe fd72 	bl	8001768 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fe fd6e 	bl	8001768 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0cb      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9e:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0ee      	beq.n	8002c88 <HAL_RCC_OscConfig+0x334>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fe fd5c 	bl	8001768 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fd58 	bl	8001768 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e0b5      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cca:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1ee      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cdc:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	4a38      	ldr	r2, [pc, #224]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a1 	beq.w	8002e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d05c      	beq.n	8002db8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d141      	bne.n	8002d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <HAL_RCC_OscConfig+0x478>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fd2c 	bl	8001768 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fe fd28 	bl	8001768 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e087      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d26:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	019b      	lsls	r3, r3, #6
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	491b      	ldr	r1, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCC_OscConfig+0x478>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe fd01 	bl	8001768 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe fcfd 	bl	8001768 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e05c      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x416>
 8002d88:	e054      	b.n	8002e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_RCC_OscConfig+0x478>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe fcea 	bl	8001768 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe fce6 	bl	8001768 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e045      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_OscConfig+0x470>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x444>
 8002db6:	e03d      	b.n	8002e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e038      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x4ec>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d028      	beq.n	8002e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d121      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d11a      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e00:	4013      	ands	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d111      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	085b      	lsrs	r3, r3, #1
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800

08002e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0cc      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e58:	4b68      	ldr	r3, [pc, #416]	; (8002ffc <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d90c      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b65      	ldr	r3, [pc, #404]	; (8002ffc <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b63      	ldr	r3, [pc, #396]	; (8002ffc <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b8      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e98:	4b59      	ldr	r3, [pc, #356]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4a58      	ldr	r2, [pc, #352]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb0:	4b53      	ldr	r3, [pc, #332]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b50      	ldr	r3, [pc, #320]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	494d      	ldr	r1, [pc, #308]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d044      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d119      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07f      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f02:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e06f      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f12:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e067      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f22:	4b37      	ldr	r3, [pc, #220]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 0203 	bic.w	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4934      	ldr	r1, [pc, #208]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f34:	f7fe fc18 	bl	8001768 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3c:	f7fe fc14 	bl	8001768 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e04f      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 020c 	and.w	r2, r3, #12
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d1eb      	bne.n	8002f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_RCC_ClockConfig+0x1b8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d20c      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e032      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4916      	ldr	r1, [pc, #88]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fb6:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	490e      	ldr	r1, [pc, #56]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fca:	f000 f821 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	490a      	ldr	r1, [pc, #40]	; (8003004 <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	5ccb      	ldrb	r3, [r1, r3]
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe2:	4a09      	ldr	r2, [pc, #36]	; (8003008 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_ClockConfig+0x1c8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fa66 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023c00 	.word	0x40023c00
 8003000:	40023800 	.word	0x40023800
 8003004:	080091cc 	.word	0x080091cc
 8003008:	20000000 	.word	0x20000000
 800300c:	20000004 	.word	0x20000004

08003010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003014:	b090      	sub	sp, #64	; 0x40
 8003016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
 800301c:	2300      	movs	r3, #0
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003020:	2300      	movs	r3, #0
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003028:	4b59      	ldr	r3, [pc, #356]	; (8003190 <HAL_RCC_GetSysClockFreq+0x180>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b08      	cmp	r3, #8
 8003032:	d00d      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x40>
 8003034:	2b08      	cmp	r3, #8
 8003036:	f200 80a1 	bhi.w	800317c <HAL_RCC_GetSysClockFreq+0x16c>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x34>
 800303e:	2b04      	cmp	r3, #4
 8003040:	d003      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x3a>
 8003042:	e09b      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_GetSysClockFreq+0x184>)
 8003046:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003048:	e09b      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800304a:	4b53      	ldr	r3, [pc, #332]	; (8003198 <HAL_RCC_GetSysClockFreq+0x188>)
 800304c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800304e:	e098      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003050:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <HAL_RCC_GetSysClockFreq+0x180>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003058:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800305a:	4b4d      	ldr	r3, [pc, #308]	; (8003190 <HAL_RCC_GetSysClockFreq+0x180>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d028      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003066:	4b4a      	ldr	r3, [pc, #296]	; (8003190 <HAL_RCC_GetSysClockFreq+0x180>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	2200      	movs	r2, #0
 800306e:	623b      	str	r3, [r7, #32]
 8003070:	627a      	str	r2, [r7, #36]	; 0x24
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003078:	2100      	movs	r1, #0
 800307a:	4b47      	ldr	r3, [pc, #284]	; (8003198 <HAL_RCC_GetSysClockFreq+0x188>)
 800307c:	fb03 f201 	mul.w	r2, r3, r1
 8003080:	2300      	movs	r3, #0
 8003082:	fb00 f303 	mul.w	r3, r0, r3
 8003086:	4413      	add	r3, r2
 8003088:	4a43      	ldr	r2, [pc, #268]	; (8003198 <HAL_RCC_GetSysClockFreq+0x188>)
 800308a:	fba0 1202 	umull	r1, r2, r0, r2
 800308e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003090:	460a      	mov	r2, r1
 8003092:	62ba      	str	r2, [r7, #40]	; 0x28
 8003094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003096:	4413      	add	r3, r2
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309c:	2200      	movs	r2, #0
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	61fa      	str	r2, [r7, #28]
 80030a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030aa:	f7fd f8e9 	bl	8000280 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4613      	mov	r3, r2
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b6:	e053      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b8:	4b35      	ldr	r3, [pc, #212]	; (8003190 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	2200      	movs	r2, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	617a      	str	r2, [r7, #20]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030ca:	f04f 0b00 	mov.w	fp, #0
 80030ce:	4652      	mov	r2, sl
 80030d0:	465b      	mov	r3, fp
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f04f 0100 	mov.w	r1, #0
 80030da:	0159      	lsls	r1, r3, #5
 80030dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e0:	0150      	lsls	r0, r2, #5
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	ebb2 080a 	subs.w	r8, r2, sl
 80030ea:	eb63 090b 	sbc.w	r9, r3, fp
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003102:	ebb2 0408 	subs.w	r4, r2, r8
 8003106:	eb63 0509 	sbc.w	r5, r3, r9
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	00eb      	lsls	r3, r5, #3
 8003114:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003118:	00e2      	lsls	r2, r4, #3
 800311a:	4614      	mov	r4, r2
 800311c:	461d      	mov	r5, r3
 800311e:	eb14 030a 	adds.w	r3, r4, sl
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	eb45 030b 	adc.w	r3, r5, fp
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003136:	4629      	mov	r1, r5
 8003138:	028b      	lsls	r3, r1, #10
 800313a:	4621      	mov	r1, r4
 800313c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003140:	4621      	mov	r1, r4
 8003142:	028a      	lsls	r2, r1, #10
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314a:	2200      	movs	r2, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	60fa      	str	r2, [r7, #12]
 8003150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003154:	f7fd f894 	bl	8000280 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4613      	mov	r3, r2
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_GetSysClockFreq+0x180>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	3301      	adds	r3, #1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCC_GetSysClockFreq+0x184>)
 800317e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003184:	4618      	mov	r0, r3
 8003186:	3740      	adds	r7, #64	; 0x40
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	00f42400 	.word	0x00f42400
 8003198:	017d7840 	.word	0x017d7840

0800319c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031b8:	f7ff fff0 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0a9b      	lsrs	r3, r3, #10
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4903      	ldr	r1, [pc, #12]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	080091dc 	.word	0x080091dc

080031dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031e0:	f7ff ffdc 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	0b5b      	lsrs	r3, r3, #13
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4903      	ldr	r1, [pc, #12]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40023800 	.word	0x40023800
 8003200:	080091dc 	.word	0x080091dc

08003204 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	220f      	movs	r2, #15
 8003212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_GetClockConfig+0x5c>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0203 	and.w	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <HAL_RCC_GetClockConfig+0x5c>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <HAL_RCC_GetClockConfig+0x5c>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_RCC_GetClockConfig+0x5c>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	08db      	lsrs	r3, r3, #3
 800323e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <HAL_RCC_GetClockConfig+0x60>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0207 	and.w	r2, r3, #7
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	601a      	str	r2, [r3, #0]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	40023c00 	.word	0x40023c00

08003268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e041      	b.n	80032fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd ffc0 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f001 f864 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d001      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e044      	b.n	80033aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334a:	d013      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1a      	ldr	r2, [pc, #104]	; (80033bc <HAL_TIM_Base_Start_IT+0xb4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d111      	bne.n	8003398 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d010      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	e007      	b.n	80033a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40010000 	.word	0x40010000
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40000800 	.word	0x40000800
 80033c4:	40000c00 	.word	0x40000c00
 80033c8:	40014000 	.word	0x40014000

080033cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e041      	b.n	8003462 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f839 	bl	800346a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f000 ffb2 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_TIM_PWM_Start+0x24>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e022      	b.n	80034ea <HAL_TIM_PWM_Start+0x6a>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d109      	bne.n	80034be <HAL_TIM_PWM_Start+0x3e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	bf14      	ite	ne
 80034b6:	2301      	movne	r3, #1
 80034b8:	2300      	moveq	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e015      	b.n	80034ea <HAL_TIM_PWM_Start+0x6a>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d109      	bne.n	80034d8 <HAL_TIM_PWM_Start+0x58>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e008      	b.n	80034ea <HAL_TIM_PWM_Start+0x6a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e068      	b.n	80035c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_PWM_Start+0x82>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003500:	e013      	b.n	800352a <HAL_TIM_PWM_Start+0xaa>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d104      	bne.n	8003512 <HAL_TIM_PWM_Start+0x92>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003510:	e00b      	b.n	800352a <HAL_TIM_PWM_Start+0xaa>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d104      	bne.n	8003522 <HAL_TIM_PWM_Start+0xa2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003520:	e003      	b.n	800352a <HAL_TIM_PWM_Start+0xaa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2201      	movs	r2, #1
 8003530:	6839      	ldr	r1, [r7, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f001 fae2 	bl	8004afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a23      	ldr	r2, [pc, #140]	; (80035cc <HAL_TIM_PWM_Start+0x14c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d107      	bne.n	8003552 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <HAL_TIM_PWM_Start+0x14c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d018      	beq.n	800358e <HAL_TIM_PWM_Start+0x10e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003564:	d013      	beq.n	800358e <HAL_TIM_PWM_Start+0x10e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <HAL_TIM_PWM_Start+0x150>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00e      	beq.n	800358e <HAL_TIM_PWM_Start+0x10e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_TIM_PWM_Start+0x154>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_TIM_PWM_Start+0x10e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <HAL_TIM_PWM_Start+0x158>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_TIM_PWM_Start+0x10e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <HAL_TIM_PWM_Start+0x15c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d111      	bne.n	80035b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b06      	cmp	r3, #6
 800359e:	d010      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	e007      	b.n	80035c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40014000 	.word	0x40014000

080035e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fa82 	bl	8004afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a29      	ldr	r2, [pc, #164]	; (80036a4 <HAL_TIM_PWM_Stop+0xc4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d117      	bne.n	8003632 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	f241 1311 	movw	r3, #4369	; 0x1111
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10f      	bne.n	8003632 <HAL_TIM_PWM_Stop+0x52>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a1a      	ldr	r2, [r3, #32]
 8003618:	f240 4344 	movw	r3, #1092	; 0x444
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d107      	bne.n	8003632 <HAL_TIM_PWM_Stop+0x52>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	f241 1311 	movw	r3, #4369	; 0x1111
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <HAL_TIM_PWM_Stop+0x82>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a1a      	ldr	r2, [r3, #32]
 8003648:	f240 4344 	movw	r3, #1092	; 0x444
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d107      	bne.n	8003662 <HAL_TIM_PWM_Stop+0x82>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d104      	bne.n	8003672 <HAL_TIM_PWM_Stop+0x92>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003670:	e013      	b.n	800369a <HAL_TIM_PWM_Stop+0xba>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d104      	bne.n	8003682 <HAL_TIM_PWM_Stop+0xa2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003680:	e00b      	b.n	800369a <HAL_TIM_PWM_Stop+0xba>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d104      	bne.n	8003692 <HAL_TIM_PWM_Stop+0xb2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003690:	e003      	b.n	800369a <HAL_TIM_PWM_Stop+0xba>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40010000 	.word	0x40010000

080036a8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_TIM_PWM_Start_IT+0x28>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e022      	b.n	8003716 <HAL_TIM_PWM_Start_IT+0x6e>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d109      	bne.n	80036ea <HAL_TIM_PWM_Start_IT+0x42>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b01      	cmp	r3, #1
 80036e0:	bf14      	ite	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	2300      	moveq	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	e015      	b.n	8003716 <HAL_TIM_PWM_Start_IT+0x6e>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d109      	bne.n	8003704 <HAL_TIM_PWM_Start_IT+0x5c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e008      	b.n	8003716 <HAL_TIM_PWM_Start_IT+0x6e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	bf14      	ite	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2300      	moveq	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e0b3      	b.n	8003886 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d104      	bne.n	800372e <HAL_TIM_PWM_Start_IT+0x86>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800372c:	e013      	b.n	8003756 <HAL_TIM_PWM_Start_IT+0xae>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b04      	cmp	r3, #4
 8003732:	d104      	bne.n	800373e <HAL_TIM_PWM_Start_IT+0x96>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800373c:	e00b      	b.n	8003756 <HAL_TIM_PWM_Start_IT+0xae>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d104      	bne.n	800374e <HAL_TIM_PWM_Start_IT+0xa6>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800374c:	e003      	b.n	8003756 <HAL_TIM_PWM_Start_IT+0xae>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d841      	bhi.n	80037e0 <HAL_TIM_PWM_Start_IT+0x138>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_TIM_PWM_Start_IT+0xbc>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003799 	.word	0x08003799
 8003768:	080037e1 	.word	0x080037e1
 800376c:	080037e1 	.word	0x080037e1
 8003770:	080037e1 	.word	0x080037e1
 8003774:	080037ab 	.word	0x080037ab
 8003778:	080037e1 	.word	0x080037e1
 800377c:	080037e1 	.word	0x080037e1
 8003780:	080037e1 	.word	0x080037e1
 8003784:	080037bd 	.word	0x080037bd
 8003788:	080037e1 	.word	0x080037e1
 800378c:	080037e1 	.word	0x080037e1
 8003790:	080037e1 	.word	0x080037e1
 8003794:	080037cf 	.word	0x080037cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0202 	orr.w	r2, r2, #2
 80037a6:	60da      	str	r2, [r3, #12]
      break;
 80037a8:	e01d      	b.n	80037e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0204 	orr.w	r2, r2, #4
 80037b8:	60da      	str	r2, [r3, #12]
      break;
 80037ba:	e014      	b.n	80037e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0208 	orr.w	r2, r2, #8
 80037ca:	60da      	str	r2, [r3, #12]
      break;
 80037cc:	e00b      	b.n	80037e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0210 	orr.w	r2, r2, #16
 80037dc:	60da      	str	r2, [r3, #12]
      break;
 80037de:	e002      	b.n	80037e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d14b      	bne.n	8003884 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2201      	movs	r2, #1
 80037f2:	6839      	ldr	r1, [r7, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 f981 	bl	8004afc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a24      	ldr	r2, [pc, #144]	; (8003890 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d107      	bne.n	8003814 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d018      	beq.n	8003850 <HAL_TIM_PWM_Start_IT+0x1a8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003826:	d013      	beq.n	8003850 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00e      	beq.n	8003850 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a18      	ldr	r2, [pc, #96]	; (8003898 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_TIM_PWM_Start_IT+0x1a8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a16      	ldr	r2, [pc, #88]	; (800389c <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d111      	bne.n	8003874 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b06      	cmp	r3, #6
 8003860:	d010      	beq.n	8003884 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003872:	e007      	b.n	8003884 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40010000 	.word	0x40010000
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40000c00 	.word	0x40000c00
 80038a0:	40014000 	.word	0x40014000

080038a4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d841      	bhi.n	800393c <HAL_TIM_PWM_Stop_IT+0x98>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038f5 	.word	0x080038f5
 80038c4:	0800393d 	.word	0x0800393d
 80038c8:	0800393d 	.word	0x0800393d
 80038cc:	0800393d 	.word	0x0800393d
 80038d0:	08003907 	.word	0x08003907
 80038d4:	0800393d 	.word	0x0800393d
 80038d8:	0800393d 	.word	0x0800393d
 80038dc:	0800393d 	.word	0x0800393d
 80038e0:	08003919 	.word	0x08003919
 80038e4:	0800393d 	.word	0x0800393d
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	0800393d 	.word	0x0800393d
 80038f0:	0800392b 	.word	0x0800392b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0202 	bic.w	r2, r2, #2
 8003902:	60da      	str	r2, [r3, #12]
      break;
 8003904:	e01d      	b.n	8003942 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0204 	bic.w	r2, r2, #4
 8003914:	60da      	str	r2, [r3, #12]
      break;
 8003916:	e014      	b.n	8003942 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0208 	bic.w	r2, r2, #8
 8003926:	60da      	str	r2, [r3, #12]
      break;
 8003928:	e00b      	b.n	8003942 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0210 	bic.w	r2, r2, #16
 8003938:	60da      	str	r2, [r3, #12]
      break;
 800393a:	e002      	b.n	8003942 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      break;
 8003940:	bf00      	nop
  }

  if (status == HAL_OK)
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d157      	bne.n	80039f8 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2200      	movs	r2, #0
 800394e:	6839      	ldr	r1, [r7, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f001 f8d3 	bl	8004afc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_TIM_PWM_Stop_IT+0x160>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d117      	bne.n	8003990 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6a1a      	ldr	r2, [r3, #32]
 8003966:	f241 1311 	movw	r3, #4369	; 0x1111
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10f      	bne.n	8003990 <HAL_TIM_PWM_Stop_IT+0xec>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	f240 4344 	movw	r3, #1092	; 0x444
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d107      	bne.n	8003990 <HAL_TIM_PWM_Stop_IT+0xec>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	f241 1311 	movw	r3, #4369	; 0x1111
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10f      	bne.n	80039c0 <HAL_TIM_PWM_Stop_IT+0x11c>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a1a      	ldr	r2, [r3, #32]
 80039a6:	f240 4344 	movw	r3, #1092	; 0x444
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_PWM_Stop_IT+0x11c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_TIM_PWM_Stop_IT+0x12c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ce:	e013      	b.n	80039f8 <HAL_TIM_PWM_Stop_IT+0x154>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d104      	bne.n	80039e0 <HAL_TIM_PWM_Stop_IT+0x13c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039de:	e00b      	b.n	80039f8 <HAL_TIM_PWM_Stop_IT+0x154>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d104      	bne.n	80039f0 <HAL_TIM_PWM_Stop_IT+0x14c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ee:	e003      	b.n	80039f8 <HAL_TIM_PWM_Stop_IT+0x154>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40010000 	.word	0x40010000

08003a08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e041      	b.n	8003a9e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f839 	bl	8003aa6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f000 fc94 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_IC_Start_IT+0x1e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	e013      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x46>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_IC_Start_IT+0x2e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	e00b      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x46>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d104      	bne.n	8003afa <HAL_TIM_IC_Start_IT+0x3e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	e003      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x46>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d104      	bne.n	8003b14 <HAL_TIM_IC_Start_IT+0x58>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e013      	b.n	8003b3c <HAL_TIM_IC_Start_IT+0x80>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d104      	bne.n	8003b24 <HAL_TIM_IC_Start_IT+0x68>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e00b      	b.n	8003b3c <HAL_TIM_IC_Start_IT+0x80>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d104      	bne.n	8003b34 <HAL_TIM_IC_Start_IT+0x78>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e003      	b.n	8003b3c <HAL_TIM_IC_Start_IT+0x80>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b3e:	7bbb      	ldrb	r3, [r7, #14]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d102      	bne.n	8003b4a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b44:	7b7b      	ldrb	r3, [r7, #13]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d001      	beq.n	8003b4e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0c2      	b.n	8003cd4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d104      	bne.n	8003b5e <HAL_TIM_IC_Start_IT+0xa2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b5c:	e013      	b.n	8003b86 <HAL_TIM_IC_Start_IT+0xca>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_IC_Start_IT+0xb2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b6c:	e00b      	b.n	8003b86 <HAL_TIM_IC_Start_IT+0xca>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_IC_Start_IT+0xc2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b7c:	e003      	b.n	8003b86 <HAL_TIM_IC_Start_IT+0xca>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_IC_Start_IT+0xda>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b94:	e013      	b.n	8003bbe <HAL_TIM_IC_Start_IT+0x102>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_IC_Start_IT+0xea>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ba4:	e00b      	b.n	8003bbe <HAL_TIM_IC_Start_IT+0x102>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d104      	bne.n	8003bb6 <HAL_TIM_IC_Start_IT+0xfa>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb4:	e003      	b.n	8003bbe <HAL_TIM_IC_Start_IT+0x102>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d841      	bhi.n	8003c48 <HAL_TIM_IC_Start_IT+0x18c>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_TIM_IC_Start_IT+0x110>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c49 	.word	0x08003c49
 8003bd4:	08003c49 	.word	0x08003c49
 8003bd8:	08003c49 	.word	0x08003c49
 8003bdc:	08003c13 	.word	0x08003c13
 8003be0:	08003c49 	.word	0x08003c49
 8003be4:	08003c49 	.word	0x08003c49
 8003be8:	08003c49 	.word	0x08003c49
 8003bec:	08003c25 	.word	0x08003c25
 8003bf0:	08003c49 	.word	0x08003c49
 8003bf4:	08003c49 	.word	0x08003c49
 8003bf8:	08003c49 	.word	0x08003c49
 8003bfc:	08003c37 	.word	0x08003c37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0202 	orr.w	r2, r2, #2
 8003c0e:	60da      	str	r2, [r3, #12]
      break;
 8003c10:	e01d      	b.n	8003c4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0204 	orr.w	r2, r2, #4
 8003c20:	60da      	str	r2, [r3, #12]
      break;
 8003c22:	e014      	b.n	8003c4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0208 	orr.w	r2, r2, #8
 8003c32:	60da      	str	r2, [r3, #12]
      break;
 8003c34:	e00b      	b.n	8003c4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0210 	orr.w	r2, r2, #16
 8003c44:	60da      	str	r2, [r3, #12]
      break;
 8003c46:	e002      	b.n	8003c4e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d13e      	bne.n	8003cd2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	6839      	ldr	r1, [r7, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 ff4d 	bl	8004afc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <HAL_TIM_IC_Start_IT+0x220>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d018      	beq.n	8003c9e <HAL_TIM_IC_Start_IT+0x1e2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c74:	d013      	beq.n	8003c9e <HAL_TIM_IC_Start_IT+0x1e2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_TIM_IC_Start_IT+0x224>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00e      	beq.n	8003c9e <HAL_TIM_IC_Start_IT+0x1e2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <HAL_TIM_IC_Start_IT+0x228>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d009      	beq.n	8003c9e <HAL_TIM_IC_Start_IT+0x1e2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <HAL_TIM_IC_Start_IT+0x22c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_TIM_IC_Start_IT+0x1e2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <HAL_TIM_IC_Start_IT+0x230>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d111      	bne.n	8003cc2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b06      	cmp	r3, #6
 8003cae:	d010      	beq.n	8003cd2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc0:	e007      	b.n	8003cd2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800
 8003ce8:	40000c00 	.word	0x40000c00
 8003cec:	40014000 	.word	0x40014000

08003cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d122      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d11b      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0202 	mvn.w	r2, #2
 8003d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd f826 	bl	8000d84 <HAL_TIM_IC_CaptureCallback>
 8003d38:	e005      	b.n	8003d46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fb05 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fd f839 	bl	8000db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d122      	bne.n	8003da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d11b      	bne.n	8003da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0204 	mvn.w	r2, #4
 8003d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fc fffc 	bl	8000d84 <HAL_TIM_IC_CaptureCallback>
 8003d8c:	e005      	b.n	8003d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fadb 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fd f80f 	bl	8000db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d122      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d11b      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0208 	mvn.w	r2, #8
 8003dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2204      	movs	r2, #4
 8003dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fc ffd2 	bl	8000d84 <HAL_TIM_IC_CaptureCallback>
 8003de0:	e005      	b.n	8003dee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fab1 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fc ffe5 	bl	8000db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d122      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b10      	cmp	r3, #16
 8003e0e:	d11b      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0210 	mvn.w	r2, #16
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fc ffa8 	bl	8000d84 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fa87 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fc ffbb 	bl	8000db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d10e      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d107      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0201 	mvn.w	r2, #1
 8003e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd f91a 	bl	80010a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7e:	2b80      	cmp	r3, #128	; 0x80
 8003e80:	d10e      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b80      	cmp	r3, #128	; 0x80
 8003e8e:	d107      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fecc 	bl	8004c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fa49 	bl	800435e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0220 	mvn.w	r2, #32
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fe96 	bl	8004c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e088      	b.n	8004030 <HAL_TIM_IC_ConfigChannel+0x130>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11b      	bne.n	8003f64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f000 fc26 	bl	800478c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 020c 	bic.w	r2, r2, #12
 8003f4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6999      	ldr	r1, [r3, #24]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	619a      	str	r2, [r3, #24]
 8003f62:	e060      	b.n	8004026 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d11c      	bne.n	8003fa4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f000 fc9e 	bl	80048ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6999      	ldr	r1, [r3, #24]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	021a      	lsls	r2, r3, #8
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	619a      	str	r2, [r3, #24]
 8003fa2:	e040      	b.n	8004026 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f000 fceb 	bl	8004994 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69da      	ldr	r2, [r3, #28]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 020c 	bic.w	r2, r2, #12
 8003fcc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69d9      	ldr	r1, [r3, #28]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	61da      	str	r2, [r3, #28]
 8003fe0:	e021      	b.n	8004026 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b0c      	cmp	r3, #12
 8003fe6:	d11c      	bne.n	8004022 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f000 fd08 	bl	8004a0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69da      	ldr	r2, [r3, #28]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800400a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69d9      	ldr	r1, [r3, #28]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	61da      	str	r2, [r3, #28]
 8004020:	e001      	b.n	8004026 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800402e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004052:	2302      	movs	r3, #2
 8004054:	e0ae      	b.n	80041b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b0c      	cmp	r3, #12
 8004062:	f200 809f 	bhi.w	80041a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	080040a1 	.word	0x080040a1
 8004070:	080041a5 	.word	0x080041a5
 8004074:	080041a5 	.word	0x080041a5
 8004078:	080041a5 	.word	0x080041a5
 800407c:	080040e1 	.word	0x080040e1
 8004080:	080041a5 	.word	0x080041a5
 8004084:	080041a5 	.word	0x080041a5
 8004088:	080041a5 	.word	0x080041a5
 800408c:	08004123 	.word	0x08004123
 8004090:	080041a5 	.word	0x080041a5
 8004094:	080041a5 	.word	0x080041a5
 8004098:	080041a5 	.word	0x080041a5
 800409c:	08004163 	.word	0x08004163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f9e4 	bl	8004474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	619a      	str	r2, [r3, #24]
      break;
 80040de:	e064      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fa2a 	bl	8004540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6999      	ldr	r1, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	619a      	str	r2, [r3, #24]
      break;
 8004120:	e043      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fa75 	bl	8004618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0208 	orr.w	r2, r2, #8
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0204 	bic.w	r2, r2, #4
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
      break;
 8004160:	e023      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fabf 	bl	80046ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69d9      	ldr	r1, [r3, #28]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	021a      	lsls	r2, r3, #8
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	61da      	str	r2, [r3, #28]
      break;
 80041a2:	e002      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	75fb      	strb	r3, [r7, #23]
      break;
 80041a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIM_ConfigClockSource+0x1c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e0b4      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x186>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004210:	d03e      	beq.n	8004290 <HAL_TIM_ConfigClockSource+0xd4>
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004216:	f200 8087 	bhi.w	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	f000 8086 	beq.w	800432e <HAL_TIM_ConfigClockSource+0x172>
 8004222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004226:	d87f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b70      	cmp	r3, #112	; 0x70
 800422a:	d01a      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0xa6>
 800422c:	2b70      	cmp	r3, #112	; 0x70
 800422e:	d87b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b60      	cmp	r3, #96	; 0x60
 8004232:	d050      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004234:	2b60      	cmp	r3, #96	; 0x60
 8004236:	d877      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b50      	cmp	r3, #80	; 0x50
 800423a:	d03c      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0xfa>
 800423c:	2b50      	cmp	r3, #80	; 0x50
 800423e:	d873      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d058      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d86f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d064      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 800424c:	2b30      	cmp	r3, #48	; 0x30
 800424e:	d86b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d060      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d867      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05c      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 800425c:	2b10      	cmp	r3, #16
 800425e:	d05a      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 8004260:	e062      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6899      	ldr	r1, [r3, #8]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f000 fc23 	bl	8004abc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	609a      	str	r2, [r3, #8]
      break;
 800428e:	e04f      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f000 fc0c 	bl	8004abc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042b2:	609a      	str	r2, [r3, #8]
      break;
 80042b4:	e03c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6859      	ldr	r1, [r3, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	461a      	mov	r2, r3
 80042c4:	f000 faca 	bl	800485c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2150      	movs	r1, #80	; 0x50
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fbd9 	bl	8004a86 <TIM_ITRx_SetConfig>
      break;
 80042d4:	e02c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6859      	ldr	r1, [r3, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	461a      	mov	r2, r3
 80042e4:	f000 fb26 	bl	8004934 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2160      	movs	r1, #96	; 0x60
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fbc9 	bl	8004a86 <TIM_ITRx_SetConfig>
      break;
 80042f4:	e01c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6859      	ldr	r1, [r3, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	461a      	mov	r2, r3
 8004304:	f000 faaa 	bl	800485c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2140      	movs	r1, #64	; 0x40
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fbb9 	bl	8004a86 <TIM_ITRx_SetConfig>
      break;
 8004314:	e00c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f000 fbb0 	bl	8004a86 <TIM_ITRx_SetConfig>
      break;
 8004326:	e003      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e000      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800432e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a34      	ldr	r2, [pc, #208]	; (8004458 <TIM_Base_SetConfig+0xe4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00f      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d00b      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a31      	ldr	r2, [pc, #196]	; (800445c <TIM_Base_SetConfig+0xe8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a30      	ldr	r2, [pc, #192]	; (8004460 <TIM_Base_SetConfig+0xec>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_Base_SetConfig+0x38>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a2f      	ldr	r2, [pc, #188]	; (8004464 <TIM_Base_SetConfig+0xf0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d108      	bne.n	80043be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a25      	ldr	r2, [pc, #148]	; (8004458 <TIM_Base_SetConfig+0xe4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01b      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043cc:	d017      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a22      	ldr	r2, [pc, #136]	; (800445c <TIM_Base_SetConfig+0xe8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a21      	ldr	r2, [pc, #132]	; (8004460 <TIM_Base_SetConfig+0xec>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00f      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a20      	ldr	r2, [pc, #128]	; (8004464 <TIM_Base_SetConfig+0xf0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00b      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a1f      	ldr	r2, [pc, #124]	; (8004468 <TIM_Base_SetConfig+0xf4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d007      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a1e      	ldr	r2, [pc, #120]	; (800446c <TIM_Base_SetConfig+0xf8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d003      	beq.n	80043fe <TIM_Base_SetConfig+0x8a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <TIM_Base_SetConfig+0xfc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d108      	bne.n	8004410 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a08      	ldr	r2, [pc, #32]	; (8004458 <TIM_Base_SetConfig+0xe4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d103      	bne.n	8004444 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	615a      	str	r2, [r3, #20]
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40014000 	.word	0x40014000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800

08004474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0302 	bic.w	r3, r3, #2
 80044bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a1c      	ldr	r2, [pc, #112]	; (800453c <TIM_OC1_SetConfig+0xc8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10c      	bne.n	80044ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0308 	bic.w	r3, r3, #8
 80044d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <TIM_OC1_SetConfig+0xc8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d111      	bne.n	8004516 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	621a      	str	r2, [r3, #32]
}
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40010000 	.word	0x40010000

08004540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0210 	bic.w	r2, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0320 	bic.w	r3, r3, #32
 800458a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <TIM_OC2_SetConfig+0xd4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d10d      	bne.n	80045bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <TIM_OC2_SetConfig+0xd4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d113      	bne.n	80045ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000

08004618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <TIM_OC3_SetConfig+0xd0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10d      	bne.n	8004692 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800467c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <TIM_OC3_SetConfig+0xd0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d113      	bne.n	80046c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40010000 	.word	0x40010000

080046ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	031b      	lsls	r3, r3, #12
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a10      	ldr	r2, [pc, #64]	; (8004788 <TIM_OC4_SetConfig+0x9c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d109      	bne.n	8004760 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000

0800478c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f023 0201 	bic.w	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a24      	ldr	r2, [pc, #144]	; (8004848 <TIM_TI1_SetConfig+0xbc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <TIM_TI1_SetConfig+0x56>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c0:	d00f      	beq.n	80047e2 <TIM_TI1_SetConfig+0x56>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a21      	ldr	r2, [pc, #132]	; (800484c <TIM_TI1_SetConfig+0xc0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00b      	beq.n	80047e2 <TIM_TI1_SetConfig+0x56>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4a20      	ldr	r2, [pc, #128]	; (8004850 <TIM_TI1_SetConfig+0xc4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <TIM_TI1_SetConfig+0x56>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <TIM_TI1_SetConfig+0xc8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <TIM_TI1_SetConfig+0x56>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a1e      	ldr	r2, [pc, #120]	; (8004858 <TIM_TI1_SetConfig+0xcc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <TIM_TI1_SetConfig+0x5a>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <TIM_TI1_SetConfig+0x5c>
 80047e6:	2300      	movs	r3, #0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e003      	b.n	8004806 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	b2db      	uxtb	r3, r3
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f023 030a 	bic.w	r3, r3, #10
 8004820:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 030a 	and.w	r3, r3, #10
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00
 8004858:	40014000 	.word	0x40014000

0800485c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f023 0201 	bic.w	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 030a 	bic.w	r3, r3, #10
 8004898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b087      	sub	sp, #28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
 80048c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f023 0210 	bic.w	r2, r3, #16
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	031b      	lsls	r3, r3, #12
 80048fe:	b29b      	uxth	r3, r3
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800490c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	621a      	str	r2, [r3, #32]
}
 8004928:	bf00      	nop
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f023 0210 	bic.w	r2, r3, #16
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800495e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	031b      	lsls	r3, r3, #12
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004970:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	621a      	str	r2, [r3, #32]
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f023 0303 	bic.w	r3, r3, #3
 80049c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80049e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	031b      	lsls	r3, r3, #12
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	031b      	lsls	r3, r3, #12
 8004a64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	621a      	str	r2, [r3, #32]
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f043 0307 	orr.w	r3, r3, #7
 8004aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	609a      	str	r2, [r3, #8]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	021a      	lsls	r2, r3, #8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2201      	movs	r2, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1a      	ldr	r2, [r3, #32]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	401a      	ands	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1a      	ldr	r2, [r3, #32]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	431a      	orrs	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e050      	b.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d013      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40010000 	.word	0x40010000
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40014000 	.word	0x40014000

08004c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e03f      	b.n	8004cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc fbd2 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2224      	movs	r2, #36	; 0x24
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fd7b 	bl	800578c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b08a      	sub	sp, #40	; 0x28
 8004cea:	af02      	add	r7, sp, #8
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d17c      	bne.n	8004e00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_UART_Transmit+0x2c>
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e075      	b.n	8004e02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_UART_Transmit+0x3e>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e06e      	b.n	8004e02 <HAL_UART_Transmit+0x11c>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2221      	movs	r2, #33	; 0x21
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d3a:	f7fc fd15 	bl	8001768 <HAL_GetTick>
 8004d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	88fa      	ldrh	r2, [r7, #6]
 8004d4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d54:	d108      	bne.n	8004d68 <HAL_UART_Transmit+0x82>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e003      	b.n	8004d70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d78:	e02a      	b.n	8004dd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2200      	movs	r2, #0
 8004d82:	2180      	movs	r1, #128	; 0x80
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 faf9 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e036      	b.n	8004e02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	3302      	adds	r3, #2
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	e007      	b.n	8004dc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1cf      	bne.n	8004d7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	2140      	movs	r1, #64	; 0x40
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fac9 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e006      	b.n	8004e02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e000      	b.n	8004e02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
  }
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b0ba      	sub	sp, #232	; 0xe8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <HAL_UART_IRQHandler+0x66>
 8004e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fbd3 	bl	8005616 <UART_Receive_IT>
      return;
 8004e70:	e256      	b.n	8005320 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 80de 	beq.w	8005038 <HAL_UART_IRQHandler+0x22c>
 8004e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80d1 	beq.w	8005038 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <HAL_UART_IRQHandler+0xae>
 8004ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f043 0201 	orr.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <HAL_UART_IRQHandler+0xd2>
 8004ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0202 	orr.w	r2, r3, #2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <HAL_UART_IRQHandler+0xf6>
 8004eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f043 0204 	orr.w	r2, r3, #4
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d011      	beq.n	8004f32 <HAL_UART_IRQHandler+0x126>
 8004f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d105      	bne.n	8004f26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f043 0208 	orr.w	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 81ed 	beq.w	8005316 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_UART_IRQHandler+0x14e>
 8004f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fb5e 	bl	8005616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b40      	cmp	r3, #64	; 0x40
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <HAL_UART_IRQHandler+0x17a>
 8004f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d04f      	beq.n	8005026 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa66 	bl	8005458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d141      	bne.n	800501e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3314      	adds	r3, #20
 8004fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3314      	adds	r3, #20
 8004fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1d9      	bne.n	8004f9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d013      	beq.n	8005016 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	4a7d      	ldr	r2, [pc, #500]	; (80051e8 <HAL_UART_IRQHandler+0x3dc>)
 8004ff4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fd fa0a 	bl	8002414 <HAL_DMA_Abort_IT>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d016      	beq.n	8005034 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005010:	4610      	mov	r0, r2
 8005012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	e00e      	b.n	8005034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f99a 	bl	8005350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501c:	e00a      	b.n	8005034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f996 	bl	8005350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	e006      	b.n	8005034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f992 	bl	8005350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005032:	e170      	b.n	8005316 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	bf00      	nop
    return;
 8005036:	e16e      	b.n	8005316 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	2b01      	cmp	r3, #1
 800503e:	f040 814a 	bne.w	80052d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 8143 	beq.w	80052d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 813c 	beq.w	80052d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800505e:	2300      	movs	r3, #0
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	f040 80b4 	bne.w	80051ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005090:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8140 	beq.w	800531a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800509e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050a2:	429a      	cmp	r2, r3
 80050a4:	f080 8139 	bcs.w	800531a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ba:	f000 8088 	beq.w	80051ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	330c      	adds	r3, #12
 80050c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80050ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1d9      	bne.n	80050be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3314      	adds	r3, #20
 8005110:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800511a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3314      	adds	r3, #20
 800512a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800512e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005132:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005136:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e1      	bne.n	800510a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3314      	adds	r3, #20
 800514c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3314      	adds	r3, #20
 8005166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800516a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800516c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e3      	bne.n	8005146 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800519c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800519e:	f023 0310 	bic.w	r3, r3, #16
 80051a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80051b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e3      	bne.n	800518c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fd f8b3 	bl	8002334 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	b29b      	uxth	r3, r3
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f8c0 	bl	8005364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051e4:	e099      	b.n	800531a <HAL_UART_IRQHandler+0x50e>
 80051e6:	bf00      	nop
 80051e8:	0800551f 	.word	0x0800551f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 808b 	beq.w	800531e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8086 	beq.w	800531e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005236:	647a      	str	r2, [r7, #68]	; 0x44
 8005238:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800523c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e3      	bne.n	8005212 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3314      	adds	r3, #20
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	623b      	str	r3, [r7, #32]
   return(result);
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3314      	adds	r3, #20
 800526a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800526e:	633a      	str	r2, [r7, #48]	; 0x30
 8005270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e3      	bne.n	800524a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052b4:	61fa      	str	r2, [r7, #28]
 80052b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	69b9      	ldr	r1, [r7, #24]
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	617b      	str	r3, [r7, #20]
   return(result);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e3      	bne.n	8005290 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f848 	bl	8005364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052d4:	e023      	b.n	800531e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_UART_IRQHandler+0x4ea>
 80052e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f929 	bl	8005546 <UART_Transmit_IT>
    return;
 80052f4:	e014      	b.n	8005320 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <HAL_UART_IRQHandler+0x514>
 8005302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f969 	bl	80055e6 <UART_EndTransmit_IT>
    return;
 8005314:	e004      	b.n	8005320 <HAL_UART_IRQHandler+0x514>
    return;
 8005316:	bf00      	nop
 8005318:	e002      	b.n	8005320 <HAL_UART_IRQHandler+0x514>
      return;
 800531a:	bf00      	nop
 800531c:	e000      	b.n	8005320 <HAL_UART_IRQHandler+0x514>
      return;
 800531e:	bf00      	nop
  }
}
 8005320:	37e8      	adds	r7, #232	; 0xe8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop

08005328 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b090      	sub	sp, #64	; 0x40
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538c:	e050      	b.n	8005430 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d04c      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <UART_WaitOnFlagUntilTimeout+0x30>
 800539c:	f7fc f9e4 	bl	8001768 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d241      	bcs.n	8005430 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053cc:	637a      	str	r2, [r7, #52]	; 0x34
 80053ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e5      	bne.n	80053ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3314      	adds	r3, #20
 80053e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	613b      	str	r3, [r7, #16]
   return(result);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3314      	adds	r3, #20
 80053fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005400:	623a      	str	r2, [r7, #32]
 8005402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	69f9      	ldr	r1, [r7, #28]
 8005406:	6a3a      	ldr	r2, [r7, #32]
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	61bb      	str	r3, [r7, #24]
   return(result);
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e00f      	b.n	8005450 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4013      	ands	r3, r2
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	429a      	cmp	r2, r3
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	429a      	cmp	r2, r3
 800544c:	d09f      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3740      	adds	r7, #64	; 0x40
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b095      	sub	sp, #84	; 0x54
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005480:	643a      	str	r2, [r7, #64]	; 0x40
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e5      	bne.n	8005460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3314      	adds	r3, #20
 800549a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d119      	bne.n	8005504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f023 0310 	bic.w	r3, r3, #16
 80054e6:	647b      	str	r3, [r7, #68]	; 0x44
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054f0:	61ba      	str	r2, [r7, #24]
 80054f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6979      	ldr	r1, [r7, #20]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	613b      	str	r3, [r7, #16]
   return(result);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005512:	bf00      	nop
 8005514:	3754      	adds	r7, #84	; 0x54
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f7ff ff09 	bl	8005350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b21      	cmp	r3, #33	; 0x21
 8005558:	d13e      	bne.n	80055d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005562:	d114      	bne.n	800558e <UART_Transmit_IT+0x48>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d110      	bne.n	800558e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005580:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	1c9a      	adds	r2, r3, #2
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	621a      	str	r2, [r3, #32]
 800558c:	e008      	b.n	80055a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6211      	str	r1, [r2, #32]
 8005598:	781a      	ldrb	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4619      	mov	r1, r3
 80055ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10f      	bne.n	80055d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fe8e 	bl	8005328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b08c      	sub	sp, #48	; 0x30
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b22      	cmp	r3, #34	; 0x22
 8005628:	f040 80ab 	bne.w	8005782 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005634:	d117      	bne.n	8005666 <UART_Receive_IT+0x50>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d113      	bne.n	8005666 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005654:	b29a      	uxth	r2, r3
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	1c9a      	adds	r2, r3, #2
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28
 8005664:	e026      	b.n	80056b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800566c:	2300      	movs	r3, #0
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005678:	d007      	beq.n	800568a <UART_Receive_IT+0x74>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <UART_Receive_IT+0x82>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	e008      	b.n	80056aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29b      	uxth	r3, r3
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4619      	mov	r1, r3
 80056c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d15a      	bne.n	800577e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0220 	bic.w	r2, r2, #32
 80056d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695a      	ldr	r2, [r3, #20]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	2b01      	cmp	r3, #1
 8005706:	d135      	bne.n	8005774 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	330c      	adds	r3, #12
 8005714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	613b      	str	r3, [r7, #16]
   return(result);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f023 0310 	bic.w	r3, r3, #16
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572e:	623a      	str	r2, [r7, #32]
 8005730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	69f9      	ldr	r1, [r7, #28]
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	61bb      	str	r3, [r7, #24]
   return(result);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e5      	bne.n	800570e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b10      	cmp	r3, #16
 800574e:	d10a      	bne.n	8005766 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fdf9 	bl	8005364 <HAL_UARTEx_RxEventCallback>
 8005772:	e002      	b.n	800577a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff fde1 	bl	800533c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e002      	b.n	8005784 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3730      	adds	r7, #48	; 0x30
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800578c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005790:	b0c0      	sub	sp, #256	; 0x100
 8005792:	af00      	add	r7, sp, #0
 8005794:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	68d9      	ldr	r1, [r3, #12]
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	ea40 0301 	orr.w	r3, r0, r1
 80057b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057e4:	f021 010c 	bic.w	r1, r1, #12
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057f2:	430b      	orrs	r3, r1
 80057f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	6999      	ldr	r1, [r3, #24]
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	ea40 0301 	orr.w	r3, r0, r1
 8005812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b8f      	ldr	r3, [pc, #572]	; (8005a58 <UART_SetConfig+0x2cc>)
 800581c:	429a      	cmp	r2, r3
 800581e:	d005      	beq.n	800582c <UART_SetConfig+0xa0>
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b8d      	ldr	r3, [pc, #564]	; (8005a5c <UART_SetConfig+0x2d0>)
 8005828:	429a      	cmp	r2, r3
 800582a:	d104      	bne.n	8005836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800582c:	f7fd fcd6 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 8005830:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005834:	e003      	b.n	800583e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005836:	f7fd fcbd 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800583a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005848:	f040 810c 	bne.w	8005a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800584c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005850:	2200      	movs	r2, #0
 8005852:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005856:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800585a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800585e:	4622      	mov	r2, r4
 8005860:	462b      	mov	r3, r5
 8005862:	1891      	adds	r1, r2, r2
 8005864:	65b9      	str	r1, [r7, #88]	; 0x58
 8005866:	415b      	adcs	r3, r3
 8005868:	65fb      	str	r3, [r7, #92]	; 0x5c
 800586a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800586e:	4621      	mov	r1, r4
 8005870:	eb12 0801 	adds.w	r8, r2, r1
 8005874:	4629      	mov	r1, r5
 8005876:	eb43 0901 	adc.w	r9, r3, r1
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800588a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800588e:	4690      	mov	r8, r2
 8005890:	4699      	mov	r9, r3
 8005892:	4623      	mov	r3, r4
 8005894:	eb18 0303 	adds.w	r3, r8, r3
 8005898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800589c:	462b      	mov	r3, r5
 800589e:	eb49 0303 	adc.w	r3, r9, r3
 80058a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058ba:	460b      	mov	r3, r1
 80058bc:	18db      	adds	r3, r3, r3
 80058be:	653b      	str	r3, [r7, #80]	; 0x50
 80058c0:	4613      	mov	r3, r2
 80058c2:	eb42 0303 	adc.w	r3, r2, r3
 80058c6:	657b      	str	r3, [r7, #84]	; 0x54
 80058c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058d0:	f7fa fcd6 	bl	8000280 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4b61      	ldr	r3, [pc, #388]	; (8005a60 <UART_SetConfig+0x2d4>)
 80058da:	fba3 2302 	umull	r2, r3, r3, r2
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	011c      	lsls	r4, r3, #4
 80058e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	1891      	adds	r1, r2, r2
 80058fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80058fc:	415b      	adcs	r3, r3
 80058fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005904:	4641      	mov	r1, r8
 8005906:	eb12 0a01 	adds.w	sl, r2, r1
 800590a:	4649      	mov	r1, r9
 800590c:	eb43 0b01 	adc.w	fp, r3, r1
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800591c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005924:	4692      	mov	sl, r2
 8005926:	469b      	mov	fp, r3
 8005928:	4643      	mov	r3, r8
 800592a:	eb1a 0303 	adds.w	r3, sl, r3
 800592e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005932:	464b      	mov	r3, r9
 8005934:	eb4b 0303 	adc.w	r3, fp, r3
 8005938:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005948:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800594c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005950:	460b      	mov	r3, r1
 8005952:	18db      	adds	r3, r3, r3
 8005954:	643b      	str	r3, [r7, #64]	; 0x40
 8005956:	4613      	mov	r3, r2
 8005958:	eb42 0303 	adc.w	r3, r2, r3
 800595c:	647b      	str	r3, [r7, #68]	; 0x44
 800595e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005966:	f7fa fc8b 	bl	8000280 <__aeabi_uldivmod>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4611      	mov	r1, r2
 8005970:	4b3b      	ldr	r3, [pc, #236]	; (8005a60 <UART_SetConfig+0x2d4>)
 8005972:	fba3 2301 	umull	r2, r3, r3, r1
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2264      	movs	r2, #100	; 0x64
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	1acb      	subs	r3, r1, r3
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005986:	4b36      	ldr	r3, [pc, #216]	; (8005a60 <UART_SetConfig+0x2d4>)
 8005988:	fba3 2302 	umull	r2, r3, r3, r2
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005994:	441c      	add	r4, r3
 8005996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059a8:	4642      	mov	r2, r8
 80059aa:	464b      	mov	r3, r9
 80059ac:	1891      	adds	r1, r2, r2
 80059ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80059b0:	415b      	adcs	r3, r3
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059b8:	4641      	mov	r1, r8
 80059ba:	1851      	adds	r1, r2, r1
 80059bc:	6339      	str	r1, [r7, #48]	; 0x30
 80059be:	4649      	mov	r1, r9
 80059c0:	414b      	adcs	r3, r1
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059d0:	4659      	mov	r1, fp
 80059d2:	00cb      	lsls	r3, r1, #3
 80059d4:	4651      	mov	r1, sl
 80059d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059da:	4651      	mov	r1, sl
 80059dc:	00ca      	lsls	r2, r1, #3
 80059de:	4610      	mov	r0, r2
 80059e0:	4619      	mov	r1, r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	4642      	mov	r2, r8
 80059e6:	189b      	adds	r3, r3, r2
 80059e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059ec:	464b      	mov	r3, r9
 80059ee:	460a      	mov	r2, r1
 80059f0:	eb42 0303 	adc.w	r3, r2, r3
 80059f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	18db      	adds	r3, r3, r3
 8005a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a12:	4613      	mov	r3, r2
 8005a14:	eb42 0303 	adc.w	r3, r2, r3
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a22:	f7fa fc2d 	bl	8000280 <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <UART_SetConfig+0x2d4>)
 8005a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	2164      	movs	r1, #100	; 0x64
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	3332      	adds	r3, #50	; 0x32
 8005a3e:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <UART_SetConfig+0x2d4>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	f003 0207 	and.w	r2, r3, #7
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4422      	add	r2, r4
 8005a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a54:	e105      	b.n	8005c62 <UART_SetConfig+0x4d6>
 8005a56:	bf00      	nop
 8005a58:	40011000 	.word	0x40011000
 8005a5c:	40011400 	.word	0x40011400
 8005a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a76:	4642      	mov	r2, r8
 8005a78:	464b      	mov	r3, r9
 8005a7a:	1891      	adds	r1, r2, r2
 8005a7c:	6239      	str	r1, [r7, #32]
 8005a7e:	415b      	adcs	r3, r3
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
 8005a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a86:	4641      	mov	r1, r8
 8005a88:	1854      	adds	r4, r2, r1
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	eb43 0501 	adc.w	r5, r3, r1
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	00eb      	lsls	r3, r5, #3
 8005a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a9e:	00e2      	lsls	r2, r4, #3
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	461d      	mov	r5, r3
 8005aa4:	4643      	mov	r3, r8
 8005aa6:	18e3      	adds	r3, r4, r3
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005aac:	464b      	mov	r3, r9
 8005aae:	eb45 0303 	adc.w	r3, r5, r3
 8005ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ac2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	008b      	lsls	r3, r1, #2
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005adc:	4621      	mov	r1, r4
 8005ade:	008a      	lsls	r2, r1, #2
 8005ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ae4:	f7fa fbcc 	bl	8000280 <__aeabi_uldivmod>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4b60      	ldr	r3, [pc, #384]	; (8005c70 <UART_SetConfig+0x4e4>)
 8005aee:	fba3 2302 	umull	r2, r3, r3, r2
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	011c      	lsls	r4, r3, #4
 8005af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	1891      	adds	r1, r2, r2
 8005b0e:	61b9      	str	r1, [r7, #24]
 8005b10:	415b      	adcs	r3, r3
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b18:	4641      	mov	r1, r8
 8005b1a:	1851      	adds	r1, r2, r1
 8005b1c:	6139      	str	r1, [r7, #16]
 8005b1e:	4649      	mov	r1, r9
 8005b20:	414b      	adcs	r3, r1
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b30:	4659      	mov	r1, fp
 8005b32:	00cb      	lsls	r3, r1, #3
 8005b34:	4651      	mov	r1, sl
 8005b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b3a:	4651      	mov	r1, sl
 8005b3c:	00ca      	lsls	r2, r1, #3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4619      	mov	r1, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	4642      	mov	r2, r8
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	460a      	mov	r2, r1
 8005b50:	eb42 0303 	adc.w	r3, r2, r3
 8005b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b70:	4649      	mov	r1, r9
 8005b72:	008b      	lsls	r3, r1, #2
 8005b74:	4641      	mov	r1, r8
 8005b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b7a:	4641      	mov	r1, r8
 8005b7c:	008a      	lsls	r2, r1, #2
 8005b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b82:	f7fa fb7d 	bl	8000280 <__aeabi_uldivmod>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4b39      	ldr	r3, [pc, #228]	; (8005c70 <UART_SetConfig+0x4e4>)
 8005b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	2164      	movs	r1, #100	; 0x64
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	3332      	adds	r3, #50	; 0x32
 8005b9e:	4a34      	ldr	r2, [pc, #208]	; (8005c70 <UART_SetConfig+0x4e4>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005baa:	441c      	add	r4, r3
 8005bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8005bb4:	677a      	str	r2, [r7, #116]	; 0x74
 8005bb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bba:	4642      	mov	r2, r8
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	1891      	adds	r1, r2, r2
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	415b      	adcs	r3, r3
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bca:	4641      	mov	r1, r8
 8005bcc:	1851      	adds	r1, r2, r1
 8005bce:	6039      	str	r1, [r7, #0]
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	414b      	adcs	r3, r1
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005be2:	4659      	mov	r1, fp
 8005be4:	00cb      	lsls	r3, r1, #3
 8005be6:	4651      	mov	r1, sl
 8005be8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bec:	4651      	mov	r1, sl
 8005bee:	00ca      	lsls	r2, r1, #3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	189b      	adds	r3, r3, r2
 8005bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	460a      	mov	r2, r1
 8005c00:	eb42 0303 	adc.w	r3, r2, r3
 8005c04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c10:	667a      	str	r2, [r7, #100]	; 0x64
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	f04f 0300 	mov.w	r3, #0
 8005c1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c1e:	4649      	mov	r1, r9
 8005c20:	008b      	lsls	r3, r1, #2
 8005c22:	4641      	mov	r1, r8
 8005c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c28:	4641      	mov	r1, r8
 8005c2a:	008a      	lsls	r2, r1, #2
 8005c2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c30:	f7fa fb26 	bl	8000280 <__aeabi_uldivmod>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <UART_SetConfig+0x4e4>)
 8005c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	2164      	movs	r1, #100	; 0x64
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	3332      	adds	r3, #50	; 0x32
 8005c4c:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <UART_SetConfig+0x4e4>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	f003 020f 	and.w	r2, r3, #15
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4422      	add	r2, r4
 8005c60:	609a      	str	r2, [r3, #8]
}
 8005c62:	bf00      	nop
 8005c64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c6e:	bf00      	nop
 8005c70:	51eb851f 	.word	0x51eb851f

08005c74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c86:	2b84      	cmp	r3, #132	; 0x84
 8005c88:	d005      	beq.n	8005c96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	3303      	adds	r3, #3
 8005c94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ca8:	f001 f802 	bl	8006cb0 <vTaskStartScheduler>
  
  return osOK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cb4:	b089      	sub	sp, #36	; 0x24
 8005cb6:	af04      	add	r7, sp, #16
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d020      	beq.n	8005d06 <osThreadCreate+0x54>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01c      	beq.n	8005d06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685c      	ldr	r4, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681d      	ldr	r5, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691e      	ldr	r6, [r3, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff ffc8 	bl	8005c74 <makeFreeRtosPriority>
 8005ce4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cee:	9202      	str	r2, [sp, #8]
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	9100      	str	r1, [sp, #0]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 fe10 	bl	8006920 <xTaskCreateStatic>
 8005d00:	4603      	mov	r3, r0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e01c      	b.n	8005d40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685c      	ldr	r4, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d12:	b29e      	uxth	r6, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff ffaa 	bl	8005c74 <makeFreeRtosPriority>
 8005d20:	4602      	mov	r2, r0
 8005d22:	f107 030c 	add.w	r3, r7, #12
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	9200      	str	r2, [sp, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	4632      	mov	r2, r6
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fe52 	bl	80069da <xTaskCreate>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d001      	beq.n	8005d40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d40:	68fb      	ldr	r3, [r7, #12]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <osDelay+0x16>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	e000      	b.n	8005d62 <osDelay+0x18>
 8005d60:	2301      	movs	r3, #1
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 ff70 	bl	8006c48 <vTaskDelay>
  
  return osOK;
 8005d68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f103 0208 	add.w	r2, r3, #8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0208 	add.w	r2, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f103 0208 	add.w	r2, r3, #8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d103      	bne.n	8005e34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e00c      	b.n	8005e4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3308      	adds	r3, #8
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	e002      	b.n	8005e42 <vListInsert+0x2e>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d2f6      	bcs.n	8005e3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	601a      	str	r2, [r3, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6892      	ldr	r2, [r2, #8]
 8005e9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6852      	ldr	r2, [r2, #4]
 8005ea6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d103      	bne.n	8005eba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	1e5a      	subs	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f06:	f002 f8f5 	bl	80080f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	441a      	add	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	3b01      	subs	r3, #1
 8005f38:	68f9      	ldr	r1, [r7, #12]
 8005f3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	441a      	add	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	22ff      	movs	r2, #255	; 0xff
 8005f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	22ff      	movs	r2, #255	; 0xff
 8005f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d114      	bne.n	8005f86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01a      	beq.n	8005f9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3310      	adds	r3, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f001 f925 	bl	80071b8 <xTaskRemoveFromEventList>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d012      	beq.n	8005f9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f74:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <xQueueGenericReset+0xcc>)
 8005f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	e009      	b.n	8005f9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3310      	adds	r3, #16
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fef1 	bl	8005d72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3324      	adds	r3, #36	; 0x24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff feec 	bl	8005d72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f9a:	f002 f8db 	bl	8008154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f9e:	2301      	movs	r3, #1
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08e      	sub	sp, #56	; 0x38
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <xQueueGenericCreateStatic+0x52>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <xQueueGenericCreateStatic+0x56>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <xQueueGenericCreateStatic+0x58>
 8006002:	2300      	movs	r3, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	623b      	str	r3, [r7, #32]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <xQueueGenericCreateStatic+0x7e>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <xQueueGenericCreateStatic+0x82>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <xQueueGenericCreateStatic+0x84>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	61fb      	str	r3, [r7, #28]
}
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800604a:	2348      	movs	r3, #72	; 0x48
 800604c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b48      	cmp	r3, #72	; 0x48
 8006052:	d00a      	beq.n	800606a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	61bb      	str	r3, [r7, #24]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800606a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00d      	beq.n	8006092 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800607e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	4613      	mov	r3, r2
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f83f 	bl	8006110 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006094:	4618      	mov	r0, r3
 8006096:	3730      	adds	r7, #48	; 0x30
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08a      	sub	sp, #40	; 0x28
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	4613      	mov	r3, r2
 80060a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	613b      	str	r3, [r7, #16]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	fb02 f303 	mul.w	r3, r2, r3
 80060ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	3348      	adds	r3, #72	; 0x48
 80060d4:	4618      	mov	r0, r3
 80060d6:	f002 f92f 	bl	8008338 <pvPortMalloc>
 80060da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d011      	beq.n	8006106 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	3348      	adds	r3, #72	; 0x48
 80060ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060f4:	79fa      	ldrb	r2, [r7, #7]
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	4613      	mov	r3, r2
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f805 	bl	8006110 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006106:	69bb      	ldr	r3, [r7, #24]
	}
 8006108:	4618      	mov	r0, r3
 800610a:	3720      	adds	r7, #32
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e002      	b.n	8006132 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800613e:	2101      	movs	r1, #1
 8006140:	69b8      	ldr	r0, [r7, #24]
 8006142:	f7ff fecb 	bl	8005edc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08e      	sub	sp, #56	; 0x38
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800615e:	2300      	movs	r3, #0
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xQueueGenericSend+0x32>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <xQueueGenericSend+0x40>
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <xQueueGenericSend+0x44>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <xQueueGenericSend+0x46>
 8006194:	2300      	movs	r3, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <xQueueGenericSend+0x60>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d103      	bne.n	80061be <xQueueGenericSend+0x6e>
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <xQueueGenericSend+0x72>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueGenericSend+0x74>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xQueueGenericSend+0x8e>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	623b      	str	r3, [r7, #32]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061de:	f001 f9a9 	bl	8007534 <xTaskGetSchedulerState>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <xQueueGenericSend+0x9e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <xQueueGenericSend+0xa2>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueGenericSend+0xa4>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <xQueueGenericSend+0xbe>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	61fb      	str	r3, [r7, #28]
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800620e:	f001 ff71 	bl	80080f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621a:	429a      	cmp	r2, r3
 800621c:	d302      	bcc.n	8006224 <xQueueGenericSend+0xd4>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d129      	bne.n	8006278 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800622a:	f000 fa0b 	bl	8006644 <prvCopyDataToQueue>
 800622e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d010      	beq.n	800625a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	3324      	adds	r3, #36	; 0x24
 800623c:	4618      	mov	r0, r3
 800623e:	f000 ffbb 	bl	80071b8 <xTaskRemoveFromEventList>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006248:	4b3f      	ldr	r3, [pc, #252]	; (8006348 <xQueueGenericSend+0x1f8>)
 800624a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	e00a      	b.n	8006270 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006260:	4b39      	ldr	r3, [pc, #228]	; (8006348 <xQueueGenericSend+0x1f8>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006270:	f001 ff70 	bl	8008154 <vPortExitCritical>
				return pdPASS;
 8006274:	2301      	movs	r3, #1
 8006276:	e063      	b.n	8006340 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800627e:	f001 ff69 	bl	8008154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006282:	2300      	movs	r3, #0
 8006284:	e05c      	b.n	8006340 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800628c:	f107 0314 	add.w	r3, r7, #20
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fff3 	bl	800727c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800629a:	f001 ff5b 	bl	8008154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800629e:	f000 fd6d 	bl	8006d7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062a2:	f001 ff27 	bl	80080f4 <vPortEnterCritical>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d103      	bne.n	80062bc <xQueueGenericSend+0x16c>
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSend+0x182>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062d2:	f001 ff3f 	bl	8008154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d6:	1d3a      	adds	r2, r7, #4
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 ffe2 	bl	80072a8 <xTaskCheckForTimeOut>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d124      	bne.n	8006334 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ec:	f000 faa2 	bl	8006834 <prvIsQueueFull>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d018      	beq.n	8006328 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	3310      	adds	r3, #16
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 ff0a 	bl	8007118 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006306:	f000 fa2d 	bl	8006764 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800630a:	f000 fd45 	bl	8006d98 <xTaskResumeAll>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	f47f af7c 	bne.w	800620e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <xQueueGenericSend+0x1f8>)
 8006318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	e772      	b.n	800620e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800632a:	f000 fa1b 	bl	8006764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800632e:	f000 fd33 	bl	8006d98 <xTaskResumeAll>
 8006332:	e76c      	b.n	800620e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006336:	f000 fa15 	bl	8006764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800633a:	f000 fd2d 	bl	8006d98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800633e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006340:	4618      	mov	r0, r3
 8006342:	3738      	adds	r7, #56	; 0x38
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b090      	sub	sp, #64	; 0x40
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <xQueueGenericSendFromISR+0x3c>
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <xQueueGenericSendFromISR+0x40>
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <xQueueGenericSendFromISR+0x42>
 800638c:	2300      	movs	r3, #0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d103      	bne.n	80063b6 <xQueueGenericSendFromISR+0x6a>
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <xQueueGenericSendFromISR+0x6e>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xQueueGenericSendFromISR+0x70>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	623b      	str	r3, [r7, #32]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063d6:	f001 ff6f 	bl	80082b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063da:	f3ef 8211 	mrs	r2, BASEPRI
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	61fa      	str	r2, [r7, #28]
 80063f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	429a      	cmp	r2, r3
 8006400:	d302      	bcc.n	8006408 <xQueueGenericSendFromISR+0xbc>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d12f      	bne.n	8006468 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800640e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800641e:	f000 f911 	bl	8006644 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006422:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d112      	bne.n	8006452 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	2b00      	cmp	r3, #0
 8006432:	d016      	beq.n	8006462 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	3324      	adds	r3, #36	; 0x24
 8006438:	4618      	mov	r0, r3
 800643a:	f000 febd 	bl	80071b8 <xTaskRemoveFromEventList>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00e      	beq.n	8006462 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00b      	beq.n	8006462 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e007      	b.n	8006462 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006452:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006456:	3301      	adds	r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	b25a      	sxtb	r2, r3
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006462:	2301      	movs	r3, #1
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006466:	e001      	b.n	800646c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006468:	2300      	movs	r3, #0
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006476:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800647a:	4618      	mov	r0, r3
 800647c:	3740      	adds	r7, #64	; 0x40
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08c      	sub	sp, #48	; 0x30
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006490:	2300      	movs	r3, #0
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <xQueueReceive+0x30>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	623b      	str	r3, [r7, #32]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d103      	bne.n	80064c2 <xQueueReceive+0x3e>
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <xQueueReceive+0x42>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <xQueueReceive+0x44>
 80064c6:	2300      	movs	r3, #0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <xQueueReceive+0x5e>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	61fb      	str	r3, [r7, #28]
}
 80064de:	bf00      	nop
 80064e0:	e7fe      	b.n	80064e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064e2:	f001 f827 	bl	8007534 <xTaskGetSchedulerState>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <xQueueReceive+0x6e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <xQueueReceive+0x72>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <xQueueReceive+0x74>
 80064f6:	2300      	movs	r3, #0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <xQueueReceive+0x8e>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	61bb      	str	r3, [r7, #24]
}
 800650e:	bf00      	nop
 8006510:	e7fe      	b.n	8006510 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006512:	f001 fdef 	bl	80080f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	d01f      	beq.n	8006562 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006526:	f000 f8f7 	bl	8006718 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	1e5a      	subs	r2, r3, #1
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00f      	beq.n	800655a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	3310      	adds	r3, #16
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fe3a 	bl	80071b8 <xTaskRemoveFromEventList>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800654a:	4b3d      	ldr	r3, [pc, #244]	; (8006640 <xQueueReceive+0x1bc>)
 800654c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800655a:	f001 fdfb 	bl	8008154 <vPortExitCritical>
				return pdPASS;
 800655e:	2301      	movs	r3, #1
 8006560:	e069      	b.n	8006636 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006568:	f001 fdf4 	bl	8008154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800656c:	2300      	movs	r3, #0
 800656e:	e062      	b.n	8006636 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006576:	f107 0310 	add.w	r3, r7, #16
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fe7e 	bl	800727c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006580:	2301      	movs	r3, #1
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006584:	f001 fde6 	bl	8008154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006588:	f000 fbf8 	bl	8006d7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800658c:	f001 fdb2 	bl	80080f4 <vPortEnterCritical>
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006596:	b25b      	sxtb	r3, r3
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d103      	bne.n	80065a6 <xQueueReceive+0x122>
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d103      	bne.n	80065bc <xQueueReceive+0x138>
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065bc:	f001 fdca 	bl	8008154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065c0:	1d3a      	adds	r2, r7, #4
 80065c2:	f107 0310 	add.w	r3, r7, #16
 80065c6:	4611      	mov	r1, r2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fe6d 	bl	80072a8 <xTaskCheckForTimeOut>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d123      	bne.n	800661c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d6:	f000 f917 	bl	8006808 <prvIsQueueEmpty>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d017      	beq.n	8006610 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	3324      	adds	r3, #36	; 0x24
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fd95 	bl	8007118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f0:	f000 f8b8 	bl	8006764 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065f4:	f000 fbd0 	bl	8006d98 <xTaskResumeAll>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d189      	bne.n	8006512 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065fe:	4b10      	ldr	r3, [pc, #64]	; (8006640 <xQueueReceive+0x1bc>)
 8006600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	e780      	b.n	8006512 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006612:	f000 f8a7 	bl	8006764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006616:	f000 fbbf 	bl	8006d98 <xTaskResumeAll>
 800661a:	e77a      	b.n	8006512 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800661c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661e:	f000 f8a1 	bl	8006764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006622:	f000 fbb9 	bl	8006d98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006628:	f000 f8ee 	bl	8006808 <prvIsQueueEmpty>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	f43f af6f 	beq.w	8006512 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006634:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006636:	4618      	mov	r0, r3
 8006638:	3730      	adds	r7, #48	; 0x30
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10d      	bne.n	800667e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d14d      	bne.n	8006706 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 ff7e 	bl	8007570 <xTaskPriorityDisinherit>
 8006674:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	609a      	str	r2, [r3, #8]
 800667c:	e043      	b.n	8006706 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d119      	bne.n	80066b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6858      	ldr	r0, [r3, #4]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	461a      	mov	r2, r3
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	f002 f866 	bl	8008760 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	441a      	add	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d32b      	bcc.n	8006706 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	e026      	b.n	8006706 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	68d8      	ldr	r0, [r3, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	461a      	mov	r2, r3
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	f002 f84c 	bl	8008760 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	425b      	negs	r3, r3
 80066d2:	441a      	add	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d207      	bcs.n	80066f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	425b      	negs	r3, r3
 80066ee:	441a      	add	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d105      	bne.n	8006706 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	3b01      	subs	r3, #1
 8006704:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800670e:	697b      	ldr	r3, [r7, #20]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d018      	beq.n	800675c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	441a      	add	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	d303      	bcc.n	800674c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68d9      	ldr	r1, [r3, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	461a      	mov	r2, r3
 8006756:	6838      	ldr	r0, [r7, #0]
 8006758:	f002 f802 	bl	8008760 <memcpy>
	}
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800676c:	f001 fcc2 	bl	80080f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006776:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006778:	e011      	b.n	800679e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d012      	beq.n	80067a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3324      	adds	r3, #36	; 0x24
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fd16 	bl	80071b8 <xTaskRemoveFromEventList>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006792:	f000 fdeb 	bl	800736c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	3b01      	subs	r3, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800679e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dce9      	bgt.n	800677a <prvUnlockQueue+0x16>
 80067a6:	e000      	b.n	80067aa <prvUnlockQueue+0x46>
					break;
 80067a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	22ff      	movs	r2, #255	; 0xff
 80067ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067b2:	f001 fccf 	bl	8008154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067b6:	f001 fc9d 	bl	80080f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067c2:	e011      	b.n	80067e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d012      	beq.n	80067f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3310      	adds	r3, #16
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fcf1 	bl	80071b8 <xTaskRemoveFromEventList>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067dc:	f000 fdc6 	bl	800736c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	dce9      	bgt.n	80067c4 <prvUnlockQueue+0x60>
 80067f0:	e000      	b.n	80067f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	22ff      	movs	r2, #255	; 0xff
 80067f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067fc:	f001 fcaa 	bl	8008154 <vPortExitCritical>
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006810:	f001 fc70 	bl	80080f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800681c:	2301      	movs	r3, #1
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e001      	b.n	8006826 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006826:	f001 fc95 	bl	8008154 <vPortExitCritical>

	return xReturn;
 800682a:	68fb      	ldr	r3, [r7, #12]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800683c:	f001 fc5a 	bl	80080f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	429a      	cmp	r2, r3
 800684a:	d102      	bne.n	8006852 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800684c:	2301      	movs	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	e001      	b.n	8006856 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006856:	f001 fc7d 	bl	8008154 <vPortExitCritical>

	return xReturn;
 800685a:	68fb      	ldr	r3, [r7, #12]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e014      	b.n	800689e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006874:	4a0f      	ldr	r2, [pc, #60]	; (80068b4 <vQueueAddToRegistry+0x50>)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006880:	490c      	ldr	r1, [pc, #48]	; (80068b4 <vQueueAddToRegistry+0x50>)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800688a:	4a0a      	ldr	r2, [pc, #40]	; (80068b4 <vQueueAddToRegistry+0x50>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	4413      	add	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006896:	e006      	b.n	80068a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b07      	cmp	r3, #7
 80068a2:	d9e7      	bls.n	8006874 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	2000078c 	.word	0x2000078c

080068b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068c8:	f001 fc14 	bl	80080f4 <vPortEnterCritical>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068d2:	b25b      	sxtb	r3, r3
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d103      	bne.n	80068e2 <vQueueWaitForMessageRestricted+0x2a>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ee:	d103      	bne.n	80068f8 <vQueueWaitForMessageRestricted+0x40>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f8:	f001 fc2c 	bl	8008154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	3324      	adds	r3, #36	; 0x24
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fc27 	bl	8007160 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006912:	6978      	ldr	r0, [r7, #20]
 8006914:	f7ff ff26 	bl	8006764 <prvUnlockQueue>
	}
 8006918:	bf00      	nop
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08e      	sub	sp, #56	; 0x38
 8006924:	af04      	add	r7, sp, #16
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800692e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	623b      	str	r3, [r7, #32]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <xTaskCreateStatic+0x46>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	61fb      	str	r3, [r7, #28]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006966:	235c      	movs	r3, #92	; 0x5c
 8006968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b5c      	cmp	r3, #92	; 0x5c
 800696e:	d00a      	beq.n	8006986 <xTaskCreateStatic+0x66>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	61bb      	str	r3, [r7, #24]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006986:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01e      	beq.n	80069cc <xTaskCreateStatic+0xac>
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800699c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	2202      	movs	r2, #2
 80069a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069a6:	2300      	movs	r3, #0
 80069a8:	9303      	str	r3, [sp, #12]
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	9302      	str	r3, [sp, #8]
 80069ae:	f107 0314 	add.w	r3, r7, #20
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f850 	bl	8006a64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069c6:	f000 f8d5 	bl	8006b74 <prvAddNewTaskToReadyList>
 80069ca:	e001      	b.n	80069d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069d0:	697b      	ldr	r3, [r7, #20]
	}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3728      	adds	r7, #40	; 0x28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b08c      	sub	sp, #48	; 0x30
 80069de:	af04      	add	r7, sp, #16
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	603b      	str	r3, [r7, #0]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f001 fca2 	bl	8008338 <pvPortMalloc>
 80069f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00e      	beq.n	8006a1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069fc:	205c      	movs	r0, #92	; 0x5c
 80069fe:	f001 fc9b 	bl	8008338 <pvPortMalloc>
 8006a02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a10:	e005      	b.n	8006a1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a12:	6978      	ldr	r0, [r7, #20]
 8006a14:	f001 fd5c 	bl	80084d0 <vPortFree>
 8006a18:	e001      	b.n	8006a1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d017      	beq.n	8006a54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a2c:	88fa      	ldrh	r2, [r7, #6]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	9303      	str	r3, [sp, #12]
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	9302      	str	r3, [sp, #8]
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f80e 	bl	8006a64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a48:	69f8      	ldr	r0, [r7, #28]
 8006a4a:	f000 f893 	bl	8006b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	e002      	b.n	8006a5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a54:	f04f 33ff 	mov.w	r3, #4294967295
 8006a58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a5a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3720      	adds	r7, #32
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	f023 0307 	bic.w	r3, r3, #7
 8006a8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <prvInitialiseNewTask+0x48>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	617b      	str	r3, [r7, #20]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01f      	beq.n	8006af2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	e012      	b.n	8006ade <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	7819      	ldrb	r1, [r3, #0]
 8006ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3334      	adds	r3, #52	; 0x34
 8006ac8:	460a      	mov	r2, r1
 8006aca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d006      	beq.n	8006ae6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	3301      	adds	r3, #1
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	2b17      	cmp	r3, #23
 8006ae2:	d9e9      	bls.n	8006ab8 <prvInitialiseNewTask+0x54>
 8006ae4:	e000      	b.n	8006ae8 <prvInitialiseNewTask+0x84>
			{
				break;
 8006ae6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8006af0:	e003      	b.n	8006afa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	2b06      	cmp	r3, #6
 8006afe:	d901      	bls.n	8006b04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b00:	2306      	movs	r3, #6
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	2200      	movs	r2, #0
 8006b14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	3304      	adds	r3, #4
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff f949 	bl	8005db2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	3318      	adds	r3, #24
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff f944 	bl	8005db2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	f1c3 0207 	rsb	r2, r3, #7
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2200      	movs	r2, #0
 8006b44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	68f9      	ldr	r1, [r7, #12]
 8006b52:	69b8      	ldr	r0, [r7, #24]
 8006b54:	f001 f9a2 	bl	8007e9c <pxPortInitialiseStack>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b6a:	bf00      	nop
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b7c:	f001 faba 	bl	80080f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b80:	4b2a      	ldr	r3, [pc, #168]	; (8006c2c <prvAddNewTaskToReadyList+0xb8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3301      	adds	r3, #1
 8006b86:	4a29      	ldr	r2, [pc, #164]	; (8006c2c <prvAddNewTaskToReadyList+0xb8>)
 8006b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b8a:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <prvAddNewTaskToReadyList+0xbc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b92:	4a27      	ldr	r2, [pc, #156]	; (8006c30 <prvAddNewTaskToReadyList+0xbc>)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b98:	4b24      	ldr	r3, [pc, #144]	; (8006c2c <prvAddNewTaskToReadyList+0xb8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d110      	bne.n	8006bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ba0:	f000 fc0a 	bl	80073b8 <prvInitialiseTaskLists>
 8006ba4:	e00d      	b.n	8006bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ba6:	4b23      	ldr	r3, [pc, #140]	; (8006c34 <prvAddNewTaskToReadyList+0xc0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bae:	4b20      	ldr	r3, [pc, #128]	; (8006c30 <prvAddNewTaskToReadyList+0xbc>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d802      	bhi.n	8006bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bbc:	4a1c      	ldr	r2, [pc, #112]	; (8006c30 <prvAddNewTaskToReadyList+0xbc>)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bc2:	4b1d      	ldr	r3, [pc, #116]	; (8006c38 <prvAddNewTaskToReadyList+0xc4>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	4a1b      	ldr	r2, [pc, #108]	; (8006c38 <prvAddNewTaskToReadyList+0xc4>)
 8006bca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	4b19      	ldr	r3, [pc, #100]	; (8006c3c <prvAddNewTaskToReadyList+0xc8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	4a18      	ldr	r2, [pc, #96]	; (8006c3c <prvAddNewTaskToReadyList+0xc8>)
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4a15      	ldr	r2, [pc, #84]	; (8006c40 <prvAddNewTaskToReadyList+0xcc>)
 8006bec:	441a      	add	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f7ff f8e9 	bl	8005dcc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bfa:	f001 faab 	bl	8008154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	; (8006c34 <prvAddNewTaskToReadyList+0xc0>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00e      	beq.n	8006c24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c06:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <prvAddNewTaskToReadyList+0xbc>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d207      	bcs.n	8006c24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <prvAddNewTaskToReadyList+0xd0>)
 8006c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	200008cc 	.word	0x200008cc
 8006c30:	200007cc 	.word	0x200007cc
 8006c34:	200008d8 	.word	0x200008d8
 8006c38:	200008e8 	.word	0x200008e8
 8006c3c:	200008d4 	.word	0x200008d4
 8006c40:	200007d0 	.word	0x200007d0
 8006c44:	e000ed04 	.word	0xe000ed04

08006c48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d017      	beq.n	8006c8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c5a:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <vTaskDelay+0x60>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00a      	beq.n	8006c78 <vTaskDelay+0x30>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	60bb      	str	r3, [r7, #8]
}
 8006c74:	bf00      	nop
 8006c76:	e7fe      	b.n	8006c76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c78:	f000 f880 	bl	8006d7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fcfc 	bl	800767c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c84:	f000 f888 	bl	8006d98 <xTaskResumeAll>
 8006c88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d107      	bne.n	8006ca0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c90:	4b06      	ldr	r3, [pc, #24]	; (8006cac <vTaskDelay+0x64>)
 8006c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	200008f4 	.word	0x200008f4
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cbe:	463a      	mov	r2, r7
 8006cc0:	1d39      	adds	r1, r7, #4
 8006cc2:	f107 0308 	add.w	r3, r7, #8
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7f9 fc5c 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	9202      	str	r2, [sp, #8]
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	460a      	mov	r2, r1
 8006cde:	4921      	ldr	r1, [pc, #132]	; (8006d64 <vTaskStartScheduler+0xb4>)
 8006ce0:	4821      	ldr	r0, [pc, #132]	; (8006d68 <vTaskStartScheduler+0xb8>)
 8006ce2:	f7ff fe1d 	bl	8006920 <xTaskCreateStatic>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	4a20      	ldr	r2, [pc, #128]	; (8006d6c <vTaskStartScheduler+0xbc>)
 8006cea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cec:	4b1f      	ldr	r3, [pc, #124]	; (8006d6c <vTaskStartScheduler+0xbc>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	e001      	b.n	8006cfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d102      	bne.n	8006d0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d04:	f000 fd20 	bl	8007748 <xTimerCreateTimerTask>
 8006d08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d116      	bne.n	8006d3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	613b      	str	r3, [r7, #16]
}
 8006d22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d24:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <vTaskStartScheduler+0xc0>)
 8006d26:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d2c:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <vTaskStartScheduler+0xc4>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d32:	4b11      	ldr	r3, [pc, #68]	; (8006d78 <vTaskStartScheduler+0xc8>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d38:	f001 f93a 	bl	8007fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d3c:	e00e      	b.n	8006d5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d10a      	bne.n	8006d5c <vTaskStartScheduler+0xac>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60fb      	str	r3, [r7, #12]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <vTaskStartScheduler+0xaa>
}
 8006d5c:	bf00      	nop
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	080091b4 	.word	0x080091b4
 8006d68:	08007385 	.word	0x08007385
 8006d6c:	200008f0 	.word	0x200008f0
 8006d70:	200008ec 	.word	0x200008ec
 8006d74:	200008d8 	.word	0x200008d8
 8006d78:	200008d0 	.word	0x200008d0

08006d7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <vTaskSuspendAll+0x18>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	4a03      	ldr	r2, [pc, #12]	; (8006d94 <vTaskSuspendAll+0x18>)
 8006d88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d8a:	bf00      	nop
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	200008f4 	.word	0x200008f4

08006d98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006da6:	4b41      	ldr	r3, [pc, #260]	; (8006eac <xTaskResumeAll+0x114>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	603b      	str	r3, [r7, #0]
}
 8006dc0:	bf00      	nop
 8006dc2:	e7fe      	b.n	8006dc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006dc4:	f001 f996 	bl	80080f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006dc8:	4b38      	ldr	r3, [pc, #224]	; (8006eac <xTaskResumeAll+0x114>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	4a37      	ldr	r2, [pc, #220]	; (8006eac <xTaskResumeAll+0x114>)
 8006dd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd2:	4b36      	ldr	r3, [pc, #216]	; (8006eac <xTaskResumeAll+0x114>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d161      	bne.n	8006e9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006dda:	4b35      	ldr	r3, [pc, #212]	; (8006eb0 <xTaskResumeAll+0x118>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d05d      	beq.n	8006e9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006de2:	e02e      	b.n	8006e42 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de4:	4b33      	ldr	r3, [pc, #204]	; (8006eb4 <xTaskResumeAll+0x11c>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3318      	adds	r3, #24
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff f848 	bl	8005e86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff f843 	bl	8005e86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	2201      	movs	r2, #1
 8006e06:	409a      	lsls	r2, r3
 8006e08:	4b2b      	ldr	r3, [pc, #172]	; (8006eb8 <xTaskResumeAll+0x120>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <xTaskResumeAll+0x120>)
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4a27      	ldr	r2, [pc, #156]	; (8006ebc <xTaskResumeAll+0x124>)
 8006e20:	441a      	add	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4619      	mov	r1, r3
 8006e28:	4610      	mov	r0, r2
 8006e2a:	f7fe ffcf 	bl	8005dcc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e32:	4b23      	ldr	r3, [pc, #140]	; (8006ec0 <xTaskResumeAll+0x128>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d302      	bcc.n	8006e42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006e3c:	4b21      	ldr	r3, [pc, #132]	; (8006ec4 <xTaskResumeAll+0x12c>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e42:	4b1c      	ldr	r3, [pc, #112]	; (8006eb4 <xTaskResumeAll+0x11c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1cc      	bne.n	8006de4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e50:	f000 fb50 	bl	80074f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e54:	4b1c      	ldr	r3, [pc, #112]	; (8006ec8 <xTaskResumeAll+0x130>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d010      	beq.n	8006e82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e60:	f000 f846 	bl	8006ef0 <xTaskIncrementTick>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006e6a:	4b16      	ldr	r3, [pc, #88]	; (8006ec4 <xTaskResumeAll+0x12c>)
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1f1      	bne.n	8006e60 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006e7c:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <xTaskResumeAll+0x130>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e82:	4b10      	ldr	r3, [pc, #64]	; (8006ec4 <xTaskResumeAll+0x12c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d009      	beq.n	8006e9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <xTaskResumeAll+0x134>)
 8006e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e9e:	f001 f959 	bl	8008154 <vPortExitCritical>

	return xAlreadyYielded;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	200008f4 	.word	0x200008f4
 8006eb0:	200008cc 	.word	0x200008cc
 8006eb4:	2000088c 	.word	0x2000088c
 8006eb8:	200008d4 	.word	0x200008d4
 8006ebc:	200007d0 	.word	0x200007d0
 8006ec0:	200007cc 	.word	0x200007cc
 8006ec4:	200008e0 	.word	0x200008e0
 8006ec8:	200008dc 	.word	0x200008dc
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ed6:	4b05      	ldr	r3, [pc, #20]	; (8006eec <xTaskGetTickCount+0x1c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006edc:	687b      	ldr	r3, [r7, #4]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	200008d0 	.word	0x200008d0

08006ef0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006efa:	4b4e      	ldr	r3, [pc, #312]	; (8007034 <xTaskIncrementTick+0x144>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f040 808e 	bne.w	8007020 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f04:	4b4c      	ldr	r3, [pc, #304]	; (8007038 <xTaskIncrementTick+0x148>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f0c:	4a4a      	ldr	r2, [pc, #296]	; (8007038 <xTaskIncrementTick+0x148>)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d120      	bne.n	8006f5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f18:	4b48      	ldr	r3, [pc, #288]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	603b      	str	r3, [r7, #0]
}
 8006f34:	bf00      	nop
 8006f36:	e7fe      	b.n	8006f36 <xTaskIncrementTick+0x46>
 8006f38:	4b40      	ldr	r3, [pc, #256]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	4b40      	ldr	r3, [pc, #256]	; (8007040 <xTaskIncrementTick+0x150>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a3e      	ldr	r2, [pc, #248]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	4a3e      	ldr	r2, [pc, #248]	; (8007040 <xTaskIncrementTick+0x150>)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	4b3d      	ldr	r3, [pc, #244]	; (8007044 <xTaskIncrementTick+0x154>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3301      	adds	r3, #1
 8006f52:	4a3c      	ldr	r2, [pc, #240]	; (8007044 <xTaskIncrementTick+0x154>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	f000 facd 	bl	80074f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f5a:	4b3b      	ldr	r3, [pc, #236]	; (8007048 <xTaskIncrementTick+0x158>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d348      	bcc.n	8006ff6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f64:	4b35      	ldr	r3, [pc, #212]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f6e:	4b36      	ldr	r3, [pc, #216]	; (8007048 <xTaskIncrementTick+0x158>)
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	601a      	str	r2, [r3, #0]
					break;
 8006f76:	e03e      	b.n	8006ff6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f78:	4b30      	ldr	r3, [pc, #192]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d203      	bcs.n	8006f98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f90:	4a2d      	ldr	r2, [pc, #180]	; (8007048 <xTaskIncrementTick+0x158>)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f96:	e02e      	b.n	8006ff6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe ff72 	bl	8005e86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d004      	beq.n	8006fb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	3318      	adds	r3, #24
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe ff69 	bl	8005e86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	2201      	movs	r2, #1
 8006fba:	409a      	lsls	r2, r3
 8006fbc:	4b23      	ldr	r3, [pc, #140]	; (800704c <xTaskIncrementTick+0x15c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	4a22      	ldr	r2, [pc, #136]	; (800704c <xTaskIncrementTick+0x15c>)
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4a1f      	ldr	r2, [pc, #124]	; (8007050 <xTaskIncrementTick+0x160>)
 8006fd4:	441a      	add	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f7fe fef5 	bl	8005dcc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe6:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <xTaskIncrementTick+0x164>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d3b9      	bcc.n	8006f64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ff4:	e7b6      	b.n	8006f64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ff6:	4b17      	ldr	r3, [pc, #92]	; (8007054 <xTaskIncrementTick+0x164>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffc:	4914      	ldr	r1, [pc, #80]	; (8007050 <xTaskIncrementTick+0x160>)
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	440b      	add	r3, r1
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d901      	bls.n	8007012 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800700e:	2301      	movs	r3, #1
 8007010:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007012:	4b11      	ldr	r3, [pc, #68]	; (8007058 <xTaskIncrementTick+0x168>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800701a:	2301      	movs	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e004      	b.n	800702a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007020:	4b0e      	ldr	r3, [pc, #56]	; (800705c <xTaskIncrementTick+0x16c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3301      	adds	r3, #1
 8007026:	4a0d      	ldr	r2, [pc, #52]	; (800705c <xTaskIncrementTick+0x16c>)
 8007028:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800702a:	697b      	ldr	r3, [r7, #20]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200008f4 	.word	0x200008f4
 8007038:	200008d0 	.word	0x200008d0
 800703c:	20000884 	.word	0x20000884
 8007040:	20000888 	.word	0x20000888
 8007044:	200008e4 	.word	0x200008e4
 8007048:	200008ec 	.word	0x200008ec
 800704c:	200008d4 	.word	0x200008d4
 8007050:	200007d0 	.word	0x200007d0
 8007054:	200007cc 	.word	0x200007cc
 8007058:	200008e0 	.word	0x200008e0
 800705c:	200008dc 	.word	0x200008dc

08007060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007066:	4b27      	ldr	r3, [pc, #156]	; (8007104 <vTaskSwitchContext+0xa4>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800706e:	4b26      	ldr	r3, [pc, #152]	; (8007108 <vTaskSwitchContext+0xa8>)
 8007070:	2201      	movs	r2, #1
 8007072:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007074:	e03f      	b.n	80070f6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007076:	4b24      	ldr	r3, [pc, #144]	; (8007108 <vTaskSwitchContext+0xa8>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707c:	4b23      	ldr	r3, [pc, #140]	; (800710c <vTaskSwitchContext+0xac>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	fab3 f383 	clz	r3, r3
 8007088:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	f1c3 031f 	rsb	r3, r3, #31
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	491f      	ldr	r1, [pc, #124]	; (8007110 <vTaskSwitchContext+0xb0>)
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	607b      	str	r3, [r7, #4]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <vTaskSwitchContext+0x5a>
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4a12      	ldr	r2, [pc, #72]	; (8007110 <vTaskSwitchContext+0xb0>)
 80070c8:	4413      	add	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	605a      	str	r2, [r3, #4]
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3308      	adds	r3, #8
 80070de:	429a      	cmp	r2, r3
 80070e0:	d104      	bne.n	80070ec <vTaskSwitchContext+0x8c>
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	605a      	str	r2, [r3, #4]
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	4a08      	ldr	r2, [pc, #32]	; (8007114 <vTaskSwitchContext+0xb4>)
 80070f4:	6013      	str	r3, [r2, #0]
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	200008f4 	.word	0x200008f4
 8007108:	200008e0 	.word	0x200008e0
 800710c:	200008d4 	.word	0x200008d4
 8007110:	200007d0 	.word	0x200007d0
 8007114:	200007cc 	.word	0x200007cc

08007118 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	60fb      	str	r3, [r7, #12]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800713e:	4b07      	ldr	r3, [pc, #28]	; (800715c <vTaskPlaceOnEventList+0x44>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3318      	adds	r3, #24
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fe fe64 	bl	8005e14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800714c:	2101      	movs	r1, #1
 800714e:	6838      	ldr	r0, [r7, #0]
 8007150:	f000 fa94 	bl	800767c <prvAddCurrentTaskToDelayedList>
}
 8007154:	bf00      	nop
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	200007cc 	.word	0x200007cc

08007160 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	617b      	str	r3, [r7, #20]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007188:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3318      	adds	r3, #24
 800718e:	4619      	mov	r1, r3
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f7fe fe1b 	bl	8005dcc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800719c:	f04f 33ff 	mov.w	r3, #4294967295
 80071a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	68b8      	ldr	r0, [r7, #8]
 80071a6:	f000 fa69 	bl	800767c <prvAddCurrentTaskToDelayedList>
	}
 80071aa:	bf00      	nop
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	200007cc 	.word	0x200007cc

080071b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60fb      	str	r3, [r7, #12]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	3318      	adds	r3, #24
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe fe4c 	bl	8005e86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ee:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <xTaskRemoveFromEventList+0xac>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d11c      	bne.n	8007230 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	3304      	adds	r3, #4
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fe43 	bl	8005e86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	2201      	movs	r2, #1
 8007206:	409a      	lsls	r2, r3
 8007208:	4b17      	ldr	r3, [pc, #92]	; (8007268 <xTaskRemoveFromEventList+0xb0>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4313      	orrs	r3, r2
 800720e:	4a16      	ldr	r2, [pc, #88]	; (8007268 <xTaskRemoveFromEventList+0xb0>)
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4a13      	ldr	r2, [pc, #76]	; (800726c <xTaskRemoveFromEventList+0xb4>)
 8007220:	441a      	add	r2, r3
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7fe fdcf 	bl	8005dcc <vListInsertEnd>
 800722e:	e005      	b.n	800723c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	3318      	adds	r3, #24
 8007234:	4619      	mov	r1, r3
 8007236:	480e      	ldr	r0, [pc, #56]	; (8007270 <xTaskRemoveFromEventList+0xb8>)
 8007238:	f7fe fdc8 	bl	8005dcc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007240:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <xTaskRemoveFromEventList+0xbc>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	429a      	cmp	r2, r3
 8007248:	d905      	bls.n	8007256 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800724a:	2301      	movs	r3, #1
 800724c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800724e:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <xTaskRemoveFromEventList+0xc0>)
 8007250:	2201      	movs	r2, #1
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e001      	b.n	800725a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007256:	2300      	movs	r3, #0
 8007258:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800725a:	697b      	ldr	r3, [r7, #20]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	200008f4 	.word	0x200008f4
 8007268:	200008d4 	.word	0x200008d4
 800726c:	200007d0 	.word	0x200007d0
 8007270:	2000088c 	.word	0x2000088c
 8007274:	200007cc 	.word	0x200007cc
 8007278:	200008e0 	.word	0x200008e0

0800727c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <vTaskInternalSetTimeOutState+0x24>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <vTaskInternalSetTimeOutState+0x28>)
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	605a      	str	r2, [r3, #4]
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	200008e4 	.word	0x200008e4
 80072a4:	200008d0 	.word	0x200008d0

080072a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	613b      	str	r3, [r7, #16]
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60fb      	str	r3, [r7, #12]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80072ea:	f000 ff03 	bl	80080f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072ee:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <xTaskCheckForTimeOut+0xbc>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007306:	d102      	bne.n	800730e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]
 800730c:	e023      	b.n	8007356 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b15      	ldr	r3, [pc, #84]	; (8007368 <xTaskCheckForTimeOut+0xc0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d007      	beq.n	800732a <xTaskCheckForTimeOut+0x82>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	429a      	cmp	r2, r3
 8007322:	d302      	bcc.n	800732a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007324:	2301      	movs	r3, #1
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e015      	b.n	8007356 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	429a      	cmp	r2, r3
 8007332:	d20b      	bcs.n	800734c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	1ad2      	subs	r2, r2, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff ff9b 	bl	800727c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007346:	2300      	movs	r3, #0
 8007348:	61fb      	str	r3, [r7, #28]
 800734a:	e004      	b.n	8007356 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007352:	2301      	movs	r3, #1
 8007354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007356:	f000 fefd 	bl	8008154 <vPortExitCritical>

	return xReturn;
 800735a:	69fb      	ldr	r3, [r7, #28]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3720      	adds	r7, #32
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	200008d0 	.word	0x200008d0
 8007368:	200008e4 	.word	0x200008e4

0800736c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007370:	4b03      	ldr	r3, [pc, #12]	; (8007380 <vTaskMissedYield+0x14>)
 8007372:	2201      	movs	r2, #1
 8007374:	601a      	str	r2, [r3, #0]
}
 8007376:	bf00      	nop
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	200008e0 	.word	0x200008e0

08007384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800738c:	f000 f854 	bl	8007438 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007390:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <prvIdleTask+0x2c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d907      	bls.n	80073a8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007398:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <prvIdleTask+0x30>)
 800739a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80073a8:	f7f9 fd26 	bl	8000df8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80073ac:	e7ee      	b.n	800738c <prvIdleTask+0x8>
 80073ae:	bf00      	nop
 80073b0:	200007d0 	.word	0x200007d0
 80073b4:	e000ed04 	.word	0xe000ed04

080073b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]
 80073c2:	e00c      	b.n	80073de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4a12      	ldr	r2, [pc, #72]	; (8007418 <prvInitialiseTaskLists+0x60>)
 80073d0:	4413      	add	r3, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fccd 	bl	8005d72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3301      	adds	r3, #1
 80073dc:	607b      	str	r3, [r7, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b06      	cmp	r3, #6
 80073e2:	d9ef      	bls.n	80073c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073e4:	480d      	ldr	r0, [pc, #52]	; (800741c <prvInitialiseTaskLists+0x64>)
 80073e6:	f7fe fcc4 	bl	8005d72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073ea:	480d      	ldr	r0, [pc, #52]	; (8007420 <prvInitialiseTaskLists+0x68>)
 80073ec:	f7fe fcc1 	bl	8005d72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073f0:	480c      	ldr	r0, [pc, #48]	; (8007424 <prvInitialiseTaskLists+0x6c>)
 80073f2:	f7fe fcbe 	bl	8005d72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073f6:	480c      	ldr	r0, [pc, #48]	; (8007428 <prvInitialiseTaskLists+0x70>)
 80073f8:	f7fe fcbb 	bl	8005d72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073fc:	480b      	ldr	r0, [pc, #44]	; (800742c <prvInitialiseTaskLists+0x74>)
 80073fe:	f7fe fcb8 	bl	8005d72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007402:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <prvInitialiseTaskLists+0x78>)
 8007404:	4a05      	ldr	r2, [pc, #20]	; (800741c <prvInitialiseTaskLists+0x64>)
 8007406:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <prvInitialiseTaskLists+0x7c>)
 800740a:	4a05      	ldr	r2, [pc, #20]	; (8007420 <prvInitialiseTaskLists+0x68>)
 800740c:	601a      	str	r2, [r3, #0]
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	200007d0 	.word	0x200007d0
 800741c:	2000085c 	.word	0x2000085c
 8007420:	20000870 	.word	0x20000870
 8007424:	2000088c 	.word	0x2000088c
 8007428:	200008a0 	.word	0x200008a0
 800742c:	200008b8 	.word	0x200008b8
 8007430:	20000884 	.word	0x20000884
 8007434:	20000888 	.word	0x20000888

08007438 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800743e:	e019      	b.n	8007474 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007440:	f000 fe58 	bl	80080f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007444:	4b10      	ldr	r3, [pc, #64]	; (8007488 <prvCheckTasksWaitingTermination+0x50>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe fd18 	bl	8005e86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007456:	4b0d      	ldr	r3, [pc, #52]	; (800748c <prvCheckTasksWaitingTermination+0x54>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3b01      	subs	r3, #1
 800745c:	4a0b      	ldr	r2, [pc, #44]	; (800748c <prvCheckTasksWaitingTermination+0x54>)
 800745e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007460:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <prvCheckTasksWaitingTermination+0x58>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3b01      	subs	r3, #1
 8007466:	4a0a      	ldr	r2, [pc, #40]	; (8007490 <prvCheckTasksWaitingTermination+0x58>)
 8007468:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800746a:	f000 fe73 	bl	8008154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f810 	bl	8007494 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007474:	4b06      	ldr	r3, [pc, #24]	; (8007490 <prvCheckTasksWaitingTermination+0x58>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e1      	bne.n	8007440 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	200008a0 	.word	0x200008a0
 800748c:	200008cc 	.word	0x200008cc
 8007490:	200008b4 	.word	0x200008b4

08007494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d108      	bne.n	80074b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 f810 	bl	80084d0 <vPortFree>
				vPortFree( pxTCB );
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f80d 	bl	80084d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074b6:	e018      	b.n	80074ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d103      	bne.n	80074ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 f804 	bl	80084d0 <vPortFree>
	}
 80074c8:	e00f      	b.n	80074ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d00a      	beq.n	80074ea <prvDeleteTCB+0x56>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	60fb      	str	r3, [r7, #12]
}
 80074e6:	bf00      	nop
 80074e8:	e7fe      	b.n	80074e8 <prvDeleteTCB+0x54>
	}
 80074ea:	bf00      	nop
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074fa:	4b0c      	ldr	r3, [pc, #48]	; (800752c <prvResetNextTaskUnblockTime+0x38>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d104      	bne.n	800750e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <prvResetNextTaskUnblockTime+0x3c>)
 8007506:	f04f 32ff 	mov.w	r2, #4294967295
 800750a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800750c:	e008      	b.n	8007520 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800750e:	4b07      	ldr	r3, [pc, #28]	; (800752c <prvResetNextTaskUnblockTime+0x38>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	4a04      	ldr	r2, [pc, #16]	; (8007530 <prvResetNextTaskUnblockTime+0x3c>)
 800751e:	6013      	str	r3, [r2, #0]
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	20000884 	.word	0x20000884
 8007530:	200008ec 	.word	0x200008ec

08007534 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800753a:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <xTaskGetSchedulerState+0x34>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d102      	bne.n	8007548 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007542:	2301      	movs	r3, #1
 8007544:	607b      	str	r3, [r7, #4]
 8007546:	e008      	b.n	800755a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007548:	4b08      	ldr	r3, [pc, #32]	; (800756c <xTaskGetSchedulerState+0x38>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d102      	bne.n	8007556 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007550:	2302      	movs	r3, #2
 8007552:	607b      	str	r3, [r7, #4]
 8007554:	e001      	b.n	800755a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007556:	2300      	movs	r3, #0
 8007558:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800755a:	687b      	ldr	r3, [r7, #4]
	}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	200008d8 	.word	0x200008d8
 800756c:	200008f4 	.word	0x200008f4

08007570 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d06e      	beq.n	8007664 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007586:	4b3a      	ldr	r3, [pc, #232]	; (8007670 <xTaskPriorityDisinherit+0x100>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	429a      	cmp	r2, r3
 800758e:	d00a      	beq.n	80075a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	60fb      	str	r3, [r7, #12]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	60bb      	str	r3, [r7, #8]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c8:	1e5a      	subs	r2, r3, #1
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d044      	beq.n	8007664 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d140      	bne.n	8007664 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	3304      	adds	r3, #4
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fc4d 	bl	8005e86 <uxListRemove>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d115      	bne.n	800761e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	491f      	ldr	r1, [pc, #124]	; (8007674 <xTaskPriorityDisinherit+0x104>)
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <xTaskPriorityDisinherit+0xae>
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	2201      	movs	r2, #1
 800760e:	fa02 f303 	lsl.w	r3, r2, r3
 8007612:	43da      	mvns	r2, r3
 8007614:	4b18      	ldr	r3, [pc, #96]	; (8007678 <xTaskPriorityDisinherit+0x108>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4013      	ands	r3, r2
 800761a:	4a17      	ldr	r2, [pc, #92]	; (8007678 <xTaskPriorityDisinherit+0x108>)
 800761c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	f1c3 0207 	rsb	r2, r3, #7
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	2201      	movs	r2, #1
 8007638:	409a      	lsls	r2, r3
 800763a:	4b0f      	ldr	r3, [pc, #60]	; (8007678 <xTaskPriorityDisinherit+0x108>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4313      	orrs	r3, r2
 8007640:	4a0d      	ldr	r2, [pc, #52]	; (8007678 <xTaskPriorityDisinherit+0x108>)
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4a08      	ldr	r2, [pc, #32]	; (8007674 <xTaskPriorityDisinherit+0x104>)
 8007652:	441a      	add	r2, r3
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	3304      	adds	r3, #4
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	f7fe fbb6 	bl	8005dcc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007660:	2301      	movs	r3, #1
 8007662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007664:	697b      	ldr	r3, [r7, #20]
	}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	200007cc 	.word	0x200007cc
 8007674:	200007d0 	.word	0x200007d0
 8007678:	200008d4 	.word	0x200008d4

0800767c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007686:	4b29      	ldr	r3, [pc, #164]	; (800772c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800768c:	4b28      	ldr	r3, [pc, #160]	; (8007730 <prvAddCurrentTaskToDelayedList+0xb4>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3304      	adds	r3, #4
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe fbf7 	bl	8005e86 <uxListRemove>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800769e:	4b24      	ldr	r3, [pc, #144]	; (8007730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	2201      	movs	r2, #1
 80076a6:	fa02 f303 	lsl.w	r3, r2, r3
 80076aa:	43da      	mvns	r2, r3
 80076ac:	4b21      	ldr	r3, [pc, #132]	; (8007734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4013      	ands	r3, r2
 80076b2:	4a20      	ldr	r2, [pc, #128]	; (8007734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076bc:	d10a      	bne.n	80076d4 <prvAddCurrentTaskToDelayedList+0x58>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d007      	beq.n	80076d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076c4:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3304      	adds	r3, #4
 80076ca:	4619      	mov	r1, r3
 80076cc:	481a      	ldr	r0, [pc, #104]	; (8007738 <prvAddCurrentTaskToDelayedList+0xbc>)
 80076ce:	f7fe fb7d 	bl	8005dcc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076d2:	e026      	b.n	8007722 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4413      	add	r3, r2
 80076da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076dc:	4b14      	ldr	r3, [pc, #80]	; (8007730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d209      	bcs.n	8007700 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ec:	4b13      	ldr	r3, [pc, #76]	; (800773c <prvAddCurrentTaskToDelayedList+0xc0>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3304      	adds	r3, #4
 80076f6:	4619      	mov	r1, r3
 80076f8:	4610      	mov	r0, r2
 80076fa:	f7fe fb8b 	bl	8005e14 <vListInsert>
}
 80076fe:	e010      	b.n	8007722 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007700:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	4b0a      	ldr	r3, [pc, #40]	; (8007730 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3304      	adds	r3, #4
 800770a:	4619      	mov	r1, r3
 800770c:	4610      	mov	r0, r2
 800770e:	f7fe fb81 	bl	8005e14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007712:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	429a      	cmp	r2, r3
 800771a:	d202      	bcs.n	8007722 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800771c:	4a09      	ldr	r2, [pc, #36]	; (8007744 <prvAddCurrentTaskToDelayedList+0xc8>)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	6013      	str	r3, [r2, #0]
}
 8007722:	bf00      	nop
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	200008d0 	.word	0x200008d0
 8007730:	200007cc 	.word	0x200007cc
 8007734:	200008d4 	.word	0x200008d4
 8007738:	200008b8 	.word	0x200008b8
 800773c:	20000888 	.word	0x20000888
 8007740:	20000884 	.word	0x20000884
 8007744:	200008ec 	.word	0x200008ec

08007748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08a      	sub	sp, #40	; 0x28
 800774c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007752:	f000 fb63 	bl	8007e1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007756:	4b1c      	ldr	r3, [pc, #112]	; (80077c8 <xTimerCreateTimerTask+0x80>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d021      	beq.n	80077a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007762:	2300      	movs	r3, #0
 8007764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007766:	1d3a      	adds	r2, r7, #4
 8007768:	f107 0108 	add.w	r1, r7, #8
 800776c:	f107 030c 	add.w	r3, r7, #12
 8007770:	4618      	mov	r0, r3
 8007772:	f7f8 ff21 	bl	80005b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	9202      	str	r2, [sp, #8]
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	2303      	movs	r3, #3
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	460a      	mov	r2, r1
 8007788:	4910      	ldr	r1, [pc, #64]	; (80077cc <xTimerCreateTimerTask+0x84>)
 800778a:	4811      	ldr	r0, [pc, #68]	; (80077d0 <xTimerCreateTimerTask+0x88>)
 800778c:	f7ff f8c8 	bl	8006920 <xTaskCreateStatic>
 8007790:	4603      	mov	r3, r0
 8007792:	4a10      	ldr	r2, [pc, #64]	; (80077d4 <xTimerCreateTimerTask+0x8c>)
 8007794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007796:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <xTimerCreateTimerTask+0x8c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800779e:	2301      	movs	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	613b      	str	r3, [r7, #16]
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077be:	697b      	ldr	r3, [r7, #20]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	20000928 	.word	0x20000928
 80077cc:	080091bc 	.word	0x080091bc
 80077d0:	080079c5 	.word	0x080079c5
 80077d4:	2000092c 	.word	0x2000092c

080077d8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af02      	add	r7, sp, #8
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80077e6:	2028      	movs	r0, #40	; 0x28
 80077e8:	f000 fda6 	bl	8008338 <pvPortMalloc>
 80077ec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00d      	beq.n	8007810 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	9301      	str	r3, [sp, #4]
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	68b9      	ldr	r1, [r7, #8]
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 f805 	bl	800781a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007810:	697b      	ldr	r3, [r7, #20]
	}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10a      	bne.n	8007844 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	617b      	str	r3, [r7, #20]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	2b00      	cmp	r3, #0
 8007848:	d01e      	beq.n	8007888 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800784a:	f000 fae7 	bl	8007e1c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	6a3a      	ldr	r2, [r7, #32]
 8007864:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	3304      	adds	r3, #4
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe faa1 	bl	8005db2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d008      	beq.n	8007888 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800787c:	f043 0304 	orr.w	r3, r3, #4
 8007880:	b2da      	uxtb	r2, r3
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007888:	bf00      	nop
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	; 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800789e:	2300      	movs	r3, #0
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <xTimerGenericCommand+0x2e>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	623b      	str	r3, [r7, #32]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078be:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <xTimerGenericCommand+0x98>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d02a      	beq.n	800791c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b05      	cmp	r3, #5
 80078d6:	dc18      	bgt.n	800790a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078d8:	f7ff fe2c 	bl	8007534 <xTaskGetSchedulerState>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d109      	bne.n	80078f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <xTimerGenericCommand+0x98>)
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f107 0110 	add.w	r1, r7, #16
 80078ea:	2300      	movs	r3, #0
 80078ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ee:	f7fe fc2f 	bl	8006150 <xQueueGenericSend>
 80078f2:	6278      	str	r0, [r7, #36]	; 0x24
 80078f4:	e012      	b.n	800791c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078f6:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <xTimerGenericCommand+0x98>)
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f107 0110 	add.w	r1, r7, #16
 80078fe:	2300      	movs	r3, #0
 8007900:	2200      	movs	r2, #0
 8007902:	f7fe fc25 	bl	8006150 <xQueueGenericSend>
 8007906:	6278      	str	r0, [r7, #36]	; 0x24
 8007908:	e008      	b.n	800791c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800790a:	4b07      	ldr	r3, [pc, #28]	; (8007928 <xTimerGenericCommand+0x98>)
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	f107 0110 	add.w	r1, r7, #16
 8007912:	2300      	movs	r3, #0
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	f7fe fd19 	bl	800634c <xQueueGenericSendFromISR>
 800791a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800791e:	4618      	mov	r0, r3
 8007920:	3728      	adds	r7, #40	; 0x28
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000928 	.word	0x20000928

0800792c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af02      	add	r7, sp, #8
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007936:	4b22      	ldr	r3, [pc, #136]	; (80079c0 <prvProcessExpiredTimer+0x94>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	3304      	adds	r3, #4
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe fa9e 	bl	8005e86 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b00      	cmp	r3, #0
 8007956:	d022      	beq.n	800799e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	18d1      	adds	r1, r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	6978      	ldr	r0, [r7, #20]
 8007966:	f000 f8d1 	bl	8007b0c <prvInsertTimerInActiveList>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01f      	beq.n	80079b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007970:	2300      	movs	r3, #0
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	2300      	movs	r3, #0
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	2100      	movs	r1, #0
 800797a:	6978      	ldr	r0, [r7, #20]
 800797c:	f7ff ff88 	bl	8007890 <xTimerGenericCommand>
 8007980:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d113      	bne.n	80079b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	60fb      	str	r3, [r7, #12]
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	6978      	ldr	r0, [r7, #20]
 80079b6:	4798      	blx	r3
}
 80079b8:	bf00      	nop
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000920 	.word	0x20000920

080079c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079cc:	f107 0308 	add.w	r3, r7, #8
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 f857 	bl	8007a84 <prvGetNextExpireTime>
 80079d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4619      	mov	r1, r3
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f803 	bl	80079e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079e2:	f000 f8d5 	bl	8007b90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079e6:	e7f1      	b.n	80079cc <prvTimerTask+0x8>

080079e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079f2:	f7ff f9c3 	bl	8006d7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079f6:	f107 0308 	add.w	r3, r7, #8
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 f866 	bl	8007acc <prvSampleTimeNow>
 8007a00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d130      	bne.n	8007a6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <prvProcessTimerOrBlockTask+0x3c>
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d806      	bhi.n	8007a24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a16:	f7ff f9bf 	bl	8006d98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff ff85 	bl	800792c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a22:	e024      	b.n	8007a6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d008      	beq.n	8007a3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a2a:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <prvProcessTimerOrBlockTask+0x90>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <prvProcessTimerOrBlockTask+0x50>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <prvProcessTimerOrBlockTask+0x52>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <prvProcessTimerOrBlockTask+0x94>)
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f7fe ff35 	bl	80068b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a4e:	f7ff f9a3 	bl	8006d98 <xTaskResumeAll>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a58:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <prvProcessTimerOrBlockTask+0x98>)
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	f3bf 8f6f 	isb	sy
}
 8007a68:	e001      	b.n	8007a6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a6a:	f7ff f995 	bl	8006d98 <xTaskResumeAll>
}
 8007a6e:	bf00      	nop
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000924 	.word	0x20000924
 8007a7c:	20000928 	.word	0x20000928
 8007a80:	e000ed04 	.word	0xe000ed04

08007a84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <prvGetNextExpireTime+0x44>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <prvGetNextExpireTime+0x16>
 8007a96:	2201      	movs	r2, #1
 8007a98:	e000      	b.n	8007a9c <prvGetNextExpireTime+0x18>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d105      	bne.n	8007ab4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007aa8:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <prvGetNextExpireTime+0x44>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	e001      	b.n	8007ab8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20000920 	.word	0x20000920

08007acc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ad4:	f7ff f9fc 	bl	8006ed0 <xTaskGetTickCount>
 8007ad8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ada:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <prvSampleTimeNow+0x3c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d205      	bcs.n	8007af0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ae4:	f000 f936 	bl	8007d54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e002      	b.n	8007af6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007af6:	4a04      	ldr	r2, [pc, #16]	; (8007b08 <prvSampleTimeNow+0x3c>)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007afc:	68fb      	ldr	r3, [r7, #12]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000930 	.word	0x20000930

08007b0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d812      	bhi.n	8007b58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	1ad2      	subs	r2, r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d302      	bcc.n	8007b46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b40:	2301      	movs	r3, #1
 8007b42:	617b      	str	r3, [r7, #20]
 8007b44:	e01b      	b.n	8007b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b46:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <prvInsertTimerInActiveList+0x7c>)
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4610      	mov	r0, r2
 8007b52:	f7fe f95f 	bl	8005e14 <vListInsert>
 8007b56:	e012      	b.n	8007b7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d206      	bcs.n	8007b6e <prvInsertTimerInActiveList+0x62>
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d302      	bcc.n	8007b6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	e007      	b.n	8007b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b6e:	4b07      	ldr	r3, [pc, #28]	; (8007b8c <prvInsertTimerInActiveList+0x80>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4619      	mov	r1, r3
 8007b78:	4610      	mov	r0, r2
 8007b7a:	f7fe f94b 	bl	8005e14 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b7e:	697b      	ldr	r3, [r7, #20]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20000924 	.word	0x20000924
 8007b8c:	20000920 	.word	0x20000920

08007b90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08e      	sub	sp, #56	; 0x38
 8007b94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b96:	e0ca      	b.n	8007d2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da18      	bge.n	8007bd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b9e:	1d3b      	adds	r3, r7, #4
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	61fb      	str	r3, [r7, #28]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc6:	6850      	ldr	r0, [r2, #4]
 8007bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bca:	6892      	ldr	r2, [r2, #8]
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f2c0 80aa 	blt.w	8007d2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	3304      	adds	r3, #4
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe f94c 	bl	8005e86 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bee:	463b      	mov	r3, r7
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff ff6b 	bl	8007acc <prvSampleTimeNow>
 8007bf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b09      	cmp	r3, #9
 8007bfc:	f200 8097 	bhi.w	8007d2e <prvProcessReceivedCommands+0x19e>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <prvProcessReceivedCommands+0x78>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c31 	.word	0x08007c31
 8007c0c:	08007c31 	.word	0x08007c31
 8007c10:	08007c31 	.word	0x08007c31
 8007c14:	08007ca5 	.word	0x08007ca5
 8007c18:	08007cb9 	.word	0x08007cb9
 8007c1c:	08007d03 	.word	0x08007d03
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c31 	.word	0x08007c31
 8007c28:	08007ca5 	.word	0x08007ca5
 8007c2c:	08007cb9 	.word	0x08007cb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c36:	f043 0301 	orr.w	r3, r3, #1
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	18d1      	adds	r1, r2, r3
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c50:	f7ff ff5c 	bl	8007b0c <prvInsertTimerInActiveList>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d069      	beq.n	8007d2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d05e      	beq.n	8007d2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	441a      	add	r2, r3
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c82:	f7ff fe05 	bl	8007890 <xTimerGenericCommand>
 8007c86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d14f      	bne.n	8007d2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	61bb      	str	r3, [r7, #24]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007cb6:	e03a      	b.n	8007d2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	617b      	str	r3, [r7, #20]
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	18d1      	adds	r1, r2, r3
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cfc:	f7ff ff06 	bl	8007b0c <prvInsertTimerInActiveList>
					break;
 8007d00:	e015      	b.n	8007d2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d103      	bne.n	8007d18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d12:	f000 fbdd 	bl	80084d0 <vPortFree>
 8007d16:	e00a      	b.n	8007d2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d1e:	f023 0301 	bic.w	r3, r3, #1
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d2a:	e000      	b.n	8007d2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d2e:	4b08      	ldr	r3, [pc, #32]	; (8007d50 <prvProcessReceivedCommands+0x1c0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	1d39      	adds	r1, r7, #4
 8007d34:	2200      	movs	r2, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe fba4 	bl	8006484 <xQueueReceive>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f47f af2a 	bne.w	8007b98 <prvProcessReceivedCommands+0x8>
	}
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	3730      	adds	r7, #48	; 0x30
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000928 	.word	0x20000928

08007d54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d5a:	e048      	b.n	8007dee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d5c:	4b2d      	ldr	r3, [pc, #180]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d66:	4b2b      	ldr	r3, [pc, #172]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe f886 	bl	8005e86 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d02e      	beq.n	8007dee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4413      	add	r3, r2
 8007d98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d90e      	bls.n	8007dc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dae:	4b19      	ldr	r3, [pc, #100]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4619      	mov	r1, r3
 8007db8:	4610      	mov	r0, r2
 8007dba:	f7fe f82b 	bl	8005e14 <vListInsert>
 8007dbe:	e016      	b.n	8007dee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7ff fd60 	bl	8007890 <xTimerGenericCommand>
 8007dd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	603b      	str	r3, [r7, #0]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1b1      	bne.n	8007d5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dfe:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <prvSwitchTimerLists+0xc4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a04      	ldr	r2, [pc, #16]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007e04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e06:	4a04      	ldr	r2, [pc, #16]	; (8007e18 <prvSwitchTimerLists+0xc4>)
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	6013      	str	r3, [r2, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000920 	.word	0x20000920
 8007e18:	20000924 	.word	0x20000924

08007e1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e22:	f000 f967 	bl	80080f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e26:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d120      	bne.n	8007e70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e2e:	4814      	ldr	r0, [pc, #80]	; (8007e80 <prvCheckForValidListAndQueue+0x64>)
 8007e30:	f7fd ff9f 	bl	8005d72 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e34:	4813      	ldr	r0, [pc, #76]	; (8007e84 <prvCheckForValidListAndQueue+0x68>)
 8007e36:	f7fd ff9c 	bl	8005d72 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <prvCheckForValidListAndQueue+0x6c>)
 8007e3c:	4a10      	ldr	r2, [pc, #64]	; (8007e80 <prvCheckForValidListAndQueue+0x64>)
 8007e3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e40:	4b12      	ldr	r3, [pc, #72]	; (8007e8c <prvCheckForValidListAndQueue+0x70>)
 8007e42:	4a10      	ldr	r2, [pc, #64]	; (8007e84 <prvCheckForValidListAndQueue+0x68>)
 8007e44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e46:	2300      	movs	r3, #0
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <prvCheckForValidListAndQueue+0x74>)
 8007e4c:	4a11      	ldr	r2, [pc, #68]	; (8007e94 <prvCheckForValidListAndQueue+0x78>)
 8007e4e:	2110      	movs	r1, #16
 8007e50:	200a      	movs	r0, #10
 8007e52:	f7fe f8ab 	bl	8005fac <xQueueGenericCreateStatic>
 8007e56:	4603      	mov	r3, r0
 8007e58:	4a08      	ldr	r2, [pc, #32]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e5c:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	490b      	ldr	r1, [pc, #44]	; (8007e98 <prvCheckForValidListAndQueue+0x7c>)
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fcfa 	bl	8006864 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e70:	f000 f970 	bl	8008154 <vPortExitCritical>
}
 8007e74:	bf00      	nop
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000928 	.word	0x20000928
 8007e80:	200008f8 	.word	0x200008f8
 8007e84:	2000090c 	.word	0x2000090c
 8007e88:	20000920 	.word	0x20000920
 8007e8c:	20000924 	.word	0x20000924
 8007e90:	200009d4 	.word	0x200009d4
 8007e94:	20000934 	.word	0x20000934
 8007e98:	080091c4 	.word	0x080091c4

08007e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3b04      	subs	r3, #4
 8007eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3b04      	subs	r3, #4
 8007eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f023 0201 	bic.w	r2, r3, #1
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3b04      	subs	r3, #4
 8007eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ecc:	4a0c      	ldr	r2, [pc, #48]	; (8007f00 <pxPortInitialiseStack+0x64>)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3b14      	subs	r3, #20
 8007ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3b04      	subs	r3, #4
 8007ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f06f 0202 	mvn.w	r2, #2
 8007eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3b20      	subs	r3, #32
 8007ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	08007f05 	.word	0x08007f05

08007f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f0e:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <prvTaskExitError+0x54>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f16:	d00a      	beq.n	8007f2e <prvTaskExitError+0x2a>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	60fb      	str	r3, [r7, #12]
}
 8007f2a:	bf00      	nop
 8007f2c:	e7fe      	b.n	8007f2c <prvTaskExitError+0x28>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	60bb      	str	r3, [r7, #8]
}
 8007f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f42:	bf00      	nop
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0fc      	beq.n	8007f44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f4a:	bf00      	nop
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	2000000c 	.word	0x2000000c
 8007f5c:	00000000 	.word	0x00000000

08007f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f60:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <pxCurrentTCBConst2>)
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6808      	ldr	r0, [r1, #0]
 8007f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	f380 8809 	msr	PSP, r0
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8811 	msr	BASEPRI, r0
 8007f7a:	4770      	bx	lr
 8007f7c:	f3af 8000 	nop.w

08007f80 <pxCurrentTCBConst2>:
 8007f80:	200007cc 	.word	0x200007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop

08007f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f88:	4808      	ldr	r0, [pc, #32]	; (8007fac <prvPortStartFirstTask+0x24>)
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	f380 8808 	msr	MSP, r0
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8814 	msr	CONTROL, r0
 8007f9a:	b662      	cpsie	i
 8007f9c:	b661      	cpsie	f
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	df00      	svc	0
 8007fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007faa:	bf00      	nop
 8007fac:	e000ed08 	.word	0xe000ed08

08007fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fb6:	4b46      	ldr	r3, [pc, #280]	; (80080d0 <xPortStartScheduler+0x120>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a46      	ldr	r2, [pc, #280]	; (80080d4 <xPortStartScheduler+0x124>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d10a      	bne.n	8007fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	613b      	str	r3, [r7, #16]
}
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fd6:	4b3e      	ldr	r3, [pc, #248]	; (80080d0 <xPortStartScheduler+0x120>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a3f      	ldr	r2, [pc, #252]	; (80080d8 <xPortStartScheduler+0x128>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d10a      	bne.n	8007ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	60fb      	str	r3, [r7, #12]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ff6:	4b39      	ldr	r3, [pc, #228]	; (80080dc <xPortStartScheduler+0x12c>)
 8007ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	22ff      	movs	r2, #255	; 0xff
 8008006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	b2db      	uxtb	r3, r3
 800800e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008018:	b2da      	uxtb	r2, r3
 800801a:	4b31      	ldr	r3, [pc, #196]	; (80080e0 <xPortStartScheduler+0x130>)
 800801c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800801e:	4b31      	ldr	r3, [pc, #196]	; (80080e4 <xPortStartScheduler+0x134>)
 8008020:	2207      	movs	r2, #7
 8008022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008024:	e009      	b.n	800803a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008026:	4b2f      	ldr	r3, [pc, #188]	; (80080e4 <xPortStartScheduler+0x134>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3b01      	subs	r3, #1
 800802c:	4a2d      	ldr	r2, [pc, #180]	; (80080e4 <xPortStartScheduler+0x134>)
 800802e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	b2db      	uxtb	r3, r3
 8008038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008042:	2b80      	cmp	r3, #128	; 0x80
 8008044:	d0ef      	beq.n	8008026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008046:	4b27      	ldr	r3, [pc, #156]	; (80080e4 <xPortStartScheduler+0x134>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f1c3 0307 	rsb	r3, r3, #7
 800804e:	2b04      	cmp	r3, #4
 8008050:	d00a      	beq.n	8008068 <xPortStartScheduler+0xb8>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	60bb      	str	r3, [r7, #8]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008068:	4b1e      	ldr	r3, [pc, #120]	; (80080e4 <xPortStartScheduler+0x134>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	4a1d      	ldr	r2, [pc, #116]	; (80080e4 <xPortStartScheduler+0x134>)
 8008070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008072:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <xPortStartScheduler+0x134>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800807a:	4a1a      	ldr	r2, [pc, #104]	; (80080e4 <xPortStartScheduler+0x134>)
 800807c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	b2da      	uxtb	r2, r3
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008086:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <xPortStartScheduler+0x138>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a17      	ldr	r2, [pc, #92]	; (80080e8 <xPortStartScheduler+0x138>)
 800808c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <xPortStartScheduler+0x138>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a14      	ldr	r2, [pc, #80]	; (80080e8 <xPortStartScheduler+0x138>)
 8008098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800809c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800809e:	f000 f8dd 	bl	800825c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080a2:	4b12      	ldr	r3, [pc, #72]	; (80080ec <xPortStartScheduler+0x13c>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080a8:	f000 f8fc 	bl	80082a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080ac:	4b10      	ldr	r3, [pc, #64]	; (80080f0 <xPortStartScheduler+0x140>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a0f      	ldr	r2, [pc, #60]	; (80080f0 <xPortStartScheduler+0x140>)
 80080b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080b8:	f7ff ff66 	bl	8007f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080bc:	f7fe ffd0 	bl	8007060 <vTaskSwitchContext>
	prvTaskExitError();
 80080c0:	f7ff ff20 	bl	8007f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	e000ed00 	.word	0xe000ed00
 80080d4:	410fc271 	.word	0x410fc271
 80080d8:	410fc270 	.word	0x410fc270
 80080dc:	e000e400 	.word	0xe000e400
 80080e0:	20000a1c 	.word	0x20000a1c
 80080e4:	20000a20 	.word	0x20000a20
 80080e8:	e000ed20 	.word	0xe000ed20
 80080ec:	2000000c 	.word	0x2000000c
 80080f0:	e000ef34 	.word	0xe000ef34

080080f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	607b      	str	r3, [r7, #4]
}
 800810c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <vPortEnterCritical+0x58>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	4a0d      	ldr	r2, [pc, #52]	; (800814c <vPortEnterCritical+0x58>)
 8008116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008118:	4b0c      	ldr	r3, [pc, #48]	; (800814c <vPortEnterCritical+0x58>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d10f      	bne.n	8008140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008120:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <vPortEnterCritical+0x5c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <vPortEnterCritical+0x4c>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	603b      	str	r3, [r7, #0]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <vPortEnterCritical+0x4a>
	}
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	2000000c 	.word	0x2000000c
 8008150:	e000ed04 	.word	0xe000ed04

08008154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <vPortExitCritical+0x50>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10a      	bne.n	8008178 <vPortExitCritical+0x24>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	607b      	str	r3, [r7, #4]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008178:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <vPortExitCritical+0x50>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3b01      	subs	r3, #1
 800817e:	4a09      	ldr	r2, [pc, #36]	; (80081a4 <vPortExitCritical+0x50>)
 8008180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008182:	4b08      	ldr	r3, [pc, #32]	; (80081a4 <vPortExitCritical+0x50>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d105      	bne.n	8008196 <vPortExitCritical+0x42>
 800818a:	2300      	movs	r3, #0
 800818c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	f383 8811 	msr	BASEPRI, r3
}
 8008194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008196:	bf00      	nop
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	2000000c 	.word	0x2000000c
	...

080081b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081b0:	f3ef 8009 	mrs	r0, PSP
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	4b15      	ldr	r3, [pc, #84]	; (8008210 <pxCurrentTCBConst>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	f01e 0f10 	tst.w	lr, #16
 80081c0:	bf08      	it	eq
 80081c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	6010      	str	r0, [r2, #0]
 80081cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081d4:	f380 8811 	msr	BASEPRI, r0
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f7fe ff3e 	bl	8007060 <vTaskSwitchContext>
 80081e4:	f04f 0000 	mov.w	r0, #0
 80081e8:	f380 8811 	msr	BASEPRI, r0
 80081ec:	bc09      	pop	{r0, r3}
 80081ee:	6819      	ldr	r1, [r3, #0]
 80081f0:	6808      	ldr	r0, [r1, #0]
 80081f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f6:	f01e 0f10 	tst.w	lr, #16
 80081fa:	bf08      	it	eq
 80081fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008200:	f380 8809 	msr	PSP, r0
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	f3af 8000 	nop.w

08008210 <pxCurrentTCBConst>:
 8008210:	200007cc 	.word	0x200007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop

08008218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	607b      	str	r3, [r7, #4]
}
 8008230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008232:	f7fe fe5d 	bl	8006ef0 <xTaskIncrementTick>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800823c:	4b06      	ldr	r3, [pc, #24]	; (8008258 <SysTick_Handler+0x40>)
 800823e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	2300      	movs	r3, #0
 8008246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	f383 8811 	msr	BASEPRI, r3
}
 800824e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008260:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <vPortSetupTimerInterrupt+0x34>)
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <vPortSetupTimerInterrupt+0x38>)
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <vPortSetupTimerInterrupt+0x3c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a0a      	ldr	r2, [pc, #40]	; (800829c <vPortSetupTimerInterrupt+0x40>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	099b      	lsrs	r3, r3, #6
 8008278:	4a09      	ldr	r2, [pc, #36]	; (80082a0 <vPortSetupTimerInterrupt+0x44>)
 800827a:	3b01      	subs	r3, #1
 800827c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800827e:	4b04      	ldr	r3, [pc, #16]	; (8008290 <vPortSetupTimerInterrupt+0x34>)
 8008280:	2207      	movs	r2, #7
 8008282:	601a      	str	r2, [r3, #0]
}
 8008284:	bf00      	nop
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	e000e010 	.word	0xe000e010
 8008294:	e000e018 	.word	0xe000e018
 8008298:	20000000 	.word	0x20000000
 800829c:	10624dd3 	.word	0x10624dd3
 80082a0:	e000e014 	.word	0xe000e014

080082a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082b4 <vPortEnableVFP+0x10>
 80082a8:	6801      	ldr	r1, [r0, #0]
 80082aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082ae:	6001      	str	r1, [r0, #0]
 80082b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082b2:	bf00      	nop
 80082b4:	e000ed88 	.word	0xe000ed88

080082b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082be:	f3ef 8305 	mrs	r3, IPSR
 80082c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b0f      	cmp	r3, #15
 80082c8:	d914      	bls.n	80082f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082ca:	4a17      	ldr	r2, [pc, #92]	; (8008328 <vPortValidateInterruptPriority+0x70>)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082d4:	4b15      	ldr	r3, [pc, #84]	; (800832c <vPortValidateInterruptPriority+0x74>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	7afa      	ldrb	r2, [r7, #11]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d20a      	bcs.n	80082f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	607b      	str	r3, [r7, #4]
}
 80082f0:	bf00      	nop
 80082f2:	e7fe      	b.n	80082f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082f4:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <vPortValidateInterruptPriority+0x78>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082fc:	4b0d      	ldr	r3, [pc, #52]	; (8008334 <vPortValidateInterruptPriority+0x7c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d90a      	bls.n	800831a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	603b      	str	r3, [r7, #0]
}
 8008316:	bf00      	nop
 8008318:	e7fe      	b.n	8008318 <vPortValidateInterruptPriority+0x60>
	}
 800831a:	bf00      	nop
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	e000e3f0 	.word	0xe000e3f0
 800832c:	20000a1c 	.word	0x20000a1c
 8008330:	e000ed0c 	.word	0xe000ed0c
 8008334:	20000a20 	.word	0x20000a20

08008338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	; 0x28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008340:	2300      	movs	r3, #0
 8008342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008344:	f7fe fd1a 	bl	8006d7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008348:	4b5b      	ldr	r3, [pc, #364]	; (80084b8 <pvPortMalloc+0x180>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008350:	f000 f920 	bl	8008594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008354:	4b59      	ldr	r3, [pc, #356]	; (80084bc <pvPortMalloc+0x184>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4013      	ands	r3, r2
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 8093 	bne.w	8008488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01d      	beq.n	80083a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008368:	2208      	movs	r2, #8
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4413      	add	r3, r2
 800836e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	2b00      	cmp	r3, #0
 8008378:	d014      	beq.n	80083a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f023 0307 	bic.w	r3, r3, #7
 8008380:	3308      	adds	r3, #8
 8008382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <pvPortMalloc+0x6c>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	617b      	str	r3, [r7, #20]
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d06e      	beq.n	8008488 <pvPortMalloc+0x150>
 80083aa:	4b45      	ldr	r3, [pc, #276]	; (80084c0 <pvPortMalloc+0x188>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d869      	bhi.n	8008488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083b4:	4b43      	ldr	r3, [pc, #268]	; (80084c4 <pvPortMalloc+0x18c>)
 80083b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083b8:	4b42      	ldr	r3, [pc, #264]	; (80084c4 <pvPortMalloc+0x18c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083be:	e004      	b.n	80083ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d903      	bls.n	80083dc <pvPortMalloc+0xa4>
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1f1      	bne.n	80083c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083dc:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <pvPortMalloc+0x180>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d050      	beq.n	8008488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2208      	movs	r2, #8
 80083ec:	4413      	add	r3, r2
 80083ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	1ad2      	subs	r2, r2, r3
 8008400:	2308      	movs	r3, #8
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	429a      	cmp	r2, r3
 8008406:	d91f      	bls.n	8008448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <pvPortMalloc+0xf8>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	613b      	str	r3, [r7, #16]
}
 800842c:	bf00      	nop
 800842e:	e7fe      	b.n	800842e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	1ad2      	subs	r2, r2, r3
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008442:	69b8      	ldr	r0, [r7, #24]
 8008444:	f000 f908 	bl	8008658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008448:	4b1d      	ldr	r3, [pc, #116]	; (80084c0 <pvPortMalloc+0x188>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	4a1b      	ldr	r2, [pc, #108]	; (80084c0 <pvPortMalloc+0x188>)
 8008454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008456:	4b1a      	ldr	r3, [pc, #104]	; (80084c0 <pvPortMalloc+0x188>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	4b1b      	ldr	r3, [pc, #108]	; (80084c8 <pvPortMalloc+0x190>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	429a      	cmp	r2, r3
 8008460:	d203      	bcs.n	800846a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008462:	4b17      	ldr	r3, [pc, #92]	; (80084c0 <pvPortMalloc+0x188>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <pvPortMalloc+0x190>)
 8008468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	4b13      	ldr	r3, [pc, #76]	; (80084bc <pvPortMalloc+0x184>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	431a      	orrs	r2, r3
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800847e:	4b13      	ldr	r3, [pc, #76]	; (80084cc <pvPortMalloc+0x194>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3301      	adds	r3, #1
 8008484:	4a11      	ldr	r2, [pc, #68]	; (80084cc <pvPortMalloc+0x194>)
 8008486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008488:	f7fe fc86 	bl	8006d98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00a      	beq.n	80084ac <pvPortMalloc+0x174>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	60fb      	str	r3, [r7, #12]
}
 80084a8:	bf00      	nop
 80084aa:	e7fe      	b.n	80084aa <pvPortMalloc+0x172>
	return pvReturn;
 80084ac:	69fb      	ldr	r3, [r7, #28]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3728      	adds	r7, #40	; 0x28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	2000390c 	.word	0x2000390c
 80084bc:	20003920 	.word	0x20003920
 80084c0:	20003910 	.word	0x20003910
 80084c4:	20003904 	.word	0x20003904
 80084c8:	20003914 	.word	0x20003914
 80084cc:	20003918 	.word	0x20003918

080084d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d04d      	beq.n	800857e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084e2:	2308      	movs	r3, #8
 80084e4:	425b      	negs	r3, r3
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4413      	add	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	4b24      	ldr	r3, [pc, #144]	; (8008588 <vPortFree+0xb8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <vPortFree+0x44>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	60fb      	str	r3, [r7, #12]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <vPortFree+0x62>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60bb      	str	r3, [r7, #8]
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	4b14      	ldr	r3, [pc, #80]	; (8008588 <vPortFree+0xb8>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4013      	ands	r3, r2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01e      	beq.n	800857e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11a      	bne.n	800857e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <vPortFree+0xb8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	43db      	mvns	r3, r3
 8008552:	401a      	ands	r2, r3
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008558:	f7fe fc10 	bl	8006d7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <vPortFree+0xbc>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4413      	add	r3, r2
 8008566:	4a09      	ldr	r2, [pc, #36]	; (800858c <vPortFree+0xbc>)
 8008568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800856a:	6938      	ldr	r0, [r7, #16]
 800856c:	f000 f874 	bl	8008658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <vPortFree+0xc0>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3301      	adds	r3, #1
 8008576:	4a06      	ldr	r2, [pc, #24]	; (8008590 <vPortFree+0xc0>)
 8008578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800857a:	f7fe fc0d 	bl	8006d98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800857e:	bf00      	nop
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20003920 	.word	0x20003920
 800858c:	20003910 	.word	0x20003910
 8008590:	2000391c 	.word	0x2000391c

08008594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800859a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800859e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085a0:	4b27      	ldr	r3, [pc, #156]	; (8008640 <prvHeapInit+0xac>)
 80085a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00c      	beq.n	80085c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3307      	adds	r3, #7
 80085b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0307 	bic.w	r3, r3, #7
 80085ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	4a1f      	ldr	r2, [pc, #124]	; (8008640 <prvHeapInit+0xac>)
 80085c4:	4413      	add	r3, r2
 80085c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085cc:	4a1d      	ldr	r2, [pc, #116]	; (8008644 <prvHeapInit+0xb0>)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085d2:	4b1c      	ldr	r3, [pc, #112]	; (8008644 <prvHeapInit+0xb0>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	4413      	add	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085e0:	2208      	movs	r2, #8
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	1a9b      	subs	r3, r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0307 	bic.w	r3, r3, #7
 80085ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a15      	ldr	r2, [pc, #84]	; (8008648 <prvHeapInit+0xb4>)
 80085f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085f6:	4b14      	ldr	r3, [pc, #80]	; (8008648 <prvHeapInit+0xb4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2200      	movs	r2, #0
 80085fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085fe:	4b12      	ldr	r3, [pc, #72]	; (8008648 <prvHeapInit+0xb4>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008614:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <prvHeapInit+0xb4>)
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	4a0a      	ldr	r2, [pc, #40]	; (800864c <prvHeapInit+0xb8>)
 8008622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	4a09      	ldr	r2, [pc, #36]	; (8008650 <prvHeapInit+0xbc>)
 800862a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800862c:	4b09      	ldr	r3, [pc, #36]	; (8008654 <prvHeapInit+0xc0>)
 800862e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008632:	601a      	str	r2, [r3, #0]
}
 8008634:	bf00      	nop
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20000a24 	.word	0x20000a24
 8008644:	20003904 	.word	0x20003904
 8008648:	2000390c 	.word	0x2000390c
 800864c:	20003914 	.word	0x20003914
 8008650:	20003910 	.word	0x20003910
 8008654:	20003920 	.word	0x20003920

08008658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008660:	4b28      	ldr	r3, [pc, #160]	; (8008704 <prvInsertBlockIntoFreeList+0xac>)
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e002      	b.n	800866c <prvInsertBlockIntoFreeList+0x14>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	429a      	cmp	r2, r3
 8008674:	d8f7      	bhi.n	8008666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	4413      	add	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	429a      	cmp	r2, r3
 8008686:	d108      	bne.n	800869a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	441a      	add	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	441a      	add	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d118      	bne.n	80086e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b15      	ldr	r3, [pc, #84]	; (8008708 <prvInsertBlockIntoFreeList+0xb0>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d00d      	beq.n	80086d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	441a      	add	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	e008      	b.n	80086e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086d6:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <prvInsertBlockIntoFreeList+0xb0>)
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	e003      	b.n	80086e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d002      	beq.n	80086f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086f6:	bf00      	nop
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20003904 	.word	0x20003904
 8008708:	2000390c 	.word	0x2000390c

0800870c <__errno>:
 800870c:	4b01      	ldr	r3, [pc, #4]	; (8008714 <__errno+0x8>)
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	20000010 	.word	0x20000010

08008718 <__libc_init_array>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	4d0d      	ldr	r5, [pc, #52]	; (8008750 <__libc_init_array+0x38>)
 800871c:	4c0d      	ldr	r4, [pc, #52]	; (8008754 <__libc_init_array+0x3c>)
 800871e:	1b64      	subs	r4, r4, r5
 8008720:	10a4      	asrs	r4, r4, #2
 8008722:	2600      	movs	r6, #0
 8008724:	42a6      	cmp	r6, r4
 8008726:	d109      	bne.n	800873c <__libc_init_array+0x24>
 8008728:	4d0b      	ldr	r5, [pc, #44]	; (8008758 <__libc_init_array+0x40>)
 800872a:	4c0c      	ldr	r4, [pc, #48]	; (800875c <__libc_init_array+0x44>)
 800872c:	f000 fc8e 	bl	800904c <_init>
 8008730:	1b64      	subs	r4, r4, r5
 8008732:	10a4      	asrs	r4, r4, #2
 8008734:	2600      	movs	r6, #0
 8008736:	42a6      	cmp	r6, r4
 8008738:	d105      	bne.n	8008746 <__libc_init_array+0x2e>
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008740:	4798      	blx	r3
 8008742:	3601      	adds	r6, #1
 8008744:	e7ee      	b.n	8008724 <__libc_init_array+0xc>
 8008746:	f855 3b04 	ldr.w	r3, [r5], #4
 800874a:	4798      	blx	r3
 800874c:	3601      	adds	r6, #1
 800874e:	e7f2      	b.n	8008736 <__libc_init_array+0x1e>
 8008750:	08009228 	.word	0x08009228
 8008754:	08009228 	.word	0x08009228
 8008758:	08009228 	.word	0x08009228
 800875c:	0800922c 	.word	0x0800922c

08008760 <memcpy>:
 8008760:	440a      	add	r2, r1
 8008762:	4291      	cmp	r1, r2
 8008764:	f100 33ff 	add.w	r3, r0, #4294967295
 8008768:	d100      	bne.n	800876c <memcpy+0xc>
 800876a:	4770      	bx	lr
 800876c:	b510      	push	{r4, lr}
 800876e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008776:	4291      	cmp	r1, r2
 8008778:	d1f9      	bne.n	800876e <memcpy+0xe>
 800877a:	bd10      	pop	{r4, pc}

0800877c <memset>:
 800877c:	4402      	add	r2, r0
 800877e:	4603      	mov	r3, r0
 8008780:	4293      	cmp	r3, r2
 8008782:	d100      	bne.n	8008786 <memset+0xa>
 8008784:	4770      	bx	lr
 8008786:	f803 1b01 	strb.w	r1, [r3], #1
 800878a:	e7f9      	b.n	8008780 <memset+0x4>

0800878c <siprintf>:
 800878c:	b40e      	push	{r1, r2, r3}
 800878e:	b500      	push	{lr}
 8008790:	b09c      	sub	sp, #112	; 0x70
 8008792:	ab1d      	add	r3, sp, #116	; 0x74
 8008794:	9002      	str	r0, [sp, #8]
 8008796:	9006      	str	r0, [sp, #24]
 8008798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800879c:	4809      	ldr	r0, [pc, #36]	; (80087c4 <siprintf+0x38>)
 800879e:	9107      	str	r1, [sp, #28]
 80087a0:	9104      	str	r1, [sp, #16]
 80087a2:	4909      	ldr	r1, [pc, #36]	; (80087c8 <siprintf+0x3c>)
 80087a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a8:	9105      	str	r1, [sp, #20]
 80087aa:	6800      	ldr	r0, [r0, #0]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	a902      	add	r1, sp, #8
 80087b0:	f000 f868 	bl	8008884 <_svfiprintf_r>
 80087b4:	9b02      	ldr	r3, [sp, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	b01c      	add	sp, #112	; 0x70
 80087bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c0:	b003      	add	sp, #12
 80087c2:	4770      	bx	lr
 80087c4:	20000010 	.word	0x20000010
 80087c8:	ffff0208 	.word	0xffff0208

080087cc <__ssputs_r>:
 80087cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d0:	688e      	ldr	r6, [r1, #8]
 80087d2:	429e      	cmp	r6, r3
 80087d4:	4682      	mov	sl, r0
 80087d6:	460c      	mov	r4, r1
 80087d8:	4690      	mov	r8, r2
 80087da:	461f      	mov	r7, r3
 80087dc:	d838      	bhi.n	8008850 <__ssputs_r+0x84>
 80087de:	898a      	ldrh	r2, [r1, #12]
 80087e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087e4:	d032      	beq.n	800884c <__ssputs_r+0x80>
 80087e6:	6825      	ldr	r5, [r4, #0]
 80087e8:	6909      	ldr	r1, [r1, #16]
 80087ea:	eba5 0901 	sub.w	r9, r5, r1
 80087ee:	6965      	ldr	r5, [r4, #20]
 80087f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087f8:	3301      	adds	r3, #1
 80087fa:	444b      	add	r3, r9
 80087fc:	106d      	asrs	r5, r5, #1
 80087fe:	429d      	cmp	r5, r3
 8008800:	bf38      	it	cc
 8008802:	461d      	movcc	r5, r3
 8008804:	0553      	lsls	r3, r2, #21
 8008806:	d531      	bpl.n	800886c <__ssputs_r+0xa0>
 8008808:	4629      	mov	r1, r5
 800880a:	f000 fb55 	bl	8008eb8 <_malloc_r>
 800880e:	4606      	mov	r6, r0
 8008810:	b950      	cbnz	r0, 8008828 <__ssputs_r+0x5c>
 8008812:	230c      	movs	r3, #12
 8008814:	f8ca 3000 	str.w	r3, [sl]
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	f04f 30ff 	mov.w	r0, #4294967295
 8008824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008828:	6921      	ldr	r1, [r4, #16]
 800882a:	464a      	mov	r2, r9
 800882c:	f7ff ff98 	bl	8008760 <memcpy>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	6126      	str	r6, [r4, #16]
 800883e:	6165      	str	r5, [r4, #20]
 8008840:	444e      	add	r6, r9
 8008842:	eba5 0509 	sub.w	r5, r5, r9
 8008846:	6026      	str	r6, [r4, #0]
 8008848:	60a5      	str	r5, [r4, #8]
 800884a:	463e      	mov	r6, r7
 800884c:	42be      	cmp	r6, r7
 800884e:	d900      	bls.n	8008852 <__ssputs_r+0x86>
 8008850:	463e      	mov	r6, r7
 8008852:	6820      	ldr	r0, [r4, #0]
 8008854:	4632      	mov	r2, r6
 8008856:	4641      	mov	r1, r8
 8008858:	f000 faa8 	bl	8008dac <memmove>
 800885c:	68a3      	ldr	r3, [r4, #8]
 800885e:	1b9b      	subs	r3, r3, r6
 8008860:	60a3      	str	r3, [r4, #8]
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	4433      	add	r3, r6
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	2000      	movs	r0, #0
 800886a:	e7db      	b.n	8008824 <__ssputs_r+0x58>
 800886c:	462a      	mov	r2, r5
 800886e:	f000 fb97 	bl	8008fa0 <_realloc_r>
 8008872:	4606      	mov	r6, r0
 8008874:	2800      	cmp	r0, #0
 8008876:	d1e1      	bne.n	800883c <__ssputs_r+0x70>
 8008878:	6921      	ldr	r1, [r4, #16]
 800887a:	4650      	mov	r0, sl
 800887c:	f000 fab0 	bl	8008de0 <_free_r>
 8008880:	e7c7      	b.n	8008812 <__ssputs_r+0x46>
	...

08008884 <_svfiprintf_r>:
 8008884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	4698      	mov	r8, r3
 800888a:	898b      	ldrh	r3, [r1, #12]
 800888c:	061b      	lsls	r3, r3, #24
 800888e:	b09d      	sub	sp, #116	; 0x74
 8008890:	4607      	mov	r7, r0
 8008892:	460d      	mov	r5, r1
 8008894:	4614      	mov	r4, r2
 8008896:	d50e      	bpl.n	80088b6 <_svfiprintf_r+0x32>
 8008898:	690b      	ldr	r3, [r1, #16]
 800889a:	b963      	cbnz	r3, 80088b6 <_svfiprintf_r+0x32>
 800889c:	2140      	movs	r1, #64	; 0x40
 800889e:	f000 fb0b 	bl	8008eb8 <_malloc_r>
 80088a2:	6028      	str	r0, [r5, #0]
 80088a4:	6128      	str	r0, [r5, #16]
 80088a6:	b920      	cbnz	r0, 80088b2 <_svfiprintf_r+0x2e>
 80088a8:	230c      	movs	r3, #12
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	e0d1      	b.n	8008a56 <_svfiprintf_r+0x1d2>
 80088b2:	2340      	movs	r3, #64	; 0x40
 80088b4:	616b      	str	r3, [r5, #20]
 80088b6:	2300      	movs	r3, #0
 80088b8:	9309      	str	r3, [sp, #36]	; 0x24
 80088ba:	2320      	movs	r3, #32
 80088bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088c4:	2330      	movs	r3, #48	; 0x30
 80088c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a70 <_svfiprintf_r+0x1ec>
 80088ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ce:	f04f 0901 	mov.w	r9, #1
 80088d2:	4623      	mov	r3, r4
 80088d4:	469a      	mov	sl, r3
 80088d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088da:	b10a      	cbz	r2, 80088e0 <_svfiprintf_r+0x5c>
 80088dc:	2a25      	cmp	r2, #37	; 0x25
 80088de:	d1f9      	bne.n	80088d4 <_svfiprintf_r+0x50>
 80088e0:	ebba 0b04 	subs.w	fp, sl, r4
 80088e4:	d00b      	beq.n	80088fe <_svfiprintf_r+0x7a>
 80088e6:	465b      	mov	r3, fp
 80088e8:	4622      	mov	r2, r4
 80088ea:	4629      	mov	r1, r5
 80088ec:	4638      	mov	r0, r7
 80088ee:	f7ff ff6d 	bl	80087cc <__ssputs_r>
 80088f2:	3001      	adds	r0, #1
 80088f4:	f000 80aa 	beq.w	8008a4c <_svfiprintf_r+0x1c8>
 80088f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088fa:	445a      	add	r2, fp
 80088fc:	9209      	str	r2, [sp, #36]	; 0x24
 80088fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 80a2 	beq.w	8008a4c <_svfiprintf_r+0x1c8>
 8008908:	2300      	movs	r3, #0
 800890a:	f04f 32ff 	mov.w	r2, #4294967295
 800890e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008912:	f10a 0a01 	add.w	sl, sl, #1
 8008916:	9304      	str	r3, [sp, #16]
 8008918:	9307      	str	r3, [sp, #28]
 800891a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800891e:	931a      	str	r3, [sp, #104]	; 0x68
 8008920:	4654      	mov	r4, sl
 8008922:	2205      	movs	r2, #5
 8008924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008928:	4851      	ldr	r0, [pc, #324]	; (8008a70 <_svfiprintf_r+0x1ec>)
 800892a:	f7f7 fc59 	bl	80001e0 <memchr>
 800892e:	9a04      	ldr	r2, [sp, #16]
 8008930:	b9d8      	cbnz	r0, 800896a <_svfiprintf_r+0xe6>
 8008932:	06d0      	lsls	r0, r2, #27
 8008934:	bf44      	itt	mi
 8008936:	2320      	movmi	r3, #32
 8008938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800893c:	0711      	lsls	r1, r2, #28
 800893e:	bf44      	itt	mi
 8008940:	232b      	movmi	r3, #43	; 0x2b
 8008942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008946:	f89a 3000 	ldrb.w	r3, [sl]
 800894a:	2b2a      	cmp	r3, #42	; 0x2a
 800894c:	d015      	beq.n	800897a <_svfiprintf_r+0xf6>
 800894e:	9a07      	ldr	r2, [sp, #28]
 8008950:	4654      	mov	r4, sl
 8008952:	2000      	movs	r0, #0
 8008954:	f04f 0c0a 	mov.w	ip, #10
 8008958:	4621      	mov	r1, r4
 800895a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800895e:	3b30      	subs	r3, #48	; 0x30
 8008960:	2b09      	cmp	r3, #9
 8008962:	d94e      	bls.n	8008a02 <_svfiprintf_r+0x17e>
 8008964:	b1b0      	cbz	r0, 8008994 <_svfiprintf_r+0x110>
 8008966:	9207      	str	r2, [sp, #28]
 8008968:	e014      	b.n	8008994 <_svfiprintf_r+0x110>
 800896a:	eba0 0308 	sub.w	r3, r0, r8
 800896e:	fa09 f303 	lsl.w	r3, r9, r3
 8008972:	4313      	orrs	r3, r2
 8008974:	9304      	str	r3, [sp, #16]
 8008976:	46a2      	mov	sl, r4
 8008978:	e7d2      	b.n	8008920 <_svfiprintf_r+0x9c>
 800897a:	9b03      	ldr	r3, [sp, #12]
 800897c:	1d19      	adds	r1, r3, #4
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	9103      	str	r1, [sp, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	bfbb      	ittet	lt
 8008986:	425b      	neglt	r3, r3
 8008988:	f042 0202 	orrlt.w	r2, r2, #2
 800898c:	9307      	strge	r3, [sp, #28]
 800898e:	9307      	strlt	r3, [sp, #28]
 8008990:	bfb8      	it	lt
 8008992:	9204      	strlt	r2, [sp, #16]
 8008994:	7823      	ldrb	r3, [r4, #0]
 8008996:	2b2e      	cmp	r3, #46	; 0x2e
 8008998:	d10c      	bne.n	80089b4 <_svfiprintf_r+0x130>
 800899a:	7863      	ldrb	r3, [r4, #1]
 800899c:	2b2a      	cmp	r3, #42	; 0x2a
 800899e:	d135      	bne.n	8008a0c <_svfiprintf_r+0x188>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	1d1a      	adds	r2, r3, #4
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	9203      	str	r2, [sp, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bfb8      	it	lt
 80089ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80089b0:	3402      	adds	r4, #2
 80089b2:	9305      	str	r3, [sp, #20]
 80089b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a80 <_svfiprintf_r+0x1fc>
 80089b8:	7821      	ldrb	r1, [r4, #0]
 80089ba:	2203      	movs	r2, #3
 80089bc:	4650      	mov	r0, sl
 80089be:	f7f7 fc0f 	bl	80001e0 <memchr>
 80089c2:	b140      	cbz	r0, 80089d6 <_svfiprintf_r+0x152>
 80089c4:	2340      	movs	r3, #64	; 0x40
 80089c6:	eba0 000a 	sub.w	r0, r0, sl
 80089ca:	fa03 f000 	lsl.w	r0, r3, r0
 80089ce:	9b04      	ldr	r3, [sp, #16]
 80089d0:	4303      	orrs	r3, r0
 80089d2:	3401      	adds	r4, #1
 80089d4:	9304      	str	r3, [sp, #16]
 80089d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089da:	4826      	ldr	r0, [pc, #152]	; (8008a74 <_svfiprintf_r+0x1f0>)
 80089dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089e0:	2206      	movs	r2, #6
 80089e2:	f7f7 fbfd 	bl	80001e0 <memchr>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d038      	beq.n	8008a5c <_svfiprintf_r+0x1d8>
 80089ea:	4b23      	ldr	r3, [pc, #140]	; (8008a78 <_svfiprintf_r+0x1f4>)
 80089ec:	bb1b      	cbnz	r3, 8008a36 <_svfiprintf_r+0x1b2>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	3307      	adds	r3, #7
 80089f2:	f023 0307 	bic.w	r3, r3, #7
 80089f6:	3308      	adds	r3, #8
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089fc:	4433      	add	r3, r6
 80089fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008a00:	e767      	b.n	80088d2 <_svfiprintf_r+0x4e>
 8008a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a06:	460c      	mov	r4, r1
 8008a08:	2001      	movs	r0, #1
 8008a0a:	e7a5      	b.n	8008958 <_svfiprintf_r+0xd4>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	3401      	adds	r4, #1
 8008a10:	9305      	str	r3, [sp, #20]
 8008a12:	4619      	mov	r1, r3
 8008a14:	f04f 0c0a 	mov.w	ip, #10
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a1e:	3a30      	subs	r2, #48	; 0x30
 8008a20:	2a09      	cmp	r2, #9
 8008a22:	d903      	bls.n	8008a2c <_svfiprintf_r+0x1a8>
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d0c5      	beq.n	80089b4 <_svfiprintf_r+0x130>
 8008a28:	9105      	str	r1, [sp, #20]
 8008a2a:	e7c3      	b.n	80089b4 <_svfiprintf_r+0x130>
 8008a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a30:	4604      	mov	r4, r0
 8008a32:	2301      	movs	r3, #1
 8008a34:	e7f0      	b.n	8008a18 <_svfiprintf_r+0x194>
 8008a36:	ab03      	add	r3, sp, #12
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	462a      	mov	r2, r5
 8008a3c:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <_svfiprintf_r+0x1f8>)
 8008a3e:	a904      	add	r1, sp, #16
 8008a40:	4638      	mov	r0, r7
 8008a42:	f3af 8000 	nop.w
 8008a46:	1c42      	adds	r2, r0, #1
 8008a48:	4606      	mov	r6, r0
 8008a4a:	d1d6      	bne.n	80089fa <_svfiprintf_r+0x176>
 8008a4c:	89ab      	ldrh	r3, [r5, #12]
 8008a4e:	065b      	lsls	r3, r3, #25
 8008a50:	f53f af2c 	bmi.w	80088ac <_svfiprintf_r+0x28>
 8008a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a56:	b01d      	add	sp, #116	; 0x74
 8008a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5c:	ab03      	add	r3, sp, #12
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	462a      	mov	r2, r5
 8008a62:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <_svfiprintf_r+0x1f8>)
 8008a64:	a904      	add	r1, sp, #16
 8008a66:	4638      	mov	r0, r7
 8008a68:	f000 f87a 	bl	8008b60 <_printf_i>
 8008a6c:	e7eb      	b.n	8008a46 <_svfiprintf_r+0x1c2>
 8008a6e:	bf00      	nop
 8008a70:	080091ec 	.word	0x080091ec
 8008a74:	080091f6 	.word	0x080091f6
 8008a78:	00000000 	.word	0x00000000
 8008a7c:	080087cd 	.word	0x080087cd
 8008a80:	080091f2 	.word	0x080091f2

08008a84 <_printf_common>:
 8008a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a88:	4616      	mov	r6, r2
 8008a8a:	4699      	mov	r9, r3
 8008a8c:	688a      	ldr	r2, [r1, #8]
 8008a8e:	690b      	ldr	r3, [r1, #16]
 8008a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a94:	4293      	cmp	r3, r2
 8008a96:	bfb8      	it	lt
 8008a98:	4613      	movlt	r3, r2
 8008a9a:	6033      	str	r3, [r6, #0]
 8008a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	b10a      	cbz	r2, 8008aaa <_printf_common+0x26>
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	6033      	str	r3, [r6, #0]
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	0699      	lsls	r1, r3, #26
 8008aae:	bf42      	ittt	mi
 8008ab0:	6833      	ldrmi	r3, [r6, #0]
 8008ab2:	3302      	addmi	r3, #2
 8008ab4:	6033      	strmi	r3, [r6, #0]
 8008ab6:	6825      	ldr	r5, [r4, #0]
 8008ab8:	f015 0506 	ands.w	r5, r5, #6
 8008abc:	d106      	bne.n	8008acc <_printf_common+0x48>
 8008abe:	f104 0a19 	add.w	sl, r4, #25
 8008ac2:	68e3      	ldr	r3, [r4, #12]
 8008ac4:	6832      	ldr	r2, [r6, #0]
 8008ac6:	1a9b      	subs	r3, r3, r2
 8008ac8:	42ab      	cmp	r3, r5
 8008aca:	dc26      	bgt.n	8008b1a <_printf_common+0x96>
 8008acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ad0:	1e13      	subs	r3, r2, #0
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	2301      	movne	r3, #1
 8008ad8:	0692      	lsls	r2, r2, #26
 8008ada:	d42b      	bmi.n	8008b34 <_printf_common+0xb0>
 8008adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	47c0      	blx	r8
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d01e      	beq.n	8008b28 <_printf_common+0xa4>
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	68e5      	ldr	r5, [r4, #12]
 8008aee:	6832      	ldr	r2, [r6, #0]
 8008af0:	f003 0306 	and.w	r3, r3, #6
 8008af4:	2b04      	cmp	r3, #4
 8008af6:	bf08      	it	eq
 8008af8:	1aad      	subeq	r5, r5, r2
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	6922      	ldr	r2, [r4, #16]
 8008afe:	bf0c      	ite	eq
 8008b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b04:	2500      	movne	r5, #0
 8008b06:	4293      	cmp	r3, r2
 8008b08:	bfc4      	itt	gt
 8008b0a:	1a9b      	subgt	r3, r3, r2
 8008b0c:	18ed      	addgt	r5, r5, r3
 8008b0e:	2600      	movs	r6, #0
 8008b10:	341a      	adds	r4, #26
 8008b12:	42b5      	cmp	r5, r6
 8008b14:	d11a      	bne.n	8008b4c <_printf_common+0xc8>
 8008b16:	2000      	movs	r0, #0
 8008b18:	e008      	b.n	8008b2c <_printf_common+0xa8>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4638      	mov	r0, r7
 8008b22:	47c0      	blx	r8
 8008b24:	3001      	adds	r0, #1
 8008b26:	d103      	bne.n	8008b30 <_printf_common+0xac>
 8008b28:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b30:	3501      	adds	r5, #1
 8008b32:	e7c6      	b.n	8008ac2 <_printf_common+0x3e>
 8008b34:	18e1      	adds	r1, r4, r3
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	2030      	movs	r0, #48	; 0x30
 8008b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b3e:	4422      	add	r2, r4
 8008b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b48:	3302      	adds	r3, #2
 8008b4a:	e7c7      	b.n	8008adc <_printf_common+0x58>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	4622      	mov	r2, r4
 8008b50:	4649      	mov	r1, r9
 8008b52:	4638      	mov	r0, r7
 8008b54:	47c0      	blx	r8
 8008b56:	3001      	adds	r0, #1
 8008b58:	d0e6      	beq.n	8008b28 <_printf_common+0xa4>
 8008b5a:	3601      	adds	r6, #1
 8008b5c:	e7d9      	b.n	8008b12 <_printf_common+0x8e>
	...

08008b60 <_printf_i>:
 8008b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	7e0f      	ldrb	r7, [r1, #24]
 8008b66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b68:	2f78      	cmp	r7, #120	; 0x78
 8008b6a:	4691      	mov	r9, r2
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	469a      	mov	sl, r3
 8008b72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b76:	d807      	bhi.n	8008b88 <_printf_i+0x28>
 8008b78:	2f62      	cmp	r7, #98	; 0x62
 8008b7a:	d80a      	bhi.n	8008b92 <_printf_i+0x32>
 8008b7c:	2f00      	cmp	r7, #0
 8008b7e:	f000 80d8 	beq.w	8008d32 <_printf_i+0x1d2>
 8008b82:	2f58      	cmp	r7, #88	; 0x58
 8008b84:	f000 80a3 	beq.w	8008cce <_printf_i+0x16e>
 8008b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b90:	e03a      	b.n	8008c08 <_printf_i+0xa8>
 8008b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b96:	2b15      	cmp	r3, #21
 8008b98:	d8f6      	bhi.n	8008b88 <_printf_i+0x28>
 8008b9a:	a101      	add	r1, pc, #4	; (adr r1, 8008ba0 <_printf_i+0x40>)
 8008b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ba0:	08008bf9 	.word	0x08008bf9
 8008ba4:	08008c0d 	.word	0x08008c0d
 8008ba8:	08008b89 	.word	0x08008b89
 8008bac:	08008b89 	.word	0x08008b89
 8008bb0:	08008b89 	.word	0x08008b89
 8008bb4:	08008b89 	.word	0x08008b89
 8008bb8:	08008c0d 	.word	0x08008c0d
 8008bbc:	08008b89 	.word	0x08008b89
 8008bc0:	08008b89 	.word	0x08008b89
 8008bc4:	08008b89 	.word	0x08008b89
 8008bc8:	08008b89 	.word	0x08008b89
 8008bcc:	08008d19 	.word	0x08008d19
 8008bd0:	08008c3d 	.word	0x08008c3d
 8008bd4:	08008cfb 	.word	0x08008cfb
 8008bd8:	08008b89 	.word	0x08008b89
 8008bdc:	08008b89 	.word	0x08008b89
 8008be0:	08008d3b 	.word	0x08008d3b
 8008be4:	08008b89 	.word	0x08008b89
 8008be8:	08008c3d 	.word	0x08008c3d
 8008bec:	08008b89 	.word	0x08008b89
 8008bf0:	08008b89 	.word	0x08008b89
 8008bf4:	08008d03 	.word	0x08008d03
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	1d1a      	adds	r2, r3, #4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	602a      	str	r2, [r5, #0]
 8008c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0a3      	b.n	8008d54 <_printf_i+0x1f4>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	6829      	ldr	r1, [r5, #0]
 8008c10:	0606      	lsls	r6, r0, #24
 8008c12:	f101 0304 	add.w	r3, r1, #4
 8008c16:	d50a      	bpl.n	8008c2e <_printf_i+0xce>
 8008c18:	680e      	ldr	r6, [r1, #0]
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	2e00      	cmp	r6, #0
 8008c1e:	da03      	bge.n	8008c28 <_printf_i+0xc8>
 8008c20:	232d      	movs	r3, #45	; 0x2d
 8008c22:	4276      	negs	r6, r6
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c28:	485e      	ldr	r0, [pc, #376]	; (8008da4 <_printf_i+0x244>)
 8008c2a:	230a      	movs	r3, #10
 8008c2c:	e019      	b.n	8008c62 <_printf_i+0x102>
 8008c2e:	680e      	ldr	r6, [r1, #0]
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c36:	bf18      	it	ne
 8008c38:	b236      	sxthne	r6, r6
 8008c3a:	e7ef      	b.n	8008c1c <_printf_i+0xbc>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	6820      	ldr	r0, [r4, #0]
 8008c40:	1d19      	adds	r1, r3, #4
 8008c42:	6029      	str	r1, [r5, #0]
 8008c44:	0601      	lsls	r1, r0, #24
 8008c46:	d501      	bpl.n	8008c4c <_printf_i+0xec>
 8008c48:	681e      	ldr	r6, [r3, #0]
 8008c4a:	e002      	b.n	8008c52 <_printf_i+0xf2>
 8008c4c:	0646      	lsls	r6, r0, #25
 8008c4e:	d5fb      	bpl.n	8008c48 <_printf_i+0xe8>
 8008c50:	881e      	ldrh	r6, [r3, #0]
 8008c52:	4854      	ldr	r0, [pc, #336]	; (8008da4 <_printf_i+0x244>)
 8008c54:	2f6f      	cmp	r7, #111	; 0x6f
 8008c56:	bf0c      	ite	eq
 8008c58:	2308      	moveq	r3, #8
 8008c5a:	230a      	movne	r3, #10
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c62:	6865      	ldr	r5, [r4, #4]
 8008c64:	60a5      	str	r5, [r4, #8]
 8008c66:	2d00      	cmp	r5, #0
 8008c68:	bfa2      	ittt	ge
 8008c6a:	6821      	ldrge	r1, [r4, #0]
 8008c6c:	f021 0104 	bicge.w	r1, r1, #4
 8008c70:	6021      	strge	r1, [r4, #0]
 8008c72:	b90e      	cbnz	r6, 8008c78 <_printf_i+0x118>
 8008c74:	2d00      	cmp	r5, #0
 8008c76:	d04d      	beq.n	8008d14 <_printf_i+0x1b4>
 8008c78:	4615      	mov	r5, r2
 8008c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8008c82:	5dc7      	ldrb	r7, [r0, r7]
 8008c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c88:	4637      	mov	r7, r6
 8008c8a:	42bb      	cmp	r3, r7
 8008c8c:	460e      	mov	r6, r1
 8008c8e:	d9f4      	bls.n	8008c7a <_printf_i+0x11a>
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d10b      	bne.n	8008cac <_printf_i+0x14c>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	07de      	lsls	r6, r3, #31
 8008c98:	d508      	bpl.n	8008cac <_printf_i+0x14c>
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	6861      	ldr	r1, [r4, #4]
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	bfde      	ittt	le
 8008ca2:	2330      	movle	r3, #48	; 0x30
 8008ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cac:	1b52      	subs	r2, r2, r5
 8008cae:	6122      	str	r2, [r4, #16]
 8008cb0:	f8cd a000 	str.w	sl, [sp]
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	aa03      	add	r2, sp, #12
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4640      	mov	r0, r8
 8008cbc:	f7ff fee2 	bl	8008a84 <_printf_common>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d14c      	bne.n	8008d5e <_printf_i+0x1fe>
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc8:	b004      	add	sp, #16
 8008cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cce:	4835      	ldr	r0, [pc, #212]	; (8008da4 <_printf_i+0x244>)
 8008cd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cd4:	6829      	ldr	r1, [r5, #0]
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cdc:	6029      	str	r1, [r5, #0]
 8008cde:	061d      	lsls	r5, r3, #24
 8008ce0:	d514      	bpl.n	8008d0c <_printf_i+0x1ac>
 8008ce2:	07df      	lsls	r7, r3, #31
 8008ce4:	bf44      	itt	mi
 8008ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cea:	6023      	strmi	r3, [r4, #0]
 8008cec:	b91e      	cbnz	r6, 8008cf6 <_printf_i+0x196>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	f023 0320 	bic.w	r3, r3, #32
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	2310      	movs	r3, #16
 8008cf8:	e7b0      	b.n	8008c5c <_printf_i+0xfc>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	f043 0320 	orr.w	r3, r3, #32
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	2378      	movs	r3, #120	; 0x78
 8008d04:	4828      	ldr	r0, [pc, #160]	; (8008da8 <_printf_i+0x248>)
 8008d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d0a:	e7e3      	b.n	8008cd4 <_printf_i+0x174>
 8008d0c:	0659      	lsls	r1, r3, #25
 8008d0e:	bf48      	it	mi
 8008d10:	b2b6      	uxthmi	r6, r6
 8008d12:	e7e6      	b.n	8008ce2 <_printf_i+0x182>
 8008d14:	4615      	mov	r5, r2
 8008d16:	e7bb      	b.n	8008c90 <_printf_i+0x130>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	6826      	ldr	r6, [r4, #0]
 8008d1c:	6961      	ldr	r1, [r4, #20]
 8008d1e:	1d18      	adds	r0, r3, #4
 8008d20:	6028      	str	r0, [r5, #0]
 8008d22:	0635      	lsls	r5, r6, #24
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	d501      	bpl.n	8008d2c <_printf_i+0x1cc>
 8008d28:	6019      	str	r1, [r3, #0]
 8008d2a:	e002      	b.n	8008d32 <_printf_i+0x1d2>
 8008d2c:	0670      	lsls	r0, r6, #25
 8008d2e:	d5fb      	bpl.n	8008d28 <_printf_i+0x1c8>
 8008d30:	8019      	strh	r1, [r3, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	4615      	mov	r5, r2
 8008d38:	e7ba      	b.n	8008cb0 <_printf_i+0x150>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	1d1a      	adds	r2, r3, #4
 8008d3e:	602a      	str	r2, [r5, #0]
 8008d40:	681d      	ldr	r5, [r3, #0]
 8008d42:	6862      	ldr	r2, [r4, #4]
 8008d44:	2100      	movs	r1, #0
 8008d46:	4628      	mov	r0, r5
 8008d48:	f7f7 fa4a 	bl	80001e0 <memchr>
 8008d4c:	b108      	cbz	r0, 8008d52 <_printf_i+0x1f2>
 8008d4e:	1b40      	subs	r0, r0, r5
 8008d50:	6060      	str	r0, [r4, #4]
 8008d52:	6863      	ldr	r3, [r4, #4]
 8008d54:	6123      	str	r3, [r4, #16]
 8008d56:	2300      	movs	r3, #0
 8008d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d5c:	e7a8      	b.n	8008cb0 <_printf_i+0x150>
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	462a      	mov	r2, r5
 8008d62:	4649      	mov	r1, r9
 8008d64:	4640      	mov	r0, r8
 8008d66:	47d0      	blx	sl
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d0ab      	beq.n	8008cc4 <_printf_i+0x164>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	079b      	lsls	r3, r3, #30
 8008d70:	d413      	bmi.n	8008d9a <_printf_i+0x23a>
 8008d72:	68e0      	ldr	r0, [r4, #12]
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	4298      	cmp	r0, r3
 8008d78:	bfb8      	it	lt
 8008d7a:	4618      	movlt	r0, r3
 8008d7c:	e7a4      	b.n	8008cc8 <_printf_i+0x168>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4632      	mov	r2, r6
 8008d82:	4649      	mov	r1, r9
 8008d84:	4640      	mov	r0, r8
 8008d86:	47d0      	blx	sl
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d09b      	beq.n	8008cc4 <_printf_i+0x164>
 8008d8c:	3501      	adds	r5, #1
 8008d8e:	68e3      	ldr	r3, [r4, #12]
 8008d90:	9903      	ldr	r1, [sp, #12]
 8008d92:	1a5b      	subs	r3, r3, r1
 8008d94:	42ab      	cmp	r3, r5
 8008d96:	dcf2      	bgt.n	8008d7e <_printf_i+0x21e>
 8008d98:	e7eb      	b.n	8008d72 <_printf_i+0x212>
 8008d9a:	2500      	movs	r5, #0
 8008d9c:	f104 0619 	add.w	r6, r4, #25
 8008da0:	e7f5      	b.n	8008d8e <_printf_i+0x22e>
 8008da2:	bf00      	nop
 8008da4:	080091fd 	.word	0x080091fd
 8008da8:	0800920e 	.word	0x0800920e

08008dac <memmove>:
 8008dac:	4288      	cmp	r0, r1
 8008dae:	b510      	push	{r4, lr}
 8008db0:	eb01 0402 	add.w	r4, r1, r2
 8008db4:	d902      	bls.n	8008dbc <memmove+0x10>
 8008db6:	4284      	cmp	r4, r0
 8008db8:	4623      	mov	r3, r4
 8008dba:	d807      	bhi.n	8008dcc <memmove+0x20>
 8008dbc:	1e43      	subs	r3, r0, #1
 8008dbe:	42a1      	cmp	r1, r4
 8008dc0:	d008      	beq.n	8008dd4 <memmove+0x28>
 8008dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dca:	e7f8      	b.n	8008dbe <memmove+0x12>
 8008dcc:	4402      	add	r2, r0
 8008dce:	4601      	mov	r1, r0
 8008dd0:	428a      	cmp	r2, r1
 8008dd2:	d100      	bne.n	8008dd6 <memmove+0x2a>
 8008dd4:	bd10      	pop	{r4, pc}
 8008dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dde:	e7f7      	b.n	8008dd0 <memmove+0x24>

08008de0 <_free_r>:
 8008de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de2:	2900      	cmp	r1, #0
 8008de4:	d044      	beq.n	8008e70 <_free_r+0x90>
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	9001      	str	r0, [sp, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f1a1 0404 	sub.w	r4, r1, #4
 8008df2:	bfb8      	it	lt
 8008df4:	18e4      	addlt	r4, r4, r3
 8008df6:	f000 f913 	bl	8009020 <__malloc_lock>
 8008dfa:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <_free_r+0x94>)
 8008dfc:	9801      	ldr	r0, [sp, #4]
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	b933      	cbnz	r3, 8008e10 <_free_r+0x30>
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	6014      	str	r4, [r2, #0]
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e0c:	f000 b90e 	b.w	800902c <__malloc_unlock>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d908      	bls.n	8008e26 <_free_r+0x46>
 8008e14:	6825      	ldr	r5, [r4, #0]
 8008e16:	1961      	adds	r1, r4, r5
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf01      	itttt	eq
 8008e1c:	6819      	ldreq	r1, [r3, #0]
 8008e1e:	685b      	ldreq	r3, [r3, #4]
 8008e20:	1949      	addeq	r1, r1, r5
 8008e22:	6021      	streq	r1, [r4, #0]
 8008e24:	e7ed      	b.n	8008e02 <_free_r+0x22>
 8008e26:	461a      	mov	r2, r3
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	b10b      	cbz	r3, 8008e30 <_free_r+0x50>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d9fa      	bls.n	8008e26 <_free_r+0x46>
 8008e30:	6811      	ldr	r1, [r2, #0]
 8008e32:	1855      	adds	r5, r2, r1
 8008e34:	42a5      	cmp	r5, r4
 8008e36:	d10b      	bne.n	8008e50 <_free_r+0x70>
 8008e38:	6824      	ldr	r4, [r4, #0]
 8008e3a:	4421      	add	r1, r4
 8008e3c:	1854      	adds	r4, r2, r1
 8008e3e:	42a3      	cmp	r3, r4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	d1e0      	bne.n	8008e06 <_free_r+0x26>
 8008e44:	681c      	ldr	r4, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	6053      	str	r3, [r2, #4]
 8008e4a:	4421      	add	r1, r4
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	e7da      	b.n	8008e06 <_free_r+0x26>
 8008e50:	d902      	bls.n	8008e58 <_free_r+0x78>
 8008e52:	230c      	movs	r3, #12
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	e7d6      	b.n	8008e06 <_free_r+0x26>
 8008e58:	6825      	ldr	r5, [r4, #0]
 8008e5a:	1961      	adds	r1, r4, r5
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf04      	itt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	bf04      	itt	eq
 8008e68:	1949      	addeq	r1, r1, r5
 8008e6a:	6021      	streq	r1, [r4, #0]
 8008e6c:	6054      	str	r4, [r2, #4]
 8008e6e:	e7ca      	b.n	8008e06 <_free_r+0x26>
 8008e70:	b003      	add	sp, #12
 8008e72:	bd30      	pop	{r4, r5, pc}
 8008e74:	20003924 	.word	0x20003924

08008e78 <sbrk_aligned>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4e0e      	ldr	r6, [pc, #56]	; (8008eb4 <sbrk_aligned+0x3c>)
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	6831      	ldr	r1, [r6, #0]
 8008e80:	4605      	mov	r5, r0
 8008e82:	b911      	cbnz	r1, 8008e8a <sbrk_aligned+0x12>
 8008e84:	f000 f8bc 	bl	8009000 <_sbrk_r>
 8008e88:	6030      	str	r0, [r6, #0]
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f000 f8b7 	bl	8009000 <_sbrk_r>
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	d00a      	beq.n	8008eac <sbrk_aligned+0x34>
 8008e96:	1cc4      	adds	r4, r0, #3
 8008e98:	f024 0403 	bic.w	r4, r4, #3
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d007      	beq.n	8008eb0 <sbrk_aligned+0x38>
 8008ea0:	1a21      	subs	r1, r4, r0
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f8ac 	bl	8009000 <_sbrk_r>
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d101      	bne.n	8008eb0 <sbrk_aligned+0x38>
 8008eac:	f04f 34ff 	mov.w	r4, #4294967295
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	20003928 	.word	0x20003928

08008eb8 <_malloc_r>:
 8008eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebc:	1ccd      	adds	r5, r1, #3
 8008ebe:	f025 0503 	bic.w	r5, r5, #3
 8008ec2:	3508      	adds	r5, #8
 8008ec4:	2d0c      	cmp	r5, #12
 8008ec6:	bf38      	it	cc
 8008ec8:	250c      	movcc	r5, #12
 8008eca:	2d00      	cmp	r5, #0
 8008ecc:	4607      	mov	r7, r0
 8008ece:	db01      	blt.n	8008ed4 <_malloc_r+0x1c>
 8008ed0:	42a9      	cmp	r1, r5
 8008ed2:	d905      	bls.n	8008ee0 <_malloc_r+0x28>
 8008ed4:	230c      	movs	r3, #12
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	2600      	movs	r6, #0
 8008eda:	4630      	mov	r0, r6
 8008edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee0:	4e2e      	ldr	r6, [pc, #184]	; (8008f9c <_malloc_r+0xe4>)
 8008ee2:	f000 f89d 	bl	8009020 <__malloc_lock>
 8008ee6:	6833      	ldr	r3, [r6, #0]
 8008ee8:	461c      	mov	r4, r3
 8008eea:	bb34      	cbnz	r4, 8008f3a <_malloc_r+0x82>
 8008eec:	4629      	mov	r1, r5
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f7ff ffc2 	bl	8008e78 <sbrk_aligned>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	d14d      	bne.n	8008f96 <_malloc_r+0xde>
 8008efa:	6834      	ldr	r4, [r6, #0]
 8008efc:	4626      	mov	r6, r4
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	d140      	bne.n	8008f84 <_malloc_r+0xcc>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	4631      	mov	r1, r6
 8008f06:	4638      	mov	r0, r7
 8008f08:	eb04 0803 	add.w	r8, r4, r3
 8008f0c:	f000 f878 	bl	8009000 <_sbrk_r>
 8008f10:	4580      	cmp	r8, r0
 8008f12:	d13a      	bne.n	8008f8a <_malloc_r+0xd2>
 8008f14:	6821      	ldr	r1, [r4, #0]
 8008f16:	3503      	adds	r5, #3
 8008f18:	1a6d      	subs	r5, r5, r1
 8008f1a:	f025 0503 	bic.w	r5, r5, #3
 8008f1e:	3508      	adds	r5, #8
 8008f20:	2d0c      	cmp	r5, #12
 8008f22:	bf38      	it	cc
 8008f24:	250c      	movcc	r5, #12
 8008f26:	4629      	mov	r1, r5
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ffa5 	bl	8008e78 <sbrk_aligned>
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d02b      	beq.n	8008f8a <_malloc_r+0xd2>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	442b      	add	r3, r5
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	e00e      	b.n	8008f58 <_malloc_r+0xa0>
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	1b52      	subs	r2, r2, r5
 8008f3e:	d41e      	bmi.n	8008f7e <_malloc_r+0xc6>
 8008f40:	2a0b      	cmp	r2, #11
 8008f42:	d916      	bls.n	8008f72 <_malloc_r+0xba>
 8008f44:	1961      	adds	r1, r4, r5
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	6025      	str	r5, [r4, #0]
 8008f4a:	bf18      	it	ne
 8008f4c:	6059      	strne	r1, [r3, #4]
 8008f4e:	6863      	ldr	r3, [r4, #4]
 8008f50:	bf08      	it	eq
 8008f52:	6031      	streq	r1, [r6, #0]
 8008f54:	5162      	str	r2, [r4, r5]
 8008f56:	604b      	str	r3, [r1, #4]
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f104 060b 	add.w	r6, r4, #11
 8008f5e:	f000 f865 	bl	800902c <__malloc_unlock>
 8008f62:	f026 0607 	bic.w	r6, r6, #7
 8008f66:	1d23      	adds	r3, r4, #4
 8008f68:	1af2      	subs	r2, r6, r3
 8008f6a:	d0b6      	beq.n	8008eda <_malloc_r+0x22>
 8008f6c:	1b9b      	subs	r3, r3, r6
 8008f6e:	50a3      	str	r3, [r4, r2]
 8008f70:	e7b3      	b.n	8008eda <_malloc_r+0x22>
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	bf0c      	ite	eq
 8008f78:	6032      	streq	r2, [r6, #0]
 8008f7a:	605a      	strne	r2, [r3, #4]
 8008f7c:	e7ec      	b.n	8008f58 <_malloc_r+0xa0>
 8008f7e:	4623      	mov	r3, r4
 8008f80:	6864      	ldr	r4, [r4, #4]
 8008f82:	e7b2      	b.n	8008eea <_malloc_r+0x32>
 8008f84:	4634      	mov	r4, r6
 8008f86:	6876      	ldr	r6, [r6, #4]
 8008f88:	e7b9      	b.n	8008efe <_malloc_r+0x46>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	603b      	str	r3, [r7, #0]
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f000 f84c 	bl	800902c <__malloc_unlock>
 8008f94:	e7a1      	b.n	8008eda <_malloc_r+0x22>
 8008f96:	6025      	str	r5, [r4, #0]
 8008f98:	e7de      	b.n	8008f58 <_malloc_r+0xa0>
 8008f9a:	bf00      	nop
 8008f9c:	20003924 	.word	0x20003924

08008fa0 <_realloc_r>:
 8008fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa4:	4680      	mov	r8, r0
 8008fa6:	4614      	mov	r4, r2
 8008fa8:	460e      	mov	r6, r1
 8008faa:	b921      	cbnz	r1, 8008fb6 <_realloc_r+0x16>
 8008fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	f7ff bf81 	b.w	8008eb8 <_malloc_r>
 8008fb6:	b92a      	cbnz	r2, 8008fc4 <_realloc_r+0x24>
 8008fb8:	f7ff ff12 	bl	8008de0 <_free_r>
 8008fbc:	4625      	mov	r5, r4
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc4:	f000 f838 	bl	8009038 <_malloc_usable_size_r>
 8008fc8:	4284      	cmp	r4, r0
 8008fca:	4607      	mov	r7, r0
 8008fcc:	d802      	bhi.n	8008fd4 <_realloc_r+0x34>
 8008fce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fd2:	d812      	bhi.n	8008ffa <_realloc_r+0x5a>
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	f7ff ff6e 	bl	8008eb8 <_malloc_r>
 8008fdc:	4605      	mov	r5, r0
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d0ed      	beq.n	8008fbe <_realloc_r+0x1e>
 8008fe2:	42bc      	cmp	r4, r7
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	bf28      	it	cs
 8008fea:	463a      	movcs	r2, r7
 8008fec:	f7ff fbb8 	bl	8008760 <memcpy>
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	f7ff fef4 	bl	8008de0 <_free_r>
 8008ff8:	e7e1      	b.n	8008fbe <_realloc_r+0x1e>
 8008ffa:	4635      	mov	r5, r6
 8008ffc:	e7df      	b.n	8008fbe <_realloc_r+0x1e>
	...

08009000 <_sbrk_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d06      	ldr	r5, [pc, #24]	; (800901c <_sbrk_r+0x1c>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	f7f8 fb04 	bl	8001618 <_sbrk>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_sbrk_r+0x1a>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_sbrk_r+0x1a>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	2000392c 	.word	0x2000392c

08009020 <__malloc_lock>:
 8009020:	4801      	ldr	r0, [pc, #4]	; (8009028 <__malloc_lock+0x8>)
 8009022:	f000 b811 	b.w	8009048 <__retarget_lock_acquire_recursive>
 8009026:	bf00      	nop
 8009028:	20003930 	.word	0x20003930

0800902c <__malloc_unlock>:
 800902c:	4801      	ldr	r0, [pc, #4]	; (8009034 <__malloc_unlock+0x8>)
 800902e:	f000 b80c 	b.w	800904a <__retarget_lock_release_recursive>
 8009032:	bf00      	nop
 8009034:	20003930 	.word	0x20003930

08009038 <_malloc_usable_size_r>:
 8009038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800903c:	1f18      	subs	r0, r3, #4
 800903e:	2b00      	cmp	r3, #0
 8009040:	bfbc      	itt	lt
 8009042:	580b      	ldrlt	r3, [r1, r0]
 8009044:	18c0      	addlt	r0, r0, r3
 8009046:	4770      	bx	lr

08009048 <__retarget_lock_acquire_recursive>:
 8009048:	4770      	bx	lr

0800904a <__retarget_lock_release_recursive>:
 800904a:	4770      	bx	lr

0800904c <_init>:
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904e:	bf00      	nop
 8009050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009052:	bc08      	pop	{r3}
 8009054:	469e      	mov	lr, r3
 8009056:	4770      	bx	lr

08009058 <_fini>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	bf00      	nop
 800905c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905e:	bc08      	pop	{r3}
 8009060:	469e      	mov	lr, r3
 8009062:	4770      	bx	lr
