
Robot_Vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800ced0  0800ced0  0001ced0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d288  0800d288  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800d288  0800d288  0001d288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d290  0800d290  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d290  0800d290  0001d290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d294  0800d294  0001d294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003960  20000074  0800d30c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039d4  0800d30c  000239d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9da  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003976  00000000  00000000  0003ba7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  0003f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001688  00000000  00000000  00040bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a870  00000000  00000000  00042258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6b8  00000000  00000000  0005cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a637f  00000000  00000000  00079180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f4ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007224  00000000  00000000  0011f550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ceb4 	.word	0x0800ceb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800ceb4 	.word	0x0800ceb4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <vApplicationGetIdleTaskMemory+0x30>)
 8000ed2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000090 	.word	0x20000090
 8000eec:	200000ec 	.word	0x200000ec

08000ef0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <vApplicationGetTimerTaskMemory+0x2c>)
 8000f00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <vApplicationGetTimerTaskMemory+0x30>)
 8000f06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200002ec 	.word	0x200002ec
 8000f20:	20000348 	.word	0x20000348

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b0ba      	sub	sp, #232	; 0xe8
 8000f28:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	buffer.x = 50;
 8000f2a:	4b8c      	ldr	r3, [pc, #560]	; (800115c <main+0x238>)
 8000f2c:	2232      	movs	r2, #50	; 0x32
 8000f2e:	61da      	str	r2, [r3, #28]
    buffer.y = 50;
 8000f30:	4b8a      	ldr	r3, [pc, #552]	; (800115c <main+0x238>)
 8000f32:	2232      	movs	r2, #50	; 0x32
 8000f34:	621a      	str	r2, [r3, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f001 fda7 	bl	8002a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f947 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fbb7 	bl	80016b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f42:	f000 fb6b 	bl	800161c <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000f46:	f000 fad3 	bl	80014f0 <MX_TIM10_Init>
  MX_DMA_Init();
 8000f4a:	f000 fb97 	bl	800167c <MX_DMA_Init>
  MX_TIM11_Init();
 8000f4e:	f000 fb17 	bl	8001580 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000f52:	f000 f9a5 	bl	80012a0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f56:	f000 fa33 	bl	80013c0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f5a:	f000 fa03 	bl	8001364 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_DeInit(&hi2c1);
 8000f5e:	4880      	ldr	r0, [pc, #512]	; (8001160 <main+0x23c>)
 8000f60:	f003 f8fe 	bl	8004160 <HAL_I2C_DeInit>
  HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 8000f64:	2100      	movs	r1, #0
 8000f66:	487f      	ldr	r0, [pc, #508]	; (8001164 <main+0x240>)
 8000f68:	f004 fff6 	bl	8005f58 <HAL_TIM_IC_Start_IT>
  GPIOC->ODR |= GPIO_ODR_OD10;
 8000f6c:	4b7e      	ldr	r3, [pc, #504]	; (8001168 <main+0x244>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	4a7d      	ldr	r2, [pc, #500]	; (8001168 <main+0x244>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD12;
 8000f78:	4b7b      	ldr	r3, [pc, #492]	; (8001168 <main+0x244>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a7a      	ldr	r2, [pc, #488]	; (8001168 <main+0x244>)
 8000f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f82:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD11;
 8000f84:	4b78      	ldr	r3, [pc, #480]	; (8001168 <main+0x244>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	4a77      	ldr	r2, [pc, #476]	; (8001168 <main+0x244>)
 8000f8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f8e:	6153      	str	r3, [r2, #20]
  GPIOD->ODR |= GPIO_ODR_OD2;
 8000f90:	4b76      	ldr	r3, [pc, #472]	; (800116c <main+0x248>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	4a75      	ldr	r2, [pc, #468]	; (800116c <main+0x248>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6153      	str	r3, [r2, #20]
  GPIOB->ODR |= GPIO_ODR_OD15;
 8000f9c:	4b74      	ldr	r3, [pc, #464]	; (8001170 <main+0x24c>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	4a73      	ldr	r2, [pc, #460]	; (8001170 <main+0x24c>)
 8000fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa6:	6153      	str	r3, [r2, #20]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa8:	4872      	ldr	r0, [pc, #456]	; (8001174 <main+0x250>)
 8000faa:	f002 fa83 	bl	80034b4 <HAL_DMA_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <main+0x94>
  {
    Error_Handler();
 8000fb4:	f000 ff33 	bl	8001e1e <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1,DMA_Handle,hdma_adc1);
 8000fb8:	4b6f      	ldr	r3, [pc, #444]	; (8001178 <main+0x254>)
 8000fba:	4a6e      	ldr	r2, [pc, #440]	; (8001174 <main+0x250>)
 8000fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8000fbe:	4b6d      	ldr	r3, [pc, #436]	; (8001174 <main+0x250>)
 8000fc0:	4a6d      	ldr	r2, [pc, #436]	; (8001178 <main+0x254>)
 8000fc2:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer.encod_data, sizeof(buffer.encod_data));
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	496d      	ldr	r1, [pc, #436]	; (800117c <main+0x258>)
 8000fc8:	486b      	ldr	r0, [pc, #428]	; (8001178 <main+0x254>)
 8000fca:	f001 fde3 	bl	8002b94 <HAL_ADC_Start_DMA>

  SCB->CCR |= (1<<1); //Bit 1 USERSETMPEND Enables unprivileged software access to the STIR, see Software trigger interrupt register (NVIC_STIR)
 8000fce:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <main+0x25c>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a6b      	ldr	r2, [pc, #428]	; (8001180 <main+0x25c>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	6153      	str	r3, [r2, #20]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  buffer.xTimer1_ultrs = xTimerCreate("Timer ultrs trigger", pdMS_TO_TICKS( 40 ), pdTRUE, ( void * ) 0, vCallbackFunctionTimer1);
 8000fda:	4b6a      	ldr	r3, [pc, #424]	; (8001184 <main+0x260>)
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2128      	movs	r1, #40	; 0x28
 8000fe4:	4868      	ldr	r0, [pc, #416]	; (8001188 <main+0x264>)
 8000fe6:	f008 ff27 	bl	8009e38 <xTimerCreate>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a5b      	ldr	r2, [pc, #364]	; (800115c <main+0x238>)
 8000fee:	6093      	str	r3, [r2, #8]
  xTimerStart(buffer.xTimer1_ultrs, portMAX_DELAY);
 8000ff0:	4b5a      	ldr	r3, [pc, #360]	; (800115c <main+0x238>)
 8000ff2:	689c      	ldr	r4, [r3, #8]
 8000ff4:	f008 fa9c 	bl	8009530 <xTaskGetTickCount>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2300      	movs	r3, #0
 8001002:	2101      	movs	r1, #1
 8001004:	4620      	mov	r0, r4
 8001006:	f008 ff73 	bl	8009ef0 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  buffer.xQueue1_ultrs = xQueueCreate(10, sizeof(uint16_t));
 800100a:	2200      	movs	r2, #0
 800100c:	2102      	movs	r1, #2
 800100e:	200a      	movs	r0, #10
 8001010:	f007 fa92 	bl	8008538 <xQueueGenericCreate>
 8001014:	4603      	mov	r3, r0
 8001016:	4a51      	ldr	r2, [pc, #324]	; (800115c <main+0x238>)
 8001018:	6013      	str	r3, [r2, #0]
  buffer.xQueue2_instr4m = xQueueCreate(40, sizeof(uint8_t));
 800101a:	2200      	movs	r2, #0
 800101c:	2101      	movs	r1, #1
 800101e:	2028      	movs	r0, #40	; 0x28
 8001020:	f007 fa8a 	bl	8008538 <xQueueGenericCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a4d      	ldr	r2, [pc, #308]	; (800115c <main+0x238>)
 8001028:	6193      	str	r3, [r2, #24]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UltrasonicDistance */
  osThreadDef(UltrasonicDistance, ultrasonic_dis, osPriorityNormal, 0, 128);
 800102a:	4b58      	ldr	r3, [pc, #352]	; (800118c <main+0x268>)
 800102c:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001030:	461d      	mov	r5, r3
 8001032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001036:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UltrasonicDistanceHandle = osThreadCreate(osThread(UltrasonicDistance), NULL);
 800103e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f007 f882 	bl	800814e <osThreadCreate>
 800104a:	4603      	mov	r3, r0
 800104c:	4a50      	ldr	r2, [pc, #320]	; (8001190 <main+0x26c>)
 800104e:	6013      	str	r3, [r2, #0]

  /* definition and creation of LineTracking */
  osThreadDef(LineTracking, line_tracking, osPriorityNormal, 0, 128);
 8001050:	4b50      	ldr	r3, [pc, #320]	; (8001194 <main+0x270>)
 8001052:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001056:	461d      	mov	r5, r3
 8001058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001060:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LineTrackingHandle = osThreadCreate(osThread(LineTracking), NULL);
 8001064:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f007 f86f 	bl	800814e <osThreadCreate>
 8001070:	4603      	mov	r3, r0
 8001072:	4a49      	ldr	r2, [pc, #292]	; (8001198 <main+0x274>)
 8001074:	6013      	str	r3, [r2, #0]

  /* definition and creation of LimitSwitch */
  osThreadDef(LimitSwitch, limit_switch, osPriorityNormal, 0, 128);
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <main+0x278>)
 8001078:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800107c:	461d      	mov	r5, r3
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LimitSwitchHandle = osThreadCreate(osThread(LimitSwitch), NULL);
 800108a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f007 f85c 	bl	800814e <osThreadCreate>
 8001096:	4603      	mov	r3, r0
 8001098:	4a41      	ldr	r2, [pc, #260]	; (80011a0 <main+0x27c>)
 800109a:	6013      	str	r3, [r2, #0]

  /* definition and creation of InfraredMotion */
  osThreadDef(InfraredMotion, infrared_motion, osPriorityNormal, 0, 128);
 800109c:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <main+0x280>)
 800109e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InfraredMotionHandle = osThreadCreate(osThread(InfraredMotion), NULL);
 80010b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f007 f849 	bl	800814e <osThreadCreate>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a3a      	ldr	r2, [pc, #232]	; (80011a8 <main+0x284>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Accelerometer */
  osThreadDef(Accelerometer, accelerometer, osPriorityNormal, 0, 160);
 80010c2:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <main+0x288>)
 80010c4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80010c8:	461d      	mov	r5, r3
 80010ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelerometerHandle = osThreadCreate(osThread(Accelerometer), NULL);
 80010d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f007 f836 	bl	800814e <osThreadCreate>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a32      	ldr	r2, [pc, #200]	; (80011b0 <main+0x28c>)
 80010e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motors */
  osThreadDef(Motors, motors, osPriorityNormal, 0, 400);
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <main+0x290>)
 80010ea:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80010ee:	461d      	mov	r5, r3
 80010f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorsHandle = osThreadCreate(osThread(Motors), NULL);
 80010fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f007 f823 	bl	800814e <osThreadCreate>
 8001108:	4603      	mov	r3, r0
 800110a:	4a2b      	ldr	r2, [pc, #172]	; (80011b8 <main+0x294>)
 800110c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Encoders */
  osThreadDef(Encoders, encoders, osPriorityNormal, 0, 200);
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <main+0x298>)
 8001110:	f107 041c 	add.w	r4, r7, #28
 8001114:	461d      	mov	r5, r3
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncodersHandle = osThreadCreate(osThread(Encoders), NULL);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f007 f810 	bl	800814e <osThreadCreate>
 800112e:	4603      	mov	r3, r0
 8001130:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <main+0x29c>)
 8001132:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_task */
  osThreadDef(UART_task, uart_task, osPriorityNormal, 0, 128);
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <main+0x2a0>)
 8001136:	463c      	mov	r4, r7
 8001138:	461d      	mov	r5, r3
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_taskHandle = osThreadCreate(osThread(UART_task), NULL);
 8001146:	463b      	mov	r3, r7
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f006 ffff 	bl	800814e <osThreadCreate>
 8001150:	4603      	mov	r3, r0
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <main+0x2a4>)
 8001154:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001156:	f006 fff3 	bl	8008140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115a:	e7fe      	b.n	800115a <main+0x236>
 800115c:	20000780 	.word	0x20000780
 8001160:	200005f0 	.word	0x200005f0
 8001164:	2000068c 	.word	0x2000068c
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40020400 	.word	0x40020400
 8001174:	20000590 	.word	0x20000590
 8001178:	20000548 	.word	0x20000548
 800117c:	200007a8 	.word	0x200007a8
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	08001895 	.word	0x08001895
 8001188:	0800cf40 	.word	0x0800cf40
 800118c:	0800cf54 	.word	0x0800cf54
 8001190:	20000760 	.word	0x20000760
 8001194:	0800cf70 	.word	0x0800cf70
 8001198:	20000764 	.word	0x20000764
 800119c:	0800cf8c 	.word	0x0800cf8c
 80011a0:	20000768 	.word	0x20000768
 80011a4:	0800cfa8 	.word	0x0800cfa8
 80011a8:	2000076c 	.word	0x2000076c
 80011ac:	0800cfc4 	.word	0x0800cfc4
 80011b0:	20000770 	.word	0x20000770
 80011b4:	0800cfe0 	.word	0x0800cfe0
 80011b8:	20000774 	.word	0x20000774
 80011bc:	0800cffc 	.word	0x0800cffc
 80011c0:	20000778 	.word	0x20000778
 80011c4:	0800d018 	.word	0x0800d018
 80011c8:	2000077c 	.word	0x2000077c

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2230      	movs	r2, #48	; 0x30
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f009 fdfe 	bl	800addc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <SystemClock_Config+0xcc>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <SystemClock_Config+0xcc>)
 80011fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <SystemClock_Config+0xcc>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <SystemClock_Config+0xd0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001218:	4a20      	ldr	r2, [pc, #128]	; (800129c <SystemClock_Config+0xd0>)
 800121a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <SystemClock_Config+0xd0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122c:	2302      	movs	r3, #2
 800122e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001234:	2310      	movs	r3, #16
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2302      	movs	r3, #2
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123c:	2300      	movs	r3, #0
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001240:	2308      	movs	r3, #8
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001244:	2354      	movs	r3, #84	; 0x54
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800124c:	2304      	movs	r3, #4
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0320 	add.w	r3, r7, #32
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fe2f 	bl	8004eb8 <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001260:	f000 fddd 	bl	8001e1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2302      	movs	r3, #2
 800126a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	2102      	movs	r1, #2
 8001280:	4618      	mov	r0, r3
 8001282:	f004 f891 	bl	80053a8 <HAL_RCC_ClockConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800128c:	f000 fdc7 	bl	8001e1e <Error_Handler>
  }
}
 8001290:	bf00      	nop
 8001292:	3750      	adds	r7, #80	; 0x50
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012b4:	4a29      	ldr	r2, [pc, #164]	; (800135c <MX_ADC1_Init+0xbc>)
 80012b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012e4:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <MX_ADC1_Init+0xc0>)
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_ADC1_Init+0xb8>)
 80012fe:	2201      	movs	r2, #1
 8001300:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001302:	4815      	ldr	r0, [pc, #84]	; (8001358 <MX_ADC1_Init+0xb8>)
 8001304:	f001 fc02 	bl	8002b0c <HAL_ADC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800130e:	f000 fd86 	bl	8001e1e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001316:	2301      	movs	r3, #1
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_ADC1_Init+0xb8>)
 8001324:	f001 fd44 	bl	8002db0 <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800132e:	f000 fd76 	bl	8001e1e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001332:	2301      	movs	r3, #1
 8001334:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001336:	2302      	movs	r3, #2
 8001338:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_ADC1_Init+0xb8>)
 8001340:	f001 fd36 	bl	8002db0 <HAL_ADC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800134a:	f000 fd68 	bl	8001e1e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000548 	.word	0x20000548
 800135c:	40012000 	.word	0x40012000
 8001360:	0f000001 	.word	0x0f000001

08001364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_I2C1_Init+0x50>)
 800136a:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <MX_I2C1_Init+0x54>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_I2C1_Init+0x50>)
 8001370:	4a12      	ldr	r2, [pc, #72]	; (80013bc <MX_I2C1_Init+0x58>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_I2C1_Init+0x50>)
 8001382:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <MX_I2C1_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_I2C1_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_I2C1_Init+0x50>)
 80013a2:	f002 fd99 	bl	8003ed8 <HAL_I2C_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013ac:	f000 fd37 	bl	8001e1e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200005f0 	.word	0x200005f0
 80013b8:	40005400 	.word	0x40005400
 80013bc:	000186a0 	.word	0x000186a0

080013c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	; 0x38
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	f107 0320 	add.w	r3, r7, #32
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]
 80013ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013f0:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <MX_TIM3_Init+0x128>)
 80013f2:	4a3e      	ldr	r2, [pc, #248]	; (80014ec <MX_TIM3_Init+0x12c>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80013f6:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <MX_TIM3_Init+0x128>)
 80013f8:	2254      	movs	r2, #84	; 0x54
 80013fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <MX_TIM3_Init+0x128>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <MX_TIM3_Init+0x128>)
 8001404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001408:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <MX_TIM3_Init+0x128>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001410:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <MX_TIM3_Init+0x128>)
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001416:	4834      	ldr	r0, [pc, #208]	; (80014e8 <MX_TIM3_Init+0x128>)
 8001418:	f004 f9d8 	bl	80057cc <HAL_TIM_Base_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001422:	f000 fcfc 	bl	8001e1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800142c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001430:	4619      	mov	r1, r3
 8001432:	482d      	ldr	r0, [pc, #180]	; (80014e8 <MX_TIM3_Init+0x128>)
 8001434:	f005 f910 	bl	8006658 <HAL_TIM_ConfigClockSource>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800143e:	f000 fcee 	bl	8001e1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001442:	4829      	ldr	r0, [pc, #164]	; (80014e8 <MX_TIM3_Init+0x128>)
 8001444:	f004 fa74 	bl	8005930 <HAL_TIM_PWM_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800144e:	f000 fce6 	bl	8001e1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	4619      	mov	r1, r3
 8001460:	4821      	ldr	r0, [pc, #132]	; (80014e8 <MX_TIM3_Init+0x128>)
 8001462:	f005 fdbf 	bl	8006fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800146c:	f000 fcd7 	bl	8001e1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001470:	2370      	movs	r3, #112	; 0x70
 8001472:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	4818      	ldr	r0, [pc, #96]	; (80014e8 <MX_TIM3_Init+0x128>)
 8001488:	f005 f824 	bl	80064d4 <HAL_TIM_PWM_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001492:	f000 fcc4 	bl	8001e1e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2204      	movs	r2, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4812      	ldr	r0, [pc, #72]	; (80014e8 <MX_TIM3_Init+0x128>)
 800149e:	f005 f819 	bl	80064d4 <HAL_TIM_PWM_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014a8:	f000 fcb9 	bl	8001e1e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2208      	movs	r2, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_TIM3_Init+0x128>)
 80014b4:	f005 f80e 	bl	80064d4 <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80014be:	f000 fcae 	bl	8001e1e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	220c      	movs	r2, #12
 80014c6:	4619      	mov	r1, r3
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM3_Init+0x128>)
 80014ca:	f005 f803 	bl	80064d4 <HAL_TIM_PWM_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80014d4:	f000 fca3 	bl	8001e1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM3_Init+0x128>)
 80014da:	f001 f8df 	bl	800269c <HAL_TIM_MspPostInit>

}
 80014de:	bf00      	nop
 80014e0:	3738      	adds	r7, #56	; 0x38
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000644 	.word	0x20000644
 80014ec:	40000400 	.word	0x40000400

080014f0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_TIM10_Init+0x88>)
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <MX_TIM10_Init+0x8c>)
 8001506:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 194;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_TIM10_Init+0x88>)
 800150a:	22c2      	movs	r2, #194	; 0xc2
 800150c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_TIM10_Init+0x88>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_TIM10_Init+0x88>)
 8001516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_TIM10_Init+0x88>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_TIM10_Init+0x88>)
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001528:	4813      	ldr	r0, [pc, #76]	; (8001578 <MX_TIM10_Init+0x88>)
 800152a:	f004 f94f 	bl	80057cc <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8001534:	f000 fc73 	bl	8001e1e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <MX_TIM10_Init+0x88>)
 800153a:	f004 fcb3 	bl	8005ea4 <HAL_TIM_IC_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8001544:	f000 fc6b 	bl	8001e1e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001548:	230a      	movs	r3, #10
 800154a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800154c:	2301      	movs	r3, #1
 800154e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <MX_TIM10_Init+0x88>)
 8001560:	f004 ff1c 	bl	800639c <HAL_TIM_IC_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 800156a:	f000 fc58 	bl	8001e1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000068c 	.word	0x2000068c
 800157c:	40014400 	.word	0x40014400

08001580 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <MX_TIM11_Init+0x94>)
 800159a:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <MX_TIM11_Init+0x98>)
 800159c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 31;
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_TIM11_Init+0x94>)
 80015a0:	221f      	movs	r2, #31
 80015a2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <MX_TIM11_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_TIM11_Init+0x94>)
 80015ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80015b0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_TIM11_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_TIM11_Init+0x94>)
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80015be:	4815      	ldr	r0, [pc, #84]	; (8001614 <MX_TIM11_Init+0x94>)
 80015c0:	f004 f904 	bl	80057cc <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80015ca:	f000 fc28 	bl	8001e1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80015ce:	4811      	ldr	r0, [pc, #68]	; (8001614 <MX_TIM11_Init+0x94>)
 80015d0:	f004 f9ae 	bl	8005930 <HAL_TIM_PWM_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80015da:	f000 fc20 	bl	8001e1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015de:	2360      	movs	r3, #96	; 0x60
 80015e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 80015e2:	2314      	movs	r3, #20
 80015e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <MX_TIM11_Init+0x94>)
 80015f6:	f004 ff6d 	bl	80064d4 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001600:	f000 fc0d 	bl	8001e1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <MX_TIM11_Init+0x94>)
 8001606:	f001 f849 	bl	800269c <HAL_TIM_MspPostInit>

}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200006d4 	.word	0x200006d4
 8001618:	40014800 	.word	0x40014800

0800161c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <MX_USART1_UART_Init+0x5c>)
 8001624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001628:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800162c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_USART1_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_USART1_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001652:	4808      	ldr	r0, [pc, #32]	; (8001674 <MX_USART1_UART_Init+0x58>)
 8001654:	f005 fd48 	bl	80070e8 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800165e:	f000 fbde 	bl	8001e1e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <MX_USART1_UART_Init+0x5c>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <MX_USART1_UART_Init+0x5c>)
 8001668:	f043 0320 	orr.w	r3, r3, #32
 800166c:	60d3      	str	r3, [r2, #12]
  /* USER CODE END USART1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000071c 	.word	0x2000071c
 8001678:	40011000 	.word	0x40011000

0800167c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_DMA_Init+0x30>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <MX_DMA_Init+0x30>)
 800168c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_DMA_Init+0x30>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b57      	ldr	r3, [pc, #348]	; (8001828 <MX_GPIO_Init+0x178>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a56      	ldr	r2, [pc, #344]	; (8001828 <MX_GPIO_Init+0x178>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b54      	ldr	r3, [pc, #336]	; (8001828 <MX_GPIO_Init+0x178>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b50      	ldr	r3, [pc, #320]	; (8001828 <MX_GPIO_Init+0x178>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a4f      	ldr	r2, [pc, #316]	; (8001828 <MX_GPIO_Init+0x178>)
 80016ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b4d      	ldr	r3, [pc, #308]	; (8001828 <MX_GPIO_Init+0x178>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <MX_GPIO_Init+0x178>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a48      	ldr	r2, [pc, #288]	; (8001828 <MX_GPIO_Init+0x178>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <MX_GPIO_Init+0x178>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b42      	ldr	r3, [pc, #264]	; (8001828 <MX_GPIO_Init+0x178>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a41      	ldr	r2, [pc, #260]	; (8001828 <MX_GPIO_Init+0x178>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <MX_GPIO_Init+0x178>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <MX_GPIO_Init+0x178>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a3a      	ldr	r2, [pc, #232]	; (8001828 <MX_GPIO_Init+0x178>)
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b38      	ldr	r3, [pc, #224]	; (8001828 <MX_GPIO_Init+0x178>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 411c 	mov.w	r1, #39936	; 0x9c00
 8001758:	4834      	ldr	r0, [pc, #208]	; (800182c <MX_GPIO_Init+0x17c>)
 800175a:	f002 fb8b 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	4833      	ldr	r0, [pc, #204]	; (8001830 <MX_GPIO_Init+0x180>)
 8001764:	f002 fb86 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800176e:	4831      	ldr	r0, [pc, #196]	; (8001834 <MX_GPIO_Init+0x184>)
 8001770:	f002 fb80 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	2104      	movs	r1, #4
 8001778:	482f      	ldr	r0, [pc, #188]	; (8001838 <MX_GPIO_Init+0x188>)
 800177a:	f002 fb7b 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC15 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800177e:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4825      	ldr	r0, [pc, #148]	; (800182c <MX_GPIO_Init+0x17c>)
 8001798:	f002 f904 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800179c:	2301      	movs	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	481f      	ldr	r0, [pc, #124]	; (8001830 <MX_GPIO_Init+0x180>)
 80017b4:	f002 f8f6 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80017b8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4819      	ldr	r0, [pc, #100]	; (8001834 <MX_GPIO_Init+0x184>)
 80017d0:	f002 f8e8 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4811      	ldr	r0, [pc, #68]	; (8001834 <MX_GPIO_Init+0x184>)
 80017ee:	f002 f8d9 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017f2:	2304      	movs	r3, #4
 80017f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	480b      	ldr	r0, [pc, #44]	; (8001838 <MX_GPIO_Init+0x188>)
 800180a:	f002 f8cb 	bl	80039a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2105      	movs	r1, #5
 8001812:	2028      	movs	r0, #40	; 0x28
 8001814:	f001 fe24 	bl	8003460 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001818:	2028      	movs	r0, #40	; 0x28
 800181a:	f001 fe3d 	bl	8003498 <HAL_NVIC_EnableIRQ>

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40020800 	.word	0x40020800
 8001830:	40021c00 	.word	0x40021c00
 8001834:	40020400 	.word	0x40020400
 8001838:	40020c00 	.word	0x40020c00

0800183c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	if(htim == &htim10 )
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d106      	bne.n	800185a <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		xQueueSendToBackFromISR(buffer.xQueue1_ultrs, (void*)(&(TIM10->CCR1)) ,NULL);
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	2300      	movs	r3, #0
 8001852:	2200      	movs	r2, #0
 8001854:	4905      	ldr	r1, [pc, #20]	; (800186c <HAL_TIM_IC_CaptureCallback+0x30>)
 8001856:	f006 ffc7 	bl	80087e8 <xQueueGenericSendFromISR>
	}
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000068c 	.word	0x2000068c
 8001868:	20000780 	.word	0x20000780
 800186c:	40014434 	.word	0x40014434

08001870 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d103      	bne.n	8001888 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
	{
		HAL_TIM_PWM_Stop_IT(&htim11, TIM_CHANNEL_1);
 8001880:	2100      	movs	r1, #0
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001884:	f004 fa5c 	bl	8005d40 <HAL_TIM_PWM_Stop_IT>
	}
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200006d4 	.word	0x200006d4

08001894 <vCallbackFunctionTimer1>:

void vCallbackFunctionTimer1( TimerHandle_t xTimer )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_IT(&htim11, TIM_CHANNEL_1);
 800189c:	2100      	movs	r1, #0
 800189e:	4803      	ldr	r0, [pc, #12]	; (80018ac <vCallbackFunctionTimer1+0x18>)
 80018a0:	f004 f950 	bl	8005b44 <HAL_TIM_PWM_Start_IT>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200006d4 	.word	0x200006d4

080018b0 <vApplicationIdleHook>:

void vApplicationIdleHook(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 80018b4:	bf00      	nop
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_GPIO_EXTI_Callback>:

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) // Freefall/Motion interrupt
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018d0:	d10d      	bne.n	80018ee <HAL_GPIO_EXTI_Callback+0x2e>
	{
		uint8_t result;
		HAL_I2C_Mem_Read(&hi2c1, (0x1D<<1), FF_MT_SRC, 1, &result, sizeof(uint8_t), 100);
 80018d2:	2364      	movs	r3, #100	; 0x64
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	2301      	movs	r3, #1
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	f107 030f 	add.w	r3, r7, #15
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2301      	movs	r3, #1
 80018e2:	2216      	movs	r2, #22
 80018e4:	213a      	movs	r1, #58	; 0x3a
 80018e6:	4808      	ldr	r0, [pc, #32]	; (8001908 <HAL_GPIO_EXTI_Callback+0x48>)
 80018e8:	f002 fd64 	bl	80043b4 <HAL_I2C_Mem_Read>
		__asm__ volatile("NOP");
 80018ec:	bf00      	nop
	}
	if(GPIO_Pin == GPIO_PIN_14) //Data ready
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f4:	d104      	bne.n	8001900 <HAL_GPIO_EXTI_Callback+0x40>
	{
		mma8452x_ReadData(&hi2c1, MMA8452X_I2C_ADDRESS, buffer.accelerm_data);
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <HAL_GPIO_EXTI_Callback+0x4c>)
 80018f8:	213a      	movs	r1, #58	; 0x3a
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <HAL_GPIO_EXTI_Callback+0x48>)
 80018fc:	f000 fd0d 	bl	800231a <mma8452x_ReadData>
	}
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200005f0 	.word	0x200005f0
 800190c:	200007d4 	.word	0x200007d4

08001910 <UART_RxCallback>:

void UART_RxCallback (UART_HandleTypeDef * huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	xQueueSendToBackFromISR(buffer.xQueue2_instr4m, (void*)(&(USART1->DR)) ,NULL);
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <UART_RxCallback+0x20>)
 800191a:	6998      	ldr	r0, [r3, #24]
 800191c:	2300      	movs	r3, #0
 800191e:	2200      	movs	r2, #0
 8001920:	4904      	ldr	r1, [pc, #16]	; (8001934 <UART_RxCallback+0x24>)
 8001922:	f006 ff61 	bl	80087e8 <xQueueGenericSendFromISR>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000780 	.word	0x20000780
 8001934:	40011004 	.word	0x40011004

08001938 <ultrasonic_dis>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ultrasonic_dis */
void ultrasonic_dis(void const * argument)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	; 0x30
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <ultrasonic_dis+0x74>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	4919      	ldr	r1, [pc, #100]	; (80019b0 <ultrasonic_dis+0x78>)
 800194a:	4618      	mov	r0, r3
 800194c:	f006 ffe8 	bl	8008920 <xQueueReceive>
	  uint16_t temp1 = buffer.distance_ultrs;
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <ultrasonic_dis+0x74>)
 8001952:	889b      	ldrh	r3, [r3, #4]
 8001954:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <ultrasonic_dis+0x74>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	4914      	ldr	r1, [pc, #80]	; (80019b0 <ultrasonic_dis+0x78>)
 8001960:	4618      	mov	r0, r3
 8001962:	f006 ffdd 	bl	8008920 <xQueueReceive>
	  uint16_t temp2 = buffer.distance_ultrs;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <ultrasonic_dis+0x74>)
 8001968:	889b      	ldrh	r3, [r3, #4]
 800196a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  uint16_t temp3 = temp2 - temp1;
 800196c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800196e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	857b      	strh	r3, [r7, #42]	; 0x2a
	  char string_buff[30] = {0};
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
 8001988:	615a      	str	r2, [r3, #20]
 800198a:	831a      	strh	r2, [r3, #24]
      sprintf(string_buff, "%d \r\n", temp3);
 800198c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <ultrasonic_dis+0x7c>)
 8001994:	4618      	mov	r0, r3
 8001996:	f009 fa29 	bl	800adec <siprintf>
	  //HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
	  xQueueReset(buffer.xQueue1_ultrs);
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <ultrasonic_dis+0x74>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f006 fce9 	bl	8008378 <xQueueGenericReset>
	  __asm__ volatile("NOP");
 80019a6:	bf00      	nop
  {
 80019a8:	e7ca      	b.n	8001940 <ultrasonic_dis+0x8>
 80019aa:	bf00      	nop
 80019ac:	20000780 	.word	0x20000780
 80019b0:	20000784 	.word	0x20000784
 80019b4:	0800d034 	.word	0x0800d034

080019b8 <line_tracking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_line_tracking */
void line_tracking(void const * argument)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN line_tracking */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f006 fc10 	bl	80081e6 <osDelay>
 80019c6:	e7fb      	b.n	80019c0 <line_tracking+0x8>

080019c8 <limit_switch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_limit_switch */
void limit_switch(void const * argument)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN limit_switch */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f006 fc08 	bl	80081e6 <osDelay>
 80019d6:	e7fb      	b.n	80019d0 <limit_switch+0x8>

080019d8 <infrared_motion>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infrared_motion */
void infrared_motion(void const * argument)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN infrared_motion */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f006 fc00 	bl	80081e6 <osDelay>
 80019e6:	e7fb      	b.n	80019e0 <infrared_motion+0x8>

080019e8 <accelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_accelerometer */
void accelerometer(void const * argument)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accelerometer */
	  HAL_StatusTypeDef result;
	  HAL_StatusTypeDef result2;
	  HAL_I2C_Init(&hi2c1);
 80019f0:	481c      	ldr	r0, [pc, #112]	; (8001a64 <accelerometer+0x7c>)
 80019f2:	f002 fa71 	bl	8003ed8 <HAL_I2C_Init>
	  mma8452x_Standby(&hi2c1, MMA8452X_I2C_ADDRESS);
 80019f6:	213a      	movs	r1, #58	; 0x3a
 80019f8:	481a      	ldr	r0, [pc, #104]	; (8001a64 <accelerometer+0x7c>)
 80019fa:	f000 fa15 	bl	8001e28 <mma8452x_Standby>
	  mma8452x_DataFormat(&hi2c1, MMA8452X_I2C_ADDRESS, 1);
 80019fe:	2201      	movs	r2, #1
 8001a00:	213a      	movs	r1, #58	; 0x3a
 8001a02:	4818      	ldr	r0, [pc, #96]	; (8001a64 <accelerometer+0x7c>)
 8001a04:	f000 fa66 	bl	8001ed4 <mma8452x_DataFormat>
	  mma8452x_DataRateSelection(&hi2c1, MMA8452X_I2C_ADDRESS, 4); //Output Data Rate (ODR) 50Hz
 8001a08:	2204      	movs	r2, #4
 8001a0a:	213a      	movs	r1, #58	; 0x3a
 8001a0c:	4815      	ldr	r0, [pc, #84]	; (8001a64 <accelerometer+0x7c>)
 8001a0e:	f000 faa1 	bl	8001f54 <mma8452x_DataRateSelection>
	  mma8452x_InterruptPolarityConfig(&hi2c1, MMA8452X_I2C_ADDRESS, 1);
 8001a12:	2201      	movs	r2, #1
 8001a14:	213a      	movs	r1, #58	; 0x3a
 8001a16:	4813      	ldr	r0, [pc, #76]	; (8001a64 <accelerometer+0x7c>)
 8001a18:	f000 fae9 	bl	8001fee <mma8452x_InterruptPolarityConfig>
	  mma8452x_InterruptEnable(&hi2c1, MMA8452X_I2C_ADDRESS, EN_FF_MT, CFG_FF_MT);
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	2202      	movs	r2, #2
 8001a20:	213a      	movs	r1, #58	; 0x3a
 8001a22:	4810      	ldr	r0, [pc, #64]	; (8001a64 <accelerometer+0x7c>)
 8001a24:	f000 fb24 	bl	8002070 <mma8452x_InterruptEnable>
	  mma8452x_InterruptEnable(&hi2c1, MMA8452X_I2C_ADDRESS, EN_DRDY, CFG_DEFAULT);
 8001a28:	2300      	movs	r3, #0
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	213a      	movs	r1, #58	; 0x3a
 8001a2e:	480d      	ldr	r0, [pc, #52]	; (8001a64 <accelerometer+0x7c>)
 8001a30:	f000 fb1e 	bl	8002070 <mma8452x_InterruptEnable>
	  mma8452x_MotionDetectionConfig(&hi2c1, MMA8452X_I2C_ADDRESS, 0xF8, 0, 20, 2);
 8001a34:	2302      	movs	r3, #2
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2314      	movs	r3, #20
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	22f8      	movs	r2, #248	; 0xf8
 8001a40:	213a      	movs	r1, #58	; 0x3a
 8001a42:	4808      	ldr	r0, [pc, #32]	; (8001a64 <accelerometer+0x7c>)
 8001a44:	f000 fbd8 	bl	80021f8 <mma8452x_MotionDetectionConfig>
	  mma8452x_Active(&hi2c1, MMA8452X_I2C_ADDRESS);
 8001a48:	213a      	movs	r1, #58	; 0x3a
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <accelerometer+0x7c>)
 8001a4c:	f000 fa17 	bl	8001e7e <mma8452x_Active>
	  taskYIELD();
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <accelerometer+0x80>)
 8001a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	f3bf 8f4f 	dsb	sy
 8001a5c:	f3bf 8f6f 	isb	sy
  /* Infinite loop */
  for(;;)
 8001a60:	e7fe      	b.n	8001a60 <accelerometer+0x78>
 8001a62:	bf00      	nop
 8001a64:	200005f0 	.word	0x200005f0
 8001a68:	e000ed04 	.word	0xe000ed04
 8001a6c:	00000000 	.word	0x00000000

08001a70 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void const * argument)
{
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
  /* Infinite loop */
  for(;;)
  {
	  char buff;
	  xQueuePeek(buffer.xQueue2_instr4m, (void*)&buff, portMAX_DELAY);
 8001a78:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <motors+0x1f0>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f107 010e 	add.w	r1, r7, #14
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	4618      	mov	r0, r3
 8001a86:	f007 f82b 	bl	8008ae0 <xQueuePeek>
	  if(buff == 'I')
 8001a8a:	7bbb      	ldrb	r3, [r7, #14]
 8001a8c:	2b49      	cmp	r3, #73	; 0x49
 8001a8e:	d12b      	bne.n	8001ae8 <motors+0x78>
	  {
		  uint8_t i = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
		  while(buff != 'i')
 8001a94:	e01c      	b.n	8001ad0 <motors+0x60>
		  {
			  xQueuePeek(buffer.xQueue2_instr4m, (void*)&buff, 50);
 8001a96:	4b72      	ldr	r3, [pc, #456]	; (8001c60 <motors+0x1f0>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f107 010e 	add.w	r1, r7, #14
 8001a9e:	2232      	movs	r2, #50	; 0x32
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f007 f81d 	bl	8008ae0 <xQueuePeek>
			  xQueueReceive(buffer.xQueue2_instr4m, (void*)(&(buffer.instruction_for_motors[i])), portMAX_DELAY);
 8001aa6:	4b6e      	ldr	r3, [pc, #440]	; (8001c60 <motors+0x1f0>)
 8001aa8:	6998      	ldr	r0, [r3, #24]
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	3308      	adds	r3, #8
 8001aae:	4a6c      	ldr	r2, [pc, #432]	; (8001c60 <motors+0x1f0>)
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f006 ff31 	bl	8008920 <xQueueReceive>
			  i == 10 ? i = 0 : i++;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	2b0a      	cmp	r3, #10
 8001ac2:	d102      	bne.n	8001aca <motors+0x5a>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e002      	b.n	8001ad0 <motors+0x60>
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	3301      	adds	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
		  while(buff != 'i')
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	2b69      	cmp	r3, #105	; 0x69
 8001ad4:	d1df      	bne.n	8001a96 <motors+0x26>
		  }
		  sscanf(buffer.instruction_for_motors, "IX%dY%di", &buffer.x, &buffer.y);
 8001ad6:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <motors+0x1f4>)
 8001ad8:	4a63      	ldr	r2, [pc, #396]	; (8001c68 <motors+0x1f8>)
 8001ada:	4964      	ldr	r1, [pc, #400]	; (8001c6c <motors+0x1fc>)
 8001adc:	4864      	ldr	r0, [pc, #400]	; (8001c70 <motors+0x200>)
 8001ade:	f009 f9a5 	bl	800ae2c <siscanf>
		  buff = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73bb      	strb	r3, [r7, #14]
 8001ae6:	e007      	b.n	8001af8 <motors+0x88>
	  }
	  else
	  {
		  char trash;
		  xQueueReceive(buffer.xQueue2_instr4m, (void*)(&(trash)), 1);
 8001ae8:	4b5d      	ldr	r3, [pc, #372]	; (8001c60 <motors+0x1f0>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f107 010d 	add.w	r1, r7, #13
 8001af0:	2201      	movs	r2, #1
 8001af2:	4618      	mov	r0, r3
 8001af4:	f006 ff14 	bl	8008920 <xQueueReceive>
	  }

	  buffer.x = buffer.x - 50;
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <motors+0x1f0>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	3b32      	subs	r3, #50	; 0x32
 8001afe:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <motors+0x1f0>)
 8001b00:	61d3      	str	r3, [r2, #28]
	  buffer.y = (buffer.y - 50)*-1;
 8001b02:	4b57      	ldr	r3, [pc, #348]	; (8001c60 <motors+0x1f0>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001b0a:	4a55      	ldr	r2, [pc, #340]	; (8001c60 <motors+0x1f0>)
 8001b0c:	6213      	str	r3, [r2, #32]
	  buffer.pw = (int)(sqrt(pow(buffer.x,2) + pow(buffer.y,2)));
 8001b0e:	4b54      	ldr	r3, [pc, #336]	; (8001c60 <motors+0x1f0>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd0e 	bl	8000534 <__aeabi_i2d>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8001c58 <motors+0x1e8>
 8001b20:	ec43 2b10 	vmov	d0, r2, r3
 8001b24:	f00a fa7e 	bl	800c024 <pow>
 8001b28:	ec55 4b10 	vmov	r4, r5, d0
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <motors+0x1f0>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fcff 	bl	8000534 <__aeabi_i2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8001c58 <motors+0x1e8>
 8001b3e:	ec43 2b10 	vmov	d0, r2, r3
 8001b42:	f00a fa6f 	bl	800c024 <pow>
 8001b46:	ec53 2b10 	vmov	r2, r3, d0
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f7fe fba5 	bl	800029c <__adddf3>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	ec43 2b17 	vmov	d7, r2, r3
 8001b5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5e:	eef0 0a67 	vmov.f32	s1, s15
 8001b62:	f00a facf 	bl	800c104 <sqrt>
 8001b66:	ec53 2b10 	vmov	r2, r3, d0
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7fe fffb 	bl	8000b68 <__aeabi_d2iz>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a3a      	ldr	r2, [pc, #232]	; (8001c60 <motors+0x1f0>)
 8001b76:	6253      	str	r3, [r2, #36]	; 0x24
	  if(buffer.pw > 50) buffer.pw = 50;
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <motors+0x1f0>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	2b32      	cmp	r3, #50	; 0x32
 8001b7e:	dd02      	ble.n	8001b86 <motors+0x116>
 8001b80:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <motors+0x1f0>)
 8001b82:	2232      	movs	r2, #50	; 0x32
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
	  __asm__ volatile("NOP");
 8001b86:	bf00      	nop

	  if(buffer.y>=0)
 8001b88:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <motors+0x1f0>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db58      	blt.n	8001c42 <motors+0x1d2>
	  {
		  if(buffer.x>=0)
 8001b90:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <motors+0x1f0>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db27      	blt.n	8001be8 <motors+0x178>
		  {
			 TIM3->CCR2 = (250/50)*buffer.pw-(250/50)*buffer.x+750;
 8001b98:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <motors+0x1f0>)
 8001b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <motors+0x1f0>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	1ad2      	subs	r2, r2, r3
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f203 22ee 	addw	r2, r3, #750	; 0x2ee
 8001bac:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <motors+0x204>)
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38
			 TIM3->CCR4 = (250/50)*buffer.pw+750;
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <motors+0x1f0>)
 8001bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	f203 22ee 	addw	r2, r3, #750	; 0x2ee
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <motors+0x204>)
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
			 if(buffer.pw <=5)
 8001bc2:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <motors+0x1f0>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	dc05      	bgt.n	8001bd6 <motors+0x166>
			 {
				 TIM3->CCR2 = 0;
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <motors+0x204>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38
				 TIM3->CCR4 = 0;
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <motors+0x204>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
			 }
			 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	4827      	ldr	r0, [pc, #156]	; (8001c78 <motors+0x208>)
 8001bda:	f003 ff03 	bl	80059e4 <HAL_TIM_PWM_Start>
			 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001bde:	210c      	movs	r1, #12
 8001be0:	4825      	ldr	r0, [pc, #148]	; (8001c78 <motors+0x208>)
 8001be2:	f003 feff 	bl	80059e4 <HAL_TIM_PWM_Start>
 8001be6:	e747      	b.n	8001a78 <motors+0x8>
		  }
		  else if(buffer.x<0)
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <motors+0x1f0>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f6bf af43 	bge.w	8001a78 <motors+0x8>
		  {
			 TIM3->CCR2 = (250/50)*buffer.pw+750;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <motors+0x1f0>)
 8001bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f203 22ee 	addw	r2, r3, #750	; 0x2ee
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <motors+0x204>)
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
			 TIM3->CCR4 = (250/50)*buffer.pw+(250/50)*buffer.x+750;
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <motors+0x1f0>)
 8001c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <motors+0x1f0>)
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	441a      	add	r2, r3
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	f203 22ee 	addw	r2, r3, #750	; 0x2ee
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <motors+0x204>)
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
			 if(buffer.pw <=5)
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <motors+0x1f0>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	dc05      	bgt.n	8001c30 <motors+0x1c0>
			 {
				 TIM3->CCR2 = 0;
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <motors+0x204>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
				 TIM3->CCR4 = 0;
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <motors+0x204>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	641a      	str	r2, [r3, #64]	; 0x40
			 }
			 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c30:	2104      	movs	r1, #4
 8001c32:	4811      	ldr	r0, [pc, #68]	; (8001c78 <motors+0x208>)
 8001c34:	f003 fed6 	bl	80059e4 <HAL_TIM_PWM_Start>
			 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c38:	210c      	movs	r1, #12
 8001c3a:	480f      	ldr	r0, [pc, #60]	; (8001c78 <motors+0x208>)
 8001c3c:	f003 fed2 	bl	80059e4 <HAL_TIM_PWM_Start>
 8001c40:	e71a      	b.n	8001a78 <motors+0x8>
		  }
	  }
	  else if(buffer.y<0)
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <motors+0x1f0>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f6bf af16 	bge.w	8001a78 <motors+0x8>
	  {
		  if(buffer.x>=0)
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <motors+0x1f0>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b00      	cmp	r3, #0
  {
 8001c52:	e711      	b.n	8001a78 <motors+0x8>
 8001c54:	f3af 8000 	nop.w
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40000000 	.word	0x40000000
 8001c60:	20000780 	.word	0x20000780
 8001c64:	200007a0 	.word	0x200007a0
 8001c68:	2000079c 	.word	0x2000079c
 8001c6c:	0800d03c 	.word	0x0800d03c
 8001c70:	2000078c 	.word	0x2000078c
 8001c74:	40000400 	.word	0x40000400
 8001c78:	20000644 	.word	0x20000644

08001c7c <encoders>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoders */
void encoders(void const * argument)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoders */
	uint8_t i, ii = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  //Diameter of wheel is 65mm          80 180
	  if(buffer.encod_data[0]>=180)
 8001c88:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <encoders+0xe0>)
 8001c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c8e:	2bb3      	cmp	r3, #179	; 0xb3
 8001c90:	d905      	bls.n	8001c9e <encoders+0x22>
	  {
		  buffer.encodA_timer[0] = HAL_GetTick();
 8001c92:	f000 ff2f 	bl	8002af4 <HAL_GetTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4a30      	ldr	r2, [pc, #192]	; (8001d5c <encoders+0xe0>)
 8001c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001c9c:	e009      	b.n	8001cb2 <encoders+0x36>
	  }
	  else if(buffer.encod_data[0]<=80)
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <encoders+0xe0>)
 8001ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ca4:	2b50      	cmp	r3, #80	; 0x50
 8001ca6:	d804      	bhi.n	8001cb2 <encoders+0x36>
	  {
		  buffer.encodA_timer[1] = HAL_GetTick();
 8001ca8:	f000 ff24 	bl	8002af4 <HAL_GetTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a2b      	ldr	r2, [pc, #172]	; (8001d5c <encoders+0xe0>)
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
	  }
	  if((buffer.encodA_timer[0] && buffer.encodA_timer[1]) != 0)
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <encoders+0xe0>)
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <encoders+0x4a>
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <encoders+0xe0>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <encoders+0x4a>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <encoders+0x4c>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <encoders+0x72>
	  {
		  buffer.angular_speedA = WHEEL_q_PERIMETER/(2*(int32_t)(buffer.encodA_timer[0] - buffer.encodA_timer[1]));
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <encoders+0xe0>)
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <encoders+0xe0>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	f24c 7238 	movw	r2, #51000	; 0xc738
 8001cdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <encoders+0xe0>)
 8001ce2:	63d3      	str	r3, [r2, #60]	; 0x3c
		  memset(buffer.encodA_timer, 0, sizeof(buffer.encodA_timer));
 8001ce4:	2208      	movs	r2, #8
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	481d      	ldr	r0, [pc, #116]	; (8001d60 <encoders+0xe4>)
 8001cea:	f009 f877 	bl	800addc <memset>
	  }
	  if(buffer.encod_data[1]>=180)
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <encoders+0xe0>)
 8001cf0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001cf4:	2bb3      	cmp	r3, #179	; 0xb3
 8001cf6:	d905      	bls.n	8001d04 <encoders+0x88>
	  {
		  buffer.encodB_timer[0] = HAL_GetTick();
 8001cf8:	f000 fefc 	bl	8002af4 <HAL_GetTick>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <encoders+0xe0>)
 8001d00:	6353      	str	r3, [r2, #52]	; 0x34
 8001d02:	e009      	b.n	8001d18 <encoders+0x9c>
	  }
	  else if(buffer.encod_data[1]<=80)
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <encoders+0xe0>)
 8001d06:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d0a:	2b50      	cmp	r3, #80	; 0x50
 8001d0c:	d804      	bhi.n	8001d18 <encoders+0x9c>
	  {
		  buffer.encodB_timer[1] = HAL_GetTick();
 8001d0e:	f000 fef1 	bl	8002af4 <HAL_GetTick>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <encoders+0xe0>)
 8001d16:	6393      	str	r3, [r2, #56]	; 0x38
	  }
	  if((buffer.encodB_timer[0] && buffer.encodB_timer[1]) != 0)
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <encoders+0xe0>)
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <encoders+0xb0>
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <encoders+0xe0>)
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <encoders+0xb0>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <encoders+0xb2>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d010      	beq.n	8001d54 <encoders+0xd8>
	  {
		  buffer.angular_speedB = WHEEL_q_PERIMETER/(2*(int32_t)(buffer.encodB_timer[0] - buffer.encodB_timer[1]));
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <encoders+0xe0>)
 8001d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <encoders+0xe0>)
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	f24c 7238 	movw	r2, #51000	; 0xc738
 8001d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <encoders+0xe0>)
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
		  memset(buffer.encodB_timer, 0, sizeof(buffer.encodB_timer));
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <encoders+0xe8>)
 8001d50:	f009 f844 	bl	800addc <memset>
	  }
	  vTaskDelay(4);
 8001d54:	2004      	movs	r0, #4
 8001d56:	f007 faa7 	bl	80092a8 <vTaskDelay>
	  if(buffer.encod_data[0]>=180)
 8001d5a:	e795      	b.n	8001c88 <encoders+0xc>
 8001d5c:	20000780 	.word	0x20000780
 8001d60:	200007ac 	.word	0x200007ac
 8001d64:	200007b4 	.word	0x200007b4

08001d68 <uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_task */
void uart_task(void const * argument)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08e      	sub	sp, #56	; 0x38
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  char string_buff[20] = {0};
//	  sprintf(string_buff, " %d %d ", buffer.encod_data[0], buffer.encod_data[1]);
//	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
	  char string_buff2[20] = {0};
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
	  sprintf(string_buff2, " %d %d %d ", buffer.accelerm_data[0], buffer.accelerm_data[1], buffer.accelerm_data[2]);
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <uart_task+0x88>)
 8001d84:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <uart_task+0x88>)
 8001d8c:	f993 3055 	ldrsb.w	r3, [r3, #85]	; 0x55
 8001d90:	4619      	mov	r1, r3
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <uart_task+0x88>)
 8001d94:	f993 3056 	ldrsb.w	r3, [r3, #86]	; 0x56
 8001d98:	f107 001c 	add.w	r0, r7, #28
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4914      	ldr	r1, [pc, #80]	; (8001df4 <uart_task+0x8c>)
 8001da2:	f009 f823 	bl	800adec <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff2, sizeof(string_buff2), 100);
 8001da6:	f107 011c 	add.w	r1, r7, #28
 8001daa:	2364      	movs	r3, #100	; 0x64
 8001dac:	2214      	movs	r2, #20
 8001dae:	4812      	ldr	r0, [pc, #72]	; (8001df8 <uart_task+0x90>)
 8001db0:	f005 f9e7 	bl	8007182 <HAL_UART_Transmit>
	  char string_buff3[20] = {0};
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
	  sprintf(string_buff3, " %d %d \n", buffer.angular_speedA, buffer.angular_speedB);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <uart_task+0x88>)
 8001dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <uart_task+0x88>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f107 0008 	add.w	r0, r7, #8
 8001dd2:	490a      	ldr	r1, [pc, #40]	; (8001dfc <uart_task+0x94>)
 8001dd4:	f009 f80a 	bl	800adec <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff3, sizeof(string_buff3), 100);
 8001dd8:	f107 0108 	add.w	r1, r7, #8
 8001ddc:	2364      	movs	r3, #100	; 0x64
 8001dde:	2214      	movs	r2, #20
 8001de0:	4805      	ldr	r0, [pc, #20]	; (8001df8 <uart_task+0x90>)
 8001de2:	f005 f9ce 	bl	8007182 <HAL_UART_Transmit>
	  vTaskDelay(160);
 8001de6:	20a0      	movs	r0, #160	; 0xa0
 8001de8:	f007 fa5e 	bl	80092a8 <vTaskDelay>
  {
 8001dec:	e7c0      	b.n	8001d70 <uart_task+0x8>
 8001dee:	bf00      	nop
 8001df0:	20000780 	.word	0x20000780
 8001df4:	0800d048 	.word	0x0800d048
 8001df8:	2000071c 	.word	0x2000071c
 8001dfc:	0800d054 	.word	0x0800d054

08001e00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e12:	f000 fe5b 	bl	8002acc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e22:	b672      	cpsid	i
}
 8001e24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e26:	e7fe      	b.n	8001e26 <Error_Handler+0x8>

08001e28 <mma8452x_Standby>:
 *                the configuration information for the specified I2C.
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 */
void mma8452x_Standby(I2C_HandleTypeDef * hi2c, uint16_t DevAddress)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af04      	add	r7, sp, #16
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
	uint8_t register_value = 0x0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001e38:	8879      	ldrh	r1, [r7, #2]
 8001e3a:	2364      	movs	r3, #100	; 0x64
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	f107 030f 	add.w	r3, r7, #15
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	222a      	movs	r2, #42	; 0x2a
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f002 fab1 	bl	80043b4 <HAL_I2C_Mem_Read>
	register_value &= ~CTRL_REG1_ACTIVE;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001e5c:	8879      	ldrh	r1, [r7, #2]
 8001e5e:	2364      	movs	r3, #100	; 0x64
 8001e60:	9302      	str	r3, [sp, #8]
 8001e62:	2301      	movs	r3, #1
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	f107 030f 	add.w	r3, r7, #15
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	222a      	movs	r2, #42	; 0x2a
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f002 f9a5 	bl	80041c0 <HAL_I2C_Mem_Write>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <mma8452x_Active>:
 *                the configuration information for the specified I2C.
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 */
void mma8452x_Active(I2C_HandleTypeDef * hi2c, uint16_t DevAddress)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b088      	sub	sp, #32
 8001e82:	af04      	add	r7, sp, #16
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]
	uint8_t register_value = 0x0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001e8e:	8879      	ldrh	r1, [r7, #2]
 8001e90:	2364      	movs	r3, #100	; 0x64
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	2301      	movs	r3, #1
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	f107 030f 	add.w	r3, r7, #15
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	222a      	movs	r2, #42	; 0x2a
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f002 fa86 	bl	80043b4 <HAL_I2C_Mem_Read>
	register_value |= CTRL_REG1_ACTIVE;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001eb2:	8879      	ldrh	r1, [r7, #2]
 8001eb4:	2364      	movs	r3, #100	; 0x64
 8001eb6:	9302      	str	r3, [sp, #8]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	f107 030f 	add.w	r3, r7, #15
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	222a      	movs	r2, #42	; 0x2a
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f002 f97a 	bl	80041c0 <HAL_I2C_Mem_Write>
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <mma8452x_DataFormat>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  d_format If d_format is 1 then Data format limited to single Byte.
 * 		   If d_format is 0 then Data format limited to 12 Bits.
 */
void mma8452x_DataFormat(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t d_format)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af04      	add	r7, sp, #16
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff9d 	bl	8001e28 <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001ef2:	8879      	ldrh	r1, [r7, #2]
 8001ef4:	2364      	movs	r3, #100	; 0x64
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	f107 030f 	add.w	r3, r7, #15
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2301      	movs	r3, #1
 8001f04:	222a      	movs	r2, #42	; 0x2a
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f002 fa54 	bl	80043b4 <HAL_I2C_Mem_Read>
	if(d_format == 1)
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <mma8452x_DataFormat+0x4a>
	{
		register_value |= CTRL_REG1_F_READ;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e004      	b.n	8001f28 <mma8452x_DataFormat+0x54>
	}
	else
	{
		register_value &= ~CTRL_REG1_F_READ;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	f023 0302 	bic.w	r3, r3, #2
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001f28:	8879      	ldrh	r1, [r7, #2]
 8001f2a:	2364      	movs	r3, #100	; 0x64
 8001f2c:	9302      	str	r3, [sp, #8]
 8001f2e:	2301      	movs	r3, #1
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	f107 030f 	add.w	r3, r7, #15
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	222a      	movs	r2, #42	; 0x2a
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f002 f93f 	bl	80041c0 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff99 	bl	8001e7e <mma8452x_Active>
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <mma8452x_DataRateSelection>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  d_rate Value from 0 to 7 for selection output data rate for acceleration samples.
 * 		   The default value is 000 for a data rate of 800 Hz.
 */
void mma8452x_DataRateSelection(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t d_rate)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af04      	add	r7, sp, #16
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff5d 	bl	8001e28 <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001f72:	8879      	ldrh	r1, [r7, #2]
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	2301      	movs	r3, #1
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	f107 030f 	add.w	r3, r7, #15
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2301      	movs	r3, #1
 8001f84:	222a      	movs	r2, #42	; 0x2a
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f002 fa14 	bl	80043b4 <HAL_I2C_Mem_Read>
	register_value &= ~((7<<3));
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001f96:	8879      	ldrh	r1, [r7, #2]
 8001f98:	2364      	movs	r3, #100	; 0x64
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	f107 030f 	add.w	r3, r7, #15
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	222a      	movs	r2, #42	; 0x2a
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f002 f908 	bl	80041c0 <HAL_I2C_Mem_Write>
	register_value |= (d_rate<<3);
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	b25a      	sxtb	r2, r3
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	b25b      	sxtb	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b25b      	sxtb	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8001fc2:	8879      	ldrh	r1, [r7, #2]
 8001fc4:	2364      	movs	r3, #100	; 0x64
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	f107 030f 	add.w	r3, r7, #15
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	222a      	movs	r2, #42	; 0x2a
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f002 f8f2 	bl	80041c0 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff4c 	bl	8001e7e <mma8452x_Active>
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <mma8452x_InterruptPolarityConfig>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  ipol Interrupt polarity ACTIVE high, or ACTIVE low. Default value: 0.
 *         0: ACTIVE low; 1: ACTIVE high
 */
void mma8452x_InterruptPolarityConfig(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t ipol)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b088      	sub	sp, #32
 8001ff2:	af04      	add	r7, sp, #16
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	807b      	strh	r3, [r7, #2]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ff10 	bl	8001e28 <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG3, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800200c:	8879      	ldrh	r1, [r7, #2]
 800200e:	2364      	movs	r3, #100	; 0x64
 8002010:	9302      	str	r3, [sp, #8]
 8002012:	2301      	movs	r3, #1
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	f107 030f 	add.w	r3, r7, #15
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2301      	movs	r3, #1
 800201e:	222c      	movs	r2, #44	; 0x2c
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f002 f9c7 	bl	80043b4 <HAL_I2C_Mem_Read>
	if(ipol == 1)
 8002026:	787b      	ldrb	r3, [r7, #1]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <mma8452x_InterruptPolarityConfig+0x4a>
	{
		register_value |= CTRL_REG3_IPOL;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	b2db      	uxtb	r3, r3
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	e004      	b.n	8002042 <mma8452x_InterruptPolarityConfig+0x54>
	}
	else
	{
		register_value &= ~CTRL_REG3_IPOL;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	f023 0302 	bic.w	r3, r3, #2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG3, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002042:	8879      	ldrh	r1, [r7, #2]
 8002044:	2364      	movs	r3, #100	; 0x64
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	2301      	movs	r3, #1
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	f107 030f 	add.w	r3, r7, #15
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2301      	movs	r3, #1
 8002054:	222c      	movs	r2, #44	; 0x2c
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f002 f8b2 	bl	80041c0 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	4619      	mov	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff0c 	bl	8001e7e <mma8452x_Active>
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <mma8452x_InterruptEnable>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  int_en The corresponding interrupt
 * @param  int_cfg The corresponding interrupt pin
 */
void mma8452x_InterruptEnable(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t int_en, uint8_t int_cfg)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af04      	add	r7, sp, #16
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
 800207c:	461a      	mov	r2, r3
 800207e:	4603      	mov	r3, r0
 8002080:	807b      	strh	r3, [r7, #2]
 8002082:	460b      	mov	r3, r1
 8002084:	707b      	strb	r3, [r7, #1]
 8002086:	4613      	mov	r3, r2
 8002088:	703b      	strb	r3, [r7, #0]
	mma8452x_Standby(hi2c, DevAddress);
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	4619      	mov	r1, r3
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff feca 	bl	8001e28 <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG4, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002098:	8879      	ldrh	r1, [r7, #2]
 800209a:	2364      	movs	r3, #100	; 0x64
 800209c:	9302      	str	r3, [sp, #8]
 800209e:	2301      	movs	r3, #1
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	f107 030f 	add.w	r3, r7, #15
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2301      	movs	r3, #1
 80020aa:	222d      	movs	r2, #45	; 0x2d
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f002 f981 	bl	80043b4 <HAL_I2C_Mem_Read>
	switch (int_en)
 80020b2:	787b      	ldrb	r3, [r7, #1]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d832      	bhi.n	8002120 <mma8452x_InterruptEnable+0xb0>
 80020ba:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <mma8452x_InterruptEnable+0x50>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	08002115 	.word	0x08002115
 80020c4:	08002109 	.word	0x08002109
 80020c8:	080020fd 	.word	0x080020fd
 80020cc:	080020f1 	.word	0x080020f1
 80020d0:	080020e5 	.word	0x080020e5
 80020d4:	080020d9 	.word	0x080020d9
	{
		 case EN_ASLP:
			 register_value |= CTRL_REG4_ASLP;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	73fb      	strb	r3, [r7, #15]
			 break;
 80020e2:	e01e      	b.n	8002122 <mma8452x_InterruptEnable+0xb2>
		 case EN_TRANS:
			 register_value |= CTRL_REG4_TRANS;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	f043 0320 	orr.w	r3, r3, #32
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	73fb      	strb	r3, [r7, #15]
			 break;
 80020ee:	e018      	b.n	8002122 <mma8452x_InterruptEnable+0xb2>
		 case EN_LNDPRT:
			 register_value |= CTRL_REG4_LNDPRT;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	f043 0310 	orr.w	r3, r3, #16
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	73fb      	strb	r3, [r7, #15]
			 break;
 80020fa:	e012      	b.n	8002122 <mma8452x_InterruptEnable+0xb2>
		 case EN_PULSE:
			 register_value |= CTRL_REG4_PULSE;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	b2db      	uxtb	r3, r3
 8002104:	73fb      	strb	r3, [r7, #15]
			 break;
 8002106:	e00c      	b.n	8002122 <mma8452x_InterruptEnable+0xb2>
		 case EN_FF_MT:
			 register_value |= CTRL_REG4_FF_MT;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	b2db      	uxtb	r3, r3
 8002110:	73fb      	strb	r3, [r7, #15]
			 break;
 8002112:	e006      	b.n	8002122 <mma8452x_InterruptEnable+0xb2>
		 case EN_DRDY:
			 register_value |= CTRL_REG4_DRDY;
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	73fb      	strb	r3, [r7, #15]
			 break;
 800211e:	e000      	b.n	8002122 <mma8452x_InterruptEnable+0xb2>
		 default:
        	 __asm__ volatile("NOP");
 8002120:	bf00      	nop
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG4, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002122:	8879      	ldrh	r1, [r7, #2]
 8002124:	2364      	movs	r3, #100	; 0x64
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	2301      	movs	r3, #1
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	f107 030f 	add.w	r3, r7, #15
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2301      	movs	r3, #1
 8002134:	222d      	movs	r2, #45	; 0x2d
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f002 f842 	bl	80041c0 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG5, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002140:	8879      	ldrh	r1, [r7, #2]
 8002142:	2364      	movs	r3, #100	; 0x64
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	2301      	movs	r3, #1
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	f107 030f 	add.w	r3, r7, #15
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2301      	movs	r3, #1
 8002152:	222e      	movs	r2, #46	; 0x2e
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f002 f92d 	bl	80043b4 <HAL_I2C_Mem_Read>
	switch (int_cfg)
 800215a:	783b      	ldrb	r3, [r7, #0]
 800215c:	3b01      	subs	r3, #1
 800215e:	2b05      	cmp	r3, #5
 8002160:	d832      	bhi.n	80021c8 <mma8452x_InterruptEnable+0x158>
 8002162:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <mma8452x_InterruptEnable+0xf8>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	080021bd 	.word	0x080021bd
 800216c:	080021b1 	.word	0x080021b1
 8002170:	080021a5 	.word	0x080021a5
 8002174:	08002199 	.word	0x08002199
 8002178:	0800218d 	.word	0x0800218d
 800217c:	08002181 	.word	0x08002181
	{
		 case CFG_ASLP:
			 register_value |= CTRL_REG5_ASLP;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002186:	b2db      	uxtb	r3, r3
 8002188:	73fb      	strb	r3, [r7, #15]
			 break;
 800218a:	e01e      	b.n	80021ca <mma8452x_InterruptEnable+0x15a>
		 case CFG_TRANS:
			 register_value |= CTRL_REG5_TRANS;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	f043 0320 	orr.w	r3, r3, #32
 8002192:	b2db      	uxtb	r3, r3
 8002194:	73fb      	strb	r3, [r7, #15]
			 break;
 8002196:	e018      	b.n	80021ca <mma8452x_InterruptEnable+0x15a>
		 case CFG_LNDPRT:
			 register_value |= CTRL_REG5_LNDPRT;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	73fb      	strb	r3, [r7, #15]
			 break;
 80021a2:	e012      	b.n	80021ca <mma8452x_InterruptEnable+0x15a>
		 case CFG_PULSE:
			 register_value |= CTRL_REG5_PULSE;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	73fb      	strb	r3, [r7, #15]
			 break;
 80021ae:	e00c      	b.n	80021ca <mma8452x_InterruptEnable+0x15a>
		 case CFG_FF_MT:
			 register_value |= CTRL_REG5_FF_MT;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	73fb      	strb	r3, [r7, #15]
			 break;
 80021ba:	e006      	b.n	80021ca <mma8452x_InterruptEnable+0x15a>
		 case CFG_DRDY:
			 register_value |= CTRL_REG5_DRDY;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	73fb      	strb	r3, [r7, #15]
			 break;
 80021c6:	e000      	b.n	80021ca <mma8452x_InterruptEnable+0x15a>
		 default:
			 __asm__ volatile("NOP");
 80021c8:	bf00      	nop
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG5, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80021ca:	8879      	ldrh	r1, [r7, #2]
 80021cc:	2364      	movs	r3, #100	; 0x64
 80021ce:	9302      	str	r3, [sp, #8]
 80021d0:	2301      	movs	r3, #1
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	f107 030f 	add.w	r3, r7, #15
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2301      	movs	r3, #1
 80021dc:	222e      	movs	r2, #46	; 0x2e
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f001 ffee 	bl	80041c0 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	4619      	mov	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff fe48 	bl	8001e7e <mma8452x_Active>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop

080021f8 <mma8452x_MotionDetectionConfig>:
									uint16_t DevAddress,
									uint8_t byte_cfg,
									uint8_t dbcntm,
									uint8_t threshold,
									uint8_t d_count)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af04      	add	r7, sp, #16
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	807b      	strh	r3, [r7, #2]
 800220a:	460b      	mov	r3, r1
 800220c:	707b      	strb	r3, [r7, #1]
 800220e:	4613      	mov	r3, r2
 8002210:	703b      	strb	r3, [r7, #0]
	mma8452x_Standby(hi2c, DevAddress);
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fe06 	bl	8001e28 <mma8452x_Standby>
	uint8_t register_value = 0x0;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_CFG, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002220:	8879      	ldrh	r1, [r7, #2]
 8002222:	2364      	movs	r3, #100	; 0x64
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2301      	movs	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	f107 030f 	add.w	r3, r7, #15
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2301      	movs	r3, #1
 8002232:	2215      	movs	r2, #21
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f002 f8bd 	bl	80043b4 <HAL_I2C_Mem_Read>
	register_value |= byte_cfg;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	4313      	orrs	r3, r2
 8002240:	b2db      	uxtb	r3, r3
 8002242:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_CFG, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002244:	8879      	ldrh	r1, [r7, #2]
 8002246:	2364      	movs	r3, #100	; 0x64
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	2301      	movs	r3, #1
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	f107 030f 	add.w	r3, r7, #15
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	2215      	movs	r2, #21
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f001 ffb1 	bl	80041c0 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_THS, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002262:	8879      	ldrh	r1, [r7, #2]
 8002264:	2364      	movs	r3, #100	; 0x64
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	2301      	movs	r3, #1
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f107 030f 	add.w	r3, r7, #15
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2301      	movs	r3, #1
 8002274:	2217      	movs	r2, #23
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f002 f89c 	bl	80043b4 <HAL_I2C_Mem_Read>
	if(dbcntm == 1)
 800227c:	783b      	ldrb	r3, [r7, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <mma8452x_MotionDetectionConfig+0x96>
	{
		register_value |= FF_MT_THS_DBCNTM;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002288:	b2db      	uxtb	r3, r3
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	e007      	b.n	800229e <mma8452x_MotionDetectionConfig+0xa6>
	}
	else if(dbcntm == 0)
 800228e:	783b      	ldrb	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <mma8452x_MotionDetectionConfig+0xa6>
	{
		register_value &= ~FF_MT_THS_DBCNTM;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800229a:	b2db      	uxtb	r3, r3
 800229c:	73fb      	strb	r3, [r7, #15]
	}
	register_value &= ~127;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	73fb      	strb	r3, [r7, #15]
	register_value |= threshold;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	7e3b      	ldrb	r3, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_THS, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80022b2:	8879      	ldrh	r1, [r7, #2]
 80022b4:	2364      	movs	r3, #100	; 0x64
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	2301      	movs	r3, #1
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	f107 030f 	add.w	r3, r7, #15
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2301      	movs	r3, #1
 80022c4:	2217      	movs	r2, #23
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f001 ff7a 	bl	80041c0 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_COUNT, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80022d0:	8879      	ldrh	r1, [r7, #2]
 80022d2:	2364      	movs	r3, #100	; 0x64
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	2301      	movs	r3, #1
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	f107 030f 	add.w	r3, r7, #15
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2301      	movs	r3, #1
 80022e2:	2218      	movs	r2, #24
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f002 f865 	bl	80043b4 <HAL_I2C_Mem_Read>
	register_value = d_count;
 80022ea:	7f3b      	ldrb	r3, [r7, #28]
 80022ec:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_COUNT, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80022ee:	8879      	ldrh	r1, [r7, #2]
 80022f0:	2364      	movs	r3, #100	; 0x64
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	2301      	movs	r3, #1
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	f107 030f 	add.w	r3, r7, #15
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2301      	movs	r3, #1
 8002300:	2218      	movs	r2, #24
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f001 ff5c 	bl	80041c0 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fdb6 	bl	8001e7e <mma8452x_Active>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <mma8452x_ReadData>:
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 * @param  pData Pointer to data buffer
 */
void mma8452x_ReadData(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, int8_t* pData)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b08a      	sub	sp, #40	; 0x28
 800231e:	af04      	add	r7, sp, #16
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	460b      	mov	r3, r1
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	817b      	strh	r3, [r7, #10]
	uint8_t register_value = 0x0;
 8002328:	2300      	movs	r3, #0
 800232a:	757b      	strb	r3, [r7, #21]
	uint16_t size_of_data;
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800232c:	8979      	ldrh	r1, [r7, #10]
 800232e:	2364      	movs	r3, #100	; 0x64
 8002330:	9302      	str	r3, [sp, #8]
 8002332:	2301      	movs	r3, #1
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	f107 0315 	add.w	r3, r7, #21
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2301      	movs	r3, #1
 800233e:	222a      	movs	r2, #42	; 0x2a
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f002 f837 	bl	80043b4 <HAL_I2C_Mem_Read>
	if((register_value & CTRL_REG1_F_READ) == CTRL_REG1_F_READ)
 8002346:	7d7b      	ldrb	r3, [r7, #21]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <mma8452x_ReadData+0x3c>
	{
		size_of_data = 3;
 8002350:	2303      	movs	r3, #3
 8002352:	82fb      	strh	r3, [r7, #22]
 8002354:	e001      	b.n	800235a <mma8452x_ReadData+0x40>
	}
	else
	{
		size_of_data = 6;
 8002356:	2306      	movs	r3, #6
 8002358:	82fb      	strh	r3, [r7, #22]
	}
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)OUT_X_MSB, 1, (uint8_t*)pData, size_of_data, 100);
 800235a:	8979      	ldrh	r1, [r7, #10]
 800235c:	2364      	movs	r3, #100	; 0x64
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	8afb      	ldrh	r3, [r7, #22]
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	2201      	movs	r2, #1
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f002 f821 	bl	80043b4 <HAL_I2C_Mem_Read>
}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_MspInit+0x54>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <HAL_MspInit+0x54>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_MspInit+0x54>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_MspInit+0x54>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_MspInit+0x54>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_MspInit+0x54>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	210f      	movs	r1, #15
 80023be:	f06f 0001 	mvn.w	r0, #1
 80023c2:	f001 f84d 	bl	8003460 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2e      	ldr	r2, [pc, #184]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d155      	bne.n	80024a2 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_ADC_MspInit+0xdc>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4a2c      	ldr	r2, [pc, #176]	; (80024b0 <HAL_ADC_MspInit+0xdc>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6453      	str	r3, [r2, #68]	; 0x44
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_ADC_MspInit+0xdc>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_ADC_MspInit+0xdc>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <HAL_ADC_MspInit+0xdc>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_ADC_MspInit+0xdc>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800242e:	2303      	movs	r3, #3
 8002430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002432:	2303      	movs	r3, #3
 8002434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	481c      	ldr	r0, [pc, #112]	; (80024b4 <HAL_ADC_MspInit+0xe0>)
 8002442:	f001 faaf 	bl	80039a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_ADC_MspInit+0xe8>)
 800244a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 800244e:	2200      	movs	r2, #0
 8002450:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 8002460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002464:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 8002474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002478:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 800247c:	2200      	movs	r2, #0
 800247e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 8002482:	2200      	movs	r2, #0
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002486:	480c      	ldr	r0, [pc, #48]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 8002488:	f001 f814 	bl	80034b4 <HAL_DMA_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8002492:	f7ff fcc4 	bl	8001e1e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
 800249c:	4a06      	ldr	r2, [pc, #24]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024a2:	bf00      	nop
 80024a4:	3728      	adds	r7, #40	; 0x28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40012000 	.word	0x40012000
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	20000590 	.word	0x20000590
 80024bc:	40026410 	.word	0x40026410

080024c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_I2C_MspInit+0x84>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d12b      	bne.n	800253a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_I2C_MspInit+0x88>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <HAL_I2C_MspInit+0x88>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_I2C_MspInit+0x88>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024fe:	23c0      	movs	r3, #192	; 0xc0
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002502:	2312      	movs	r3, #18
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800250e:	2304      	movs	r3, #4
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	480c      	ldr	r0, [pc, #48]	; (800254c <HAL_I2C_MspInit+0x8c>)
 800251a:	f001 fa43 	bl	80039a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_I2C_MspInit+0x88>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_I2C_MspInit+0x88>)
 8002528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_I2C_MspInit+0x88>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40005400 	.word	0x40005400
 8002548:	40023800 	.word	0x40023800
 800254c:	40020400 	.word	0x40020400

08002550 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_I2C_MspDeInit+0x38>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10d      	bne.n	800257e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_I2C_MspDeInit+0x3c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_I2C_MspDeInit+0x3c>)
 8002568:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800256e:	2140      	movs	r1, #64	; 0x40
 8002570:	4807      	ldr	r0, [pc, #28]	; (8002590 <HAL_I2C_MspDeInit+0x40>)
 8002572:	f001 fb9b 	bl	8003cac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	4805      	ldr	r0, [pc, #20]	; (8002590 <HAL_I2C_MspDeInit+0x40>)
 800257a:	f001 fb97 	bl	8003cac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40005400 	.word	0x40005400
 800258c:	40023800 	.word	0x40023800
 8002590:	40020400 	.word	0x40020400

08002594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08c      	sub	sp, #48	; 0x30
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 031c 	add.w	r3, r7, #28
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a35      	ldr	r2, [pc, #212]	; (8002688 <HAL_TIM_Base_MspInit+0xf4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d10e      	bne.n	80025d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a33      	ldr	r2, [pc, #204]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80025d2:	e055      	b.n	8002680 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM10)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2d      	ldr	r2, [pc, #180]	; (8002690 <HAL_TIM_Base_MspInit+0xfc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d135      	bne.n	800264a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	4a29      	ldr	r2, [pc, #164]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	6453      	str	r3, [r2, #68]	; 0x44
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800261a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002620:	2302      	movs	r3, #2
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002624:	2301      	movs	r3, #1
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002628:	2303      	movs	r3, #3
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4619      	mov	r1, r3
 8002632:	4818      	ldr	r0, [pc, #96]	; (8002694 <HAL_TIM_Base_MspInit+0x100>)
 8002634:	f001 f9b6 	bl	80039a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	2105      	movs	r1, #5
 800263c:	2019      	movs	r0, #25
 800263e:	f000 ff0f 	bl	8003460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002642:	2019      	movs	r0, #25
 8002644:	f000 ff28 	bl	8003498 <HAL_NVIC_EnableIRQ>
}
 8002648:	e01a      	b.n	8002680 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM11)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <HAL_TIM_Base_MspInit+0x104>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d115      	bne.n	8002680 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	4a0b      	ldr	r2, [pc, #44]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 800265e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002662:	6453      	str	r3, [r2, #68]	; 0x44
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_TIM_Base_MspInit+0xf8>)
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2105      	movs	r1, #5
 8002674:	201a      	movs	r0, #26
 8002676:	f000 fef3 	bl	8003460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800267a:	201a      	movs	r0, #26
 800267c:	f000 ff0c 	bl	8003498 <HAL_NVIC_EnableIRQ>
}
 8002680:	bf00      	nop
 8002682:	3730      	adds	r7, #48	; 0x30
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40000400 	.word	0x40000400
 800268c:	40023800 	.word	0x40023800
 8002690:	40014400 	.word	0x40014400
 8002694:	40020400 	.word	0x40020400
 8002698:	40014800 	.word	0x40014800

0800269c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a33      	ldr	r2, [pc, #204]	; (8002788 <HAL_TIM_MspPostInit+0xec>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d13c      	bne.n	8002738 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_TIM_MspPostInit+0xf0>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a31      	ldr	r2, [pc, #196]	; (800278c <HAL_TIM_MspPostInit+0xf0>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_TIM_MspPostInit+0xf0>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_TIM_MspPostInit+0xf0>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a2a      	ldr	r2, [pc, #168]	; (800278c <HAL_TIM_MspPostInit+0xf0>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b28      	ldr	r3, [pc, #160]	; (800278c <HAL_TIM_MspPostInit+0xf0>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026f6:	23c0      	movs	r3, #192	; 0xc0
 80026f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026fe:	2301      	movs	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002702:	2301      	movs	r3, #1
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002706:	2302      	movs	r3, #2
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	481f      	ldr	r0, [pc, #124]	; (8002790 <HAL_TIM_MspPostInit+0xf4>)
 8002712:	f001 f947 	bl	80039a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002716:	2303      	movs	r3, #3
 8002718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800271e:	2301      	movs	r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002722:	2301      	movs	r3, #1
 8002724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002726:	2302      	movs	r3, #2
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4619      	mov	r1, r3
 8002730:	4818      	ldr	r0, [pc, #96]	; (8002794 <HAL_TIM_MspPostInit+0xf8>)
 8002732:	f001 f937 	bl	80039a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002736:	e023      	b.n	8002780 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM11)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <HAL_TIM_MspPostInit+0xfc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d11e      	bne.n	8002780 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_TIM_MspPostInit+0xf0>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_TIM_MspPostInit+0xf0>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_TIM_MspPostInit+0xf0>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800275e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002768:	2302      	movs	r3, #2
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800276c:	2302      	movs	r3, #2
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002770:	2303      	movs	r3, #3
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	4806      	ldr	r0, [pc, #24]	; (8002794 <HAL_TIM_MspPostInit+0xf8>)
 800277c:	f001 f912 	bl	80039a4 <HAL_GPIO_Init>
}
 8002780:	bf00      	nop
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40000400 	.word	0x40000400
 800278c:	40023800 	.word	0x40023800
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	40014800 	.word	0x40014800

0800279c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_UART_MspInit+0x94>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d134      	bne.n	8002828 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027c8:	f043 0310 	orr.w	r3, r3, #16
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a14      	ldr	r2, [pc, #80]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002808:	2307      	movs	r3, #7
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4619      	mov	r1, r3
 8002812:	4809      	ldr	r0, [pc, #36]	; (8002838 <HAL_UART_MspInit+0x9c>)
 8002814:	f001 f8c6 	bl	80039a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2105      	movs	r1, #5
 800281c:	2025      	movs	r0, #37	; 0x25
 800281e:	f000 fe1f 	bl	8003460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002822:	2025      	movs	r0, #37	; 0x25
 8002824:	f000 fe38 	bl	8003498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40011000 	.word	0x40011000
 8002834:	40023800 	.word	0x40023800
 8002838:	40020000 	.word	0x40020000

0800283c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08c      	sub	sp, #48	; 0x30
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800284c:	2200      	movs	r2, #0
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	201c      	movs	r0, #28
 8002852:	f000 fe05 	bl	8003460 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002856:	201c      	movs	r0, #28
 8002858:	f000 fe1e 	bl	8003498 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_InitTick+0xa8>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	4a1f      	ldr	r2, [pc, #124]	; (80028e4 <HAL_InitTick+0xa8>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6413      	str	r3, [r2, #64]	; 0x40
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_InitTick+0xa8>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002878:	f107 0210 	add.w	r2, r7, #16
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f002 ff70 	bl	8005768 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002888:	f002 ff46 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 800288c:	4603      	mov	r3, r0
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <HAL_InitTick+0xac>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0c9b      	lsrs	r3, r3, #18
 800289c:	3b01      	subs	r3, #1
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0xb0>)
 80028a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_InitTick+0xb0>)
 80028aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028ae:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80028b0:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <HAL_InitTick+0xb0>)
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_InitTick+0xb0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_InitTick+0xb0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80028c2:	480a      	ldr	r0, [pc, #40]	; (80028ec <HAL_InitTick+0xb0>)
 80028c4:	f002 ff82 	bl	80057cc <HAL_TIM_Base_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d104      	bne.n	80028d8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80028ce:	4807      	ldr	r0, [pc, #28]	; (80028ec <HAL_InitTick+0xb0>)
 80028d0:	f002 ffcc 	bl	800586c <HAL_TIM_Base_Start_IT>
 80028d4:	4603      	mov	r3, r0
 80028d6:	e000      	b.n	80028da <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3730      	adds	r7, #48	; 0x30
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	431bde83 	.word	0x431bde83
 80028ec:	200007dc 	.word	0x200007dc

080028f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <NMI_Handler+0x4>

080028f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <MemManage_Handler+0x4>

08002902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002906:	e7fe      	b.n	8002906 <BusFault_Handler+0x4>

08002908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800290c:	e7fe      	b.n	800290c <UsageFault_Handler+0x4>

0800290e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002922:	f003 fc33 	bl	800618c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2000068c 	.word	0x2000068c

08002930 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002936:	f003 fc29 	bl	800618c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200006d4 	.word	0x200006d4

08002944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <TIM2_IRQHandler+0x10>)
 800294a:	f003 fc1f 	bl	800618c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200007dc 	.word	0x200007dc

08002958 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if((USART1->SR & USART_SR_RXNE) == USART_SR_RXNE)
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <USART1_IRQHandler+0x2c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b20      	cmp	r3, #32
 8002966:	d108      	bne.n	800297a <USART1_IRQHandler+0x22>
	{
		USART1->SR &= ~USART_SR_RXNE;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <USART1_IRQHandler+0x2c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a05      	ldr	r2, [pc, #20]	; (8002984 <USART1_IRQHandler+0x2c>)
 800296e:	f023 0320 	bic.w	r3, r3, #32
 8002972:	6013      	str	r3, [r2, #0]
		UART_RxCallback(&huart1);
 8002974:	4804      	ldr	r0, [pc, #16]	; (8002988 <USART1_IRQHandler+0x30>)
 8002976:	f7fe ffcb 	bl	8001910 <UART_RxCallback>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800297a:	4803      	ldr	r0, [pc, #12]	; (8002988 <USART1_IRQHandler+0x30>)
 800297c:	f004 fc94 	bl	80072a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40011000 	.word	0x40011000
 8002988:	2000071c 	.word	0x2000071c

0800298c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002990:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002994:	f001 fa88 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002998:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800299c:	f001 fa84 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ac:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <_sbrk+0x5c>)
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <_sbrk+0x60>)
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <_sbrk+0x64>)
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <_sbrk+0x68>)
 80029c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <_sbrk+0x64>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d207      	bcs.n	80029e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d4:	f008 f9ca 	bl	800ad6c <__errno>
 80029d8:	4603      	mov	r3, r0
 80029da:	220c      	movs	r2, #12
 80029dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	e009      	b.n	80029f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <_sbrk+0x64>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <_sbrk+0x64>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a05      	ldr	r2, [pc, #20]	; (8002a08 <_sbrk+0x64>)
 80029f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029f6:	68fb      	ldr	r3, [r7, #12]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20018000 	.word	0x20018000
 8002a04:	00000400 	.word	0x00000400
 8002a08:	20000824 	.word	0x20000824
 8002a0c:	200039d8 	.word	0x200039d8

08002a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <SystemInit+0x20>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <SystemInit+0x20>)
 8002a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a38:	480d      	ldr	r0, [pc, #52]	; (8002a70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a3a:	490e      	ldr	r1, [pc, #56]	; (8002a74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a3c:	4a0e      	ldr	r2, [pc, #56]	; (8002a78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a40:	e002      	b.n	8002a48 <LoopCopyDataInit>

08002a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a46:	3304      	adds	r3, #4

08002a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a4c:	d3f9      	bcc.n	8002a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4e:	4a0b      	ldr	r2, [pc, #44]	; (8002a7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a50:	4c0b      	ldr	r4, [pc, #44]	; (8002a80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a54:	e001      	b.n	8002a5a <LoopFillZerobss>

08002a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a58:	3204      	adds	r2, #4

08002a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a5c:	d3fb      	bcc.n	8002a56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a5e:	f7ff ffd7 	bl	8002a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a62:	f008 f989 	bl	800ad78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a66:	f7fe fa5d 	bl	8000f24 <main>
  bx  lr    
 8002a6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a74:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002a78:	0800d298 	.word	0x0800d298
  ldr r2, =_sbss
 8002a7c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002a80:	200039d4 	.word	0x200039d4

08002a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a84:	e7fe      	b.n	8002a84 <ADC_IRQHandler>
	...

08002a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_Init+0x40>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0d      	ldr	r2, [pc, #52]	; (8002ac8 <HAL_Init+0x40>)
 8002a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_Init+0x40>)
 8002a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <HAL_Init+0x40>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	f000 fcca 	bl	800344a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7ff fec0 	bl	800283c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002abc:	f7ff fc5e 	bl	800237c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023c00 	.word	0x40023c00

08002acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_IncTick+0x20>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_IncTick+0x24>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <HAL_IncTick+0x24>)
 8002ade:	6013      	str	r3, [r2, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000008 	.word	0x20000008
 8002af0:	20000828 	.word	0x20000828

08002af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return uwTick;
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_GetTick+0x14>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000828 	.word	0x20000828

08002b0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e033      	b.n	8002b8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fc52 	bl	80023d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b52:	f023 0302 	bic.w	r3, r3, #2
 8002b56:	f043 0202 	orr.w	r2, r3, #2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa48 	bl	8002ff4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
 8002b7a:	e001      	b.n	8002b80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_Start_DMA+0x1e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0ce      	b.n	8002d50 <HAL_ADC_Start_DMA+0x1bc>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d018      	beq.n	8002bfa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd8:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <HAL_ADC_Start_DMA+0x1c4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a5f      	ldr	r2, [pc, #380]	; (8002d5c <HAL_ADC_Start_DMA+0x1c8>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	0c9a      	lsrs	r2, r3, #18
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c08:	d107      	bne.n	8002c1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	f040 8086 	bne.w	8002d36 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c68:	d106      	bne.n	8002c78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f023 0206 	bic.w	r2, r3, #6
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
 8002c76:	e002      	b.n	8002c7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c86:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_ADC_Start_DMA+0x1cc>)
 8002c88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	4a35      	ldr	r2, [pc, #212]	; (8002d64 <HAL_ADC_Start_DMA+0x1d0>)
 8002c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <HAL_ADC_Start_DMA+0x1d4>)
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	4a33      	ldr	r2, [pc, #204]	; (8002d6c <HAL_ADC_Start_DMA+0x1d8>)
 8002ca0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002caa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002cba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	334c      	adds	r3, #76	; 0x4c
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f000 fc98 	bl	8003610 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10f      	bne.n	8002d0c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d129      	bne.n	8002d4e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	e020      	b.n	8002d4e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <HAL_ADC_Start_DMA+0x1dc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d11b      	bne.n	8002d4e <HAL_ADC_Start_DMA+0x1ba>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d114      	bne.n	8002d4e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	e00b      	b.n	8002d4e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0210 	orr.w	r2, r3, #16
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	431bde83 	.word	0x431bde83
 8002d60:	40012300 	.word	0x40012300
 8002d64:	080031ed 	.word	0x080031ed
 8002d68:	080032a7 	.word	0x080032a7
 8002d6c:	080032c3 	.word	0x080032c3
 8002d70:	40012000 	.word	0x40012000

08002d74 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1c>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e105      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x228>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	d925      	bls.n	8002e28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68d9      	ldr	r1, [r3, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	3b1e      	subs	r3, #30
 8002df2:	2207      	movs	r2, #7
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	400a      	ands	r2, r1
 8002e00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68d9      	ldr	r1, [r3, #12]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	4603      	mov	r3, r0
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4403      	add	r3, r0
 8002e1a:	3b1e      	subs	r3, #30
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	e022      	b.n	8002e6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6919      	ldr	r1, [r3, #16]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	400a      	ands	r2, r1
 8002e4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4403      	add	r3, r0
 8002e64:	409a      	lsls	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d824      	bhi.n	8002ec0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	3b05      	subs	r3, #5
 8002e88:	221f      	movs	r2, #31
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	400a      	ands	r2, r1
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b05      	subs	r3, #5
 8002eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ebe:	e04c      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d824      	bhi.n	8002f12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b23      	subs	r3, #35	; 0x23
 8002eda:	221f      	movs	r2, #31
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	3b23      	subs	r3, #35	; 0x23
 8002f04:	fa00 f203 	lsl.w	r2, r0, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f10:	e023      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	3b41      	subs	r3, #65	; 0x41
 8002f24:	221f      	movs	r2, #31
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	400a      	ands	r2, r1
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	4618      	mov	r0, r3
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b41      	subs	r3, #65	; 0x41
 8002f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_ADC_ConfigChannel+0x234>)
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a21      	ldr	r2, [pc, #132]	; (8002fe8 <HAL_ADC_ConfigChannel+0x238>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d109      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1cc>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b12      	cmp	r3, #18
 8002f6e:	d105      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_ADC_ConfigChannel+0x238>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d123      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x21e>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d003      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0x1e6>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b11      	cmp	r3, #17
 8002f94:	d11b      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d111      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_ADC_ConfigChannel+0x23c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <HAL_ADC_ConfigChannel+0x240>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	0c9a      	lsrs	r2, r3, #18
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f9      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40012300 	.word	0x40012300
 8002fe8:	40012000 	.word	0x40012000
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	431bde83 	.word	0x431bde83

08002ff4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ffc:	4b79      	ldr	r3, [pc, #484]	; (80031e4 <ADC_Init+0x1f0>)
 8002ffe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	431a      	orrs	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800304c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800306e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6899      	ldr	r1, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <ADC_Init+0x1f4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800309a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	e00f      	b.n	80030f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0202 	bic.w	r2, r2, #2
 8003100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7e1b      	ldrb	r3, [r3, #24]
 800310c:	005a      	lsls	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800312e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800313e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	3b01      	subs	r3, #1
 800314c:	035a      	lsls	r2, r3, #13
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	e007      	b.n	8003168 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003166:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	3b01      	subs	r3, #1
 8003184:	051a      	lsls	r2, r3, #20
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800319c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6899      	ldr	r1, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031aa:	025a      	lsls	r2, r3, #9
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	029a      	lsls	r2, r3, #10
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40012300 	.word	0x40012300
 80031e8:	0f000001 	.word	0x0f000001

080031ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003202:	2b00      	cmp	r3, #0
 8003204:	d13c      	bne.n	8003280 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d12b      	bne.n	8003278 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003224:	2b00      	cmp	r3, #0
 8003226:	d127      	bne.n	8003278 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003240:	2b00      	cmp	r3, #0
 8003242:	d119      	bne.n	8003278 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0220 	bic.w	r2, r2, #32
 8003252:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7ff fd7b 	bl	8002d74 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800327e:	e00e      	b.n	800329e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fd85 	bl	8002d9c <HAL_ADC_ErrorCallback>
}
 8003292:	e004      	b.n	800329e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff fd67 	bl	8002d88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2240      	movs	r2, #64	; 0x40
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f043 0204 	orr.w	r2, r3, #4
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff fd5a 	bl	8002d9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <__NVIC_SetPriorityGrouping+0x44>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800330c:	4013      	ands	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800331c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003322:	4a04      	ldr	r2, [pc, #16]	; (8003334 <__NVIC_SetPriorityGrouping+0x44>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	60d3      	str	r3, [r2, #12]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800333c:	4b04      	ldr	r3, [pc, #16]	; (8003350 <__NVIC_GetPriorityGrouping+0x18>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	0a1b      	lsrs	r3, r3, #8
 8003342:	f003 0307 	and.w	r3, r3, #7
}
 8003346:	4618      	mov	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	2b00      	cmp	r3, #0
 8003364:	db0b      	blt.n	800337e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	f003 021f 	and.w	r2, r3, #31
 800336c:	4907      	ldr	r1, [pc, #28]	; (800338c <__NVIC_EnableIRQ+0x38>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2001      	movs	r0, #1
 8003376:	fa00 f202 	lsl.w	r2, r0, r2
 800337a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	e000e100 	.word	0xe000e100

08003390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db0a      	blt.n	80033ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	490c      	ldr	r1, [pc, #48]	; (80033dc <__NVIC_SetPriority+0x4c>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	0112      	lsls	r2, r2, #4
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	440b      	add	r3, r1
 80033b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b8:	e00a      	b.n	80033d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4908      	ldr	r1, [pc, #32]	; (80033e0 <__NVIC_SetPriority+0x50>)
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	3b04      	subs	r3, #4
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	440b      	add	r3, r1
 80033ce:	761a      	strb	r2, [r3, #24]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000e100 	.word	0xe000e100
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f1c3 0307 	rsb	r3, r3, #7
 80033fe:	2b04      	cmp	r3, #4
 8003400:	bf28      	it	cs
 8003402:	2304      	movcs	r3, #4
 8003404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3304      	adds	r3, #4
 800340a:	2b06      	cmp	r3, #6
 800340c:	d902      	bls.n	8003414 <NVIC_EncodePriority+0x30>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3b03      	subs	r3, #3
 8003412:	e000      	b.n	8003416 <NVIC_EncodePriority+0x32>
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	401a      	ands	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800342c:	f04f 31ff 	mov.w	r1, #4294967295
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43d9      	mvns	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	4313      	orrs	r3, r2
         );
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	; 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ff4c 	bl	80032f0 <__NVIC_SetPriorityGrouping>
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003472:	f7ff ff61 	bl	8003338 <__NVIC_GetPriorityGrouping>
 8003476:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	6978      	ldr	r0, [r7, #20]
 800347e:	f7ff ffb1 	bl	80033e4 <NVIC_EncodePriority>
 8003482:	4602      	mov	r2, r0
 8003484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff ff80 	bl	8003390 <__NVIC_SetPriority>
}
 8003490:	bf00      	nop
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ff54 	bl	8003354 <__NVIC_EnableIRQ>
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034c0:	f7ff fb18 	bl	8002af4 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e099      	b.n	8003604 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f0:	e00f      	b.n	8003512 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f2:	f7ff faff 	bl	8002af4 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d908      	bls.n	8003512 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2203      	movs	r2, #3
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e078      	b.n	8003604 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e8      	bne.n	80034f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_DMA_Init+0x158>)
 800352c:	4013      	ands	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800353e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003556:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2b04      	cmp	r3, #4
 800356a:	d107      	bne.n	800357c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	4313      	orrs	r3, r2
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 0307 	bic.w	r3, r3, #7
 8003592:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d117      	bne.n	80035d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f977 	bl	80038ac <DMA_CheckFifoParam>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035d2:	2301      	movs	r3, #1
 80035d4:	e016      	b.n	8003604 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f92e 	bl	8003840 <DMA_CalcBaseAndBitshift>
 80035e4:	4603      	mov	r3, r0
 80035e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	223f      	movs	r2, #63	; 0x3f
 80035ee:	409a      	lsls	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	f010803f 	.word	0xf010803f

08003610 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_DMA_Start_IT+0x26>
 8003632:	2302      	movs	r3, #2
 8003634:	e040      	b.n	80036b8 <HAL_DMA_Start_IT+0xa8>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d12f      	bne.n	80036aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f8c0 	bl	80037e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	223f      	movs	r2, #63	; 0x3f
 800366a:	409a      	lsls	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0216 	orr.w	r2, r2, #22
 800367e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0208 	orr.w	r2, r2, #8
 8003696:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e005      	b.n	80036b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
 80036b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036ce:	f7ff fa11 	bl	8002af4 <HAL_GetTick>
 80036d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d008      	beq.n	80036f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e052      	b.n	8003798 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0216 	bic.w	r2, r2, #22
 8003700:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003710:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <HAL_DMA_Abort+0x62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0208 	bic.w	r2, r2, #8
 8003730:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003742:	e013      	b.n	800376c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003744:	f7ff f9d6 	bl	8002af4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b05      	cmp	r3, #5
 8003750:	d90c      	bls.n	800376c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2203      	movs	r2, #3
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e015      	b.n	8003798 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e4      	bne.n	8003744 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	223f      	movs	r2, #63	; 0x3f
 8003780:	409a      	lsls	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d004      	beq.n	80037be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e00c      	b.n	80037d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2205      	movs	r2, #5
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003800:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d108      	bne.n	8003824 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003822:	e007      	b.n	8003834 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	3b10      	subs	r3, #16
 8003850:	4a14      	ldr	r2, [pc, #80]	; (80038a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800385a:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <DMA_CalcBaseAndBitshift+0x68>)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d909      	bls.n	8003882 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003876:	f023 0303 	bic.w	r3, r3, #3
 800387a:	1d1a      	adds	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	659a      	str	r2, [r3, #88]	; 0x58
 8003880:	e007      	b.n	8003892 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	aaaaaaab 	.word	0xaaaaaaab
 80038a8:	0800d09c 	.word	0x0800d09c

080038ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11f      	bne.n	8003906 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d856      	bhi.n	800397a <DMA_CheckFifoParam+0xce>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <DMA_CheckFifoParam+0x28>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038f7 	.word	0x080038f7
 80038dc:	080038e5 	.word	0x080038e5
 80038e0:	0800397b 	.word	0x0800397b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d046      	beq.n	800397e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f4:	e043      	b.n	800397e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038fe:	d140      	bne.n	8003982 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003904:	e03d      	b.n	8003982 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390e:	d121      	bne.n	8003954 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d837      	bhi.n	8003986 <DMA_CheckFifoParam+0xda>
 8003916:	a201      	add	r2, pc, #4	; (adr r2, 800391c <DMA_CheckFifoParam+0x70>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	0800392d 	.word	0x0800392d
 8003920:	08003933 	.word	0x08003933
 8003924:	0800392d 	.word	0x0800392d
 8003928:	08003945 	.word	0x08003945
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      break;
 8003930:	e030      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d025      	beq.n	800398a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003942:	e022      	b.n	800398a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800394c:	d11f      	bne.n	800398e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003952:	e01c      	b.n	800398e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d903      	bls.n	8003962 <DMA_CheckFifoParam+0xb6>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d003      	beq.n	8003968 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003960:	e018      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
      break;
 8003966:	e015      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      break;
 8003978:	e00b      	b.n	8003992 <DMA_CheckFifoParam+0xe6>
      break;
 800397a:	bf00      	nop
 800397c:	e00a      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;
 800397e:	bf00      	nop
 8003980:	e008      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;
 8003982:	bf00      	nop
 8003984:	e006      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;
 8003986:	bf00      	nop
 8003988:	e004      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;
 800398a:	bf00      	nop
 800398c:	e002      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;   
 800398e:	bf00      	nop
 8003990:	e000      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;
 8003992:	bf00      	nop
    }
  } 
  
  return status; 
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop

080039a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	; 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e159      	b.n	8003c74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039c0:	2201      	movs	r2, #1
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	429a      	cmp	r2, r3
 80039da:	f040 8148 	bne.w	8003c6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d005      	beq.n	80039f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d130      	bne.n	8003a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2203      	movs	r2, #3
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	f003 0201 	and.w	r2, r3, #1
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d017      	beq.n	8003a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	2203      	movs	r2, #3
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d123      	bne.n	8003ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	08da      	lsrs	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3208      	adds	r2, #8
 8003aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	220f      	movs	r2, #15
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	08da      	lsrs	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3208      	adds	r2, #8
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2203      	movs	r2, #3
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0203 	and.w	r2, r3, #3
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a2 	beq.w	8003c6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	4b57      	ldr	r3, [pc, #348]	; (8003c8c <HAL_GPIO_Init+0x2e8>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	4a56      	ldr	r2, [pc, #344]	; (8003c8c <HAL_GPIO_Init+0x2e8>)
 8003b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b38:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3a:	4b54      	ldr	r3, [pc, #336]	; (8003c8c <HAL_GPIO_Init+0x2e8>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b46:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <HAL_GPIO_Init+0x2ec>)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a49      	ldr	r2, [pc, #292]	; (8003c94 <HAL_GPIO_Init+0x2f0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d019      	beq.n	8003ba6 <HAL_GPIO_Init+0x202>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a48      	ldr	r2, [pc, #288]	; (8003c98 <HAL_GPIO_Init+0x2f4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_GPIO_Init+0x1fe>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a47      	ldr	r2, [pc, #284]	; (8003c9c <HAL_GPIO_Init+0x2f8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00d      	beq.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a46      	ldr	r2, [pc, #280]	; (8003ca0 <HAL_GPIO_Init+0x2fc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <HAL_GPIO_Init+0x1f6>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a45      	ldr	r2, [pc, #276]	; (8003ca4 <HAL_GPIO_Init+0x300>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <HAL_GPIO_Init+0x1f2>
 8003b92:	2304      	movs	r3, #4
 8003b94:	e008      	b.n	8003ba8 <HAL_GPIO_Init+0x204>
 8003b96:	2307      	movs	r3, #7
 8003b98:	e006      	b.n	8003ba8 <HAL_GPIO_Init+0x204>
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e004      	b.n	8003ba8 <HAL_GPIO_Init+0x204>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e002      	b.n	8003ba8 <HAL_GPIO_Init+0x204>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_GPIO_Init+0x204>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	f002 0203 	and.w	r2, r2, #3
 8003bae:	0092      	lsls	r2, r2, #2
 8003bb0:	4093      	lsls	r3, r2
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bb8:	4935      	ldr	r1, [pc, #212]	; (8003c90 <HAL_GPIO_Init+0x2ec>)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bc6:	4b38      	ldr	r3, [pc, #224]	; (8003ca8 <HAL_GPIO_Init+0x304>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bea:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <HAL_GPIO_Init+0x304>)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bf0:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <HAL_GPIO_Init+0x304>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c14:	4a24      	ldr	r2, [pc, #144]	; (8003ca8 <HAL_GPIO_Init+0x304>)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c1a:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <HAL_GPIO_Init+0x304>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <HAL_GPIO_Init+0x304>)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c44:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <HAL_GPIO_Init+0x304>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c68:	4a0f      	ldr	r2, [pc, #60]	; (8003ca8 <HAL_GPIO_Init+0x304>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3301      	adds	r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	f67f aea2 	bls.w	80039c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	3724      	adds	r7, #36	; 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40013800 	.word	0x40013800
 8003c94:	40020000 	.word	0x40020000
 8003c98:	40020400 	.word	0x40020400
 8003c9c:	40020800 	.word	0x40020800
 8003ca0:	40020c00 	.word	0x40020c00
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40013c00 	.word	0x40013c00

08003cac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e0bb      	b.n	8003e40 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cc8:	2201      	movs	r2, #1
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	f040 80ab 	bne.w	8003e3a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003ce4:	4a5c      	ldr	r2, [pc, #368]	; (8003e58 <HAL_GPIO_DeInit+0x1ac>)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	220f      	movs	r2, #15
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a54      	ldr	r2, [pc, #336]	; (8003e5c <HAL_GPIO_DeInit+0x1b0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d019      	beq.n	8003d42 <HAL_GPIO_DeInit+0x96>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a53      	ldr	r2, [pc, #332]	; (8003e60 <HAL_GPIO_DeInit+0x1b4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_GPIO_DeInit+0x92>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a52      	ldr	r2, [pc, #328]	; (8003e64 <HAL_GPIO_DeInit+0x1b8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00d      	beq.n	8003d3a <HAL_GPIO_DeInit+0x8e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a51      	ldr	r2, [pc, #324]	; (8003e68 <HAL_GPIO_DeInit+0x1bc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <HAL_GPIO_DeInit+0x8a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a50      	ldr	r2, [pc, #320]	; (8003e6c <HAL_GPIO_DeInit+0x1c0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_GPIO_DeInit+0x86>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	e008      	b.n	8003d44 <HAL_GPIO_DeInit+0x98>
 8003d32:	2307      	movs	r3, #7
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_DeInit+0x98>
 8003d36:	2303      	movs	r3, #3
 8003d38:	e004      	b.n	8003d44 <HAL_GPIO_DeInit+0x98>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e002      	b.n	8003d44 <HAL_GPIO_DeInit+0x98>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_GPIO_DeInit+0x98>
 8003d42:	2300      	movs	r3, #0
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	f002 0203 	and.w	r2, r2, #3
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	4093      	lsls	r3, r2
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d132      	bne.n	8003dba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d54:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	4944      	ldr	r1, [pc, #272]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d62:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	4941      	ldr	r1, [pc, #260]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d70:	4b3f      	ldr	r3, [pc, #252]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	493d      	ldr	r1, [pc, #244]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d7e:	4b3c      	ldr	r3, [pc, #240]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	493a      	ldr	r1, [pc, #232]	; (8003e70 <HAL_GPIO_DeInit+0x1c4>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	220f      	movs	r2, #15
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003d9c:	4a2e      	ldr	r2, [pc, #184]	; (8003e58 <HAL_GPIO_DeInit+0x1ac>)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	089b      	lsrs	r3, r3, #2
 8003da2:	3302      	adds	r3, #2
 8003da4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	43da      	mvns	r2, r3
 8003dac:	482a      	ldr	r0, [pc, #168]	; (8003e58 <HAL_GPIO_DeInit+0x1ac>)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	400a      	ands	r2, r1
 8003db4:	3302      	adds	r3, #2
 8003db6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2103      	movs	r1, #3
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	401a      	ands	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	08da      	lsrs	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3208      	adds	r2, #8
 8003dd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	220f      	movs	r2, #15
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	08d2      	lsrs	r2, r2, #3
 8003df0:	4019      	ands	r1, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3208      	adds	r2, #8
 8003df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2103      	movs	r1, #3
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	2101      	movs	r1, #1
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	401a      	ands	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	2103      	movs	r1, #3
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	401a      	ands	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	f67f af40 	bls.w	8003cc8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40020800 	.word	0x40020800
 8003e68:	40020c00 	.word	0x40020c00
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40013c00 	.word	0x40013c00

08003e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
 8003e80:	4613      	mov	r3, r2
 8003e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e84:	787b      	ldrb	r3, [r7, #1]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e90:	e003      	b.n	8003e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	041a      	lsls	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	619a      	str	r2, [r3, #24]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003eb2:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ebe:	4a05      	ldr	r2, [pc, #20]	; (8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fcfa 	bl	80018c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40013c00 	.word	0x40013c00

08003ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e12b      	b.n	8004142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe fade 	bl	80024c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f001 fbec 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8003f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4a81      	ldr	r2, [pc, #516]	; (800414c <HAL_I2C_Init+0x274>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d807      	bhi.n	8003f5c <HAL_I2C_Init+0x84>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a80      	ldr	r2, [pc, #512]	; (8004150 <HAL_I2C_Init+0x278>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bf94      	ite	ls
 8003f54:	2301      	movls	r3, #1
 8003f56:	2300      	movhi	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e006      	b.n	8003f6a <HAL_I2C_Init+0x92>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a7d      	ldr	r2, [pc, #500]	; (8004154 <HAL_I2C_Init+0x27c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	bf94      	ite	ls
 8003f64:	2301      	movls	r3, #1
 8003f66:	2300      	movhi	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0e7      	b.n	8004142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a78      	ldr	r2, [pc, #480]	; (8004158 <HAL_I2C_Init+0x280>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0c9b      	lsrs	r3, r3, #18
 8003f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a6a      	ldr	r2, [pc, #424]	; (800414c <HAL_I2C_Init+0x274>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d802      	bhi.n	8003fac <HAL_I2C_Init+0xd4>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	e009      	b.n	8003fc0 <HAL_I2C_Init+0xe8>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	4a69      	ldr	r2, [pc, #420]	; (800415c <HAL_I2C_Init+0x284>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	495c      	ldr	r1, [pc, #368]	; (800414c <HAL_I2C_Init+0x274>)
 8003fdc:	428b      	cmp	r3, r1
 8003fde:	d819      	bhi.n	8004014 <HAL_I2C_Init+0x13c>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1e59      	subs	r1, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ff4:	400b      	ands	r3, r1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_I2C_Init+0x138>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1e59      	subs	r1, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	fbb1 f3f3 	udiv	r3, r1, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400e:	e051      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004010:	2304      	movs	r3, #4
 8004012:	e04f      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d111      	bne.n	8004040 <HAL_I2C_Init+0x168>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e58      	subs	r0, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	440b      	add	r3, r1
 800402a:	fbb0 f3f3 	udiv	r3, r0, r3
 800402e:	3301      	adds	r3, #1
 8004030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e012      	b.n	8004066 <HAL_I2C_Init+0x18e>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1e58      	subs	r0, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	0099      	lsls	r1, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	fbb0 f3f3 	udiv	r3, r0, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Init+0x196>
 800406a:	2301      	movs	r3, #1
 800406c:	e022      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10e      	bne.n	8004094 <HAL_I2C_Init+0x1bc>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1e58      	subs	r0, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	440b      	add	r3, r1
 8004084:	fbb0 f3f3 	udiv	r3, r0, r3
 8004088:	3301      	adds	r3, #1
 800408a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004092:	e00f      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e58      	subs	r0, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	0099      	lsls	r1, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	6809      	ldr	r1, [r1, #0]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6911      	ldr	r1, [r2, #16]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68d2      	ldr	r2, [r2, #12]
 80040ee:	4311      	orrs	r1, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	000186a0 	.word	0x000186a0
 8004150:	001e847f 	.word	0x001e847f
 8004154:	003d08ff 	.word	0x003d08ff
 8004158:	431bde83 	.word	0x431bde83
 800415c:	10624dd3 	.word	0x10624dd3

08004160 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e021      	b.n	80041b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2224      	movs	r2, #36	; 0x24
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe f9e0 	bl	8002550 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	4608      	mov	r0, r1
 80041ca:	4611      	mov	r1, r2
 80041cc:	461a      	mov	r2, r3
 80041ce:	4603      	mov	r3, r0
 80041d0:	817b      	strh	r3, [r7, #10]
 80041d2:	460b      	mov	r3, r1
 80041d4:	813b      	strh	r3, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041da:	f7fe fc8b 	bl	8002af4 <HAL_GetTick>
 80041de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	f040 80d9 	bne.w	80043a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2319      	movs	r3, #25
 80041f4:	2201      	movs	r2, #1
 80041f6:	496d      	ldr	r1, [pc, #436]	; (80043ac <HAL_I2C_Mem_Write+0x1ec>)
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fc7f 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
 8004206:	e0cc      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_I2C_Mem_Write+0x56>
 8004212:	2302      	movs	r3, #2
 8004214:	e0c5      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d007      	beq.n	800423c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800424a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2221      	movs	r2, #33	; 0x21
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800426c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a4d      	ldr	r2, [pc, #308]	; (80043b0 <HAL_I2C_Mem_Write+0x1f0>)
 800427c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800427e:	88f8      	ldrh	r0, [r7, #6]
 8004280:	893a      	ldrh	r2, [r7, #8]
 8004282:	8979      	ldrh	r1, [r7, #10]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4603      	mov	r3, r0
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fab6 	bl	8004800 <I2C_RequestMemoryWrite>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d052      	beq.n	8004340 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e081      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fd00 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d107      	bne.n	80042c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06b      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b04      	cmp	r3, #4
 8004306:	d11b      	bne.n	8004340 <HAL_I2C_Mem_Write+0x180>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d017      	beq.n	8004340 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1aa      	bne.n	800429e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fcec 	bl	8004d2a <I2C_WaitOnBTFFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00d      	beq.n	8004374 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2b04      	cmp	r3, #4
 800435e:	d107      	bne.n	8004370 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e016      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	00100002 	.word	0x00100002
 80043b0:	ffff0000 	.word	0xffff0000

080043b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	; 0x30
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	4608      	mov	r0, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	461a      	mov	r2, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	817b      	strh	r3, [r7, #10]
 80043c6:	460b      	mov	r3, r1
 80043c8:	813b      	strh	r3, [r7, #8]
 80043ca:	4613      	mov	r3, r2
 80043cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043ce:	f7fe fb91 	bl	8002af4 <HAL_GetTick>
 80043d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b20      	cmp	r3, #32
 80043de:	f040 8208 	bne.w	80047f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	2319      	movs	r3, #25
 80043e8:	2201      	movs	r2, #1
 80043ea:	497b      	ldr	r1, [pc, #492]	; (80045d8 <HAL_I2C_Mem_Read+0x224>)
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fb85 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
 80043fa:	e1fb      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_I2C_Mem_Read+0x56>
 8004406:	2302      	movs	r3, #2
 8004408:	e1f4      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d007      	beq.n	8004430 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800443e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2222      	movs	r2, #34	; 0x22
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2240      	movs	r2, #64	; 0x40
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4a5b      	ldr	r2, [pc, #364]	; (80045dc <HAL_I2C_Mem_Read+0x228>)
 8004470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004472:	88f8      	ldrh	r0, [r7, #6]
 8004474:	893a      	ldrh	r2, [r7, #8]
 8004476:	8979      	ldrh	r1, [r7, #10]
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	4603      	mov	r3, r0
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fa52 	bl	800492c <I2C_RequestMemoryRead>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e1b0      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d113      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	623b      	str	r3, [r7, #32]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	623b      	str	r3, [r7, #32]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e184      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d11b      	bne.n	8004502 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044da:	2300      	movs	r3, #0
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e164      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	2b02      	cmp	r3, #2
 8004508:	d11b      	bne.n	8004542 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004518:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	e144      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004558:	e138      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	2b03      	cmp	r3, #3
 8004560:	f200 80f1 	bhi.w	8004746 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004568:	2b01      	cmp	r3, #1
 800456a:	d123      	bne.n	80045b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fc1b 	bl	8004dac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e139      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045b2:	e10b      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d14e      	bne.n	800465a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	2200      	movs	r2, #0
 80045c4:	4906      	ldr	r1, [pc, #24]	; (80045e0 <HAL_I2C_Mem_Read+0x22c>)
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fa98 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e10e      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
 80045d6:	bf00      	nop
 80045d8:	00100002 	.word	0x00100002
 80045dc:	ffff0000 	.word	0xffff0000
 80045e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004658:	e0b8      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	2200      	movs	r2, #0
 8004662:	4966      	ldr	r1, [pc, #408]	; (80047fc <HAL_I2C_Mem_Read+0x448>)
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa49 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0bf      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2200      	movs	r2, #0
 80046be:	494f      	ldr	r1, [pc, #316]	; (80047fc <HAL_I2C_Mem_Read+0x448>)
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fa1b 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e091      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004744:	e042      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fb2e 	bl	8004dac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e04c      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b04      	cmp	r3, #4
 8004798:	d118      	bne.n	80047cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f47f aec2 	bne.w	800455a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e000      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3728      	adds	r7, #40	; 0x28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	00010004 	.word	0x00010004

08004800 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	4608      	mov	r0, r1
 800480a:	4611      	mov	r1, r2
 800480c:	461a      	mov	r2, r3
 800480e:	4603      	mov	r3, r0
 8004810:	817b      	strh	r3, [r7, #10]
 8004812:	460b      	mov	r3, r1
 8004814:	813b      	strh	r3, [r7, #8]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004828:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2200      	movs	r2, #0
 8004832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f960 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004850:	d103      	bne.n	800485a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004858:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e05f      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800486c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	6a3a      	ldr	r2, [r7, #32]
 8004872:	492d      	ldr	r1, [pc, #180]	; (8004928 <I2C_RequestMemoryWrite+0x128>)
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f998 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e04c      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	6a39      	ldr	r1, [r7, #32]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fa02 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d107      	bne.n	80048c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e02b      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048cc:	893b      	ldrh	r3, [r7, #8]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	611a      	str	r2, [r3, #16]
 80048d6:	e021      	b.n	800491c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048d8:	893b      	ldrh	r3, [r7, #8]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	b29b      	uxth	r3, r3
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e8:	6a39      	ldr	r1, [r7, #32]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f9dc 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d107      	bne.n	800490e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e005      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004912:	893b      	ldrh	r3, [r7, #8]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	00010002 	.word	0x00010002

0800492c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	4608      	mov	r0, r1
 8004936:	4611      	mov	r1, r2
 8004938:	461a      	mov	r2, r3
 800493a:	4603      	mov	r3, r0
 800493c:	817b      	strh	r3, [r7, #10]
 800493e:	460b      	mov	r3, r1
 8004940:	813b      	strh	r3, [r7, #8]
 8004942:	4613      	mov	r3, r2
 8004944:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004954:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004964:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	2200      	movs	r2, #0
 800496e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f8c2 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498c:	d103      	bne.n	8004996 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0aa      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800499a:	897b      	ldrh	r3, [r7, #10]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	6a3a      	ldr	r2, [r7, #32]
 80049ae:	4952      	ldr	r1, [pc, #328]	; (8004af8 <I2C_RequestMemoryRead+0x1cc>)
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f8fa 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e097      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	6a39      	ldr	r1, [r7, #32]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f964 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d107      	bne.n	80049fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e076      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d105      	bne.n	8004a14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a08:	893b      	ldrh	r3, [r7, #8]
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	611a      	str	r2, [r3, #16]
 8004a12:	e021      	b.n	8004a58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a14:	893b      	ldrh	r3, [r7, #8]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a24:	6a39      	ldr	r1, [r7, #32]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f93e 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00d      	beq.n	8004a4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d107      	bne.n	8004a4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e050      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4e:	893b      	ldrh	r3, [r7, #8]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	6a39      	ldr	r1, [r7, #32]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f923 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00d      	beq.n	8004a84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d107      	bne.n	8004a80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e035      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f82b 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aba:	d103      	bne.n	8004ac4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e013      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ac8:	897b      	ldrh	r3, [r7, #10]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	6a3a      	ldr	r2, [r7, #32]
 8004adc:	4906      	ldr	r1, [pc, #24]	; (8004af8 <I2C_RequestMemoryRead+0x1cc>)
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f863 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	00010002 	.word	0x00010002

08004afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b0c:	e025      	b.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d021      	beq.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b16:	f7fd ffed 	bl	8002af4 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d302      	bcc.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e023      	b.n	8004ba2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10d      	bne.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	e00c      	b.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	43da      	mvns	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bf0c      	ite	eq
 8004b92:	2301      	moveq	r3, #1
 8004b94:	2300      	movne	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d0b6      	beq.n	8004b0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb8:	e051      	b.n	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc8:	d123      	bne.n	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004be2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f043 0204 	orr.w	r2, r3, #4
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e046      	b.n	8004ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d021      	beq.n	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1a:	f7fd ff6b 	bl	8002af4 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e020      	b.n	8004ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	0c1b      	lsrs	r3, r3, #16
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d10c      	bne.n	8004c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bf14      	ite	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	2300      	moveq	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	e00b      	b.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	43da      	mvns	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d18d      	bne.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb4:	e02d      	b.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f8ce 	bl	8004e58 <I2C_IsAcknowledgeFailed>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e02d      	b.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d021      	beq.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cce:	f7fd ff11 	bl	8002af4 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d116      	bne.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e007      	b.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1c:	2b80      	cmp	r3, #128	; 0x80
 8004d1e:	d1ca      	bne.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d36:	e02d      	b.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f88d 	bl	8004e58 <I2C_IsAcknowledgeFailed>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e02d      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d021      	beq.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d50:	f7fd fed0 	bl	8002af4 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d116      	bne.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e007      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d1ca      	bne.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db8:	e042      	b.n	8004e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d119      	bne.n	8004dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0210 	mvn.w	r2, #16
 8004dd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e029      	b.n	8004e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfc:	f7fd fe7a 	bl	8002af4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d116      	bne.n	8004e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	f043 0220 	orr.w	r2, r3, #32
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e007      	b.n	8004e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d1b5      	bne.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	d11b      	bne.n	8004ea8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	f043 0204 	orr.w	r2, r3, #4
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e267      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d075      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ed6:	4b88      	ldr	r3, [pc, #544]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d00c      	beq.n	8004efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ee2:	4b85      	ldr	r3, [pc, #532]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d112      	bne.n	8004f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eee:	4b82      	ldr	r3, [pc, #520]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004efa:	d10b      	bne.n	8004f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efc:	4b7e      	ldr	r3, [pc, #504]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d05b      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x108>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d157      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e242      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d106      	bne.n	8004f2c <HAL_RCC_OscConfig+0x74>
 8004f1e:	4b76      	ldr	r3, [pc, #472]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a75      	ldr	r2, [pc, #468]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e01d      	b.n	8004f68 <HAL_RCC_OscConfig+0xb0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCC_OscConfig+0x98>
 8004f36:	4b70      	ldr	r3, [pc, #448]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a6f      	ldr	r2, [pc, #444]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	4b6d      	ldr	r3, [pc, #436]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a6c      	ldr	r2, [pc, #432]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e00b      	b.n	8004f68 <HAL_RCC_OscConfig+0xb0>
 8004f50:	4b69      	ldr	r3, [pc, #420]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a68      	ldr	r2, [pc, #416]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	4b66      	ldr	r3, [pc, #408]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a65      	ldr	r2, [pc, #404]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d013      	beq.n	8004f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f70:	f7fd fdc0 	bl	8002af4 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fd fdbc 	bl	8002af4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	; 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e207      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8a:	4b5b      	ldr	r3, [pc, #364]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f0      	beq.n	8004f78 <HAL_RCC_OscConfig+0xc0>
 8004f96:	e014      	b.n	8004fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fd fdac 	bl	8002af4 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa0:	f7fd fda8 	bl	8002af4 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b64      	cmp	r3, #100	; 0x64
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e1f3      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fb2:	4b51      	ldr	r3, [pc, #324]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0xe8>
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d063      	beq.n	8005096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fce:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fda:	4b47      	ldr	r3, [pc, #284]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d11c      	bne.n	8005020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fe6:	4b44      	ldr	r3, [pc, #272]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d116      	bne.n	8005020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff2:	4b41      	ldr	r3, [pc, #260]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_RCC_OscConfig+0x152>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d001      	beq.n	800500a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e1c7      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500a:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4937      	ldr	r1, [pc, #220]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800501e:	e03a      	b.n	8005096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d020      	beq.n	800506a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005028:	4b34      	ldr	r3, [pc, #208]	; (80050fc <HAL_RCC_OscConfig+0x244>)
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fd fd61 	bl	8002af4 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005036:	f7fd fd5d 	bl	8002af4 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e1a8      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005048:	4b2b      	ldr	r3, [pc, #172]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005054:	4b28      	ldr	r3, [pc, #160]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4925      	ldr	r1, [pc, #148]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8005064:	4313      	orrs	r3, r2
 8005066:	600b      	str	r3, [r1, #0]
 8005068:	e015      	b.n	8005096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800506a:	4b24      	ldr	r3, [pc, #144]	; (80050fc <HAL_RCC_OscConfig+0x244>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fd fd40 	bl	8002af4 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005078:	f7fd fd3c 	bl	8002af4 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e187      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d036      	beq.n	8005110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d016      	beq.n	80050d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050aa:	4b15      	ldr	r3, [pc, #84]	; (8005100 <HAL_RCC_OscConfig+0x248>)
 80050ac:	2201      	movs	r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fd fd20 	bl	8002af4 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050b8:	f7fd fd1c 	bl	8002af4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e167      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ca:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 80050cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x200>
 80050d6:	e01b      	b.n	8005110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <HAL_RCC_OscConfig+0x248>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050de:	f7fd fd09 	bl	8002af4 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e4:	e00e      	b.n	8005104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e6:	f7fd fd05 	bl	8002af4 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d907      	bls.n	8005104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e150      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
 80050f8:	40023800 	.word	0x40023800
 80050fc:	42470000 	.word	0x42470000
 8005100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005104:	4b88      	ldr	r3, [pc, #544]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ea      	bne.n	80050e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8097 	beq.w	800524c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800511e:	2300      	movs	r3, #0
 8005120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005122:	4b81      	ldr	r3, [pc, #516]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10f      	bne.n	800514e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	4b7d      	ldr	r3, [pc, #500]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	4a7c      	ldr	r2, [pc, #496]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513c:	6413      	str	r3, [r2, #64]	; 0x40
 800513e:	4b7a      	ldr	r3, [pc, #488]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514e:	4b77      	ldr	r3, [pc, #476]	; (800532c <HAL_RCC_OscConfig+0x474>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005156:	2b00      	cmp	r3, #0
 8005158:	d118      	bne.n	800518c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800515a:	4b74      	ldr	r3, [pc, #464]	; (800532c <HAL_RCC_OscConfig+0x474>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a73      	ldr	r2, [pc, #460]	; (800532c <HAL_RCC_OscConfig+0x474>)
 8005160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005166:	f7fd fcc5 	bl	8002af4 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800516e:	f7fd fcc1 	bl	8002af4 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e10c      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005180:	4b6a      	ldr	r3, [pc, #424]	; (800532c <HAL_RCC_OscConfig+0x474>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d106      	bne.n	80051a2 <HAL_RCC_OscConfig+0x2ea>
 8005194:	4b64      	ldr	r3, [pc, #400]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	4a63      	ldr	r2, [pc, #396]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	6713      	str	r3, [r2, #112]	; 0x70
 80051a0:	e01c      	b.n	80051dc <HAL_RCC_OscConfig+0x324>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b05      	cmp	r3, #5
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x30c>
 80051aa:	4b5f      	ldr	r3, [pc, #380]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	4a5e      	ldr	r2, [pc, #376]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051b0:	f043 0304 	orr.w	r3, r3, #4
 80051b4:	6713      	str	r3, [r2, #112]	; 0x70
 80051b6:	4b5c      	ldr	r3, [pc, #368]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	4a5b      	ldr	r2, [pc, #364]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70
 80051c2:	e00b      	b.n	80051dc <HAL_RCC_OscConfig+0x324>
 80051c4:	4b58      	ldr	r3, [pc, #352]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	4a57      	ldr	r2, [pc, #348]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	6713      	str	r3, [r2, #112]	; 0x70
 80051d0:	4b55      	ldr	r3, [pc, #340]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d4:	4a54      	ldr	r2, [pc, #336]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051d6:	f023 0304 	bic.w	r3, r3, #4
 80051da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d015      	beq.n	8005210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e4:	f7fd fc86 	bl	8002af4 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ec:	f7fd fc82 	bl	8002af4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e0cb      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005202:	4b49      	ldr	r3, [pc, #292]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0ee      	beq.n	80051ec <HAL_RCC_OscConfig+0x334>
 800520e:	e014      	b.n	800523a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005210:	f7fd fc70 	bl	8002af4 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005216:	e00a      	b.n	800522e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005218:	f7fd fc6c 	bl	8002af4 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f241 3288 	movw	r2, #5000	; 0x1388
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e0b5      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800522e:	4b3e      	ldr	r3, [pc, #248]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1ee      	bne.n	8005218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d105      	bne.n	800524c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005240:	4b39      	ldr	r3, [pc, #228]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	4a38      	ldr	r2, [pc, #224]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800524a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80a1 	beq.w	8005398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005256:	4b34      	ldr	r3, [pc, #208]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	2b08      	cmp	r3, #8
 8005260:	d05c      	beq.n	800531c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d141      	bne.n	80052ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526a:	4b31      	ldr	r3, [pc, #196]	; (8005330 <HAL_RCC_OscConfig+0x478>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005270:	f7fd fc40 	bl	8002af4 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005278:	f7fd fc3c 	bl	8002af4 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e087      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	4b27      	ldr	r3, [pc, #156]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	019b      	lsls	r3, r3, #6
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	085b      	lsrs	r3, r3, #1
 80052ae:	3b01      	subs	r3, #1
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	061b      	lsls	r3, r3, #24
 80052ba:	491b      	ldr	r1, [pc, #108]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c0:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <HAL_RCC_OscConfig+0x478>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c6:	f7fd fc15 	bl	8002af4 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ce:	f7fd fc11 	bl	8002af4 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e05c      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e0:	4b11      	ldr	r3, [pc, #68]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x416>
 80052ec:	e054      	b.n	8005398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <HAL_RCC_OscConfig+0x478>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7fd fbfe 	bl	8002af4 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fd fbfa 	bl	8002af4 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e045      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x444>
 800531a:	e03d      	b.n	8005398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d107      	bne.n	8005334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e038      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
 8005328:	40023800 	.word	0x40023800
 800532c:	40007000 	.word	0x40007000
 8005330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005334:	4b1b      	ldr	r3, [pc, #108]	; (80053a4 <HAL_RCC_OscConfig+0x4ec>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d028      	beq.n	8005394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800534c:	429a      	cmp	r2, r3
 800534e:	d121      	bne.n	8005394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d11a      	bne.n	8005394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800536a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800536c:	4293      	cmp	r3, r2
 800536e:	d111      	bne.n	8005394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	3b01      	subs	r3, #1
 800537e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005380:	429a      	cmp	r2, r3
 8005382:	d107      	bne.n	8005394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800

080053a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0cc      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053bc:	4b68      	ldr	r3, [pc, #416]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d90c      	bls.n	80053e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b65      	ldr	r3, [pc, #404]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d2:	4b63      	ldr	r3, [pc, #396]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0b8      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d020      	beq.n	8005432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053fc:	4b59      	ldr	r3, [pc, #356]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4a58      	ldr	r2, [pc, #352]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005414:	4b53      	ldr	r3, [pc, #332]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4a52      	ldr	r2, [pc, #328]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800541e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005420:	4b50      	ldr	r3, [pc, #320]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	494d      	ldr	r1, [pc, #308]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d044      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d107      	bne.n	8005456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005446:	4b47      	ldr	r3, [pc, #284]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d119      	bne.n	8005486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e07f      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d003      	beq.n	8005466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005462:	2b03      	cmp	r3, #3
 8005464:	d107      	bne.n	8005476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005466:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d109      	bne.n	8005486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e06f      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005476:	4b3b      	ldr	r3, [pc, #236]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e067      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005486:	4b37      	ldr	r3, [pc, #220]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f023 0203 	bic.w	r2, r3, #3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4934      	ldr	r1, [pc, #208]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005498:	f7fd fb2c 	bl	8002af4 <HAL_GetTick>
 800549c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800549e:	e00a      	b.n	80054b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a0:	f7fd fb28 	bl	8002af4 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e04f      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b6:	4b2b      	ldr	r3, [pc, #172]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 020c 	and.w	r2, r3, #12
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d1eb      	bne.n	80054a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054c8:	4b25      	ldr	r3, [pc, #148]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d20c      	bcs.n	80054f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d6:	4b22      	ldr	r3, [pc, #136]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b20      	ldr	r3, [pc, #128]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e032      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4916      	ldr	r1, [pc, #88]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800551a:	4b12      	ldr	r3, [pc, #72]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	490e      	ldr	r1, [pc, #56]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800552e:	f000 f821 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 8005532:	4602      	mov	r2, r0
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	490a      	ldr	r1, [pc, #40]	; (8005568 <HAL_RCC_ClockConfig+0x1c0>)
 8005540:	5ccb      	ldrb	r3, [r1, r3]
 8005542:	fa22 f303 	lsr.w	r3, r2, r3
 8005546:	4a09      	ldr	r2, [pc, #36]	; (800556c <HAL_RCC_ClockConfig+0x1c4>)
 8005548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800554a:	4b09      	ldr	r3, [pc, #36]	; (8005570 <HAL_RCC_ClockConfig+0x1c8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fd f974 	bl	800283c <HAL_InitTick>

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40023c00 	.word	0x40023c00
 8005564:	40023800 	.word	0x40023800
 8005568:	0800d084 	.word	0x0800d084
 800556c:	20000000 	.word	0x20000000
 8005570:	20000004 	.word	0x20000004

08005574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005578:	b090      	sub	sp, #64	; 0x40
 800557a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
 8005580:	2300      	movs	r3, #0
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005584:	2300      	movs	r3, #0
 8005586:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800558c:	4b59      	ldr	r3, [pc, #356]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 030c 	and.w	r3, r3, #12
 8005594:	2b08      	cmp	r3, #8
 8005596:	d00d      	beq.n	80055b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005598:	2b08      	cmp	r3, #8
 800559a:	f200 80a1 	bhi.w	80056e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_RCC_GetSysClockFreq+0x34>
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d003      	beq.n	80055ae <HAL_RCC_GetSysClockFreq+0x3a>
 80055a6:	e09b      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055a8:	4b53      	ldr	r3, [pc, #332]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80055aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80055ac:	e09b      	b.n	80056e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055ae:	4b53      	ldr	r3, [pc, #332]	; (80056fc <HAL_RCC_GetSysClockFreq+0x188>)
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055b2:	e098      	b.n	80056e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055b4:	4b4f      	ldr	r3, [pc, #316]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055be:	4b4d      	ldr	r3, [pc, #308]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d028      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ca:	4b4a      	ldr	r3, [pc, #296]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	099b      	lsrs	r3, r3, #6
 80055d0:	2200      	movs	r2, #0
 80055d2:	623b      	str	r3, [r7, #32]
 80055d4:	627a      	str	r2, [r7, #36]	; 0x24
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055dc:	2100      	movs	r1, #0
 80055de:	4b47      	ldr	r3, [pc, #284]	; (80056fc <HAL_RCC_GetSysClockFreq+0x188>)
 80055e0:	fb03 f201 	mul.w	r2, r3, r1
 80055e4:	2300      	movs	r3, #0
 80055e6:	fb00 f303 	mul.w	r3, r0, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	4a43      	ldr	r2, [pc, #268]	; (80056fc <HAL_RCC_GetSysClockFreq+0x188>)
 80055ee:	fba0 1202 	umull	r1, r2, r0, r2
 80055f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f4:	460a      	mov	r2, r1
 80055f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80055f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fa:	4413      	add	r3, r2
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005600:	2200      	movs	r2, #0
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	61fa      	str	r2, [r7, #28]
 8005606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800560a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800560e:	f7fb fad3 	bl	8000bb8 <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4613      	mov	r3, r2
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800561a:	e053      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800561c:	4b35      	ldr	r3, [pc, #212]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	099b      	lsrs	r3, r3, #6
 8005622:	2200      	movs	r2, #0
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	617a      	str	r2, [r7, #20]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800562e:	f04f 0b00 	mov.w	fp, #0
 8005632:	4652      	mov	r2, sl
 8005634:	465b      	mov	r3, fp
 8005636:	f04f 0000 	mov.w	r0, #0
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	0159      	lsls	r1, r3, #5
 8005640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005644:	0150      	lsls	r0, r2, #5
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	ebb2 080a 	subs.w	r8, r2, sl
 800564e:	eb63 090b 	sbc.w	r9, r3, fp
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800565e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005662:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005666:	ebb2 0408 	subs.w	r4, r2, r8
 800566a:	eb63 0509 	sbc.w	r5, r3, r9
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	00eb      	lsls	r3, r5, #3
 8005678:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800567c:	00e2      	lsls	r2, r4, #3
 800567e:	4614      	mov	r4, r2
 8005680:	461d      	mov	r5, r3
 8005682:	eb14 030a 	adds.w	r3, r4, sl
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	eb45 030b 	adc.w	r3, r5, fp
 800568c:	607b      	str	r3, [r7, #4]
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800569a:	4629      	mov	r1, r5
 800569c:	028b      	lsls	r3, r1, #10
 800569e:	4621      	mov	r1, r4
 80056a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056a4:	4621      	mov	r1, r4
 80056a6:	028a      	lsls	r2, r1, #10
 80056a8:	4610      	mov	r0, r2
 80056aa:	4619      	mov	r1, r3
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	2200      	movs	r2, #0
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	60fa      	str	r2, [r7, #12]
 80056b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056b8:	f7fb fa7e 	bl	8000bb8 <__aeabi_uldivmod>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4613      	mov	r3, r2
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	0c1b      	lsrs	r3, r3, #16
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	3301      	adds	r3, #1
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80056d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056de:	e002      	b.n	80056e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80056e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3740      	adds	r7, #64	; 0x40
 80056ec:	46bd      	mov	sp, r7
 80056ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056f2:	bf00      	nop
 80056f4:	40023800 	.word	0x40023800
 80056f8:	00f42400 	.word	0x00f42400
 80056fc:	017d7840 	.word	0x017d7840

08005700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005704:	4b03      	ldr	r3, [pc, #12]	; (8005714 <HAL_RCC_GetHCLKFreq+0x14>)
 8005706:	681b      	ldr	r3, [r3, #0]
}
 8005708:	4618      	mov	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000000 	.word	0x20000000

08005718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800571c:	f7ff fff0 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	0a9b      	lsrs	r3, r3, #10
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	4903      	ldr	r1, [pc, #12]	; (800573c <HAL_RCC_GetPCLK1Freq+0x24>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40023800 	.word	0x40023800
 800573c:	0800d094 	.word	0x0800d094

08005740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005744:	f7ff ffdc 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	0b5b      	lsrs	r3, r3, #13
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4903      	ldr	r1, [pc, #12]	; (8005764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40023800 	.word	0x40023800
 8005764:	0800d094 	.word	0x0800d094

08005768 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	220f      	movs	r2, #15
 8005776:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005778:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <HAL_RCC_GetClockConfig+0x5c>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0203 	and.w	r2, r3, #3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005784:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <HAL_RCC_GetClockConfig+0x5c>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005790:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <HAL_RCC_GetClockConfig+0x5c>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800579c:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <HAL_RCC_GetClockConfig+0x5c>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	08db      	lsrs	r3, r3, #3
 80057a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <HAL_RCC_GetClockConfig+0x60>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0207 	and.w	r2, r3, #7
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	601a      	str	r2, [r3, #0]
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40023800 	.word	0x40023800
 80057c8:	40023c00 	.word	0x40023c00

080057cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e041      	b.n	8005862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fc fece 	bl	8002594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f001 f800 	bl	8006810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	d001      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e044      	b.n	800590e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1e      	ldr	r2, [pc, #120]	; (800591c <HAL_TIM_Base_Start_IT+0xb0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d018      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x6c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ae:	d013      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x6c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1a      	ldr	r2, [pc, #104]	; (8005920 <HAL_TIM_Base_Start_IT+0xb4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x6c>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a19      	ldr	r2, [pc, #100]	; (8005924 <HAL_TIM_Base_Start_IT+0xb8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x6c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a17      	ldr	r2, [pc, #92]	; (8005928 <HAL_TIM_Base_Start_IT+0xbc>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x6c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a16      	ldr	r2, [pc, #88]	; (800592c <HAL_TIM_Base_Start_IT+0xc0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d111      	bne.n	80058fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d010      	beq.n	800590c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fa:	e007      	b.n	800590c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40014000 	.word	0x40014000

08005930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e041      	b.n	80059c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f839 	bl	80059ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3304      	adds	r3, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f000 ff4e 	bl	8006810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <HAL_TIM_PWM_Start+0x24>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e022      	b.n	8005a4e <HAL_TIM_PWM_Start+0x6a>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d109      	bne.n	8005a22 <HAL_TIM_PWM_Start+0x3e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	bf14      	ite	ne
 8005a1a:	2301      	movne	r3, #1
 8005a1c:	2300      	moveq	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	e015      	b.n	8005a4e <HAL_TIM_PWM_Start+0x6a>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d109      	bne.n	8005a3c <HAL_TIM_PWM_Start+0x58>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e008      	b.n	8005a4e <HAL_TIM_PWM_Start+0x6a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	bf14      	ite	ne
 8005a48:	2301      	movne	r3, #1
 8005a4a:	2300      	moveq	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e068      	b.n	8005b28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_PWM_Start+0x82>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a64:	e013      	b.n	8005a8e <HAL_TIM_PWM_Start+0xaa>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_PWM_Start+0x92>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a74:	e00b      	b.n	8005a8e <HAL_TIM_PWM_Start+0xaa>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_PWM_Start+0xa2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a84:	e003      	b.n	8005a8e <HAL_TIM_PWM_Start+0xaa>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2201      	movs	r2, #1
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 fa7e 	bl	8006f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a23      	ldr	r2, [pc, #140]	; (8005b30 <HAL_TIM_PWM_Start+0x14c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d107      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <HAL_TIM_PWM_Start+0x14c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d018      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x10e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac8:	d013      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x10e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a19      	ldr	r2, [pc, #100]	; (8005b34 <HAL_TIM_PWM_Start+0x150>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00e      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x10e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <HAL_TIM_PWM_Start+0x154>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x10e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <HAL_TIM_PWM_Start+0x158>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d004      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x10e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <HAL_TIM_PWM_Start+0x15c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d111      	bne.n	8005b16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b06      	cmp	r3, #6
 8005b02:	d010      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b14:	e007      	b.n	8005b26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0201 	orr.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40014000 	.word	0x40014000

08005b44 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_TIM_PWM_Start_IT+0x28>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	bf14      	ite	ne
 8005b64:	2301      	movne	r3, #1
 8005b66:	2300      	moveq	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	e022      	b.n	8005bb2 <HAL_TIM_PWM_Start_IT+0x6e>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d109      	bne.n	8005b86 <HAL_TIM_PWM_Start_IT+0x42>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	bf14      	ite	ne
 8005b7e:	2301      	movne	r3, #1
 8005b80:	2300      	moveq	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	e015      	b.n	8005bb2 <HAL_TIM_PWM_Start_IT+0x6e>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d109      	bne.n	8005ba0 <HAL_TIM_PWM_Start_IT+0x5c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	e008      	b.n	8005bb2 <HAL_TIM_PWM_Start_IT+0x6e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	bf14      	ite	ne
 8005bac:	2301      	movne	r3, #1
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e0b3      	b.n	8005d22 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <HAL_TIM_PWM_Start_IT+0x86>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc8:	e013      	b.n	8005bf2 <HAL_TIM_PWM_Start_IT+0xae>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d104      	bne.n	8005bda <HAL_TIM_PWM_Start_IT+0x96>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd8:	e00b      	b.n	8005bf2 <HAL_TIM_PWM_Start_IT+0xae>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_PWM_Start_IT+0xa6>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be8:	e003      	b.n	8005bf2 <HAL_TIM_PWM_Start_IT+0xae>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2202      	movs	r2, #2
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b0c      	cmp	r3, #12
 8005bf6:	d841      	bhi.n	8005c7c <HAL_TIM_PWM_Start_IT+0x138>
 8005bf8:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c35 	.word	0x08005c35
 8005c04:	08005c7d 	.word	0x08005c7d
 8005c08:	08005c7d 	.word	0x08005c7d
 8005c0c:	08005c7d 	.word	0x08005c7d
 8005c10:	08005c47 	.word	0x08005c47
 8005c14:	08005c7d 	.word	0x08005c7d
 8005c18:	08005c7d 	.word	0x08005c7d
 8005c1c:	08005c7d 	.word	0x08005c7d
 8005c20:	08005c59 	.word	0x08005c59
 8005c24:	08005c7d 	.word	0x08005c7d
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005c7d 	.word	0x08005c7d
 8005c30:	08005c6b 	.word	0x08005c6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0202 	orr.w	r2, r2, #2
 8005c42:	60da      	str	r2, [r3, #12]
      break;
 8005c44:	e01d      	b.n	8005c82 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0204 	orr.w	r2, r2, #4
 8005c54:	60da      	str	r2, [r3, #12]
      break;
 8005c56:	e014      	b.n	8005c82 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0208 	orr.w	r2, r2, #8
 8005c66:	60da      	str	r2, [r3, #12]
      break;
 8005c68:	e00b      	b.n	8005c82 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0210 	orr.w	r2, r2, #16
 8005c78:	60da      	str	r2, [r3, #12]
      break;
 8005c7a:	e002      	b.n	8005c82 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c80:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d14b      	bne.n	8005d20 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 f981 	bl	8006f98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d107      	bne.n	8005cb0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1d      	ldr	r2, [pc, #116]	; (8005d2c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d018      	beq.n	8005cec <HAL_TIM_PWM_Start_IT+0x1a8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc2:	d013      	beq.n	8005cec <HAL_TIM_PWM_Start_IT+0x1a8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a19      	ldr	r2, [pc, #100]	; (8005d30 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00e      	beq.n	8005cec <HAL_TIM_PWM_Start_IT+0x1a8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d009      	beq.n	8005cec <HAL_TIM_PWM_Start_IT+0x1a8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a16      	ldr	r2, [pc, #88]	; (8005d38 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <HAL_TIM_PWM_Start_IT+0x1a8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d111      	bne.n	8005d10 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b06      	cmp	r3, #6
 8005cfc:	d010      	beq.n	8005d20 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0e:	e007      	b.n	8005d20 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40014000 	.word	0x40014000

08005d40 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	d841      	bhi.n	8005dd8 <HAL_TIM_PWM_Stop_IT+0x98>
 8005d54:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005dd9 	.word	0x08005dd9
 8005d64:	08005dd9 	.word	0x08005dd9
 8005d68:	08005dd9 	.word	0x08005dd9
 8005d6c:	08005da3 	.word	0x08005da3
 8005d70:	08005dd9 	.word	0x08005dd9
 8005d74:	08005dd9 	.word	0x08005dd9
 8005d78:	08005dd9 	.word	0x08005dd9
 8005d7c:	08005db5 	.word	0x08005db5
 8005d80:	08005dd9 	.word	0x08005dd9
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005dd9 	.word	0x08005dd9
 8005d8c:	08005dc7 	.word	0x08005dc7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0202 	bic.w	r2, r2, #2
 8005d9e:	60da      	str	r2, [r3, #12]
      break;
 8005da0:	e01d      	b.n	8005dde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0204 	bic.w	r2, r2, #4
 8005db0:	60da      	str	r2, [r3, #12]
      break;
 8005db2:	e014      	b.n	8005dde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0208 	bic.w	r2, r2, #8
 8005dc2:	60da      	str	r2, [r3, #12]
      break;
 8005dc4:	e00b      	b.n	8005dde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0210 	bic.w	r2, r2, #16
 8005dd4:	60da      	str	r2, [r3, #12]
      break;
 8005dd6:	e002      	b.n	8005dde <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      break;
 8005ddc:	bf00      	nop
  }

  if (status == HAL_OK)
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d157      	bne.n	8005e94 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2200      	movs	r2, #0
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f001 f8d3 	bl	8006f98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2a      	ldr	r2, [pc, #168]	; (8005ea0 <HAL_TIM_PWM_Stop_IT+0x160>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d117      	bne.n	8005e2c <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6a1a      	ldr	r2, [r3, #32]
 8005e02:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10f      	bne.n	8005e2c <HAL_TIM_PWM_Stop_IT+0xec>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6a1a      	ldr	r2, [r3, #32]
 8005e12:	f240 4344 	movw	r3, #1092	; 0x444
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d107      	bne.n	8005e2c <HAL_TIM_PWM_Stop_IT+0xec>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e2a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6a1a      	ldr	r2, [r3, #32]
 8005e32:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10f      	bne.n	8005e5c <HAL_TIM_PWM_Stop_IT+0x11c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	f240 4344 	movw	r3, #1092	; 0x444
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d107      	bne.n	8005e5c <HAL_TIM_PWM_Stop_IT+0x11c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <HAL_TIM_PWM_Stop_IT+0x12c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e6a:	e013      	b.n	8005e94 <HAL_TIM_PWM_Stop_IT+0x154>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d104      	bne.n	8005e7c <HAL_TIM_PWM_Stop_IT+0x13c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7a:	e00b      	b.n	8005e94 <HAL_TIM_PWM_Stop_IT+0x154>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d104      	bne.n	8005e8c <HAL_TIM_PWM_Stop_IT+0x14c>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e8a:	e003      	b.n	8005e94 <HAL_TIM_PWM_Stop_IT+0x154>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40010000 	.word	0x40010000

08005ea4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e041      	b.n	8005f3a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f839 	bl	8005f42 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f000 fc94 	bl	8006810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <HAL_TIM_IC_Start_IT+0x1e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	e013      	b.n	8005f9e <HAL_TIM_IC_Start_IT+0x46>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_IC_Start_IT+0x2e>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	e00b      	b.n	8005f9e <HAL_TIM_IC_Start_IT+0x46>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_IC_Start_IT+0x3e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	e003      	b.n	8005f9e <HAL_TIM_IC_Start_IT+0x46>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d104      	bne.n	8005fb0 <HAL_TIM_IC_Start_IT+0x58>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	e013      	b.n	8005fd8 <HAL_TIM_IC_Start_IT+0x80>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d104      	bne.n	8005fc0 <HAL_TIM_IC_Start_IT+0x68>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	e00b      	b.n	8005fd8 <HAL_TIM_IC_Start_IT+0x80>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d104      	bne.n	8005fd0 <HAL_TIM_IC_Start_IT+0x78>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	e003      	b.n	8005fd8 <HAL_TIM_IC_Start_IT+0x80>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d102      	bne.n	8005fe6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fe0:	7b7b      	ldrb	r3, [r7, #13]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d001      	beq.n	8005fea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e0c2      	b.n	8006170 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_IC_Start_IT+0xa2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ff8:	e013      	b.n	8006022 <HAL_TIM_IC_Start_IT+0xca>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d104      	bne.n	800600a <HAL_TIM_IC_Start_IT+0xb2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006008:	e00b      	b.n	8006022 <HAL_TIM_IC_Start_IT+0xca>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d104      	bne.n	800601a <HAL_TIM_IC_Start_IT+0xc2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006018:	e003      	b.n	8006022 <HAL_TIM_IC_Start_IT+0xca>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d104      	bne.n	8006032 <HAL_TIM_IC_Start_IT+0xda>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006030:	e013      	b.n	800605a <HAL_TIM_IC_Start_IT+0x102>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b04      	cmp	r3, #4
 8006036:	d104      	bne.n	8006042 <HAL_TIM_IC_Start_IT+0xea>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006040:	e00b      	b.n	800605a <HAL_TIM_IC_Start_IT+0x102>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b08      	cmp	r3, #8
 8006046:	d104      	bne.n	8006052 <HAL_TIM_IC_Start_IT+0xfa>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006050:	e003      	b.n	800605a <HAL_TIM_IC_Start_IT+0x102>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2202      	movs	r2, #2
 8006056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b0c      	cmp	r3, #12
 800605e:	d841      	bhi.n	80060e4 <HAL_TIM_IC_Start_IT+0x18c>
 8006060:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <HAL_TIM_IC_Start_IT+0x110>)
 8006062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006066:	bf00      	nop
 8006068:	0800609d 	.word	0x0800609d
 800606c:	080060e5 	.word	0x080060e5
 8006070:	080060e5 	.word	0x080060e5
 8006074:	080060e5 	.word	0x080060e5
 8006078:	080060af 	.word	0x080060af
 800607c:	080060e5 	.word	0x080060e5
 8006080:	080060e5 	.word	0x080060e5
 8006084:	080060e5 	.word	0x080060e5
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060e5 	.word	0x080060e5
 8006090:	080060e5 	.word	0x080060e5
 8006094:	080060e5 	.word	0x080060e5
 8006098:	080060d3 	.word	0x080060d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0202 	orr.w	r2, r2, #2
 80060aa:	60da      	str	r2, [r3, #12]
      break;
 80060ac:	e01d      	b.n	80060ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0204 	orr.w	r2, r2, #4
 80060bc:	60da      	str	r2, [r3, #12]
      break;
 80060be:	e014      	b.n	80060ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0208 	orr.w	r2, r2, #8
 80060ce:	60da      	str	r2, [r3, #12]
      break;
 80060d0:	e00b      	b.n	80060ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0210 	orr.w	r2, r2, #16
 80060e0:	60da      	str	r2, [r3, #12]
      break;
 80060e2:	e002      	b.n	80060ea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
      break;
 80060e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d13e      	bne.n	800616e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2201      	movs	r2, #1
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 ff4d 	bl	8006f98 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1d      	ldr	r2, [pc, #116]	; (8006178 <HAL_TIM_IC_Start_IT+0x220>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d018      	beq.n	800613a <HAL_TIM_IC_Start_IT+0x1e2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006110:	d013      	beq.n	800613a <HAL_TIM_IC_Start_IT+0x1e2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a19      	ldr	r2, [pc, #100]	; (800617c <HAL_TIM_IC_Start_IT+0x224>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_TIM_IC_Start_IT+0x1e2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a17      	ldr	r2, [pc, #92]	; (8006180 <HAL_TIM_IC_Start_IT+0x228>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_TIM_IC_Start_IT+0x1e2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a16      	ldr	r2, [pc, #88]	; (8006184 <HAL_TIM_IC_Start_IT+0x22c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d004      	beq.n	800613a <HAL_TIM_IC_Start_IT+0x1e2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a14      	ldr	r2, [pc, #80]	; (8006188 <HAL_TIM_IC_Start_IT+0x230>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d111      	bne.n	800615e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b06      	cmp	r3, #6
 800614a:	d010      	beq.n	800616e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615c:	e007      	b.n	800616e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0201 	orr.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800616e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40010000 	.word	0x40010000
 800617c:	40000400 	.word	0x40000400
 8006180:	40000800 	.word	0x40000800
 8006184:	40000c00 	.word	0x40000c00
 8006188:	40014000 	.word	0x40014000

0800618c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d122      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d11b      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0202 	mvn.w	r2, #2
 80061b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fb fb34 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fb05 	bl	80067e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7fb fb47 	bl	8001870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d122      	bne.n	800623c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b04      	cmp	r3, #4
 8006202:	d11b      	bne.n	800623c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0204 	mvn.w	r2, #4
 800620c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fb fb0a 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 8006228:	e005      	b.n	8006236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fadb 	bl	80067e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7fb fb1d 	bl	8001870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b08      	cmp	r3, #8
 8006248:	d122      	bne.n	8006290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b08      	cmp	r3, #8
 8006256:	d11b      	bne.n	8006290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0208 	mvn.w	r2, #8
 8006260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2204      	movs	r2, #4
 8006266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7fb fae0 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 800627c:	e005      	b.n	800628a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fab1 	bl	80067e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7fb faf3 	bl	8001870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b10      	cmp	r3, #16
 800629c:	d122      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d11b      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0210 	mvn.w	r2, #16
 80062b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2208      	movs	r2, #8
 80062ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb fab6 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 80062d0:	e005      	b.n	80062de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa87 	bl	80067e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7fb fac9 	bl	8001870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d10e      	bne.n	8006310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d107      	bne.n	8006310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0201 	mvn.w	r2, #1
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fb fd78 	bl	8001e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631a:	2b80      	cmp	r3, #128	; 0x80
 800631c:	d10e      	bne.n	800633c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006328:	2b80      	cmp	r3, #128	; 0x80
 800632a:	d107      	bne.n	800633c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fecc 	bl	80070d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d10e      	bne.n	8006368 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d107      	bne.n	8006368 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa49 	bl	80067fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b20      	cmp	r3, #32
 8006374:	d10e      	bne.n	8006394 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b20      	cmp	r3, #32
 8006382:	d107      	bne.n	8006394 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0220 	mvn.w	r2, #32
 800638c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fe96 	bl	80070c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e088      	b.n	80064cc <HAL_TIM_IC_ConfigChannel+0x130>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d11b      	bne.n	8006400 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6819      	ldr	r1, [r3, #0]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f000 fc26 	bl	8006c28 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 020c 	bic.w	r2, r2, #12
 80063ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6999      	ldr	r1, [r3, #24]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	619a      	str	r2, [r3, #24]
 80063fe:	e060      	b.n	80064c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b04      	cmp	r3, #4
 8006404:	d11c      	bne.n	8006440 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6819      	ldr	r1, [r3, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f000 fc9e 	bl	8006d56 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699a      	ldr	r2, [r3, #24]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006428:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6999      	ldr	r1, [r3, #24]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	021a      	lsls	r2, r3, #8
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	619a      	str	r2, [r3, #24]
 800643e:	e040      	b.n	80064c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b08      	cmp	r3, #8
 8006444:	d11b      	bne.n	800647e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	6819      	ldr	r1, [r3, #0]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f000 fceb 	bl	8006e30 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 020c 	bic.w	r2, r2, #12
 8006468:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69d9      	ldr	r1, [r3, #28]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	61da      	str	r2, [r3, #28]
 800647c:	e021      	b.n	80064c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d11c      	bne.n	80064be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6819      	ldr	r1, [r3, #0]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f000 fd08 	bl	8006ea8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69da      	ldr	r2, [r3, #28]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80064a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69d9      	ldr	r1, [r3, #28]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	021a      	lsls	r2, r3, #8
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	61da      	str	r2, [r3, #28]
 80064bc:	e001      	b.n	80064c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e0ae      	b.n	8006650 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	f200 809f 	bhi.w	8006640 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006502:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	0800653d 	.word	0x0800653d
 800650c:	08006641 	.word	0x08006641
 8006510:	08006641 	.word	0x08006641
 8006514:	08006641 	.word	0x08006641
 8006518:	0800657d 	.word	0x0800657d
 800651c:	08006641 	.word	0x08006641
 8006520:	08006641 	.word	0x08006641
 8006524:	08006641 	.word	0x08006641
 8006528:	080065bf 	.word	0x080065bf
 800652c:	08006641 	.word	0x08006641
 8006530:	08006641 	.word	0x08006641
 8006534:	08006641 	.word	0x08006641
 8006538:	080065ff 	.word	0x080065ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 f9e4 	bl	8006910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0208 	orr.w	r2, r2, #8
 8006556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0204 	bic.w	r2, r2, #4
 8006566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6999      	ldr	r1, [r3, #24]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	619a      	str	r2, [r3, #24]
      break;
 800657a:	e064      	b.n	8006646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fa2a 	bl	80069dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6999      	ldr	r1, [r3, #24]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	021a      	lsls	r2, r3, #8
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	619a      	str	r2, [r3, #24]
      break;
 80065bc:	e043      	b.n	8006646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fa75 	bl	8006ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0208 	orr.w	r2, r2, #8
 80065d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0204 	bic.w	r2, r2, #4
 80065e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69d9      	ldr	r1, [r3, #28]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	61da      	str	r2, [r3, #28]
      break;
 80065fc:	e023      	b.n	8006646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68b9      	ldr	r1, [r7, #8]
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fabf 	bl	8006b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69da      	ldr	r2, [r3, #28]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69da      	ldr	r2, [r3, #28]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69d9      	ldr	r1, [r3, #28]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	021a      	lsls	r2, r3, #8
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	61da      	str	r2, [r3, #28]
      break;
 800663e:	e002      	b.n	8006646 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	75fb      	strb	r3, [r7, #23]
      break;
 8006644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800664e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_TIM_ConfigClockSource+0x1c>
 8006670:	2302      	movs	r3, #2
 8006672:	e0b4      	b.n	80067de <HAL_TIM_ConfigClockSource+0x186>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800669a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ac:	d03e      	beq.n	800672c <HAL_TIM_ConfigClockSource+0xd4>
 80066ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b2:	f200 8087 	bhi.w	80067c4 <HAL_TIM_ConfigClockSource+0x16c>
 80066b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ba:	f000 8086 	beq.w	80067ca <HAL_TIM_ConfigClockSource+0x172>
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c2:	d87f      	bhi.n	80067c4 <HAL_TIM_ConfigClockSource+0x16c>
 80066c4:	2b70      	cmp	r3, #112	; 0x70
 80066c6:	d01a      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0xa6>
 80066c8:	2b70      	cmp	r3, #112	; 0x70
 80066ca:	d87b      	bhi.n	80067c4 <HAL_TIM_ConfigClockSource+0x16c>
 80066cc:	2b60      	cmp	r3, #96	; 0x60
 80066ce:	d050      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x11a>
 80066d0:	2b60      	cmp	r3, #96	; 0x60
 80066d2:	d877      	bhi.n	80067c4 <HAL_TIM_ConfigClockSource+0x16c>
 80066d4:	2b50      	cmp	r3, #80	; 0x50
 80066d6:	d03c      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0xfa>
 80066d8:	2b50      	cmp	r3, #80	; 0x50
 80066da:	d873      	bhi.n	80067c4 <HAL_TIM_ConfigClockSource+0x16c>
 80066dc:	2b40      	cmp	r3, #64	; 0x40
 80066de:	d058      	beq.n	8006792 <HAL_TIM_ConfigClockSource+0x13a>
 80066e0:	2b40      	cmp	r3, #64	; 0x40
 80066e2:	d86f      	bhi.n	80067c4 <HAL_TIM_ConfigClockSource+0x16c>
 80066e4:	2b30      	cmp	r3, #48	; 0x30
 80066e6:	d064      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0x15a>
 80066e8:	2b30      	cmp	r3, #48	; 0x30
 80066ea:	d86b      	bhi.n	80067c4 <HAL_TIM_ConfigClockSource+0x16c>
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d060      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0x15a>
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d867      	bhi.n	80067c4 <HAL_TIM_ConfigClockSource+0x16c>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d05c      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0x15a>
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	d05a      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0x15a>
 80066fc:	e062      	b.n	80067c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6899      	ldr	r1, [r3, #8]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f000 fc23 	bl	8006f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	609a      	str	r2, [r3, #8]
      break;
 800672a:	e04f      	b.n	80067cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	6899      	ldr	r1, [r3, #8]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f000 fc0c 	bl	8006f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800674e:	609a      	str	r2, [r3, #8]
      break;
 8006750:	e03c      	b.n	80067cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6859      	ldr	r1, [r3, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	461a      	mov	r2, r3
 8006760:	f000 faca 	bl	8006cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2150      	movs	r1, #80	; 0x50
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fbd9 	bl	8006f22 <TIM_ITRx_SetConfig>
      break;
 8006770:	e02c      	b.n	80067cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	6859      	ldr	r1, [r3, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	461a      	mov	r2, r3
 8006780:	f000 fb26 	bl	8006dd0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2160      	movs	r1, #96	; 0x60
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fbc9 	bl	8006f22 <TIM_ITRx_SetConfig>
      break;
 8006790:	e01c      	b.n	80067cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6859      	ldr	r1, [r3, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	461a      	mov	r2, r3
 80067a0:	f000 faaa 	bl	8006cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2140      	movs	r1, #64	; 0x40
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fbb9 	bl	8006f22 <TIM_ITRx_SetConfig>
      break;
 80067b0:	e00c      	b.n	80067cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4619      	mov	r1, r3
 80067bc:	4610      	mov	r0, r2
 80067be:	f000 fbb0 	bl	8006f22 <TIM_ITRx_SetConfig>
      break;
 80067c2:	e003      	b.n	80067cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73fb      	strb	r3, [r7, #15]
      break;
 80067c8:	e000      	b.n	80067cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
	...

08006810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a34      	ldr	r2, [pc, #208]	; (80068f4 <TIM_Base_SetConfig+0xe4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00f      	beq.n	8006848 <TIM_Base_SetConfig+0x38>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682e:	d00b      	beq.n	8006848 <TIM_Base_SetConfig+0x38>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a31      	ldr	r2, [pc, #196]	; (80068f8 <TIM_Base_SetConfig+0xe8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d007      	beq.n	8006848 <TIM_Base_SetConfig+0x38>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a30      	ldr	r2, [pc, #192]	; (80068fc <TIM_Base_SetConfig+0xec>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_Base_SetConfig+0x38>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a2f      	ldr	r2, [pc, #188]	; (8006900 <TIM_Base_SetConfig+0xf0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d108      	bne.n	800685a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a25      	ldr	r2, [pc, #148]	; (80068f4 <TIM_Base_SetConfig+0xe4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d01b      	beq.n	800689a <TIM_Base_SetConfig+0x8a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006868:	d017      	beq.n	800689a <TIM_Base_SetConfig+0x8a>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a22      	ldr	r2, [pc, #136]	; (80068f8 <TIM_Base_SetConfig+0xe8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d013      	beq.n	800689a <TIM_Base_SetConfig+0x8a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a21      	ldr	r2, [pc, #132]	; (80068fc <TIM_Base_SetConfig+0xec>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00f      	beq.n	800689a <TIM_Base_SetConfig+0x8a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a20      	ldr	r2, [pc, #128]	; (8006900 <TIM_Base_SetConfig+0xf0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00b      	beq.n	800689a <TIM_Base_SetConfig+0x8a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1f      	ldr	r2, [pc, #124]	; (8006904 <TIM_Base_SetConfig+0xf4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d007      	beq.n	800689a <TIM_Base_SetConfig+0x8a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <TIM_Base_SetConfig+0xf8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d003      	beq.n	800689a <TIM_Base_SetConfig+0x8a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1d      	ldr	r2, [pc, #116]	; (800690c <TIM_Base_SetConfig+0xfc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d108      	bne.n	80068ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a08      	ldr	r2, [pc, #32]	; (80068f4 <TIM_Base_SetConfig+0xe4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d103      	bne.n	80068e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	615a      	str	r2, [r3, #20]
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800

08006910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f023 0201 	bic.w	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 0302 	bic.w	r3, r3, #2
 8006958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a1c      	ldr	r2, [pc, #112]	; (80069d8 <TIM_OC1_SetConfig+0xc8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d10c      	bne.n	8006986 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f023 0308 	bic.w	r3, r3, #8
 8006972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f023 0304 	bic.w	r3, r3, #4
 8006984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a13      	ldr	r2, [pc, #76]	; (80069d8 <TIM_OC1_SetConfig+0xc8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d111      	bne.n	80069b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800699c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	621a      	str	r2, [r3, #32]
}
 80069cc:	bf00      	nop
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	40010000 	.word	0x40010000

080069dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f023 0210 	bic.w	r2, r3, #16
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f023 0320 	bic.w	r3, r3, #32
 8006a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1e      	ldr	r2, [pc, #120]	; (8006ab0 <TIM_OC2_SetConfig+0xd4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d10d      	bne.n	8006a58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a15      	ldr	r2, [pc, #84]	; (8006ab0 <TIM_OC2_SetConfig+0xd4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d113      	bne.n	8006a88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	40010000 	.word	0x40010000

08006ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0303 	bic.w	r3, r3, #3
 8006aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a1d      	ldr	r2, [pc, #116]	; (8006b84 <TIM_OC3_SetConfig+0xd0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d10d      	bne.n	8006b2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a14      	ldr	r2, [pc, #80]	; (8006b84 <TIM_OC3_SetConfig+0xd0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d113      	bne.n	8006b5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	621a      	str	r2, [r3, #32]
}
 8006b78:	bf00      	nop
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	40010000 	.word	0x40010000

08006b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	021b      	lsls	r3, r3, #8
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	031b      	lsls	r3, r3, #12
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a10      	ldr	r2, [pc, #64]	; (8006c24 <TIM_OC4_SetConfig+0x9c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d109      	bne.n	8006bfc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	019b      	lsls	r3, r3, #6
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40010000 	.word	0x40010000

08006c28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4a24      	ldr	r2, [pc, #144]	; (8006ce4 <TIM_TI1_SetConfig+0xbc>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d013      	beq.n	8006c7e <TIM_TI1_SetConfig+0x56>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5c:	d00f      	beq.n	8006c7e <TIM_TI1_SetConfig+0x56>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4a21      	ldr	r2, [pc, #132]	; (8006ce8 <TIM_TI1_SetConfig+0xc0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00b      	beq.n	8006c7e <TIM_TI1_SetConfig+0x56>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a20      	ldr	r2, [pc, #128]	; (8006cec <TIM_TI1_SetConfig+0xc4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d007      	beq.n	8006c7e <TIM_TI1_SetConfig+0x56>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a1f      	ldr	r2, [pc, #124]	; (8006cf0 <TIM_TI1_SetConfig+0xc8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d003      	beq.n	8006c7e <TIM_TI1_SetConfig+0x56>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a1e      	ldr	r2, [pc, #120]	; (8006cf4 <TIM_TI1_SetConfig+0xcc>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d101      	bne.n	8006c82 <TIM_TI1_SetConfig+0x5a>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <TIM_TI1_SetConfig+0x5c>
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0303 	bic.w	r3, r3, #3
 8006c8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e003      	b.n	8006ca2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f023 030a 	bic.w	r3, r3, #10
 8006cbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f003 030a 	and.w	r3, r3, #10
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40000400 	.word	0x40000400
 8006cec:	40000800 	.word	0x40000800
 8006cf0:	40000c00 	.word	0x40000c00
 8006cf4:	40014000 	.word	0x40014000

08006cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f023 0201 	bic.w	r2, r3, #1
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f023 030a 	bic.w	r3, r3, #10
 8006d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b087      	sub	sp, #28
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	f023 0210 	bic.w	r2, r3, #16
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	031b      	lsls	r3, r3, #12
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006da8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	621a      	str	r2, [r3, #32]
}
 8006dc4:	bf00      	nop
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	f023 0210 	bic.w	r2, r3, #16
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	031b      	lsls	r3, r3, #12
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	621a      	str	r2, [r3, #32]
}
 8006e24:	bf00      	nop
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f023 0303 	bic.w	r3, r3, #3
 8006e5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	621a      	str	r2, [r3, #32]
}
 8006e9c:	bf00      	nop
 8006e9e:	371c      	adds	r7, #28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ee6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	031b      	lsls	r3, r3, #12
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006efa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	031b      	lsls	r3, r3, #12
 8006f00:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b085      	sub	sp, #20
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f043 0307 	orr.w	r3, r3, #7
 8006f44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	609a      	str	r2, [r3, #8]
}
 8006f4c:	bf00      	nop
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	021a      	lsls	r2, r3, #8
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	609a      	str	r2, [r3, #8]
}
 8006f8c:	bf00      	nop
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f003 031f 	and.w	r3, r3, #31
 8006faa:	2201      	movs	r2, #1
 8006fac:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a1a      	ldr	r2, [r3, #32]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	43db      	mvns	r3, r3
 8006fba:	401a      	ands	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a1a      	ldr	r2, [r3, #32]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
	...

08006fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e050      	b.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007022:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d018      	beq.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007048:	d013      	beq.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00e      	beq.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d009      	beq.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a15      	ldr	r2, [pc, #84]	; (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d004      	beq.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a13      	ldr	r2, [pc, #76]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d10c      	bne.n	800708c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	4313      	orrs	r3, r2
 8007082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40000400 	.word	0x40000400
 80070b4:	40000800 	.word	0x40000800
 80070b8:	40000c00 	.word	0x40000c00
 80070bc:	40014000 	.word	0x40014000

080070c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e03f      	b.n	800717a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fb fb44 	bl	800279c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2224      	movs	r2, #36	; 0x24
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800712a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fd7b 	bl	8007c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	695a      	ldr	r2, [r3, #20]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b08a      	sub	sp, #40	; 0x28
 8007186:	af02      	add	r7, sp, #8
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	603b      	str	r3, [r7, #0]
 800718e:	4613      	mov	r3, r2
 8007190:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d17c      	bne.n	800729c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <HAL_UART_Transmit+0x2c>
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e075      	b.n	800729e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_UART_Transmit+0x3e>
 80071bc:	2302      	movs	r3, #2
 80071be:	e06e      	b.n	800729e <HAL_UART_Transmit+0x11c>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2221      	movs	r2, #33	; 0x21
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071d6:	f7fb fc8d 	bl	8002af4 <HAL_GetTick>
 80071da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	88fa      	ldrh	r2, [r7, #6]
 80071e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f0:	d108      	bne.n	8007204 <HAL_UART_Transmit+0x82>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	e003      	b.n	800720c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007208:	2300      	movs	r3, #0
 800720a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007214:	e02a      	b.n	800726c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2200      	movs	r2, #0
 800721e:	2180      	movs	r1, #128	; 0x80
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 faf9 	bl	8007818 <UART_WaitOnFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e036      	b.n	800729e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10b      	bne.n	800724e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007244:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	3302      	adds	r3, #2
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	e007      	b.n	800725e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	3301      	adds	r3, #1
 800725c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1cf      	bne.n	8007216 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2200      	movs	r2, #0
 800727e:	2140      	movs	r1, #64	; 0x40
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 fac9 	bl	8007818 <UART_WaitOnFlagUntilTimeout>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e006      	b.n	800729e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	e000      	b.n	800729e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800729c:	2302      	movs	r3, #2
  }
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b0ba      	sub	sp, #232	; 0xe8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80072e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10f      	bne.n	800730e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <HAL_UART_IRQHandler+0x66>
 80072fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fbd3 	bl	8007ab2 <UART_Receive_IT>
      return;
 800730c:	e256      	b.n	80077bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800730e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80de 	beq.w	80074d4 <HAL_UART_IRQHandler+0x22c>
 8007318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d106      	bne.n	8007332 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007328:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80d1 	beq.w	80074d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <HAL_UART_IRQHandler+0xae>
 800733e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f043 0201 	orr.w	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <HAL_UART_IRQHandler+0xd2>
 8007362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d005      	beq.n	800737a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	f043 0202 	orr.w	r2, r3, #2
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800737a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00b      	beq.n	800739e <HAL_UART_IRQHandler+0xf6>
 8007386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d005      	beq.n	800739e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	f043 0204 	orr.w	r2, r3, #4
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800739e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d011      	beq.n	80073ce <HAL_UART_IRQHandler+0x126>
 80073aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d105      	bne.n	80073c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f043 0208 	orr.w	r2, r3, #8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 81ed 	beq.w	80077b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073dc:	f003 0320 	and.w	r3, r3, #32
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <HAL_UART_IRQHandler+0x14e>
 80073e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fb5e 	bl	8007ab2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	bf0c      	ite	eq
 8007404:	2301      	moveq	r3, #1
 8007406:	2300      	movne	r3, #0
 8007408:	b2db      	uxtb	r3, r3
 800740a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <HAL_UART_IRQHandler+0x17a>
 800741a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d04f      	beq.n	80074c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa66 	bl	80078f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d141      	bne.n	80074ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3314      	adds	r3, #20
 800743c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800744c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3314      	adds	r3, #20
 800745e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007462:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800746e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800747a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1d9      	bne.n	8007436 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	2b00      	cmp	r3, #0
 8007488:	d013      	beq.n	80074b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	4a7d      	ldr	r2, [pc, #500]	; (8007684 <HAL_UART_IRQHandler+0x3dc>)
 8007490:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	4618      	mov	r0, r3
 8007498:	f7fc f982 	bl	80037a0 <HAL_DMA_Abort_IT>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d016      	beq.n	80074d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074ac:	4610      	mov	r0, r2
 80074ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b0:	e00e      	b.n	80074d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f99a 	bl	80077ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b8:	e00a      	b.n	80074d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f996 	bl	80077ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c0:	e006      	b.n	80074d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f992 	bl	80077ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074ce:	e170      	b.n	80077b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d0:	bf00      	nop
    return;
 80074d2:	e16e      	b.n	80077b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	2b01      	cmp	r3, #1
 80074da:	f040 814a 	bne.w	8007772 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 8143 	beq.w	8007772 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f0:	f003 0310 	and.w	r3, r3, #16
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 813c 	beq.w	8007772 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074fa:	2300      	movs	r3, #0
 80074fc:	60bb      	str	r3, [r7, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60bb      	str	r3, [r7, #8]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	60bb      	str	r3, [r7, #8]
 800750e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b40      	cmp	r3, #64	; 0x40
 800751c:	f040 80b4 	bne.w	8007688 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800752c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 8140 	beq.w	80077b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800753a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800753e:	429a      	cmp	r2, r3
 8007540:	f080 8139 	bcs.w	80077b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800754a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007556:	f000 8088 	beq.w	800766a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800758a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007592:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800759e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1d9      	bne.n	800755a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3314      	adds	r3, #20
 80075ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075b8:	f023 0301 	bic.w	r3, r3, #1
 80075bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3314      	adds	r3, #20
 80075c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e1      	bne.n	80075a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3314      	adds	r3, #20
 80075e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3314      	adds	r3, #20
 8007602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007606:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007608:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800760c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e3      	bne.n	80075e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800763a:	f023 0310 	bic.w	r3, r3, #16
 800763e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	330c      	adds	r3, #12
 8007648:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800764c:	65ba      	str	r2, [r7, #88]	; 0x58
 800764e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007652:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800765a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e3      	bne.n	8007628 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	4618      	mov	r0, r3
 8007666:	f7fc f82b 	bl	80036c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007672:	b29b      	uxth	r3, r3
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	b29b      	uxth	r3, r3
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f8c0 	bl	8007800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007680:	e099      	b.n	80077b6 <HAL_UART_IRQHandler+0x50e>
 8007682:	bf00      	nop
 8007684:	080079bb 	.word	0x080079bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007690:	b29b      	uxth	r3, r3
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 808b 	beq.w	80077ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 8086 	beq.w	80077ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	330c      	adds	r3, #12
 80076b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	330c      	adds	r3, #12
 80076ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076d2:	647a      	str	r2, [r7, #68]	; 0x44
 80076d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e3      	bne.n	80076ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3314      	adds	r3, #20
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	623b      	str	r3, [r7, #32]
   return(result);
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3314      	adds	r3, #20
 8007706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800770a:	633a      	str	r2, [r7, #48]	; 0x30
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e3      	bne.n	80076e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	330c      	adds	r3, #12
 8007732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	60fb      	str	r3, [r7, #12]
   return(result);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0310 	bic.w	r3, r3, #16
 8007742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330c      	adds	r3, #12
 800774c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007750:	61fa      	str	r2, [r7, #28]
 8007752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	69b9      	ldr	r1, [r7, #24]
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	617b      	str	r3, [r7, #20]
   return(result);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e3      	bne.n	800772c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f848 	bl	8007800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007770:	e023      	b.n	80077ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <HAL_UART_IRQHandler+0x4ea>
 800777e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f929 	bl	80079e2 <UART_Transmit_IT>
    return;
 8007790:	e014      	b.n	80077bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00e      	beq.n	80077bc <HAL_UART_IRQHandler+0x514>
 800779e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d008      	beq.n	80077bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f969 	bl	8007a82 <UART_EndTransmit_IT>
    return;
 80077b0:	e004      	b.n	80077bc <HAL_UART_IRQHandler+0x514>
    return;
 80077b2:	bf00      	nop
 80077b4:	e002      	b.n	80077bc <HAL_UART_IRQHandler+0x514>
      return;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <HAL_UART_IRQHandler+0x514>
      return;
 80077ba:	bf00      	nop
  }
}
 80077bc:	37e8      	adds	r7, #232	; 0xe8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop

080077c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b090      	sub	sp, #64	; 0x40
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	4613      	mov	r3, r2
 8007826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007828:	e050      	b.n	80078cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d04c      	beq.n	80078cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <UART_WaitOnFlagUntilTimeout+0x30>
 8007838:	f7fb f95c 	bl	8002af4 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007844:	429a      	cmp	r2, r3
 8007846:	d241      	bcs.n	80078cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	330c      	adds	r3, #12
 8007866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007868:	637a      	str	r2, [r7, #52]	; 0x34
 800786a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800786e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e5      	bne.n	8007848 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3314      	adds	r3, #20
 8007882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	613b      	str	r3, [r7, #16]
   return(result);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f023 0301 	bic.w	r3, r3, #1
 8007892:	63bb      	str	r3, [r7, #56]	; 0x38
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3314      	adds	r3, #20
 800789a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800789c:	623a      	str	r2, [r7, #32]
 800789e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	69f9      	ldr	r1, [r7, #28]
 80078a2:	6a3a      	ldr	r2, [r7, #32]
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e00f      	b.n	80078ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4013      	ands	r3, r2
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	429a      	cmp	r2, r3
 80078da:	bf0c      	ite	eq
 80078dc:	2301      	moveq	r3, #1
 80078de:	2300      	movne	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d09f      	beq.n	800782a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3740      	adds	r7, #64	; 0x40
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b095      	sub	sp, #84	; 0x54
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	330c      	adds	r3, #12
 8007902:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	330c      	adds	r3, #12
 800791a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800791c:	643a      	str	r2, [r7, #64]	; 0x40
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800792a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e5      	bne.n	80078fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3314      	adds	r3, #20
 8007936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f023 0301 	bic.w	r3, r3, #1
 8007946:	64bb      	str	r3, [r7, #72]	; 0x48
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3314      	adds	r3, #20
 800794e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007950:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e5      	bne.n	8007930 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	2b01      	cmp	r3, #1
 800796a:	d119      	bne.n	80079a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	60bb      	str	r3, [r7, #8]
   return(result);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f023 0310 	bic.w	r3, r3, #16
 8007982:	647b      	str	r3, [r7, #68]	; 0x44
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800798c:	61ba      	str	r2, [r7, #24]
 800798e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6979      	ldr	r1, [r7, #20]
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	613b      	str	r3, [r7, #16]
   return(result);
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e5      	bne.n	800796c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079ae:	bf00      	nop
 80079b0:	3754      	adds	r7, #84	; 0x54
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff ff09 	bl	80077ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b21      	cmp	r3, #33	; 0x21
 80079f4:	d13e      	bne.n	8007a74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079fe:	d114      	bne.n	8007a2a <UART_Transmit_IT+0x48>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d110      	bne.n	8007a2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	1c9a      	adds	r2, r3, #2
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	621a      	str	r2, [r3, #32]
 8007a28:	e008      	b.n	8007a3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	1c59      	adds	r1, r3, #1
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6211      	str	r1, [r2, #32]
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10f      	bne.n	8007a70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	e000      	b.n	8007a76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a74:	2302      	movs	r3, #2
  }
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fe8e 	bl	80077c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b08c      	sub	sp, #48	; 0x30
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b22      	cmp	r3, #34	; 0x22
 8007ac4:	f040 80ab 	bne.w	8007c1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad0:	d117      	bne.n	8007b02 <UART_Receive_IT+0x50>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d113      	bne.n	8007b02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	1c9a      	adds	r2, r3, #2
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	629a      	str	r2, [r3, #40]	; 0x28
 8007b00:	e026      	b.n	8007b50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b14:	d007      	beq.n	8007b26 <UART_Receive_IT+0x74>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <UART_Receive_IT+0x82>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	e008      	b.n	8007b46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d15a      	bne.n	8007c1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68da      	ldr	r2, [r3, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0220 	bic.w	r2, r2, #32
 8007b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695a      	ldr	r2, [r3, #20]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0201 	bic.w	r2, r2, #1
 8007b92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d135      	bne.n	8007c10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	330c      	adds	r3, #12
 8007bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f023 0310 	bic.w	r3, r3, #16
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	330c      	adds	r3, #12
 8007bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bca:	623a      	str	r2, [r7, #32]
 8007bcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	69f9      	ldr	r1, [r7, #28]
 8007bd0:	6a3a      	ldr	r2, [r7, #32]
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e5      	bne.n	8007baa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0310 	and.w	r3, r3, #16
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d10a      	bne.n	8007c02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff fdf9 	bl	8007800 <HAL_UARTEx_RxEventCallback>
 8007c0e:	e002      	b.n	8007c16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff fde1 	bl	80077d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	e002      	b.n	8007c20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e000      	b.n	8007c20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c1e:	2302      	movs	r3, #2
  }
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3730      	adds	r7, #48	; 0x30
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c2c:	b0c0      	sub	sp, #256	; 0x100
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c44:	68d9      	ldr	r1, [r3, #12]
 8007c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	ea40 0301 	orr.w	r3, r0, r1
 8007c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c80:	f021 010c 	bic.w	r1, r1, #12
 8007c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c8e:	430b      	orrs	r3, r1
 8007c90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca2:	6999      	ldr	r1, [r3, #24]
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	ea40 0301 	orr.w	r3, r0, r1
 8007cae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b8f      	ldr	r3, [pc, #572]	; (8007ef4 <UART_SetConfig+0x2cc>)
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d005      	beq.n	8007cc8 <UART_SetConfig+0xa0>
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	4b8d      	ldr	r3, [pc, #564]	; (8007ef8 <UART_SetConfig+0x2d0>)
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d104      	bne.n	8007cd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cc8:	f7fd fd3a 	bl	8005740 <HAL_RCC_GetPCLK2Freq>
 8007ccc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007cd0:	e003      	b.n	8007cda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cd2:	f7fd fd21 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8007cd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ce4:	f040 810c 	bne.w	8007f00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cf2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	1891      	adds	r1, r2, r2
 8007d00:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d02:	415b      	adcs	r3, r3
 8007d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	eb12 0801 	adds.w	r8, r2, r1
 8007d10:	4629      	mov	r1, r5
 8007d12:	eb43 0901 	adc.w	r9, r3, r1
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d2a:	4690      	mov	r8, r2
 8007d2c:	4699      	mov	r9, r3
 8007d2e:	4623      	mov	r3, r4
 8007d30:	eb18 0303 	adds.w	r3, r8, r3
 8007d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d38:	462b      	mov	r3, r5
 8007d3a:	eb49 0303 	adc.w	r3, r9, r3
 8007d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d56:	460b      	mov	r3, r1
 8007d58:	18db      	adds	r3, r3, r3
 8007d5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	eb42 0303 	adc.w	r3, r2, r3
 8007d62:	657b      	str	r3, [r7, #84]	; 0x54
 8007d64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d6c:	f7f8 ff24 	bl	8000bb8 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4b61      	ldr	r3, [pc, #388]	; (8007efc <UART_SetConfig+0x2d4>)
 8007d76:	fba3 2302 	umull	r2, r3, r3, r2
 8007d7a:	095b      	lsrs	r3, r3, #5
 8007d7c:	011c      	lsls	r4, r3, #4
 8007d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d90:	4642      	mov	r2, r8
 8007d92:	464b      	mov	r3, r9
 8007d94:	1891      	adds	r1, r2, r2
 8007d96:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d98:	415b      	adcs	r3, r3
 8007d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007da0:	4641      	mov	r1, r8
 8007da2:	eb12 0a01 	adds.w	sl, r2, r1
 8007da6:	4649      	mov	r1, r9
 8007da8:	eb43 0b01 	adc.w	fp, r3, r1
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007db8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dc0:	4692      	mov	sl, r2
 8007dc2:	469b      	mov	fp, r3
 8007dc4:	4643      	mov	r3, r8
 8007dc6:	eb1a 0303 	adds.w	r3, sl, r3
 8007dca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	eb4b 0303 	adc.w	r3, fp, r3
 8007dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007de4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007de8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007dec:	460b      	mov	r3, r1
 8007dee:	18db      	adds	r3, r3, r3
 8007df0:	643b      	str	r3, [r7, #64]	; 0x40
 8007df2:	4613      	mov	r3, r2
 8007df4:	eb42 0303 	adc.w	r3, r2, r3
 8007df8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007dfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e02:	f7f8 fed9 	bl	8000bb8 <__aeabi_uldivmod>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4b3b      	ldr	r3, [pc, #236]	; (8007efc <UART_SetConfig+0x2d4>)
 8007e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	2264      	movs	r2, #100	; 0x64
 8007e16:	fb02 f303 	mul.w	r3, r2, r3
 8007e1a:	1acb      	subs	r3, r1, r3
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e22:	4b36      	ldr	r3, [pc, #216]	; (8007efc <UART_SetConfig+0x2d4>)
 8007e24:	fba3 2302 	umull	r2, r3, r3, r2
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e30:	441c      	add	r4, r3
 8007e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e44:	4642      	mov	r2, r8
 8007e46:	464b      	mov	r3, r9
 8007e48:	1891      	adds	r1, r2, r2
 8007e4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e4c:	415b      	adcs	r3, r3
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e54:	4641      	mov	r1, r8
 8007e56:	1851      	adds	r1, r2, r1
 8007e58:	6339      	str	r1, [r7, #48]	; 0x30
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	414b      	adcs	r3, r1
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e60:	f04f 0200 	mov.w	r2, #0
 8007e64:	f04f 0300 	mov.w	r3, #0
 8007e68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	00cb      	lsls	r3, r1, #3
 8007e70:	4651      	mov	r1, sl
 8007e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e76:	4651      	mov	r1, sl
 8007e78:	00ca      	lsls	r2, r1, #3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	4642      	mov	r2, r8
 8007e82:	189b      	adds	r3, r3, r2
 8007e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e88:	464b      	mov	r3, r9
 8007e8a:	460a      	mov	r2, r1
 8007e8c:	eb42 0303 	adc.w	r3, r2, r3
 8007e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ea0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ea4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	18db      	adds	r3, r3, r3
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eae:	4613      	mov	r3, r2
 8007eb0:	eb42 0303 	adc.w	r3, r2, r3
 8007eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007eba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ebe:	f7f8 fe7b 	bl	8000bb8 <__aeabi_uldivmod>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <UART_SetConfig+0x2d4>)
 8007ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	2164      	movs	r1, #100	; 0x64
 8007ed0:	fb01 f303 	mul.w	r3, r1, r3
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	3332      	adds	r3, #50	; 0x32
 8007eda:	4a08      	ldr	r2, [pc, #32]	; (8007efc <UART_SetConfig+0x2d4>)
 8007edc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee0:	095b      	lsrs	r3, r3, #5
 8007ee2:	f003 0207 	and.w	r2, r3, #7
 8007ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4422      	add	r2, r4
 8007eee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ef0:	e105      	b.n	80080fe <UART_SetConfig+0x4d6>
 8007ef2:	bf00      	nop
 8007ef4:	40011000 	.word	0x40011000
 8007ef8:	40011400 	.word	0x40011400
 8007efc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f12:	4642      	mov	r2, r8
 8007f14:	464b      	mov	r3, r9
 8007f16:	1891      	adds	r1, r2, r2
 8007f18:	6239      	str	r1, [r7, #32]
 8007f1a:	415b      	adcs	r3, r3
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f22:	4641      	mov	r1, r8
 8007f24:	1854      	adds	r4, r2, r1
 8007f26:	4649      	mov	r1, r9
 8007f28:	eb43 0501 	adc.w	r5, r3, r1
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	00eb      	lsls	r3, r5, #3
 8007f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f3a:	00e2      	lsls	r2, r4, #3
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	461d      	mov	r5, r3
 8007f40:	4643      	mov	r3, r8
 8007f42:	18e3      	adds	r3, r4, r3
 8007f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f48:	464b      	mov	r3, r9
 8007f4a:	eb45 0303 	adc.w	r3, r5, r3
 8007f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f6e:	4629      	mov	r1, r5
 8007f70:	008b      	lsls	r3, r1, #2
 8007f72:	4621      	mov	r1, r4
 8007f74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f78:	4621      	mov	r1, r4
 8007f7a:	008a      	lsls	r2, r1, #2
 8007f7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f80:	f7f8 fe1a 	bl	8000bb8 <__aeabi_uldivmod>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	4b60      	ldr	r3, [pc, #384]	; (800810c <UART_SetConfig+0x4e4>)
 8007f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f8e:	095b      	lsrs	r3, r3, #5
 8007f90:	011c      	lsls	r4, r3, #4
 8007f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	1891      	adds	r1, r2, r2
 8007faa:	61b9      	str	r1, [r7, #24]
 8007fac:	415b      	adcs	r3, r3
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fb4:	4641      	mov	r1, r8
 8007fb6:	1851      	adds	r1, r2, r1
 8007fb8:	6139      	str	r1, [r7, #16]
 8007fba:	4649      	mov	r1, r9
 8007fbc:	414b      	adcs	r3, r1
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	f04f 0300 	mov.w	r3, #0
 8007fc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fcc:	4659      	mov	r1, fp
 8007fce:	00cb      	lsls	r3, r1, #3
 8007fd0:	4651      	mov	r1, sl
 8007fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fd6:	4651      	mov	r1, sl
 8007fd8:	00ca      	lsls	r2, r1, #3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4642      	mov	r2, r8
 8007fe2:	189b      	adds	r3, r3, r2
 8007fe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fe8:	464b      	mov	r3, r9
 8007fea:	460a      	mov	r2, r1
 8007fec:	eb42 0303 	adc.w	r3, r2, r3
 8007ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ffe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800800c:	4649      	mov	r1, r9
 800800e:	008b      	lsls	r3, r1, #2
 8008010:	4641      	mov	r1, r8
 8008012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008016:	4641      	mov	r1, r8
 8008018:	008a      	lsls	r2, r1, #2
 800801a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800801e:	f7f8 fdcb 	bl	8000bb8 <__aeabi_uldivmod>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4b39      	ldr	r3, [pc, #228]	; (800810c <UART_SetConfig+0x4e4>)
 8008028:	fba3 1302 	umull	r1, r3, r3, r2
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	2164      	movs	r1, #100	; 0x64
 8008030:	fb01 f303 	mul.w	r3, r1, r3
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	3332      	adds	r3, #50	; 0x32
 800803a:	4a34      	ldr	r2, [pc, #208]	; (800810c <UART_SetConfig+0x4e4>)
 800803c:	fba2 2303 	umull	r2, r3, r2, r3
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008046:	441c      	add	r4, r3
 8008048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800804c:	2200      	movs	r2, #0
 800804e:	673b      	str	r3, [r7, #112]	; 0x70
 8008050:	677a      	str	r2, [r7, #116]	; 0x74
 8008052:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008056:	4642      	mov	r2, r8
 8008058:	464b      	mov	r3, r9
 800805a:	1891      	adds	r1, r2, r2
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	415b      	adcs	r3, r3
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008066:	4641      	mov	r1, r8
 8008068:	1851      	adds	r1, r2, r1
 800806a:	6039      	str	r1, [r7, #0]
 800806c:	4649      	mov	r1, r9
 800806e:	414b      	adcs	r3, r1
 8008070:	607b      	str	r3, [r7, #4]
 8008072:	f04f 0200 	mov.w	r2, #0
 8008076:	f04f 0300 	mov.w	r3, #0
 800807a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800807e:	4659      	mov	r1, fp
 8008080:	00cb      	lsls	r3, r1, #3
 8008082:	4651      	mov	r1, sl
 8008084:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008088:	4651      	mov	r1, sl
 800808a:	00ca      	lsls	r2, r1, #3
 800808c:	4610      	mov	r0, r2
 800808e:	4619      	mov	r1, r3
 8008090:	4603      	mov	r3, r0
 8008092:	4642      	mov	r2, r8
 8008094:	189b      	adds	r3, r3, r2
 8008096:	66bb      	str	r3, [r7, #104]	; 0x68
 8008098:	464b      	mov	r3, r9
 800809a:	460a      	mov	r2, r1
 800809c:	eb42 0303 	adc.w	r3, r2, r3
 80080a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	663b      	str	r3, [r7, #96]	; 0x60
 80080ac:	667a      	str	r2, [r7, #100]	; 0x64
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	f04f 0300 	mov.w	r3, #0
 80080b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080ba:	4649      	mov	r1, r9
 80080bc:	008b      	lsls	r3, r1, #2
 80080be:	4641      	mov	r1, r8
 80080c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080c4:	4641      	mov	r1, r8
 80080c6:	008a      	lsls	r2, r1, #2
 80080c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080cc:	f7f8 fd74 	bl	8000bb8 <__aeabi_uldivmod>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4b0d      	ldr	r3, [pc, #52]	; (800810c <UART_SetConfig+0x4e4>)
 80080d6:	fba3 1302 	umull	r1, r3, r3, r2
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	2164      	movs	r1, #100	; 0x64
 80080de:	fb01 f303 	mul.w	r3, r1, r3
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	3332      	adds	r3, #50	; 0x32
 80080e8:	4a08      	ldr	r2, [pc, #32]	; (800810c <UART_SetConfig+0x4e4>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	f003 020f 	and.w	r2, r3, #15
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4422      	add	r2, r4
 80080fc:	609a      	str	r2, [r3, #8]
}
 80080fe:	bf00      	nop
 8008100:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008104:	46bd      	mov	sp, r7
 8008106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810a:	bf00      	nop
 800810c:	51eb851f 	.word	0x51eb851f

08008110 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800811e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008122:	2b84      	cmp	r3, #132	; 0x84
 8008124:	d005      	beq.n	8008132 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008126:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4413      	add	r3, r2
 800812e:	3303      	adds	r3, #3
 8008130:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008132:	68fb      	ldr	r3, [r7, #12]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008144:	f001 f8e4 	bl	8009310 <vTaskStartScheduler>
  
  return osOK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	bd80      	pop	{r7, pc}

0800814e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800814e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008150:	b089      	sub	sp, #36	; 0x24
 8008152:	af04      	add	r7, sp, #16
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d020      	beq.n	80081a2 <osThreadCreate+0x54>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01c      	beq.n	80081a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685c      	ldr	r4, [r3, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681d      	ldr	r5, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	691e      	ldr	r6, [r3, #16]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800817a:	4618      	mov	r0, r3
 800817c:	f7ff ffc8 	bl	8008110 <makeFreeRtosPriority>
 8008180:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800818a:	9202      	str	r2, [sp, #8]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	9100      	str	r1, [sp, #0]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	4632      	mov	r2, r6
 8008194:	4629      	mov	r1, r5
 8008196:	4620      	mov	r0, r4
 8008198:	f000 fef2 	bl	8008f80 <xTaskCreateStatic>
 800819c:	4603      	mov	r3, r0
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e01c      	b.n	80081dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685c      	ldr	r4, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081ae:	b29e      	uxth	r6, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff ffaa 	bl	8008110 <makeFreeRtosPriority>
 80081bc:	4602      	mov	r2, r0
 80081be:	f107 030c 	add.w	r3, r7, #12
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	9200      	str	r2, [sp, #0]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	4632      	mov	r2, r6
 80081ca:	4629      	mov	r1, r5
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 ff34 	bl	800903a <xTaskCreate>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d001      	beq.n	80081dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80081d8:	2300      	movs	r3, #0
 80081da:	e000      	b.n	80081de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80081dc:	68fb      	ldr	r3, [r7, #12]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <osDelay+0x16>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	e000      	b.n	80081fe <osDelay+0x18>
 80081fc:	2301      	movs	r3, #1
 80081fe:	4618      	mov	r0, r3
 8008200:	f001 f852 	bl	80092a8 <vTaskDelay>
  
  return osOK;
 8008204:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f103 0208 	add.w	r2, r3, #8
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f04f 32ff 	mov.w	r2, #4294967295
 8008226:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f103 0208 	add.w	r2, r3, #8
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f103 0208 	add.w	r2, r3, #8
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	601a      	str	r2, [r3, #0]
}
 80082a4:	bf00      	nop
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d103      	bne.n	80082d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	60fb      	str	r3, [r7, #12]
 80082ce:	e00c      	b.n	80082ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3308      	adds	r3, #8
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	e002      	b.n	80082de <vListInsert+0x2e>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d2f6      	bcs.n	80082d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	601a      	str	r2, [r3, #0]
}
 8008316:	bf00      	nop
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008322:	b480      	push	{r7}
 8008324:	b085      	sub	sp, #20
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6892      	ldr	r2, [r2, #8]
 8008338:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6852      	ldr	r2, [r2, #4]
 8008342:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	429a      	cmp	r2, r3
 800834c:	d103      	bne.n	8008356 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	1e5a      	subs	r2, r3, #1
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
	...

08008378 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083a2:	f002 f9d7 	bl	800a754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ae:	68f9      	ldr	r1, [r7, #12]
 80083b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083b2:	fb01 f303 	mul.w	r3, r1, r3
 80083b6:	441a      	add	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d2:	3b01      	subs	r3, #1
 80083d4:	68f9      	ldr	r1, [r7, #12]
 80083d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083d8:	fb01 f303 	mul.w	r3, r1, r3
 80083dc:	441a      	add	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	22ff      	movs	r2, #255	; 0xff
 80083e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	22ff      	movs	r2, #255	; 0xff
 80083ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d114      	bne.n	8008422 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01a      	beq.n	8008436 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3310      	adds	r3, #16
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fa07 	bl	8009818 <xTaskRemoveFromEventList>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d012      	beq.n	8008436 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008410:	4b0c      	ldr	r3, [pc, #48]	; (8008444 <xQueueGenericReset+0xcc>)
 8008412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	e009      	b.n	8008436 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3310      	adds	r3, #16
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff fef1 	bl	800820e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3324      	adds	r3, #36	; 0x24
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff feec 	bl	800820e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008436:	f002 f9bd 	bl	800a7b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800843a:	2301      	movs	r3, #1
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	e000ed04 	.word	0xe000ed04

08008448 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08e      	sub	sp, #56	; 0x38
 800844c:	af02      	add	r7, sp, #8
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10a      	bne.n	800848e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <xQueueGenericCreateStatic+0x52>
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <xQueueGenericCreateStatic+0x56>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <xQueueGenericCreateStatic+0x58>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	623b      	str	r3, [r7, #32]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d102      	bne.n	80084c6 <xQueueGenericCreateStatic+0x7e>
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <xQueueGenericCreateStatic+0x82>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e000      	b.n	80084cc <xQueueGenericCreateStatic+0x84>
 80084ca:	2300      	movs	r3, #0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	61fb      	str	r3, [r7, #28]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084e6:	2348      	movs	r3, #72	; 0x48
 80084e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b48      	cmp	r3, #72	; 0x48
 80084ee:	d00a      	beq.n	8008506 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	61bb      	str	r3, [r7, #24]
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008506:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00d      	beq.n	800852e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800851a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	4613      	mov	r3, r2
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f83f 	bl	80085ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008530:	4618      	mov	r0, r3
 8008532:	3730      	adds	r7, #48	; 0x30
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08a      	sub	sp, #40	; 0x28
 800853c:	af02      	add	r7, sp, #8
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <xQueueGenericCreate+0x2a>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	613b      	str	r3, [r7, #16]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	fb02 f303 	mul.w	r3, r2, r3
 800856a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	3348      	adds	r3, #72	; 0x48
 8008570:	4618      	mov	r0, r3
 8008572:	f002 fa11 	bl	800a998 <pvPortMalloc>
 8008576:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d011      	beq.n	80085a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	3348      	adds	r3, #72	; 0x48
 8008586:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008590:	79fa      	ldrb	r2, [r7, #7]
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	4613      	mov	r3, r2
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f805 	bl	80085ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085a2:	69bb      	ldr	r3, [r7, #24]
	}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d103      	bne.n	80085c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	e002      	b.n	80085ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085da:	2101      	movs	r1, #1
 80085dc:	69b8      	ldr	r0, [r7, #24]
 80085de:	f7ff fecb 	bl	8008378 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085e2:	bf00      	nop
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08e      	sub	sp, #56	; 0x38
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80085fa:	2300      	movs	r3, #0
 80085fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10a      	bne.n	800861e <xQueueGenericSend+0x32>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d103      	bne.n	800862c <xQueueGenericSend+0x40>
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <xQueueGenericSend+0x44>
 800862c:	2301      	movs	r3, #1
 800862e:	e000      	b.n	8008632 <xQueueGenericSend+0x46>
 8008630:	2300      	movs	r3, #0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10a      	bne.n	800864c <xQueueGenericSend+0x60>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008648:	bf00      	nop
 800864a:	e7fe      	b.n	800864a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d103      	bne.n	800865a <xQueueGenericSend+0x6e>
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008656:	2b01      	cmp	r3, #1
 8008658:	d101      	bne.n	800865e <xQueueGenericSend+0x72>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <xQueueGenericSend+0x74>
 800865e:	2300      	movs	r3, #0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <xQueueGenericSend+0x8e>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	623b      	str	r3, [r7, #32]
}
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800867a:	f001 fa8b 	bl	8009b94 <xTaskGetSchedulerState>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <xQueueGenericSend+0x9e>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <xQueueGenericSend+0xa2>
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <xQueueGenericSend+0xa4>
 800868e:	2300      	movs	r3, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <xQueueGenericSend+0xbe>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	61fb      	str	r3, [r7, #28]
}
 80086a6:	bf00      	nop
 80086a8:	e7fe      	b.n	80086a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086aa:	f002 f853 	bl	800a754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d302      	bcc.n	80086c0 <xQueueGenericSend+0xd4>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d129      	bne.n	8008714 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086c6:	f000 faed 	bl	8008ca4 <prvCopyDataToQueue>
 80086ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d010      	beq.n	80086f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	3324      	adds	r3, #36	; 0x24
 80086d8:	4618      	mov	r0, r3
 80086da:	f001 f89d 	bl	8009818 <xTaskRemoveFromEventList>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d013      	beq.n	800870c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80086e4:	4b3f      	ldr	r3, [pc, #252]	; (80087e4 <xQueueGenericSend+0x1f8>)
 80086e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	e00a      	b.n	800870c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d007      	beq.n	800870c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086fc:	4b39      	ldr	r3, [pc, #228]	; (80087e4 <xQueueGenericSend+0x1f8>)
 80086fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800870c:	f002 f852 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 8008710:	2301      	movs	r3, #1
 8008712:	e063      	b.n	80087dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d103      	bne.n	8008722 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800871a:	f002 f84b 	bl	800a7b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800871e:	2300      	movs	r3, #0
 8008720:	e05c      	b.n	80087dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	2b00      	cmp	r3, #0
 8008726:	d106      	bne.n	8008736 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008728:	f107 0314 	add.w	r3, r7, #20
 800872c:	4618      	mov	r0, r3
 800872e:	f001 f8d5 	bl	80098dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008732:	2301      	movs	r3, #1
 8008734:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008736:	f002 f83d 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800873a:	f000 fe4f 	bl	80093dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800873e:	f002 f809 	bl	800a754 <vPortEnterCritical>
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008748:	b25b      	sxtb	r3, r3
 800874a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874e:	d103      	bne.n	8008758 <xQueueGenericSend+0x16c>
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800875e:	b25b      	sxtb	r3, r3
 8008760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008764:	d103      	bne.n	800876e <xQueueGenericSend+0x182>
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800876e:	f002 f821 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008772:	1d3a      	adds	r2, r7, #4
 8008774:	f107 0314 	add.w	r3, r7, #20
 8008778:	4611      	mov	r1, r2
 800877a:	4618      	mov	r0, r3
 800877c:	f001 f8c4 	bl	8009908 <xTaskCheckForTimeOut>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d124      	bne.n	80087d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008788:	f000 fb84 	bl	8008e94 <prvIsQueueFull>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d018      	beq.n	80087c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008794:	3310      	adds	r3, #16
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	4611      	mov	r1, r2
 800879a:	4618      	mov	r0, r3
 800879c:	f000 ffec 	bl	8009778 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087a2:	f000 fb0f 	bl	8008dc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087a6:	f000 fe27 	bl	80093f8 <xTaskResumeAll>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f47f af7c 	bne.w	80086aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <xQueueGenericSend+0x1f8>)
 80087b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	e772      	b.n	80086aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087c6:	f000 fafd 	bl	8008dc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087ca:	f000 fe15 	bl	80093f8 <xTaskResumeAll>
 80087ce:	e76c      	b.n	80086aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087d2:	f000 faf7 	bl	8008dc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087d6:	f000 fe0f 	bl	80093f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80087da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3738      	adds	r7, #56	; 0x38
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	e000ed04 	.word	0xe000ed04

080087e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b090      	sub	sp, #64	; 0x40
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10a      	bne.n	8008816 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d103      	bne.n	8008824 <xQueueGenericSendFromISR+0x3c>
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <xQueueGenericSendFromISR+0x40>
 8008824:	2301      	movs	r3, #1
 8008826:	e000      	b.n	800882a <xQueueGenericSendFromISR+0x42>
 8008828:	2300      	movs	r3, #0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008840:	bf00      	nop
 8008842:	e7fe      	b.n	8008842 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d103      	bne.n	8008852 <xQueueGenericSendFromISR+0x6a>
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884e:	2b01      	cmp	r3, #1
 8008850:	d101      	bne.n	8008856 <xQueueGenericSendFromISR+0x6e>
 8008852:	2301      	movs	r3, #1
 8008854:	e000      	b.n	8008858 <xQueueGenericSendFromISR+0x70>
 8008856:	2300      	movs	r3, #0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10a      	bne.n	8008872 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	623b      	str	r3, [r7, #32]
}
 800886e:	bf00      	nop
 8008870:	e7fe      	b.n	8008870 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008872:	f002 f851 	bl	800a918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008876:	f3ef 8211 	mrs	r2, BASEPRI
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	61fa      	str	r2, [r7, #28]
 800888c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800888e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008890:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889a:	429a      	cmp	r2, r3
 800889c:	d302      	bcc.n	80088a4 <xQueueGenericSendFromISR+0xbc>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d12f      	bne.n	8008904 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	68b9      	ldr	r1, [r7, #8]
 80088b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088ba:	f000 f9f3 	bl	8008ca4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80088c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c6:	d112      	bne.n	80088ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d016      	beq.n	80088fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	3324      	adds	r3, #36	; 0x24
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 ff9f 	bl	8009818 <xTaskRemoveFromEventList>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00e      	beq.n	80088fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	e007      	b.n	80088fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088f2:	3301      	adds	r3, #1
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	b25a      	sxtb	r2, r3
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80088fe:	2301      	movs	r3, #1
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008902:	e001      	b.n	8008908 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008904:	2300      	movs	r3, #0
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008912:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008916:	4618      	mov	r0, r3
 8008918:	3740      	adds	r7, #64	; 0x40
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08c      	sub	sp, #48	; 0x30
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800892c:	2300      	movs	r3, #0
 800892e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10a      	bne.n	8008950 <xQueueReceive+0x30>
	__asm volatile
 800893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	623b      	str	r3, [r7, #32]
}
 800894c:	bf00      	nop
 800894e:	e7fe      	b.n	800894e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <xQueueReceive+0x3e>
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <xQueueReceive+0x42>
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <xQueueReceive+0x44>
 8008962:	2300      	movs	r3, #0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10a      	bne.n	800897e <xQueueReceive+0x5e>
	__asm volatile
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	61fb      	str	r3, [r7, #28]
}
 800897a:	bf00      	nop
 800897c:	e7fe      	b.n	800897c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800897e:	f001 f909 	bl	8009b94 <xTaskGetSchedulerState>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d102      	bne.n	800898e <xQueueReceive+0x6e>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <xQueueReceive+0x72>
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <xQueueReceive+0x74>
 8008992:	2300      	movs	r3, #0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10a      	bne.n	80089ae <xQueueReceive+0x8e>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	61bb      	str	r3, [r7, #24]
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ae:	f001 fed1 	bl	800a754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d01f      	beq.n	80089fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089be:	68b9      	ldr	r1, [r7, #8]
 80089c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089c2:	f000 f9d9 	bl	8008d78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	1e5a      	subs	r2, r3, #1
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00f      	beq.n	80089f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	3310      	adds	r3, #16
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 ff1c 	bl	8009818 <xTaskRemoveFromEventList>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d007      	beq.n	80089f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089e6:	4b3d      	ldr	r3, [pc, #244]	; (8008adc <xQueueReceive+0x1bc>)
 80089e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089f6:	f001 fedd 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e069      	b.n	8008ad2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d103      	bne.n	8008a0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a04:	f001 fed6 	bl	800a7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e062      	b.n	8008ad2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a12:	f107 0310 	add.w	r3, r7, #16
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 ff60 	bl	80098dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a20:	f001 fec8 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a24:	f000 fcda 	bl	80093dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a28:	f001 fe94 	bl	800a754 <vPortEnterCritical>
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a32:	b25b      	sxtb	r3, r3
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d103      	bne.n	8008a42 <xQueueReceive+0x122>
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a48:	b25b      	sxtb	r3, r3
 8008a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4e:	d103      	bne.n	8008a58 <xQueueReceive+0x138>
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a58:	f001 feac 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a5c:	1d3a      	adds	r2, r7, #4
 8008a5e:	f107 0310 	add.w	r3, r7, #16
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 ff4f 	bl	8009908 <xTaskCheckForTimeOut>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d123      	bne.n	8008ab8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a72:	f000 f9f9 	bl	8008e68 <prvIsQueueEmpty>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d017      	beq.n	8008aac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	3324      	adds	r3, #36	; 0x24
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	4611      	mov	r1, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fe77 	bl	8009778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a8c:	f000 f99a 	bl	8008dc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a90:	f000 fcb2 	bl	80093f8 <xTaskResumeAll>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d189      	bne.n	80089ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a9a:	4b10      	ldr	r3, [pc, #64]	; (8008adc <xQueueReceive+0x1bc>)
 8008a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	e780      	b.n	80089ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aae:	f000 f989 	bl	8008dc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ab2:	f000 fca1 	bl	80093f8 <xTaskResumeAll>
 8008ab6:	e77a      	b.n	80089ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aba:	f000 f983 	bl	8008dc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008abe:	f000 fc9b 	bl	80093f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac4:	f000 f9d0 	bl	8008e68 <prvIsQueueEmpty>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f43f af6f 	beq.w	80089ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ad0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3730      	adds	r7, #48	; 0x30
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	e000ed04 	.word	0xe000ed04

08008ae0 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08e      	sub	sp, #56	; 0x38
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008aec:	2300      	movs	r3, #0
 8008aee:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10a      	bne.n	8008b10 <xQueuePeek+0x30>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d103      	bne.n	8008b1e <xQueuePeek+0x3e>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <xQueuePeek+0x42>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e000      	b.n	8008b24 <xQueuePeek+0x44>
 8008b22:	2300      	movs	r3, #0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <xQueuePeek+0x5e>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	623b      	str	r3, [r7, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b3e:	f001 f829 	bl	8009b94 <xTaskGetSchedulerState>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <xQueuePeek+0x6e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <xQueuePeek+0x72>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <xQueuePeek+0x74>
 8008b52:	2300      	movs	r3, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueuePeek+0x8e>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	61fb      	str	r3, [r7, #28]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b6e:	f001 fdf1 	bl	800a754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d021      	beq.n	8008bc2 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b84:	68b9      	ldr	r1, [r7, #8]
 8008b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b88:	f000 f8f6 	bl	8008d78 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b90:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00f      	beq.n	8008bba <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	3324      	adds	r3, #36	; 0x24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fe3a 	bl	8009818 <xTaskRemoveFromEventList>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8008baa:	4b3d      	ldr	r3, [pc, #244]	; (8008ca0 <xQueuePeek+0x1c0>)
 8008bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bba:	f001 fdfb 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e069      	b.n	8008c96 <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d103      	bne.n	8008bd0 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bc8:	f001 fdf4 	bl	800a7b4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e062      	b.n	8008c96 <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bd6:	f107 0314 	add.w	r3, r7, #20
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 fe7e 	bl	80098dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008be0:	2301      	movs	r3, #1
 8008be2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008be4:	f001 fde6 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008be8:	f000 fbf8 	bl	80093dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bec:	f001 fdb2 	bl	800a754 <vPortEnterCritical>
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bf6:	b25b      	sxtb	r3, r3
 8008bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfc:	d103      	bne.n	8008c06 <xQueuePeek+0x126>
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c0c:	b25b      	sxtb	r3, r3
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c12:	d103      	bne.n	8008c1c <xQueuePeek+0x13c>
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c1c:	f001 fdca 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c20:	1d3a      	adds	r2, r7, #4
 8008c22:	f107 0314 	add.w	r3, r7, #20
 8008c26:	4611      	mov	r1, r2
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fe6d 	bl	8009908 <xTaskCheckForTimeOut>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d123      	bne.n	8008c7c <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c36:	f000 f917 	bl	8008e68 <prvIsQueueEmpty>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d017      	beq.n	8008c70 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	3324      	adds	r3, #36	; 0x24
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	4611      	mov	r1, r2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 fd95 	bl	8009778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c50:	f000 f8b8 	bl	8008dc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c54:	f000 fbd0 	bl	80093f8 <xTaskResumeAll>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d187      	bne.n	8008b6e <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c5e:	4b10      	ldr	r3, [pc, #64]	; (8008ca0 <xQueuePeek+0x1c0>)
 8008c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	e77e      	b.n	8008b6e <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8008c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c72:	f000 f8a7 	bl	8008dc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c76:	f000 fbbf 	bl	80093f8 <xTaskResumeAll>
 8008c7a:	e778      	b.n	8008b6e <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8008c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c7e:	f000 f8a1 	bl	8008dc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c82:	f000 fbb9 	bl	80093f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c88:	f000 f8ee 	bl	8008e68 <prvIsQueueEmpty>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f43f af6d 	beq.w	8008b6e <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3738      	adds	r7, #56	; 0x38
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	e000ed04 	.word	0xe000ed04

08008ca4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10d      	bne.n	8008cde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d14d      	bne.n	8008d66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 ff7e 	bl	8009bd0 <xTaskPriorityDisinherit>
 8008cd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	609a      	str	r2, [r3, #8]
 8008cdc:	e043      	b.n	8008d66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d119      	bne.n	8008d18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6858      	ldr	r0, [r3, #4]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cec:	461a      	mov	r2, r3
 8008cee:	68b9      	ldr	r1, [r7, #8]
 8008cf0:	f002 f866 	bl	800adc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfc:	441a      	add	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d32b      	bcc.n	8008d66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	605a      	str	r2, [r3, #4]
 8008d16:	e026      	b.n	8008d66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	68d8      	ldr	r0, [r3, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d20:	461a      	mov	r2, r3
 8008d22:	68b9      	ldr	r1, [r7, #8]
 8008d24:	f002 f84c 	bl	800adc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	68da      	ldr	r2, [r3, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d30:	425b      	negs	r3, r3
 8008d32:	441a      	add	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	68da      	ldr	r2, [r3, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d207      	bcs.n	8008d54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4c:	425b      	negs	r3, r3
 8008d4e:	441a      	add	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d105      	bne.n	8008d66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d6e:	697b      	ldr	r3, [r7, #20]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d018      	beq.n	8008dbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	441a      	add	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d303      	bcc.n	8008dac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68d9      	ldr	r1, [r3, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db4:	461a      	mov	r2, r3
 8008db6:	6838      	ldr	r0, [r7, #0]
 8008db8:	f002 f802 	bl	800adc0 <memcpy>
	}
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008dcc:	f001 fcc2 	bl	800a754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dd8:	e011      	b.n	8008dfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d012      	beq.n	8008e08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3324      	adds	r3, #36	; 0x24
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fd16 	bl	8009818 <xTaskRemoveFromEventList>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008df2:	f000 fdeb 	bl	80099cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	dce9      	bgt.n	8008dda <prvUnlockQueue+0x16>
 8008e06:	e000      	b.n	8008e0a <prvUnlockQueue+0x46>
					break;
 8008e08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	22ff      	movs	r2, #255	; 0xff
 8008e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e12:	f001 fccf 	bl	800a7b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e16:	f001 fc9d 	bl	800a754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e22:	e011      	b.n	8008e48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d012      	beq.n	8008e52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3310      	adds	r3, #16
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 fcf1 	bl	8009818 <xTaskRemoveFromEventList>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e3c:	f000 fdc6 	bl	80099cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dce9      	bgt.n	8008e24 <prvUnlockQueue+0x60>
 8008e50:	e000      	b.n	8008e54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	22ff      	movs	r2, #255	; 0xff
 8008e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e5c:	f001 fcaa 	bl	800a7b4 <vPortExitCritical>
}
 8008e60:	bf00      	nop
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e70:	f001 fc70 	bl	800a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d102      	bne.n	8008e82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	e001      	b.n	8008e86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e86:	f001 fc95 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e9c:	f001 fc5a 	bl	800a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d102      	bne.n	8008eb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008eac:	2301      	movs	r3, #1
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	e001      	b.n	8008eb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008eb6:	f001 fc7d 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 8008eba:	68fb      	ldr	r3, [r7, #12]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	e014      	b.n	8008efe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ed4:	4a0f      	ldr	r2, [pc, #60]	; (8008f14 <vQueueAddToRegistry+0x50>)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10b      	bne.n	8008ef8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ee0:	490c      	ldr	r1, [pc, #48]	; (8008f14 <vQueueAddToRegistry+0x50>)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008eea:	4a0a      	ldr	r2, [pc, #40]	; (8008f14 <vQueueAddToRegistry+0x50>)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	4413      	add	r3, r2
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ef6:	e006      	b.n	8008f06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3301      	adds	r3, #1
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b07      	cmp	r3, #7
 8008f02:	d9e7      	bls.n	8008ed4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	2000082c 	.word	0x2000082c

08008f18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f28:	f001 fc14 	bl	800a754 <vPortEnterCritical>
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f32:	b25b      	sxtb	r3, r3
 8008f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f38:	d103      	bne.n	8008f42 <vQueueWaitForMessageRestricted+0x2a>
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f48:	b25b      	sxtb	r3, r3
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d103      	bne.n	8008f58 <vQueueWaitForMessageRestricted+0x40>
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f58:	f001 fc2c 	bl	800a7b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	3324      	adds	r3, #36	; 0x24
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 fc27 	bl	80097c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f72:	6978      	ldr	r0, [r7, #20]
 8008f74:	f7ff ff26 	bl	8008dc4 <prvUnlockQueue>
	}
 8008f78:	bf00      	nop
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08e      	sub	sp, #56	; 0x38
 8008f84:	af04      	add	r7, sp, #16
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10a      	bne.n	8008faa <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	623b      	str	r3, [r7, #32]
}
 8008fa6:	bf00      	nop
 8008fa8:	e7fe      	b.n	8008fa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	61fb      	str	r3, [r7, #28]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fc6:	235c      	movs	r3, #92	; 0x5c
 8008fc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	2b5c      	cmp	r3, #92	; 0x5c
 8008fce:	d00a      	beq.n	8008fe6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	61bb      	str	r3, [r7, #24]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008fe6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d01e      	beq.n	800902c <xTaskCreateStatic+0xac>
 8008fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d01b      	beq.n	800902c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ffc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	2202      	movs	r2, #2
 8009002:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009006:	2300      	movs	r3, #0
 8009008:	9303      	str	r3, [sp, #12]
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	9302      	str	r3, [sp, #8]
 800900e:	f107 0314 	add.w	r3, r7, #20
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 f850 	bl	80090c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009026:	f000 f8d5 	bl	80091d4 <prvAddNewTaskToReadyList>
 800902a:	e001      	b.n	8009030 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800902c:	2300      	movs	r3, #0
 800902e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009030:	697b      	ldr	r3, [r7, #20]
	}
 8009032:	4618      	mov	r0, r3
 8009034:	3728      	adds	r7, #40	; 0x28
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800903a:	b580      	push	{r7, lr}
 800903c:	b08c      	sub	sp, #48	; 0x30
 800903e:	af04      	add	r7, sp, #16
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	603b      	str	r3, [r7, #0]
 8009046:	4613      	mov	r3, r2
 8009048:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800904a:	88fb      	ldrh	r3, [r7, #6]
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4618      	mov	r0, r3
 8009050:	f001 fca2 	bl	800a998 <pvPortMalloc>
 8009054:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00e      	beq.n	800907a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800905c:	205c      	movs	r0, #92	; 0x5c
 800905e:	f001 fc9b 	bl	800a998 <pvPortMalloc>
 8009062:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
 8009070:	e005      	b.n	800907e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009072:	6978      	ldr	r0, [r7, #20]
 8009074:	f001 fd5c 	bl	800ab30 <vPortFree>
 8009078:	e001      	b.n	800907e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d017      	beq.n	80090b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800908c:	88fa      	ldrh	r2, [r7, #6]
 800908e:	2300      	movs	r3, #0
 8009090:	9303      	str	r3, [sp, #12]
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	9302      	str	r3, [sp, #8]
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	68b9      	ldr	r1, [r7, #8]
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 f80e 	bl	80090c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090a8:	69f8      	ldr	r0, [r7, #28]
 80090aa:	f000 f893 	bl	80091d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090ae:	2301      	movs	r3, #1
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	e002      	b.n	80090ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090b4:	f04f 33ff 	mov.w	r3, #4294967295
 80090b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090ba:	69bb      	ldr	r3, [r7, #24]
	}
 80090bc:	4618      	mov	r0, r3
 80090be:	3720      	adds	r7, #32
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090dc:	3b01      	subs	r3, #1
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f023 0307 	bic.w	r3, r3, #7
 80090ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <prvInitialiseNewTask+0x48>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	617b      	str	r3, [r7, #20]
}
 8009108:	bf00      	nop
 800910a:	e7fe      	b.n	800910a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01f      	beq.n	8009152 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009112:	2300      	movs	r3, #0
 8009114:	61fb      	str	r3, [r7, #28]
 8009116:	e012      	b.n	800913e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	7819      	ldrb	r1, [r3, #0]
 8009120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	4413      	add	r3, r2
 8009126:	3334      	adds	r3, #52	; 0x34
 8009128:	460a      	mov	r2, r1
 800912a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d006      	beq.n	8009146 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	3301      	adds	r3, #1
 800913c:	61fb      	str	r3, [r7, #28]
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	2b17      	cmp	r3, #23
 8009142:	d9e9      	bls.n	8009118 <prvInitialiseNewTask+0x54>
 8009144:	e000      	b.n	8009148 <prvInitialiseNewTask+0x84>
			{
				break;
 8009146:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	2200      	movs	r2, #0
 800914c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8009150:	e003      	b.n	800915a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	2b06      	cmp	r3, #6
 800915e:	d901      	bls.n	8009164 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009160:	2306      	movs	r3, #6
 8009162:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009168:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800916e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	2200      	movs	r2, #0
 8009174:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	3304      	adds	r3, #4
 800917a:	4618      	mov	r0, r3
 800917c:	f7ff f867 	bl	800824e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	3318      	adds	r3, #24
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff f862 	bl	800824e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	f1c3 0207 	rsb	r2, r3, #7
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	2200      	movs	r2, #0
 80091a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	68f9      	ldr	r1, [r7, #12]
 80091b2:	69b8      	ldr	r0, [r7, #24]
 80091b4:	f001 f9a2 	bl	800a4fc <pxPortInitialiseStack>
 80091b8:	4602      	mov	r2, r0
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ca:	bf00      	nop
 80091cc:	3720      	adds	r7, #32
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091dc:	f001 faba 	bl	800a754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091e0:	4b2a      	ldr	r3, [pc, #168]	; (800928c <prvAddNewTaskToReadyList+0xb8>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3301      	adds	r3, #1
 80091e6:	4a29      	ldr	r2, [pc, #164]	; (800928c <prvAddNewTaskToReadyList+0xb8>)
 80091e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091ea:	4b29      	ldr	r3, [pc, #164]	; (8009290 <prvAddNewTaskToReadyList+0xbc>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091f2:	4a27      	ldr	r2, [pc, #156]	; (8009290 <prvAddNewTaskToReadyList+0xbc>)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091f8:	4b24      	ldr	r3, [pc, #144]	; (800928c <prvAddNewTaskToReadyList+0xb8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d110      	bne.n	8009222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009200:	f000 fc0a 	bl	8009a18 <prvInitialiseTaskLists>
 8009204:	e00d      	b.n	8009222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009206:	4b23      	ldr	r3, [pc, #140]	; (8009294 <prvAddNewTaskToReadyList+0xc0>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800920e:	4b20      	ldr	r3, [pc, #128]	; (8009290 <prvAddNewTaskToReadyList+0xbc>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009218:	429a      	cmp	r2, r3
 800921a:	d802      	bhi.n	8009222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800921c:	4a1c      	ldr	r2, [pc, #112]	; (8009290 <prvAddNewTaskToReadyList+0xbc>)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009222:	4b1d      	ldr	r3, [pc, #116]	; (8009298 <prvAddNewTaskToReadyList+0xc4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3301      	adds	r3, #1
 8009228:	4a1b      	ldr	r2, [pc, #108]	; (8009298 <prvAddNewTaskToReadyList+0xc4>)
 800922a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	2201      	movs	r2, #1
 8009232:	409a      	lsls	r2, r3
 8009234:	4b19      	ldr	r3, [pc, #100]	; (800929c <prvAddNewTaskToReadyList+0xc8>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4313      	orrs	r3, r2
 800923a:	4a18      	ldr	r2, [pc, #96]	; (800929c <prvAddNewTaskToReadyList+0xc8>)
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4a15      	ldr	r2, [pc, #84]	; (80092a0 <prvAddNewTaskToReadyList+0xcc>)
 800924c:	441a      	add	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3304      	adds	r3, #4
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f7ff f807 	bl	8008268 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800925a:	f001 faab 	bl	800a7b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800925e:	4b0d      	ldr	r3, [pc, #52]	; (8009294 <prvAddNewTaskToReadyList+0xc0>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00e      	beq.n	8009284 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009266:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <prvAddNewTaskToReadyList+0xbc>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009270:	429a      	cmp	r2, r3
 8009272:	d207      	bcs.n	8009284 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009274:	4b0b      	ldr	r3, [pc, #44]	; (80092a4 <prvAddNewTaskToReadyList+0xd0>)
 8009276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	2000096c 	.word	0x2000096c
 8009290:	2000086c 	.word	0x2000086c
 8009294:	20000978 	.word	0x20000978
 8009298:	20000988 	.word	0x20000988
 800929c:	20000974 	.word	0x20000974
 80092a0:	20000870 	.word	0x20000870
 80092a4:	e000ed04 	.word	0xe000ed04

080092a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d017      	beq.n	80092ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092ba:	4b13      	ldr	r3, [pc, #76]	; (8009308 <vTaskDelay+0x60>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <vTaskDelay+0x30>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	60bb      	str	r3, [r7, #8]
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092d8:	f000 f880 	bl	80093dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092dc:	2100      	movs	r1, #0
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fcfc 	bl	8009cdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092e4:	f000 f888 	bl	80093f8 <xTaskResumeAll>
 80092e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d107      	bne.n	8009300 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80092f0:	4b06      	ldr	r3, [pc, #24]	; (800930c <vTaskDelay+0x64>)
 80092f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20000994 	.word	0x20000994
 800930c:	e000ed04 	.word	0xe000ed04

08009310 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08a      	sub	sp, #40	; 0x28
 8009314:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009316:	2300      	movs	r3, #0
 8009318:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800931e:	463a      	mov	r2, r7
 8009320:	1d39      	adds	r1, r7, #4
 8009322:	f107 0308 	add.w	r3, r7, #8
 8009326:	4618      	mov	r0, r3
 8009328:	f7f7 fdc8 	bl	8000ebc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	9202      	str	r2, [sp, #8]
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	2300      	movs	r3, #0
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	2300      	movs	r3, #0
 800933c:	460a      	mov	r2, r1
 800933e:	4921      	ldr	r1, [pc, #132]	; (80093c4 <vTaskStartScheduler+0xb4>)
 8009340:	4821      	ldr	r0, [pc, #132]	; (80093c8 <vTaskStartScheduler+0xb8>)
 8009342:	f7ff fe1d 	bl	8008f80 <xTaskCreateStatic>
 8009346:	4603      	mov	r3, r0
 8009348:	4a20      	ldr	r2, [pc, #128]	; (80093cc <vTaskStartScheduler+0xbc>)
 800934a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800934c:	4b1f      	ldr	r3, [pc, #124]	; (80093cc <vTaskStartScheduler+0xbc>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009354:	2301      	movs	r3, #1
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	e001      	b.n	800935e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800935a:	2300      	movs	r3, #0
 800935c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d102      	bne.n	800936a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009364:	f000 fd20 	bl	8009da8 <xTimerCreateTimerTask>
 8009368:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d116      	bne.n	800939e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	613b      	str	r3, [r7, #16]
}
 8009382:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009384:	4b12      	ldr	r3, [pc, #72]	; (80093d0 <vTaskStartScheduler+0xc0>)
 8009386:	f04f 32ff 	mov.w	r2, #4294967295
 800938a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800938c:	4b11      	ldr	r3, [pc, #68]	; (80093d4 <vTaskStartScheduler+0xc4>)
 800938e:	2201      	movs	r2, #1
 8009390:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009392:	4b11      	ldr	r3, [pc, #68]	; (80093d8 <vTaskStartScheduler+0xc8>)
 8009394:	2200      	movs	r2, #0
 8009396:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009398:	f001 f93a 	bl	800a610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800939c:	e00e      	b.n	80093bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a4:	d10a      	bne.n	80093bc <vTaskStartScheduler+0xac>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	60fb      	str	r3, [r7, #12]
}
 80093b8:	bf00      	nop
 80093ba:	e7fe      	b.n	80093ba <vTaskStartScheduler+0xaa>
}
 80093bc:	bf00      	nop
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	0800d060 	.word	0x0800d060
 80093c8:	080099e5 	.word	0x080099e5
 80093cc:	20000990 	.word	0x20000990
 80093d0:	2000098c 	.word	0x2000098c
 80093d4:	20000978 	.word	0x20000978
 80093d8:	20000970 	.word	0x20000970

080093dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <vTaskSuspendAll+0x18>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3301      	adds	r3, #1
 80093e6:	4a03      	ldr	r2, [pc, #12]	; (80093f4 <vTaskSuspendAll+0x18>)
 80093e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093ea:	bf00      	nop
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	20000994 	.word	0x20000994

080093f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009402:	2300      	movs	r3, #0
 8009404:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009406:	4b41      	ldr	r3, [pc, #260]	; (800950c <xTaskResumeAll+0x114>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10a      	bne.n	8009424 <xTaskResumeAll+0x2c>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	603b      	str	r3, [r7, #0]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009424:	f001 f996 	bl	800a754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009428:	4b38      	ldr	r3, [pc, #224]	; (800950c <xTaskResumeAll+0x114>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3b01      	subs	r3, #1
 800942e:	4a37      	ldr	r2, [pc, #220]	; (800950c <xTaskResumeAll+0x114>)
 8009430:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009432:	4b36      	ldr	r3, [pc, #216]	; (800950c <xTaskResumeAll+0x114>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d161      	bne.n	80094fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800943a:	4b35      	ldr	r3, [pc, #212]	; (8009510 <xTaskResumeAll+0x118>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d05d      	beq.n	80094fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009442:	e02e      	b.n	80094a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009444:	4b33      	ldr	r3, [pc, #204]	; (8009514 <xTaskResumeAll+0x11c>)
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3318      	adds	r3, #24
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe ff66 	bl	8008322 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3304      	adds	r3, #4
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe ff61 	bl	8008322 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	2201      	movs	r2, #1
 8009466:	409a      	lsls	r2, r3
 8009468:	4b2b      	ldr	r3, [pc, #172]	; (8009518 <xTaskResumeAll+0x120>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4313      	orrs	r3, r2
 800946e:	4a2a      	ldr	r2, [pc, #168]	; (8009518 <xTaskResumeAll+0x120>)
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4a27      	ldr	r2, [pc, #156]	; (800951c <xTaskResumeAll+0x124>)
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3304      	adds	r3, #4
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f7fe feed 	bl	8008268 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009492:	4b23      	ldr	r3, [pc, #140]	; (8009520 <xTaskResumeAll+0x128>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009498:	429a      	cmp	r2, r3
 800949a:	d302      	bcc.n	80094a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800949c:	4b21      	ldr	r3, [pc, #132]	; (8009524 <xTaskResumeAll+0x12c>)
 800949e:	2201      	movs	r2, #1
 80094a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094a2:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <xTaskResumeAll+0x11c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1cc      	bne.n	8009444 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094b0:	f000 fb50 	bl	8009b54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094b4:	4b1c      	ldr	r3, [pc, #112]	; (8009528 <xTaskResumeAll+0x130>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d010      	beq.n	80094e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094c0:	f000 f846 	bl	8009550 <xTaskIncrementTick>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80094ca:	4b16      	ldr	r3, [pc, #88]	; (8009524 <xTaskResumeAll+0x12c>)
 80094cc:	2201      	movs	r2, #1
 80094ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1f1      	bne.n	80094c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80094dc:	4b12      	ldr	r3, [pc, #72]	; (8009528 <xTaskResumeAll+0x130>)
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094e2:	4b10      	ldr	r3, [pc, #64]	; (8009524 <xTaskResumeAll+0x12c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d009      	beq.n	80094fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <xTaskResumeAll+0x134>)
 80094f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094fe:	f001 f959 	bl	800a7b4 <vPortExitCritical>

	return xAlreadyYielded;
 8009502:	68bb      	ldr	r3, [r7, #8]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20000994 	.word	0x20000994
 8009510:	2000096c 	.word	0x2000096c
 8009514:	2000092c 	.word	0x2000092c
 8009518:	20000974 	.word	0x20000974
 800951c:	20000870 	.word	0x20000870
 8009520:	2000086c 	.word	0x2000086c
 8009524:	20000980 	.word	0x20000980
 8009528:	2000097c 	.word	0x2000097c
 800952c:	e000ed04 	.word	0xe000ed04

08009530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009536:	4b05      	ldr	r3, [pc, #20]	; (800954c <xTaskGetTickCount+0x1c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800953c:	687b      	ldr	r3, [r7, #4]
}
 800953e:	4618      	mov	r0, r3
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20000970 	.word	0x20000970

08009550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800955a:	4b4e      	ldr	r3, [pc, #312]	; (8009694 <xTaskIncrementTick+0x144>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	f040 808e 	bne.w	8009680 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009564:	4b4c      	ldr	r3, [pc, #304]	; (8009698 <xTaskIncrementTick+0x148>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800956c:	4a4a      	ldr	r2, [pc, #296]	; (8009698 <xTaskIncrementTick+0x148>)
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d120      	bne.n	80095ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009578:	4b48      	ldr	r3, [pc, #288]	; (800969c <xTaskIncrementTick+0x14c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00a      	beq.n	8009598 <xTaskIncrementTick+0x48>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	603b      	str	r3, [r7, #0]
}
 8009594:	bf00      	nop
 8009596:	e7fe      	b.n	8009596 <xTaskIncrementTick+0x46>
 8009598:	4b40      	ldr	r3, [pc, #256]	; (800969c <xTaskIncrementTick+0x14c>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	4b40      	ldr	r3, [pc, #256]	; (80096a0 <xTaskIncrementTick+0x150>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a3e      	ldr	r2, [pc, #248]	; (800969c <xTaskIncrementTick+0x14c>)
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	4a3e      	ldr	r2, [pc, #248]	; (80096a0 <xTaskIncrementTick+0x150>)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	4b3d      	ldr	r3, [pc, #244]	; (80096a4 <xTaskIncrementTick+0x154>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3301      	adds	r3, #1
 80095b2:	4a3c      	ldr	r2, [pc, #240]	; (80096a4 <xTaskIncrementTick+0x154>)
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	f000 facd 	bl	8009b54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095ba:	4b3b      	ldr	r3, [pc, #236]	; (80096a8 <xTaskIncrementTick+0x158>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d348      	bcc.n	8009656 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095c4:	4b35      	ldr	r3, [pc, #212]	; (800969c <xTaskIncrementTick+0x14c>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ce:	4b36      	ldr	r3, [pc, #216]	; (80096a8 <xTaskIncrementTick+0x158>)
 80095d0:	f04f 32ff 	mov.w	r2, #4294967295
 80095d4:	601a      	str	r2, [r3, #0]
					break;
 80095d6:	e03e      	b.n	8009656 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d8:	4b30      	ldr	r3, [pc, #192]	; (800969c <xTaskIncrementTick+0x14c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d203      	bcs.n	80095f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095f0:	4a2d      	ldr	r2, [pc, #180]	; (80096a8 <xTaskIncrementTick+0x158>)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095f6:	e02e      	b.n	8009656 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	3304      	adds	r3, #4
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe fe90 	bl	8008322 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009606:	2b00      	cmp	r3, #0
 8009608:	d004      	beq.n	8009614 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	3318      	adds	r3, #24
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fe87 	bl	8008322 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	2201      	movs	r2, #1
 800961a:	409a      	lsls	r2, r3
 800961c:	4b23      	ldr	r3, [pc, #140]	; (80096ac <xTaskIncrementTick+0x15c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4313      	orrs	r3, r2
 8009622:	4a22      	ldr	r2, [pc, #136]	; (80096ac <xTaskIncrementTick+0x15c>)
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4a1f      	ldr	r2, [pc, #124]	; (80096b0 <xTaskIncrementTick+0x160>)
 8009634:	441a      	add	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	3304      	adds	r3, #4
 800963a:	4619      	mov	r1, r3
 800963c:	4610      	mov	r0, r2
 800963e:	f7fe fe13 	bl	8008268 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009646:	4b1b      	ldr	r3, [pc, #108]	; (80096b4 <xTaskIncrementTick+0x164>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	429a      	cmp	r2, r3
 800964e:	d3b9      	bcc.n	80095c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009650:	2301      	movs	r3, #1
 8009652:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009654:	e7b6      	b.n	80095c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009656:	4b17      	ldr	r3, [pc, #92]	; (80096b4 <xTaskIncrementTick+0x164>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	4914      	ldr	r1, [pc, #80]	; (80096b0 <xTaskIncrementTick+0x160>)
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d901      	bls.n	8009672 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800966e:	2301      	movs	r3, #1
 8009670:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009672:	4b11      	ldr	r3, [pc, #68]	; (80096b8 <xTaskIncrementTick+0x168>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d007      	beq.n	800968a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800967a:	2301      	movs	r3, #1
 800967c:	617b      	str	r3, [r7, #20]
 800967e:	e004      	b.n	800968a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009680:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <xTaskIncrementTick+0x16c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3301      	adds	r3, #1
 8009686:	4a0d      	ldr	r2, [pc, #52]	; (80096bc <xTaskIncrementTick+0x16c>)
 8009688:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800968a:	697b      	ldr	r3, [r7, #20]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	20000994 	.word	0x20000994
 8009698:	20000970 	.word	0x20000970
 800969c:	20000924 	.word	0x20000924
 80096a0:	20000928 	.word	0x20000928
 80096a4:	20000984 	.word	0x20000984
 80096a8:	2000098c 	.word	0x2000098c
 80096ac:	20000974 	.word	0x20000974
 80096b0:	20000870 	.word	0x20000870
 80096b4:	2000086c 	.word	0x2000086c
 80096b8:	20000980 	.word	0x20000980
 80096bc:	2000097c 	.word	0x2000097c

080096c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096c6:	4b27      	ldr	r3, [pc, #156]	; (8009764 <vTaskSwitchContext+0xa4>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096ce:	4b26      	ldr	r3, [pc, #152]	; (8009768 <vTaskSwitchContext+0xa8>)
 80096d0:	2201      	movs	r2, #1
 80096d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096d4:	e03f      	b.n	8009756 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80096d6:	4b24      	ldr	r3, [pc, #144]	; (8009768 <vTaskSwitchContext+0xa8>)
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096dc:	4b23      	ldr	r3, [pc, #140]	; (800976c <vTaskSwitchContext+0xac>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	fab3 f383 	clz	r3, r3
 80096e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80096ea:	7afb      	ldrb	r3, [r7, #11]
 80096ec:	f1c3 031f 	rsb	r3, r3, #31
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	491f      	ldr	r1, [pc, #124]	; (8009770 <vTaskSwitchContext+0xb0>)
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	440b      	add	r3, r1
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	607b      	str	r3, [r7, #4]
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <vTaskSwitchContext+0x5a>
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4a12      	ldr	r2, [pc, #72]	; (8009770 <vTaskSwitchContext+0xb0>)
 8009728:	4413      	add	r3, r2
 800972a:	613b      	str	r3, [r7, #16]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	3308      	adds	r3, #8
 800973e:	429a      	cmp	r2, r3
 8009740:	d104      	bne.n	800974c <vTaskSwitchContext+0x8c>
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	605a      	str	r2, [r3, #4]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	4a08      	ldr	r2, [pc, #32]	; (8009774 <vTaskSwitchContext+0xb4>)
 8009754:	6013      	str	r3, [r2, #0]
}
 8009756:	bf00      	nop
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	20000994 	.word	0x20000994
 8009768:	20000980 	.word	0x20000980
 800976c:	20000974 	.word	0x20000974
 8009770:	20000870 	.word	0x20000870
 8009774:	2000086c 	.word	0x2000086c

08009778 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10a      	bne.n	800979e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	60fb      	str	r3, [r7, #12]
}
 800979a:	bf00      	nop
 800979c:	e7fe      	b.n	800979c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800979e:	4b07      	ldr	r3, [pc, #28]	; (80097bc <vTaskPlaceOnEventList+0x44>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3318      	adds	r3, #24
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7fe fd82 	bl	80082b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097ac:	2101      	movs	r1, #1
 80097ae:	6838      	ldr	r0, [r7, #0]
 80097b0:	f000 fa94 	bl	8009cdc <prvAddCurrentTaskToDelayedList>
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	2000086c 	.word	0x2000086c

080097c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	617b      	str	r3, [r7, #20]
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097e8:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <vTaskPlaceOnEventListRestricted+0x54>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3318      	adds	r3, #24
 80097ee:	4619      	mov	r1, r3
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f7fe fd39 	bl	8008268 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80097fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009800:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	68b8      	ldr	r0, [r7, #8]
 8009806:	f000 fa69 	bl	8009cdc <prvAddCurrentTaskToDelayedList>
	}
 800980a:	bf00      	nop
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	2000086c 	.word	0x2000086c

08009818 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10a      	bne.n	8009844 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	60fb      	str	r3, [r7, #12]
}
 8009840:	bf00      	nop
 8009842:	e7fe      	b.n	8009842 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	3318      	adds	r3, #24
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe fd6a 	bl	8008322 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800984e:	4b1d      	ldr	r3, [pc, #116]	; (80098c4 <xTaskRemoveFromEventList+0xac>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d11c      	bne.n	8009890 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	3304      	adds	r3, #4
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fd61 	bl	8008322 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009864:	2201      	movs	r2, #1
 8009866:	409a      	lsls	r2, r3
 8009868:	4b17      	ldr	r3, [pc, #92]	; (80098c8 <xTaskRemoveFromEventList+0xb0>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4313      	orrs	r3, r2
 800986e:	4a16      	ldr	r2, [pc, #88]	; (80098c8 <xTaskRemoveFromEventList+0xb0>)
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4a13      	ldr	r2, [pc, #76]	; (80098cc <xTaskRemoveFromEventList+0xb4>)
 8009880:	441a      	add	r2, r3
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	3304      	adds	r3, #4
 8009886:	4619      	mov	r1, r3
 8009888:	4610      	mov	r0, r2
 800988a:	f7fe fced 	bl	8008268 <vListInsertEnd>
 800988e:	e005      	b.n	800989c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	3318      	adds	r3, #24
 8009894:	4619      	mov	r1, r3
 8009896:	480e      	ldr	r0, [pc, #56]	; (80098d0 <xTaskRemoveFromEventList+0xb8>)
 8009898:	f7fe fce6 	bl	8008268 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a0:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <xTaskRemoveFromEventList+0xbc>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d905      	bls.n	80098b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098aa:	2301      	movs	r3, #1
 80098ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098ae:	4b0a      	ldr	r3, [pc, #40]	; (80098d8 <xTaskRemoveFromEventList+0xc0>)
 80098b0:	2201      	movs	r2, #1
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	e001      	b.n	80098ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098ba:	697b      	ldr	r3, [r7, #20]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000994 	.word	0x20000994
 80098c8:	20000974 	.word	0x20000974
 80098cc:	20000870 	.word	0x20000870
 80098d0:	2000092c 	.word	0x2000092c
 80098d4:	2000086c 	.word	0x2000086c
 80098d8:	20000980 	.word	0x20000980

080098dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098e4:	4b06      	ldr	r3, [pc, #24]	; (8009900 <vTaskInternalSetTimeOutState+0x24>)
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098ec:	4b05      	ldr	r3, [pc, #20]	; (8009904 <vTaskInternalSetTimeOutState+0x28>)
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	605a      	str	r2, [r3, #4]
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	20000984 	.word	0x20000984
 8009904:	20000970 	.word	0x20000970

08009908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	613b      	str	r3, [r7, #16]
}
 800992a:	bf00      	nop
 800992c:	e7fe      	b.n	800992c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10a      	bne.n	800994a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	60fb      	str	r3, [r7, #12]
}
 8009946:	bf00      	nop
 8009948:	e7fe      	b.n	8009948 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800994a:	f000 ff03 	bl	800a754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800994e:	4b1d      	ldr	r3, [pc, #116]	; (80099c4 <xTaskCheckForTimeOut+0xbc>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009966:	d102      	bne.n	800996e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009968:	2300      	movs	r3, #0
 800996a:	61fb      	str	r3, [r7, #28]
 800996c:	e023      	b.n	80099b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	4b15      	ldr	r3, [pc, #84]	; (80099c8 <xTaskCheckForTimeOut+0xc0>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d007      	beq.n	800998a <xTaskCheckForTimeOut+0x82>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	69ba      	ldr	r2, [r7, #24]
 8009980:	429a      	cmp	r2, r3
 8009982:	d302      	bcc.n	800998a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009984:	2301      	movs	r3, #1
 8009986:	61fb      	str	r3, [r7, #28]
 8009988:	e015      	b.n	80099b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	429a      	cmp	r2, r3
 8009992:	d20b      	bcs.n	80099ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	1ad2      	subs	r2, r2, r3
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff ff9b 	bl	80098dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80099a6:	2300      	movs	r3, #0
 80099a8:	61fb      	str	r3, [r7, #28]
 80099aa:	e004      	b.n	80099b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2200      	movs	r2, #0
 80099b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099b2:	2301      	movs	r3, #1
 80099b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099b6:	f000 fefd 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 80099ba:	69fb      	ldr	r3, [r7, #28]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3720      	adds	r7, #32
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20000970 	.word	0x20000970
 80099c8:	20000984 	.word	0x20000984

080099cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099cc:	b480      	push	{r7}
 80099ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099d0:	4b03      	ldr	r3, [pc, #12]	; (80099e0 <vTaskMissedYield+0x14>)
 80099d2:	2201      	movs	r2, #1
 80099d4:	601a      	str	r2, [r3, #0]
}
 80099d6:	bf00      	nop
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	20000980 	.word	0x20000980

080099e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099ec:	f000 f854 	bl	8009a98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <prvIdleTask+0x2c>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d907      	bls.n	8009a08 <prvIdleTask+0x24>
			{
				taskYIELD();
 80099f8:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <prvIdleTask+0x30>)
 80099fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009a08:	f7f7 ff52 	bl	80018b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009a0c:	e7ee      	b.n	80099ec <prvIdleTask+0x8>
 8009a0e:	bf00      	nop
 8009a10:	20000870 	.word	0x20000870
 8009a14:	e000ed04 	.word	0xe000ed04

08009a18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a1e:	2300      	movs	r3, #0
 8009a20:	607b      	str	r3, [r7, #4]
 8009a22:	e00c      	b.n	8009a3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4613      	mov	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4a12      	ldr	r2, [pc, #72]	; (8009a78 <prvInitialiseTaskLists+0x60>)
 8009a30:	4413      	add	r3, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe fbeb 	bl	800820e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	607b      	str	r3, [r7, #4]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b06      	cmp	r3, #6
 8009a42:	d9ef      	bls.n	8009a24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a44:	480d      	ldr	r0, [pc, #52]	; (8009a7c <prvInitialiseTaskLists+0x64>)
 8009a46:	f7fe fbe2 	bl	800820e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a4a:	480d      	ldr	r0, [pc, #52]	; (8009a80 <prvInitialiseTaskLists+0x68>)
 8009a4c:	f7fe fbdf 	bl	800820e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a50:	480c      	ldr	r0, [pc, #48]	; (8009a84 <prvInitialiseTaskLists+0x6c>)
 8009a52:	f7fe fbdc 	bl	800820e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a56:	480c      	ldr	r0, [pc, #48]	; (8009a88 <prvInitialiseTaskLists+0x70>)
 8009a58:	f7fe fbd9 	bl	800820e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a5c:	480b      	ldr	r0, [pc, #44]	; (8009a8c <prvInitialiseTaskLists+0x74>)
 8009a5e:	f7fe fbd6 	bl	800820e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a62:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <prvInitialiseTaskLists+0x78>)
 8009a64:	4a05      	ldr	r2, [pc, #20]	; (8009a7c <prvInitialiseTaskLists+0x64>)
 8009a66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a68:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <prvInitialiseTaskLists+0x7c>)
 8009a6a:	4a05      	ldr	r2, [pc, #20]	; (8009a80 <prvInitialiseTaskLists+0x68>)
 8009a6c:	601a      	str	r2, [r3, #0]
}
 8009a6e:	bf00      	nop
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20000870 	.word	0x20000870
 8009a7c:	200008fc 	.word	0x200008fc
 8009a80:	20000910 	.word	0x20000910
 8009a84:	2000092c 	.word	0x2000092c
 8009a88:	20000940 	.word	0x20000940
 8009a8c:	20000958 	.word	0x20000958
 8009a90:	20000924 	.word	0x20000924
 8009a94:	20000928 	.word	0x20000928

08009a98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a9e:	e019      	b.n	8009ad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009aa0:	f000 fe58 	bl	800a754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa4:	4b10      	ldr	r3, [pc, #64]	; (8009ae8 <prvCheckTasksWaitingTermination+0x50>)
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe fc36 	bl	8008322 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ab6:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <prvCheckTasksWaitingTermination+0x54>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3b01      	subs	r3, #1
 8009abc:	4a0b      	ldr	r2, [pc, #44]	; (8009aec <prvCheckTasksWaitingTermination+0x54>)
 8009abe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ac0:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <prvCheckTasksWaitingTermination+0x58>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	4a0a      	ldr	r2, [pc, #40]	; (8009af0 <prvCheckTasksWaitingTermination+0x58>)
 8009ac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009aca:	f000 fe73 	bl	800a7b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f810 	bl	8009af4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ad4:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <prvCheckTasksWaitingTermination+0x58>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e1      	bne.n	8009aa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20000940 	.word	0x20000940
 8009aec:	2000096c 	.word	0x2000096c
 8009af0:	20000954 	.word	0x20000954

08009af4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d108      	bne.n	8009b18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f001 f810 	bl	800ab30 <vPortFree>
				vPortFree( pxTCB );
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f001 f80d 	bl	800ab30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b16:	e018      	b.n	8009b4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d103      	bne.n	8009b2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f001 f804 	bl	800ab30 <vPortFree>
	}
 8009b28:	e00f      	b.n	8009b4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d00a      	beq.n	8009b4a <prvDeleteTCB+0x56>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	60fb      	str	r3, [r7, #12]
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <prvDeleteTCB+0x54>
	}
 8009b4a:	bf00      	nop
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <prvResetNextTaskUnblockTime+0x38>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d104      	bne.n	8009b6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b64:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <prvResetNextTaskUnblockTime+0x3c>)
 8009b66:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b6c:	e008      	b.n	8009b80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b6e:	4b07      	ldr	r3, [pc, #28]	; (8009b8c <prvResetNextTaskUnblockTime+0x38>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	4a04      	ldr	r2, [pc, #16]	; (8009b90 <prvResetNextTaskUnblockTime+0x3c>)
 8009b7e:	6013      	str	r3, [r2, #0]
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	20000924 	.word	0x20000924
 8009b90:	2000098c 	.word	0x2000098c

08009b94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b9a:	4b0b      	ldr	r3, [pc, #44]	; (8009bc8 <xTaskGetSchedulerState+0x34>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d102      	bne.n	8009ba8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	607b      	str	r3, [r7, #4]
 8009ba6:	e008      	b.n	8009bba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba8:	4b08      	ldr	r3, [pc, #32]	; (8009bcc <xTaskGetSchedulerState+0x38>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	607b      	str	r3, [r7, #4]
 8009bb4:	e001      	b.n	8009bba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009bba:	687b      	ldr	r3, [r7, #4]
	}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	20000978 	.word	0x20000978
 8009bcc:	20000994 	.word	0x20000994

08009bd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d06e      	beq.n	8009cc4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009be6:	4b3a      	ldr	r3, [pc, #232]	; (8009cd0 <xTaskPriorityDisinherit+0x100>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d00a      	beq.n	8009c06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	60fb      	str	r3, [r7, #12]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	60bb      	str	r3, [r7, #8]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c28:	1e5a      	subs	r2, r3, #1
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d044      	beq.n	8009cc4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d140      	bne.n	8009cc4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	3304      	adds	r3, #4
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe fb6b 	bl	8008322 <uxListRemove>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d115      	bne.n	8009c7e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c56:	491f      	ldr	r1, [pc, #124]	; (8009cd4 <xTaskPriorityDisinherit+0x104>)
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	440b      	add	r3, r1
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10a      	bne.n	8009c7e <xTaskPriorityDisinherit+0xae>
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c72:	43da      	mvns	r2, r3
 8009c74:	4b18      	ldr	r3, [pc, #96]	; (8009cd8 <xTaskPriorityDisinherit+0x108>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4013      	ands	r3, r2
 8009c7a:	4a17      	ldr	r2, [pc, #92]	; (8009cd8 <xTaskPriorityDisinherit+0x108>)
 8009c7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8a:	f1c3 0207 	rsb	r2, r3, #7
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	2201      	movs	r2, #1
 8009c98:	409a      	lsls	r2, r3
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <xTaskPriorityDisinherit+0x108>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	4a0d      	ldr	r2, [pc, #52]	; (8009cd8 <xTaskPriorityDisinherit+0x108>)
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca8:	4613      	mov	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4a08      	ldr	r2, [pc, #32]	; (8009cd4 <xTaskPriorityDisinherit+0x104>)
 8009cb2:	441a      	add	r2, r3
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f7fe fad4 	bl	8008268 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cc4:	697b      	ldr	r3, [r7, #20]
	}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	2000086c 	.word	0x2000086c
 8009cd4:	20000870 	.word	0x20000870
 8009cd8:	20000974 	.word	0x20000974

08009cdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ce6:	4b29      	ldr	r3, [pc, #164]	; (8009d8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cec:	4b28      	ldr	r3, [pc, #160]	; (8009d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fb15 	bl	8008322 <uxListRemove>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10b      	bne.n	8009d16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009cfe:	4b24      	ldr	r3, [pc, #144]	; (8009d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	2201      	movs	r2, #1
 8009d06:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0a:	43da      	mvns	r2, r3
 8009d0c:	4b21      	ldr	r3, [pc, #132]	; (8009d94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4013      	ands	r3, r2
 8009d12:	4a20      	ldr	r2, [pc, #128]	; (8009d94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1c:	d10a      	bne.n	8009d34 <prvAddCurrentTaskToDelayedList+0x58>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d007      	beq.n	8009d34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d24:	4b1a      	ldr	r3, [pc, #104]	; (8009d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	481a      	ldr	r0, [pc, #104]	; (8009d98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009d2e:	f7fe fa9b 	bl	8008268 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d32:	e026      	b.n	8009d82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4413      	add	r3, r2
 8009d3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d3c:	4b14      	ldr	r3, [pc, #80]	; (8009d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d209      	bcs.n	8009d60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d4c:	4b13      	ldr	r3, [pc, #76]	; (8009d9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3304      	adds	r3, #4
 8009d56:	4619      	mov	r1, r3
 8009d58:	4610      	mov	r0, r2
 8009d5a:	f7fe faa9 	bl	80082b0 <vListInsert>
}
 8009d5e:	e010      	b.n	8009d82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d60:	4b0f      	ldr	r3, [pc, #60]	; (8009da0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	f7fe fa9f 	bl	80082b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d72:	4b0c      	ldr	r3, [pc, #48]	; (8009da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d202      	bcs.n	8009d82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d7c:	4a09      	ldr	r2, [pc, #36]	; (8009da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6013      	str	r3, [r2, #0]
}
 8009d82:	bf00      	nop
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20000970 	.word	0x20000970
 8009d90:	2000086c 	.word	0x2000086c
 8009d94:	20000974 	.word	0x20000974
 8009d98:	20000958 	.word	0x20000958
 8009d9c:	20000928 	.word	0x20000928
 8009da0:	20000924 	.word	0x20000924
 8009da4:	2000098c 	.word	0x2000098c

08009da8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08a      	sub	sp, #40	; 0x28
 8009dac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009db2:	f000 fb63 	bl	800a47c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009db6:	4b1c      	ldr	r3, [pc, #112]	; (8009e28 <xTimerCreateTimerTask+0x80>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d021      	beq.n	8009e02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009dc6:	1d3a      	adds	r2, r7, #4
 8009dc8:	f107 0108 	add.w	r1, r7, #8
 8009dcc:	f107 030c 	add.w	r3, r7, #12
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f7 f88d 	bl	8000ef0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009dd6:	6879      	ldr	r1, [r7, #4]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	9202      	str	r2, [sp, #8]
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	2303      	movs	r3, #3
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	460a      	mov	r2, r1
 8009de8:	4910      	ldr	r1, [pc, #64]	; (8009e2c <xTimerCreateTimerTask+0x84>)
 8009dea:	4811      	ldr	r0, [pc, #68]	; (8009e30 <xTimerCreateTimerTask+0x88>)
 8009dec:	f7ff f8c8 	bl	8008f80 <xTaskCreateStatic>
 8009df0:	4603      	mov	r3, r0
 8009df2:	4a10      	ldr	r2, [pc, #64]	; (8009e34 <xTimerCreateTimerTask+0x8c>)
 8009df4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009df6:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <xTimerCreateTimerTask+0x8c>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	613b      	str	r3, [r7, #16]
}
 8009e1a:	bf00      	nop
 8009e1c:	e7fe      	b.n	8009e1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e1e:	697b      	ldr	r3, [r7, #20]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	200009c8 	.word	0x200009c8
 8009e2c:	0800d068 	.word	0x0800d068
 8009e30:	0800a025 	.word	0x0800a025
 8009e34:	200009cc 	.word	0x200009cc

08009e38 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af02      	add	r7, sp, #8
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
 8009e44:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009e46:	2028      	movs	r0, #40	; 0x28
 8009e48:	f000 fda6 	bl	800a998 <pvPortMalloc>
 8009e4c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00d      	beq.n	8009e70 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 f805 	bl	8009e7a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009e70:	697b      	ldr	r3, [r7, #20]
	}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b086      	sub	sp, #24
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	607a      	str	r2, [r7, #4]
 8009e86:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	617b      	str	r3, [r7, #20]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d01e      	beq.n	8009ee8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009eaa:	f000 fae7 	bl	800a47c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	6a3a      	ldr	r2, [r7, #32]
 8009ec4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	3304      	adds	r3, #4
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fe f9bf 	bl	800824e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d008      	beq.n	8009ee8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009edc:	f043 0304 	orr.w	r3, r3, #4
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009ee8:	bf00      	nop
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08a      	sub	sp, #40	; 0x28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	623b      	str	r3, [r7, #32]
}
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f1e:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <xTimerGenericCommand+0x98>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d02a      	beq.n	8009f7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b05      	cmp	r3, #5
 8009f36:	dc18      	bgt.n	8009f6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f38:	f7ff fe2c 	bl	8009b94 <xTaskGetSchedulerState>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d109      	bne.n	8009f56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f42:	4b11      	ldr	r3, [pc, #68]	; (8009f88 <xTimerGenericCommand+0x98>)
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	f107 0110 	add.w	r1, r7, #16
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f4e:	f7fe fb4d 	bl	80085ec <xQueueGenericSend>
 8009f52:	6278      	str	r0, [r7, #36]	; 0x24
 8009f54:	e012      	b.n	8009f7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f56:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <xTimerGenericCommand+0x98>)
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	f107 0110 	add.w	r1, r7, #16
 8009f5e:	2300      	movs	r3, #0
 8009f60:	2200      	movs	r2, #0
 8009f62:	f7fe fb43 	bl	80085ec <xQueueGenericSend>
 8009f66:	6278      	str	r0, [r7, #36]	; 0x24
 8009f68:	e008      	b.n	8009f7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f6a:	4b07      	ldr	r3, [pc, #28]	; (8009f88 <xTimerGenericCommand+0x98>)
 8009f6c:	6818      	ldr	r0, [r3, #0]
 8009f6e:	f107 0110 	add.w	r1, r7, #16
 8009f72:	2300      	movs	r3, #0
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	f7fe fc37 	bl	80087e8 <xQueueGenericSendFromISR>
 8009f7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3728      	adds	r7, #40	; 0x28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	200009c8 	.word	0x200009c8

08009f8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f96:	4b22      	ldr	r3, [pc, #136]	; (800a020 <prvProcessExpiredTimer+0x94>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fe f9bc 	bl	8008322 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d022      	beq.n	8009ffe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	699a      	ldr	r2, [r3, #24]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	18d1      	adds	r1, r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	6978      	ldr	r0, [r7, #20]
 8009fc6:	f000 f8d1 	bl	800a16c <prvInsertTimerInActiveList>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01f      	beq.n	800a010 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	2100      	movs	r1, #0
 8009fda:	6978      	ldr	r0, [r7, #20]
 8009fdc:	f7ff ff88 	bl	8009ef0 <xTimerGenericCommand>
 8009fe0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d113      	bne.n	800a010 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	60fb      	str	r3, [r7, #12]
}
 8009ffa:	bf00      	nop
 8009ffc:	e7fe      	b.n	8009ffc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a004:	f023 0301 	bic.w	r3, r3, #1
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	6978      	ldr	r0, [r7, #20]
 800a016:	4798      	blx	r3
}
 800a018:	bf00      	nop
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	200009c0 	.word	0x200009c0

0800a024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a02c:	f107 0308 	add.w	r3, r7, #8
 800a030:	4618      	mov	r0, r3
 800a032:	f000 f857 	bl	800a0e4 <prvGetNextExpireTime>
 800a036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	4619      	mov	r1, r3
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 f803 	bl	800a048 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a042:	f000 f8d5 	bl	800a1f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a046:	e7f1      	b.n	800a02c <prvTimerTask+0x8>

0800a048 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a052:	f7ff f9c3 	bl	80093dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a056:	f107 0308 	add.w	r3, r7, #8
 800a05a:	4618      	mov	r0, r3
 800a05c:	f000 f866 	bl	800a12c <prvSampleTimeNow>
 800a060:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d130      	bne.n	800a0ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10a      	bne.n	800a084 <prvProcessTimerOrBlockTask+0x3c>
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	429a      	cmp	r2, r3
 800a074:	d806      	bhi.n	800a084 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a076:	f7ff f9bf 	bl	80093f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7ff ff85 	bl	8009f8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a082:	e024      	b.n	800a0ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d008      	beq.n	800a09c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a08a:	4b13      	ldr	r3, [pc, #76]	; (800a0d8 <prvProcessTimerOrBlockTask+0x90>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <prvProcessTimerOrBlockTask+0x50>
 800a094:	2301      	movs	r3, #1
 800a096:	e000      	b.n	800a09a <prvProcessTimerOrBlockTask+0x52>
 800a098:	2300      	movs	r3, #0
 800a09a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a09c:	4b0f      	ldr	r3, [pc, #60]	; (800a0dc <prvProcessTimerOrBlockTask+0x94>)
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	f7fe ff35 	bl	8008f18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a0ae:	f7ff f9a3 	bl	80093f8 <xTaskResumeAll>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a0b8:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <prvProcessTimerOrBlockTask+0x98>)
 800a0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	f3bf 8f6f 	isb	sy
}
 800a0c8:	e001      	b.n	800a0ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a0ca:	f7ff f995 	bl	80093f8 <xTaskResumeAll>
}
 800a0ce:	bf00      	nop
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	200009c4 	.word	0x200009c4
 800a0dc:	200009c8 	.word	0x200009c8
 800a0e0:	e000ed04 	.word	0xe000ed04

0800a0e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	; (800a128 <prvGetNextExpireTime+0x44>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <prvGetNextExpireTime+0x16>
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	e000      	b.n	800a0fc <prvGetNextExpireTime+0x18>
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d105      	bne.n	800a114 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a108:	4b07      	ldr	r3, [pc, #28]	; (800a128 <prvGetNextExpireTime+0x44>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60fb      	str	r3, [r7, #12]
 800a112:	e001      	b.n	800a118 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a114:	2300      	movs	r3, #0
 800a116:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a118:	68fb      	ldr	r3, [r7, #12]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	200009c0 	.word	0x200009c0

0800a12c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a134:	f7ff f9fc 	bl	8009530 <xTaskGetTickCount>
 800a138:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a13a:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <prvSampleTimeNow+0x3c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	429a      	cmp	r2, r3
 800a142:	d205      	bcs.n	800a150 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a144:	f000 f936 	bl	800a3b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	e002      	b.n	800a156 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a156:	4a04      	ldr	r2, [pc, #16]	; (800a168 <prvSampleTimeNow+0x3c>)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a15c:	68fb      	ldr	r3, [r7, #12]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	200009d0 	.word	0x200009d0

0800a16c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a17a:	2300      	movs	r3, #0
 800a17c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d812      	bhi.n	800a1b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	1ad2      	subs	r2, r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d302      	bcc.n	800a1a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	e01b      	b.n	800a1de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1a6:	4b10      	ldr	r3, [pc, #64]	; (800a1e8 <prvInsertTimerInActiveList+0x7c>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	f7fe f87d 	bl	80082b0 <vListInsert>
 800a1b6:	e012      	b.n	800a1de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d206      	bcs.n	800a1ce <prvInsertTimerInActiveList+0x62>
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d302      	bcc.n	800a1ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	617b      	str	r3, [r7, #20]
 800a1cc:	e007      	b.n	800a1de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1ce:	4b07      	ldr	r3, [pc, #28]	; (800a1ec <prvInsertTimerInActiveList+0x80>)
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	4610      	mov	r0, r2
 800a1da:	f7fe f869 	bl	80082b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a1de:	697b      	ldr	r3, [r7, #20]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	200009c4 	.word	0x200009c4
 800a1ec:	200009c0 	.word	0x200009c0

0800a1f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08e      	sub	sp, #56	; 0x38
 800a1f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1f6:	e0ca      	b.n	800a38e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	da18      	bge.n	800a230 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a1fe:	1d3b      	adds	r3, r7, #4
 800a200:	3304      	adds	r3, #4
 800a202:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	61fb      	str	r3, [r7, #28]
}
 800a21c:	bf00      	nop
 800a21e:	e7fe      	b.n	800a21e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a226:	6850      	ldr	r0, [r2, #4]
 800a228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a22a:	6892      	ldr	r2, [r2, #8]
 800a22c:	4611      	mov	r1, r2
 800a22e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f2c0 80aa 	blt.w	800a38c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d004      	beq.n	800a24e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a246:	3304      	adds	r3, #4
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe f86a 	bl	8008322 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a24e:	463b      	mov	r3, r7
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff ff6b 	bl	800a12c <prvSampleTimeNow>
 800a256:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b09      	cmp	r3, #9
 800a25c:	f200 8097 	bhi.w	800a38e <prvProcessReceivedCommands+0x19e>
 800a260:	a201      	add	r2, pc, #4	; (adr r2, 800a268 <prvProcessReceivedCommands+0x78>)
 800a262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a266:	bf00      	nop
 800a268:	0800a291 	.word	0x0800a291
 800a26c:	0800a291 	.word	0x0800a291
 800a270:	0800a291 	.word	0x0800a291
 800a274:	0800a305 	.word	0x0800a305
 800a278:	0800a319 	.word	0x0800a319
 800a27c:	0800a363 	.word	0x0800a363
 800a280:	0800a291 	.word	0x0800a291
 800a284:	0800a291 	.word	0x0800a291
 800a288:	0800a305 	.word	0x0800a305
 800a28c:	0800a319 	.word	0x0800a319
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a296:	f043 0301 	orr.w	r3, r3, #1
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	18d1      	adds	r1, r2, r3
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b0:	f7ff ff5c 	bl	800a16c <prvInsertTimerInActiveList>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d069      	beq.n	800a38e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d05e      	beq.n	800a38e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d4:	699b      	ldr	r3, [r3, #24]
 800a2d6:	441a      	add	r2, r3
 800a2d8:	2300      	movs	r3, #0
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	2100      	movs	r1, #0
 800a2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2e2:	f7ff fe05 	bl	8009ef0 <xTimerGenericCommand>
 800a2e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d14f      	bne.n	800a38e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	61bb      	str	r3, [r7, #24]
}
 800a300:	bf00      	nop
 800a302:	e7fe      	b.n	800a302 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a30a:	f023 0301 	bic.w	r3, r3, #1
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a316:	e03a      	b.n	800a38e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a31e:	f043 0301 	orr.w	r3, r3, #1
 800a322:	b2da      	uxtb	r2, r3
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	617b      	str	r3, [r7, #20]
}
 800a34a:	bf00      	nop
 800a34c:	e7fe      	b.n	800a34c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a350:	699a      	ldr	r2, [r3, #24]
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	18d1      	adds	r1, r2, r3
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a35c:	f7ff ff06 	bl	800a16c <prvInsertTimerInActiveList>
					break;
 800a360:	e015      	b.n	800a38e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a368:	f003 0302 	and.w	r3, r3, #2
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d103      	bne.n	800a378 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a372:	f000 fbdd 	bl	800ab30 <vPortFree>
 800a376:	e00a      	b.n	800a38e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a37e:	f023 0301 	bic.w	r3, r3, #1
 800a382:	b2da      	uxtb	r2, r3
 800a384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a38a:	e000      	b.n	800a38e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a38c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a38e:	4b08      	ldr	r3, [pc, #32]	; (800a3b0 <prvProcessReceivedCommands+0x1c0>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	1d39      	adds	r1, r7, #4
 800a394:	2200      	movs	r2, #0
 800a396:	4618      	mov	r0, r3
 800a398:	f7fe fac2 	bl	8008920 <xQueueReceive>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f47f af2a 	bne.w	800a1f8 <prvProcessReceivedCommands+0x8>
	}
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop
 800a3a8:	3730      	adds	r7, #48	; 0x30
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	200009c8 	.word	0x200009c8

0800a3b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b088      	sub	sp, #32
 800a3b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3ba:	e048      	b.n	800a44e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3bc:	4b2d      	ldr	r3, [pc, #180]	; (800a474 <prvSwitchTimerLists+0xc0>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c6:	4b2b      	ldr	r3, [pc, #172]	; (800a474 <prvSwitchTimerLists+0xc0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fd ffa4 	bl	8008322 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d02e      	beq.n	800a44e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d90e      	bls.n	800a420 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a40e:	4b19      	ldr	r3, [pc, #100]	; (800a474 <prvSwitchTimerLists+0xc0>)
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	3304      	adds	r3, #4
 800a416:	4619      	mov	r1, r3
 800a418:	4610      	mov	r0, r2
 800a41a:	f7fd ff49 	bl	80082b0 <vListInsert>
 800a41e:	e016      	b.n	800a44e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a420:	2300      	movs	r3, #0
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	2300      	movs	r3, #0
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	2100      	movs	r1, #0
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff fd60 	bl	8009ef0 <xTimerGenericCommand>
 800a430:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10a      	bne.n	800a44e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	603b      	str	r3, [r7, #0]
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a44e:	4b09      	ldr	r3, [pc, #36]	; (800a474 <prvSwitchTimerLists+0xc0>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1b1      	bne.n	800a3bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a458:	4b06      	ldr	r3, [pc, #24]	; (800a474 <prvSwitchTimerLists+0xc0>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a45e:	4b06      	ldr	r3, [pc, #24]	; (800a478 <prvSwitchTimerLists+0xc4>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a04      	ldr	r2, [pc, #16]	; (800a474 <prvSwitchTimerLists+0xc0>)
 800a464:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a466:	4a04      	ldr	r2, [pc, #16]	; (800a478 <prvSwitchTimerLists+0xc4>)
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	6013      	str	r3, [r2, #0]
}
 800a46c:	bf00      	nop
 800a46e:	3718      	adds	r7, #24
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	200009c0 	.word	0x200009c0
 800a478:	200009c4 	.word	0x200009c4

0800a47c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a482:	f000 f967 	bl	800a754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a486:	4b15      	ldr	r3, [pc, #84]	; (800a4dc <prvCheckForValidListAndQueue+0x60>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d120      	bne.n	800a4d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a48e:	4814      	ldr	r0, [pc, #80]	; (800a4e0 <prvCheckForValidListAndQueue+0x64>)
 800a490:	f7fd febd 	bl	800820e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a494:	4813      	ldr	r0, [pc, #76]	; (800a4e4 <prvCheckForValidListAndQueue+0x68>)
 800a496:	f7fd feba 	bl	800820e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a49a:	4b13      	ldr	r3, [pc, #76]	; (800a4e8 <prvCheckForValidListAndQueue+0x6c>)
 800a49c:	4a10      	ldr	r2, [pc, #64]	; (800a4e0 <prvCheckForValidListAndQueue+0x64>)
 800a49e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a4a0:	4b12      	ldr	r3, [pc, #72]	; (800a4ec <prvCheckForValidListAndQueue+0x70>)
 800a4a2:	4a10      	ldr	r2, [pc, #64]	; (800a4e4 <prvCheckForValidListAndQueue+0x68>)
 800a4a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	4b11      	ldr	r3, [pc, #68]	; (800a4f0 <prvCheckForValidListAndQueue+0x74>)
 800a4ac:	4a11      	ldr	r2, [pc, #68]	; (800a4f4 <prvCheckForValidListAndQueue+0x78>)
 800a4ae:	2110      	movs	r1, #16
 800a4b0:	200a      	movs	r0, #10
 800a4b2:	f7fd ffc9 	bl	8008448 <xQueueGenericCreateStatic>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	4a08      	ldr	r2, [pc, #32]	; (800a4dc <prvCheckForValidListAndQueue+0x60>)
 800a4ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4bc:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <prvCheckForValidListAndQueue+0x60>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d005      	beq.n	800a4d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4c4:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <prvCheckForValidListAndQueue+0x60>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	490b      	ldr	r1, [pc, #44]	; (800a4f8 <prvCheckForValidListAndQueue+0x7c>)
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fe fcfa 	bl	8008ec4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4d0:	f000 f970 	bl	800a7b4 <vPortExitCritical>
}
 800a4d4:	bf00      	nop
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	200009c8 	.word	0x200009c8
 800a4e0:	20000998 	.word	0x20000998
 800a4e4:	200009ac 	.word	0x200009ac
 800a4e8:	200009c0 	.word	0x200009c0
 800a4ec:	200009c4 	.word	0x200009c4
 800a4f0:	20000a74 	.word	0x20000a74
 800a4f4:	200009d4 	.word	0x200009d4
 800a4f8:	0800d070 	.word	0x0800d070

0800a4fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	3b04      	subs	r3, #4
 800a50c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3b04      	subs	r3, #4
 800a51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	f023 0201 	bic.w	r2, r3, #1
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3b04      	subs	r3, #4
 800a52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a52c:	4a0c      	ldr	r2, [pc, #48]	; (800a560 <pxPortInitialiseStack+0x64>)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3b14      	subs	r3, #20
 800a536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3b04      	subs	r3, #4
 800a542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f06f 0202 	mvn.w	r2, #2
 800a54a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	3b20      	subs	r3, #32
 800a550:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a552:	68fb      	ldr	r3, [r7, #12]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	0800a565 	.word	0x0800a565

0800a564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a56e:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <prvTaskExitError+0x54>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	d00a      	beq.n	800a58e <prvTaskExitError+0x2a>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	60fb      	str	r3, [r7, #12]
}
 800a58a:	bf00      	nop
 800a58c:	e7fe      	b.n	800a58c <prvTaskExitError+0x28>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	60bb      	str	r3, [r7, #8]
}
 800a5a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5a2:	bf00      	nop
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d0fc      	beq.n	800a5a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5aa:	bf00      	nop
 800a5ac:	bf00      	nop
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	2000000c 	.word	0x2000000c
 800a5bc:	00000000 	.word	0x00000000

0800a5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5c0:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <pxCurrentTCBConst2>)
 800a5c2:	6819      	ldr	r1, [r3, #0]
 800a5c4:	6808      	ldr	r0, [r1, #0]
 800a5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	f380 8809 	msr	PSP, r0
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f04f 0000 	mov.w	r0, #0
 800a5d6:	f380 8811 	msr	BASEPRI, r0
 800a5da:	4770      	bx	lr
 800a5dc:	f3af 8000 	nop.w

0800a5e0 <pxCurrentTCBConst2>:
 800a5e0:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop

0800a5e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5e8:	4808      	ldr	r0, [pc, #32]	; (800a60c <prvPortStartFirstTask+0x24>)
 800a5ea:	6800      	ldr	r0, [r0, #0]
 800a5ec:	6800      	ldr	r0, [r0, #0]
 800a5ee:	f380 8808 	msr	MSP, r0
 800a5f2:	f04f 0000 	mov.w	r0, #0
 800a5f6:	f380 8814 	msr	CONTROL, r0
 800a5fa:	b662      	cpsie	i
 800a5fc:	b661      	cpsie	f
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	df00      	svc	0
 800a608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a60a:	bf00      	nop
 800a60c:	e000ed08 	.word	0xe000ed08

0800a610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a616:	4b46      	ldr	r3, [pc, #280]	; (800a730 <xPortStartScheduler+0x120>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a46      	ldr	r2, [pc, #280]	; (800a734 <xPortStartScheduler+0x124>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d10a      	bne.n	800a636 <xPortStartScheduler+0x26>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	613b      	str	r3, [r7, #16]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a636:	4b3e      	ldr	r3, [pc, #248]	; (800a730 <xPortStartScheduler+0x120>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a3f      	ldr	r2, [pc, #252]	; (800a738 <xPortStartScheduler+0x128>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d10a      	bne.n	800a656 <xPortStartScheduler+0x46>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	60fb      	str	r3, [r7, #12]
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a656:	4b39      	ldr	r3, [pc, #228]	; (800a73c <xPortStartScheduler+0x12c>)
 800a658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	22ff      	movs	r2, #255	; 0xff
 800a666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	4b31      	ldr	r3, [pc, #196]	; (800a740 <xPortStartScheduler+0x130>)
 800a67c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a67e:	4b31      	ldr	r3, [pc, #196]	; (800a744 <xPortStartScheduler+0x134>)
 800a680:	2207      	movs	r2, #7
 800a682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a684:	e009      	b.n	800a69a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a686:	4b2f      	ldr	r3, [pc, #188]	; (800a744 <xPortStartScheduler+0x134>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	4a2d      	ldr	r2, [pc, #180]	; (800a744 <xPortStartScheduler+0x134>)
 800a68e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	b2db      	uxtb	r3, r3
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	b2db      	uxtb	r3, r3
 800a698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a2:	2b80      	cmp	r3, #128	; 0x80
 800a6a4:	d0ef      	beq.n	800a686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6a6:	4b27      	ldr	r3, [pc, #156]	; (800a744 <xPortStartScheduler+0x134>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f1c3 0307 	rsb	r3, r3, #7
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d00a      	beq.n	800a6c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	60bb      	str	r3, [r7, #8]
}
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6c8:	4b1e      	ldr	r3, [pc, #120]	; (800a744 <xPortStartScheduler+0x134>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	021b      	lsls	r3, r3, #8
 800a6ce:	4a1d      	ldr	r2, [pc, #116]	; (800a744 <xPortStartScheduler+0x134>)
 800a6d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6d2:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <xPortStartScheduler+0x134>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6da:	4a1a      	ldr	r2, [pc, #104]	; (800a744 <xPortStartScheduler+0x134>)
 800a6dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6e6:	4b18      	ldr	r3, [pc, #96]	; (800a748 <xPortStartScheduler+0x138>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a17      	ldr	r2, [pc, #92]	; (800a748 <xPortStartScheduler+0x138>)
 800a6ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6f2:	4b15      	ldr	r3, [pc, #84]	; (800a748 <xPortStartScheduler+0x138>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a14      	ldr	r2, [pc, #80]	; (800a748 <xPortStartScheduler+0x138>)
 800a6f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a6fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6fe:	f000 f8dd 	bl	800a8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a702:	4b12      	ldr	r3, [pc, #72]	; (800a74c <xPortStartScheduler+0x13c>)
 800a704:	2200      	movs	r2, #0
 800a706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a708:	f000 f8fc 	bl	800a904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a70c:	4b10      	ldr	r3, [pc, #64]	; (800a750 <xPortStartScheduler+0x140>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a0f      	ldr	r2, [pc, #60]	; (800a750 <xPortStartScheduler+0x140>)
 800a712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a718:	f7ff ff66 	bl	800a5e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a71c:	f7fe ffd0 	bl	80096c0 <vTaskSwitchContext>
	prvTaskExitError();
 800a720:	f7ff ff20 	bl	800a564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	e000ed00 	.word	0xe000ed00
 800a734:	410fc271 	.word	0x410fc271
 800a738:	410fc270 	.word	0x410fc270
 800a73c:	e000e400 	.word	0xe000e400
 800a740:	20000abc 	.word	0x20000abc
 800a744:	20000ac0 	.word	0x20000ac0
 800a748:	e000ed20 	.word	0xe000ed20
 800a74c:	2000000c 	.word	0x2000000c
 800a750:	e000ef34 	.word	0xe000ef34

0800a754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	607b      	str	r3, [r7, #4]
}
 800a76c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a76e:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <vPortEnterCritical+0x58>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3301      	adds	r3, #1
 800a774:	4a0d      	ldr	r2, [pc, #52]	; (800a7ac <vPortEnterCritical+0x58>)
 800a776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a778:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <vPortEnterCritical+0x58>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d10f      	bne.n	800a7a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a780:	4b0b      	ldr	r3, [pc, #44]	; (800a7b0 <vPortEnterCritical+0x5c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00a      	beq.n	800a7a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	603b      	str	r3, [r7, #0]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <vPortEnterCritical+0x4a>
	}
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	2000000c 	.word	0x2000000c
 800a7b0:	e000ed04 	.word	0xe000ed04

0800a7b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7ba:	4b12      	ldr	r3, [pc, #72]	; (800a804 <vPortExitCritical+0x50>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10a      	bne.n	800a7d8 <vPortExitCritical+0x24>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	607b      	str	r3, [r7, #4]
}
 800a7d4:	bf00      	nop
 800a7d6:	e7fe      	b.n	800a7d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7d8:	4b0a      	ldr	r3, [pc, #40]	; (800a804 <vPortExitCritical+0x50>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	4a09      	ldr	r2, [pc, #36]	; (800a804 <vPortExitCritical+0x50>)
 800a7e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7e2:	4b08      	ldr	r3, [pc, #32]	; (800a804 <vPortExitCritical+0x50>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d105      	bne.n	800a7f6 <vPortExitCritical+0x42>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	f383 8811 	msr	BASEPRI, r3
}
 800a7f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	2000000c 	.word	0x2000000c
	...

0800a810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a810:	f3ef 8009 	mrs	r0, PSP
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	4b15      	ldr	r3, [pc, #84]	; (800a870 <pxCurrentTCBConst>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	f01e 0f10 	tst.w	lr, #16
 800a820:	bf08      	it	eq
 800a822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82a:	6010      	str	r0, [r2, #0]
 800a82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a834:	f380 8811 	msr	BASEPRI, r0
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f7fe ff3e 	bl	80096c0 <vTaskSwitchContext>
 800a844:	f04f 0000 	mov.w	r0, #0
 800a848:	f380 8811 	msr	BASEPRI, r0
 800a84c:	bc09      	pop	{r0, r3}
 800a84e:	6819      	ldr	r1, [r3, #0]
 800a850:	6808      	ldr	r0, [r1, #0]
 800a852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a856:	f01e 0f10 	tst.w	lr, #16
 800a85a:	bf08      	it	eq
 800a85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a860:	f380 8809 	msr	PSP, r0
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	f3af 8000 	nop.w

0800a870 <pxCurrentTCBConst>:
 800a870:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a874:	bf00      	nop
 800a876:	bf00      	nop

0800a878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	607b      	str	r3, [r7, #4]
}
 800a890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a892:	f7fe fe5d 	bl	8009550 <xTaskIncrementTick>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a89c:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <SysTick_Handler+0x40>)
 800a89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f383 8811 	msr	BASEPRI, r3
}
 800a8ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <vPortSetupTimerInterrupt+0x38>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <vPortSetupTimerInterrupt+0x3c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <vPortSetupTimerInterrupt+0x40>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	099b      	lsrs	r3, r3, #6
 800a8d8:	4a09      	ldr	r2, [pc, #36]	; (800a900 <vPortSetupTimerInterrupt+0x44>)
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8de:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8e0:	2207      	movs	r2, #7
 800a8e2:	601a      	str	r2, [r3, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	e000e010 	.word	0xe000e010
 800a8f4:	e000e018 	.word	0xe000e018
 800a8f8:	20000000 	.word	0x20000000
 800a8fc:	10624dd3 	.word	0x10624dd3
 800a900:	e000e014 	.word	0xe000e014

0800a904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a914 <vPortEnableVFP+0x10>
 800a908:	6801      	ldr	r1, [r0, #0]
 800a90a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a90e:	6001      	str	r1, [r0, #0]
 800a910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a912:	bf00      	nop
 800a914:	e000ed88 	.word	0xe000ed88

0800a918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a91e:	f3ef 8305 	mrs	r3, IPSR
 800a922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b0f      	cmp	r3, #15
 800a928:	d914      	bls.n	800a954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a92a:	4a17      	ldr	r2, [pc, #92]	; (800a988 <vPortValidateInterruptPriority+0x70>)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a934:	4b15      	ldr	r3, [pc, #84]	; (800a98c <vPortValidateInterruptPriority+0x74>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	7afa      	ldrb	r2, [r7, #11]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d20a      	bcs.n	800a954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	607b      	str	r3, [r7, #4]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a954:	4b0e      	ldr	r3, [pc, #56]	; (800a990 <vPortValidateInterruptPriority+0x78>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a95c:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <vPortValidateInterruptPriority+0x7c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d90a      	bls.n	800a97a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	603b      	str	r3, [r7, #0]
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <vPortValidateInterruptPriority+0x60>
	}
 800a97a:	bf00      	nop
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	e000e3f0 	.word	0xe000e3f0
 800a98c:	20000abc 	.word	0x20000abc
 800a990:	e000ed0c 	.word	0xe000ed0c
 800a994:	20000ac0 	.word	0x20000ac0

0800a998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08a      	sub	sp, #40	; 0x28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9a4:	f7fe fd1a 	bl	80093dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9a8:	4b5b      	ldr	r3, [pc, #364]	; (800ab18 <pvPortMalloc+0x180>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9b0:	f000 f920 	bl	800abf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9b4:	4b59      	ldr	r3, [pc, #356]	; (800ab1c <pvPortMalloc+0x184>)
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f040 8093 	bne.w	800aae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01d      	beq.n	800aa04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a9c8:	2208      	movs	r2, #8
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f003 0307 	and.w	r3, r3, #7
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d014      	beq.n	800aa04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f023 0307 	bic.w	r3, r3, #7
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f003 0307 	and.w	r3, r3, #7
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00a      	beq.n	800aa04 <pvPortMalloc+0x6c>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	617b      	str	r3, [r7, #20]
}
 800aa00:	bf00      	nop
 800aa02:	e7fe      	b.n	800aa02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d06e      	beq.n	800aae8 <pvPortMalloc+0x150>
 800aa0a:	4b45      	ldr	r3, [pc, #276]	; (800ab20 <pvPortMalloc+0x188>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d869      	bhi.n	800aae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa14:	4b43      	ldr	r3, [pc, #268]	; (800ab24 <pvPortMalloc+0x18c>)
 800aa16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa18:	4b42      	ldr	r3, [pc, #264]	; (800ab24 <pvPortMalloc+0x18c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa1e:	e004      	b.n	800aa2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d903      	bls.n	800aa3c <pvPortMalloc+0xa4>
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1f1      	bne.n	800aa20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa3c:	4b36      	ldr	r3, [pc, #216]	; (800ab18 <pvPortMalloc+0x180>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d050      	beq.n	800aae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2208      	movs	r2, #8
 800aa4c:	4413      	add	r3, r2
 800aa4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	1ad2      	subs	r2, r2, r3
 800aa60:	2308      	movs	r3, #8
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d91f      	bls.n	800aaa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	f003 0307 	and.w	r3, r3, #7
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00a      	beq.n	800aa90 <pvPortMalloc+0xf8>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	613b      	str	r3, [r7, #16]
}
 800aa8c:	bf00      	nop
 800aa8e:	e7fe      	b.n	800aa8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	1ad2      	subs	r2, r2, r3
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aaa2:	69b8      	ldr	r0, [r7, #24]
 800aaa4:	f000 f908 	bl	800acb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aaa8:	4b1d      	ldr	r3, [pc, #116]	; (800ab20 <pvPortMalloc+0x188>)
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	4a1b      	ldr	r2, [pc, #108]	; (800ab20 <pvPortMalloc+0x188>)
 800aab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aab6:	4b1a      	ldr	r3, [pc, #104]	; (800ab20 <pvPortMalloc+0x188>)
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	4b1b      	ldr	r3, [pc, #108]	; (800ab28 <pvPortMalloc+0x190>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d203      	bcs.n	800aaca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aac2:	4b17      	ldr	r3, [pc, #92]	; (800ab20 <pvPortMalloc+0x188>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a18      	ldr	r2, [pc, #96]	; (800ab28 <pvPortMalloc+0x190>)
 800aac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	685a      	ldr	r2, [r3, #4]
 800aace:	4b13      	ldr	r3, [pc, #76]	; (800ab1c <pvPortMalloc+0x184>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	431a      	orrs	r2, r3
 800aad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aade:	4b13      	ldr	r3, [pc, #76]	; (800ab2c <pvPortMalloc+0x194>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3301      	adds	r3, #1
 800aae4:	4a11      	ldr	r2, [pc, #68]	; (800ab2c <pvPortMalloc+0x194>)
 800aae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aae8:	f7fe fc86 	bl	80093f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	f003 0307 	and.w	r3, r3, #7
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00a      	beq.n	800ab0c <pvPortMalloc+0x174>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	60fb      	str	r3, [r7, #12]
}
 800ab08:	bf00      	nop
 800ab0a:	e7fe      	b.n	800ab0a <pvPortMalloc+0x172>
	return pvReturn;
 800ab0c:	69fb      	ldr	r3, [r7, #28]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3728      	adds	r7, #40	; 0x28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	200039ac 	.word	0x200039ac
 800ab1c:	200039c0 	.word	0x200039c0
 800ab20:	200039b0 	.word	0x200039b0
 800ab24:	200039a4 	.word	0x200039a4
 800ab28:	200039b4 	.word	0x200039b4
 800ab2c:	200039b8 	.word	0x200039b8

0800ab30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d04d      	beq.n	800abde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab42:	2308      	movs	r3, #8
 800ab44:	425b      	negs	r3, r3
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	4413      	add	r3, r2
 800ab4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	685a      	ldr	r2, [r3, #4]
 800ab54:	4b24      	ldr	r3, [pc, #144]	; (800abe8 <vPortFree+0xb8>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4013      	ands	r3, r2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10a      	bne.n	800ab74 <vPortFree+0x44>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	60fb      	str	r3, [r7, #12]
}
 800ab70:	bf00      	nop
 800ab72:	e7fe      	b.n	800ab72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00a      	beq.n	800ab92 <vPortFree+0x62>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	60bb      	str	r3, [r7, #8]
}
 800ab8e:	bf00      	nop
 800ab90:	e7fe      	b.n	800ab90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	4b14      	ldr	r3, [pc, #80]	; (800abe8 <vPortFree+0xb8>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d01e      	beq.n	800abde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d11a      	bne.n	800abde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <vPortFree+0xb8>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	43db      	mvns	r3, r3
 800abb2:	401a      	ands	r2, r3
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abb8:	f7fe fc10 	bl	80093dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <vPortFree+0xbc>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4413      	add	r3, r2
 800abc6:	4a09      	ldr	r2, [pc, #36]	; (800abec <vPortFree+0xbc>)
 800abc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abca:	6938      	ldr	r0, [r7, #16]
 800abcc:	f000 f874 	bl	800acb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abd0:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <vPortFree+0xc0>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3301      	adds	r3, #1
 800abd6:	4a06      	ldr	r2, [pc, #24]	; (800abf0 <vPortFree+0xc0>)
 800abd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800abda:	f7fe fc0d 	bl	80093f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abde:	bf00      	nop
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	200039c0 	.word	0x200039c0
 800abec:	200039b0 	.word	0x200039b0
 800abf0:	200039bc 	.word	0x200039bc

0800abf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abfa:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800abfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac00:	4b27      	ldr	r3, [pc, #156]	; (800aca0 <prvHeapInit+0xac>)
 800ac02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00c      	beq.n	800ac28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	3307      	adds	r3, #7
 800ac12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f023 0307 	bic.w	r3, r3, #7
 800ac1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	4a1f      	ldr	r2, [pc, #124]	; (800aca0 <prvHeapInit+0xac>)
 800ac24:	4413      	add	r3, r2
 800ac26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac2c:	4a1d      	ldr	r2, [pc, #116]	; (800aca4 <prvHeapInit+0xb0>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac32:	4b1c      	ldr	r3, [pc, #112]	; (800aca4 <prvHeapInit+0xb0>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac40:	2208      	movs	r2, #8
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	1a9b      	subs	r3, r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 0307 	bic.w	r3, r3, #7
 800ac4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4a15      	ldr	r2, [pc, #84]	; (800aca8 <prvHeapInit+0xb4>)
 800ac54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac56:	4b14      	ldr	r3, [pc, #80]	; (800aca8 <prvHeapInit+0xb4>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac5e:	4b12      	ldr	r3, [pc, #72]	; (800aca8 <prvHeapInit+0xb4>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	1ad2      	subs	r2, r2, r3
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac74:	4b0c      	ldr	r3, [pc, #48]	; (800aca8 <prvHeapInit+0xb4>)
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	4a0a      	ldr	r2, [pc, #40]	; (800acac <prvHeapInit+0xb8>)
 800ac82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	4a09      	ldr	r2, [pc, #36]	; (800acb0 <prvHeapInit+0xbc>)
 800ac8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac8c:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <prvHeapInit+0xc0>)
 800ac8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac92:	601a      	str	r2, [r3, #0]
}
 800ac94:	bf00      	nop
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	20000ac4 	.word	0x20000ac4
 800aca4:	200039a4 	.word	0x200039a4
 800aca8:	200039ac 	.word	0x200039ac
 800acac:	200039b4 	.word	0x200039b4
 800acb0:	200039b0 	.word	0x200039b0
 800acb4:	200039c0 	.word	0x200039c0

0800acb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acc0:	4b28      	ldr	r3, [pc, #160]	; (800ad64 <prvInsertBlockIntoFreeList+0xac>)
 800acc2:	60fb      	str	r3, [r7, #12]
 800acc4:	e002      	b.n	800accc <prvInsertBlockIntoFreeList+0x14>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d8f7      	bhi.n	800acc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	4413      	add	r3, r2
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d108      	bne.n	800acfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	441a      	add	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	441a      	add	r2, r3
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d118      	bne.n	800ad40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	4b15      	ldr	r3, [pc, #84]	; (800ad68 <prvInsertBlockIntoFreeList+0xb0>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d00d      	beq.n	800ad36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	441a      	add	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	e008      	b.n	800ad48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad36:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <prvInsertBlockIntoFreeList+0xb0>)
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	e003      	b.n	800ad48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d002      	beq.n	800ad56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad56:	bf00      	nop
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	200039a4 	.word	0x200039a4
 800ad68:	200039ac 	.word	0x200039ac

0800ad6c <__errno>:
 800ad6c:	4b01      	ldr	r3, [pc, #4]	; (800ad74 <__errno+0x8>)
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	20000010 	.word	0x20000010

0800ad78 <__libc_init_array>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	4d0d      	ldr	r5, [pc, #52]	; (800adb0 <__libc_init_array+0x38>)
 800ad7c:	4c0d      	ldr	r4, [pc, #52]	; (800adb4 <__libc_init_array+0x3c>)
 800ad7e:	1b64      	subs	r4, r4, r5
 800ad80:	10a4      	asrs	r4, r4, #2
 800ad82:	2600      	movs	r6, #0
 800ad84:	42a6      	cmp	r6, r4
 800ad86:	d109      	bne.n	800ad9c <__libc_init_array+0x24>
 800ad88:	4d0b      	ldr	r5, [pc, #44]	; (800adb8 <__libc_init_array+0x40>)
 800ad8a:	4c0c      	ldr	r4, [pc, #48]	; (800adbc <__libc_init_array+0x44>)
 800ad8c:	f002 f892 	bl	800ceb4 <_init>
 800ad90:	1b64      	subs	r4, r4, r5
 800ad92:	10a4      	asrs	r4, r4, #2
 800ad94:	2600      	movs	r6, #0
 800ad96:	42a6      	cmp	r6, r4
 800ad98:	d105      	bne.n	800ada6 <__libc_init_array+0x2e>
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}
 800ad9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada0:	4798      	blx	r3
 800ada2:	3601      	adds	r6, #1
 800ada4:	e7ee      	b.n	800ad84 <__libc_init_array+0xc>
 800ada6:	f855 3b04 	ldr.w	r3, [r5], #4
 800adaa:	4798      	blx	r3
 800adac:	3601      	adds	r6, #1
 800adae:	e7f2      	b.n	800ad96 <__libc_init_array+0x1e>
 800adb0:	0800d290 	.word	0x0800d290
 800adb4:	0800d290 	.word	0x0800d290
 800adb8:	0800d290 	.word	0x0800d290
 800adbc:	0800d294 	.word	0x0800d294

0800adc0 <memcpy>:
 800adc0:	440a      	add	r2, r1
 800adc2:	4291      	cmp	r1, r2
 800adc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800adc8:	d100      	bne.n	800adcc <memcpy+0xc>
 800adca:	4770      	bx	lr
 800adcc:	b510      	push	{r4, lr}
 800adce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800add2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800add6:	4291      	cmp	r1, r2
 800add8:	d1f9      	bne.n	800adce <memcpy+0xe>
 800adda:	bd10      	pop	{r4, pc}

0800addc <memset>:
 800addc:	4402      	add	r2, r0
 800adde:	4603      	mov	r3, r0
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d100      	bne.n	800ade6 <memset+0xa>
 800ade4:	4770      	bx	lr
 800ade6:	f803 1b01 	strb.w	r1, [r3], #1
 800adea:	e7f9      	b.n	800ade0 <memset+0x4>

0800adec <siprintf>:
 800adec:	b40e      	push	{r1, r2, r3}
 800adee:	b500      	push	{lr}
 800adf0:	b09c      	sub	sp, #112	; 0x70
 800adf2:	ab1d      	add	r3, sp, #116	; 0x74
 800adf4:	9002      	str	r0, [sp, #8]
 800adf6:	9006      	str	r0, [sp, #24]
 800adf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800adfc:	4809      	ldr	r0, [pc, #36]	; (800ae24 <siprintf+0x38>)
 800adfe:	9107      	str	r1, [sp, #28]
 800ae00:	9104      	str	r1, [sp, #16]
 800ae02:	4909      	ldr	r1, [pc, #36]	; (800ae28 <siprintf+0x3c>)
 800ae04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae08:	9105      	str	r1, [sp, #20]
 800ae0a:	6800      	ldr	r0, [r0, #0]
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	a902      	add	r1, sp, #8
 800ae10:	f000 f896 	bl	800af40 <_svfiprintf_r>
 800ae14:	9b02      	ldr	r3, [sp, #8]
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
 800ae1a:	b01c      	add	sp, #112	; 0x70
 800ae1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae20:	b003      	add	sp, #12
 800ae22:	4770      	bx	lr
 800ae24:	20000010 	.word	0x20000010
 800ae28:	ffff0208 	.word	0xffff0208

0800ae2c <siscanf>:
 800ae2c:	b40e      	push	{r1, r2, r3}
 800ae2e:	b510      	push	{r4, lr}
 800ae30:	b09f      	sub	sp, #124	; 0x7c
 800ae32:	ac21      	add	r4, sp, #132	; 0x84
 800ae34:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ae38:	f854 2b04 	ldr.w	r2, [r4], #4
 800ae3c:	9201      	str	r2, [sp, #4]
 800ae3e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ae42:	9004      	str	r0, [sp, #16]
 800ae44:	9008      	str	r0, [sp, #32]
 800ae46:	f7f5 f9cb 	bl	80001e0 <strlen>
 800ae4a:	4b0c      	ldr	r3, [pc, #48]	; (800ae7c <siscanf+0x50>)
 800ae4c:	9005      	str	r0, [sp, #20]
 800ae4e:	9009      	str	r0, [sp, #36]	; 0x24
 800ae50:	930d      	str	r3, [sp, #52]	; 0x34
 800ae52:	480b      	ldr	r0, [pc, #44]	; (800ae80 <siscanf+0x54>)
 800ae54:	9a01      	ldr	r2, [sp, #4]
 800ae56:	6800      	ldr	r0, [r0, #0]
 800ae58:	9403      	str	r4, [sp, #12]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	9311      	str	r3, [sp, #68]	; 0x44
 800ae5e:	9316      	str	r3, [sp, #88]	; 0x58
 800ae60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae64:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ae68:	a904      	add	r1, sp, #16
 800ae6a:	4623      	mov	r3, r4
 800ae6c:	f000 f9c2 	bl	800b1f4 <__ssvfiscanf_r>
 800ae70:	b01f      	add	sp, #124	; 0x7c
 800ae72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae76:	b003      	add	sp, #12
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	0800ae85 	.word	0x0800ae85
 800ae80:	20000010 	.word	0x20000010

0800ae84 <__seofread>:
 800ae84:	2000      	movs	r0, #0
 800ae86:	4770      	bx	lr

0800ae88 <__ssputs_r>:
 800ae88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	688e      	ldr	r6, [r1, #8]
 800ae8e:	429e      	cmp	r6, r3
 800ae90:	4682      	mov	sl, r0
 800ae92:	460c      	mov	r4, r1
 800ae94:	4690      	mov	r8, r2
 800ae96:	461f      	mov	r7, r3
 800ae98:	d838      	bhi.n	800af0c <__ssputs_r+0x84>
 800ae9a:	898a      	ldrh	r2, [r1, #12]
 800ae9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aea0:	d032      	beq.n	800af08 <__ssputs_r+0x80>
 800aea2:	6825      	ldr	r5, [r4, #0]
 800aea4:	6909      	ldr	r1, [r1, #16]
 800aea6:	eba5 0901 	sub.w	r9, r5, r1
 800aeaa:	6965      	ldr	r5, [r4, #20]
 800aeac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	444b      	add	r3, r9
 800aeb8:	106d      	asrs	r5, r5, #1
 800aeba:	429d      	cmp	r5, r3
 800aebc:	bf38      	it	cc
 800aebe:	461d      	movcc	r5, r3
 800aec0:	0553      	lsls	r3, r2, #21
 800aec2:	d531      	bpl.n	800af28 <__ssputs_r+0xa0>
 800aec4:	4629      	mov	r1, r5
 800aec6:	f000 ffe5 	bl	800be94 <_malloc_r>
 800aeca:	4606      	mov	r6, r0
 800aecc:	b950      	cbnz	r0, 800aee4 <__ssputs_r+0x5c>
 800aece:	230c      	movs	r3, #12
 800aed0:	f8ca 3000 	str.w	r3, [sl]
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	f04f 30ff 	mov.w	r0, #4294967295
 800aee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee4:	6921      	ldr	r1, [r4, #16]
 800aee6:	464a      	mov	r2, r9
 800aee8:	f7ff ff6a 	bl	800adc0 <memcpy>
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef6:	81a3      	strh	r3, [r4, #12]
 800aef8:	6126      	str	r6, [r4, #16]
 800aefa:	6165      	str	r5, [r4, #20]
 800aefc:	444e      	add	r6, r9
 800aefe:	eba5 0509 	sub.w	r5, r5, r9
 800af02:	6026      	str	r6, [r4, #0]
 800af04:	60a5      	str	r5, [r4, #8]
 800af06:	463e      	mov	r6, r7
 800af08:	42be      	cmp	r6, r7
 800af0a:	d900      	bls.n	800af0e <__ssputs_r+0x86>
 800af0c:	463e      	mov	r6, r7
 800af0e:	6820      	ldr	r0, [r4, #0]
 800af10:	4632      	mov	r2, r6
 800af12:	4641      	mov	r1, r8
 800af14:	f000 ff38 	bl	800bd88 <memmove>
 800af18:	68a3      	ldr	r3, [r4, #8]
 800af1a:	1b9b      	subs	r3, r3, r6
 800af1c:	60a3      	str	r3, [r4, #8]
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	4433      	add	r3, r6
 800af22:	6023      	str	r3, [r4, #0]
 800af24:	2000      	movs	r0, #0
 800af26:	e7db      	b.n	800aee0 <__ssputs_r+0x58>
 800af28:	462a      	mov	r2, r5
 800af2a:	f001 f827 	bl	800bf7c <_realloc_r>
 800af2e:	4606      	mov	r6, r0
 800af30:	2800      	cmp	r0, #0
 800af32:	d1e1      	bne.n	800aef8 <__ssputs_r+0x70>
 800af34:	6921      	ldr	r1, [r4, #16]
 800af36:	4650      	mov	r0, sl
 800af38:	f000 ff40 	bl	800bdbc <_free_r>
 800af3c:	e7c7      	b.n	800aece <__ssputs_r+0x46>
	...

0800af40 <_svfiprintf_r>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	4698      	mov	r8, r3
 800af46:	898b      	ldrh	r3, [r1, #12]
 800af48:	061b      	lsls	r3, r3, #24
 800af4a:	b09d      	sub	sp, #116	; 0x74
 800af4c:	4607      	mov	r7, r0
 800af4e:	460d      	mov	r5, r1
 800af50:	4614      	mov	r4, r2
 800af52:	d50e      	bpl.n	800af72 <_svfiprintf_r+0x32>
 800af54:	690b      	ldr	r3, [r1, #16]
 800af56:	b963      	cbnz	r3, 800af72 <_svfiprintf_r+0x32>
 800af58:	2140      	movs	r1, #64	; 0x40
 800af5a:	f000 ff9b 	bl	800be94 <_malloc_r>
 800af5e:	6028      	str	r0, [r5, #0]
 800af60:	6128      	str	r0, [r5, #16]
 800af62:	b920      	cbnz	r0, 800af6e <_svfiprintf_r+0x2e>
 800af64:	230c      	movs	r3, #12
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	f04f 30ff 	mov.w	r0, #4294967295
 800af6c:	e0d1      	b.n	800b112 <_svfiprintf_r+0x1d2>
 800af6e:	2340      	movs	r3, #64	; 0x40
 800af70:	616b      	str	r3, [r5, #20]
 800af72:	2300      	movs	r3, #0
 800af74:	9309      	str	r3, [sp, #36]	; 0x24
 800af76:	2320      	movs	r3, #32
 800af78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af80:	2330      	movs	r3, #48	; 0x30
 800af82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b12c <_svfiprintf_r+0x1ec>
 800af86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af8a:	f04f 0901 	mov.w	r9, #1
 800af8e:	4623      	mov	r3, r4
 800af90:	469a      	mov	sl, r3
 800af92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af96:	b10a      	cbz	r2, 800af9c <_svfiprintf_r+0x5c>
 800af98:	2a25      	cmp	r2, #37	; 0x25
 800af9a:	d1f9      	bne.n	800af90 <_svfiprintf_r+0x50>
 800af9c:	ebba 0b04 	subs.w	fp, sl, r4
 800afa0:	d00b      	beq.n	800afba <_svfiprintf_r+0x7a>
 800afa2:	465b      	mov	r3, fp
 800afa4:	4622      	mov	r2, r4
 800afa6:	4629      	mov	r1, r5
 800afa8:	4638      	mov	r0, r7
 800afaa:	f7ff ff6d 	bl	800ae88 <__ssputs_r>
 800afae:	3001      	adds	r0, #1
 800afb0:	f000 80aa 	beq.w	800b108 <_svfiprintf_r+0x1c8>
 800afb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afb6:	445a      	add	r2, fp
 800afb8:	9209      	str	r2, [sp, #36]	; 0x24
 800afba:	f89a 3000 	ldrb.w	r3, [sl]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 80a2 	beq.w	800b108 <_svfiprintf_r+0x1c8>
 800afc4:	2300      	movs	r3, #0
 800afc6:	f04f 32ff 	mov.w	r2, #4294967295
 800afca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afce:	f10a 0a01 	add.w	sl, sl, #1
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	9307      	str	r3, [sp, #28]
 800afd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afda:	931a      	str	r3, [sp, #104]	; 0x68
 800afdc:	4654      	mov	r4, sl
 800afde:	2205      	movs	r2, #5
 800afe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe4:	4851      	ldr	r0, [pc, #324]	; (800b12c <_svfiprintf_r+0x1ec>)
 800afe6:	f7f5 f903 	bl	80001f0 <memchr>
 800afea:	9a04      	ldr	r2, [sp, #16]
 800afec:	b9d8      	cbnz	r0, 800b026 <_svfiprintf_r+0xe6>
 800afee:	06d0      	lsls	r0, r2, #27
 800aff0:	bf44      	itt	mi
 800aff2:	2320      	movmi	r3, #32
 800aff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff8:	0711      	lsls	r1, r2, #28
 800affa:	bf44      	itt	mi
 800affc:	232b      	movmi	r3, #43	; 0x2b
 800affe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b002:	f89a 3000 	ldrb.w	r3, [sl]
 800b006:	2b2a      	cmp	r3, #42	; 0x2a
 800b008:	d015      	beq.n	800b036 <_svfiprintf_r+0xf6>
 800b00a:	9a07      	ldr	r2, [sp, #28]
 800b00c:	4654      	mov	r4, sl
 800b00e:	2000      	movs	r0, #0
 800b010:	f04f 0c0a 	mov.w	ip, #10
 800b014:	4621      	mov	r1, r4
 800b016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b01a:	3b30      	subs	r3, #48	; 0x30
 800b01c:	2b09      	cmp	r3, #9
 800b01e:	d94e      	bls.n	800b0be <_svfiprintf_r+0x17e>
 800b020:	b1b0      	cbz	r0, 800b050 <_svfiprintf_r+0x110>
 800b022:	9207      	str	r2, [sp, #28]
 800b024:	e014      	b.n	800b050 <_svfiprintf_r+0x110>
 800b026:	eba0 0308 	sub.w	r3, r0, r8
 800b02a:	fa09 f303 	lsl.w	r3, r9, r3
 800b02e:	4313      	orrs	r3, r2
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	46a2      	mov	sl, r4
 800b034:	e7d2      	b.n	800afdc <_svfiprintf_r+0x9c>
 800b036:	9b03      	ldr	r3, [sp, #12]
 800b038:	1d19      	adds	r1, r3, #4
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	9103      	str	r1, [sp, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	bfbb      	ittet	lt
 800b042:	425b      	neglt	r3, r3
 800b044:	f042 0202 	orrlt.w	r2, r2, #2
 800b048:	9307      	strge	r3, [sp, #28]
 800b04a:	9307      	strlt	r3, [sp, #28]
 800b04c:	bfb8      	it	lt
 800b04e:	9204      	strlt	r2, [sp, #16]
 800b050:	7823      	ldrb	r3, [r4, #0]
 800b052:	2b2e      	cmp	r3, #46	; 0x2e
 800b054:	d10c      	bne.n	800b070 <_svfiprintf_r+0x130>
 800b056:	7863      	ldrb	r3, [r4, #1]
 800b058:	2b2a      	cmp	r3, #42	; 0x2a
 800b05a:	d135      	bne.n	800b0c8 <_svfiprintf_r+0x188>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	1d1a      	adds	r2, r3, #4
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	9203      	str	r2, [sp, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	bfb8      	it	lt
 800b068:	f04f 33ff 	movlt.w	r3, #4294967295
 800b06c:	3402      	adds	r4, #2
 800b06e:	9305      	str	r3, [sp, #20]
 800b070:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b13c <_svfiprintf_r+0x1fc>
 800b074:	7821      	ldrb	r1, [r4, #0]
 800b076:	2203      	movs	r2, #3
 800b078:	4650      	mov	r0, sl
 800b07a:	f7f5 f8b9 	bl	80001f0 <memchr>
 800b07e:	b140      	cbz	r0, 800b092 <_svfiprintf_r+0x152>
 800b080:	2340      	movs	r3, #64	; 0x40
 800b082:	eba0 000a 	sub.w	r0, r0, sl
 800b086:	fa03 f000 	lsl.w	r0, r3, r0
 800b08a:	9b04      	ldr	r3, [sp, #16]
 800b08c:	4303      	orrs	r3, r0
 800b08e:	3401      	adds	r4, #1
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b096:	4826      	ldr	r0, [pc, #152]	; (800b130 <_svfiprintf_r+0x1f0>)
 800b098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b09c:	2206      	movs	r2, #6
 800b09e:	f7f5 f8a7 	bl	80001f0 <memchr>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d038      	beq.n	800b118 <_svfiprintf_r+0x1d8>
 800b0a6:	4b23      	ldr	r3, [pc, #140]	; (800b134 <_svfiprintf_r+0x1f4>)
 800b0a8:	bb1b      	cbnz	r3, 800b0f2 <_svfiprintf_r+0x1b2>
 800b0aa:	9b03      	ldr	r3, [sp, #12]
 800b0ac:	3307      	adds	r3, #7
 800b0ae:	f023 0307 	bic.w	r3, r3, #7
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	9303      	str	r3, [sp, #12]
 800b0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b8:	4433      	add	r3, r6
 800b0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b0bc:	e767      	b.n	800af8e <_svfiprintf_r+0x4e>
 800b0be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	2001      	movs	r0, #1
 800b0c6:	e7a5      	b.n	800b014 <_svfiprintf_r+0xd4>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	3401      	adds	r4, #1
 800b0cc:	9305      	str	r3, [sp, #20]
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	f04f 0c0a 	mov.w	ip, #10
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0da:	3a30      	subs	r2, #48	; 0x30
 800b0dc:	2a09      	cmp	r2, #9
 800b0de:	d903      	bls.n	800b0e8 <_svfiprintf_r+0x1a8>
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d0c5      	beq.n	800b070 <_svfiprintf_r+0x130>
 800b0e4:	9105      	str	r1, [sp, #20]
 800b0e6:	e7c3      	b.n	800b070 <_svfiprintf_r+0x130>
 800b0e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e7f0      	b.n	800b0d4 <_svfiprintf_r+0x194>
 800b0f2:	ab03      	add	r3, sp, #12
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	462a      	mov	r2, r5
 800b0f8:	4b0f      	ldr	r3, [pc, #60]	; (800b138 <_svfiprintf_r+0x1f8>)
 800b0fa:	a904      	add	r1, sp, #16
 800b0fc:	4638      	mov	r0, r7
 800b0fe:	f3af 8000 	nop.w
 800b102:	1c42      	adds	r2, r0, #1
 800b104:	4606      	mov	r6, r0
 800b106:	d1d6      	bne.n	800b0b6 <_svfiprintf_r+0x176>
 800b108:	89ab      	ldrh	r3, [r5, #12]
 800b10a:	065b      	lsls	r3, r3, #25
 800b10c:	f53f af2c 	bmi.w	800af68 <_svfiprintf_r+0x28>
 800b110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b112:	b01d      	add	sp, #116	; 0x74
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	ab03      	add	r3, sp, #12
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	462a      	mov	r2, r5
 800b11e:	4b06      	ldr	r3, [pc, #24]	; (800b138 <_svfiprintf_r+0x1f8>)
 800b120:	a904      	add	r1, sp, #16
 800b122:	4638      	mov	r0, r7
 800b124:	f000 fa4c 	bl	800b5c0 <_printf_i>
 800b128:	e7eb      	b.n	800b102 <_svfiprintf_r+0x1c2>
 800b12a:	bf00      	nop
 800b12c:	0800d0a4 	.word	0x0800d0a4
 800b130:	0800d0ae 	.word	0x0800d0ae
 800b134:	00000000 	.word	0x00000000
 800b138:	0800ae89 	.word	0x0800ae89
 800b13c:	0800d0aa 	.word	0x0800d0aa

0800b140 <_sungetc_r>:
 800b140:	b538      	push	{r3, r4, r5, lr}
 800b142:	1c4b      	adds	r3, r1, #1
 800b144:	4614      	mov	r4, r2
 800b146:	d103      	bne.n	800b150 <_sungetc_r+0x10>
 800b148:	f04f 35ff 	mov.w	r5, #4294967295
 800b14c:	4628      	mov	r0, r5
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	8993      	ldrh	r3, [r2, #12]
 800b152:	f023 0320 	bic.w	r3, r3, #32
 800b156:	8193      	strh	r3, [r2, #12]
 800b158:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b15a:	6852      	ldr	r2, [r2, #4]
 800b15c:	b2cd      	uxtb	r5, r1
 800b15e:	b18b      	cbz	r3, 800b184 <_sungetc_r+0x44>
 800b160:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b162:	4293      	cmp	r3, r2
 800b164:	dd08      	ble.n	800b178 <_sungetc_r+0x38>
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	1e5a      	subs	r2, r3, #1
 800b16a:	6022      	str	r2, [r4, #0]
 800b16c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b170:	6863      	ldr	r3, [r4, #4]
 800b172:	3301      	adds	r3, #1
 800b174:	6063      	str	r3, [r4, #4]
 800b176:	e7e9      	b.n	800b14c <_sungetc_r+0xc>
 800b178:	4621      	mov	r1, r4
 800b17a:	f000 fdc9 	bl	800bd10 <__submore>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d0f1      	beq.n	800b166 <_sungetc_r+0x26>
 800b182:	e7e1      	b.n	800b148 <_sungetc_r+0x8>
 800b184:	6921      	ldr	r1, [r4, #16]
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	b151      	cbz	r1, 800b1a0 <_sungetc_r+0x60>
 800b18a:	4299      	cmp	r1, r3
 800b18c:	d208      	bcs.n	800b1a0 <_sungetc_r+0x60>
 800b18e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b192:	42a9      	cmp	r1, r5
 800b194:	d104      	bne.n	800b1a0 <_sungetc_r+0x60>
 800b196:	3b01      	subs	r3, #1
 800b198:	3201      	adds	r2, #1
 800b19a:	6023      	str	r3, [r4, #0]
 800b19c:	6062      	str	r2, [r4, #4]
 800b19e:	e7d5      	b.n	800b14c <_sungetc_r+0xc>
 800b1a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	63a3      	str	r3, [r4, #56]	; 0x38
 800b1ae:	4623      	mov	r3, r4
 800b1b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e7dc      	b.n	800b174 <_sungetc_r+0x34>

0800b1ba <__ssrefill_r>:
 800b1ba:	b510      	push	{r4, lr}
 800b1bc:	460c      	mov	r4, r1
 800b1be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b1c0:	b169      	cbz	r1, 800b1de <__ssrefill_r+0x24>
 800b1c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1c6:	4299      	cmp	r1, r3
 800b1c8:	d001      	beq.n	800b1ce <__ssrefill_r+0x14>
 800b1ca:	f000 fdf7 	bl	800bdbc <_free_r>
 800b1ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1d0:	6063      	str	r3, [r4, #4]
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	6360      	str	r0, [r4, #52]	; 0x34
 800b1d6:	b113      	cbz	r3, 800b1de <__ssrefill_r+0x24>
 800b1d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b1da:	6023      	str	r3, [r4, #0]
 800b1dc:	bd10      	pop	{r4, pc}
 800b1de:	6923      	ldr	r3, [r4, #16]
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	6063      	str	r3, [r4, #4]
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	f043 0320 	orr.w	r3, r3, #32
 800b1ec:	81a3      	strh	r3, [r4, #12]
 800b1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f2:	e7f3      	b.n	800b1dc <__ssrefill_r+0x22>

0800b1f4 <__ssvfiscanf_r>:
 800b1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b1fe:	2100      	movs	r1, #0
 800b200:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b204:	49a6      	ldr	r1, [pc, #664]	; (800b4a0 <__ssvfiscanf_r+0x2ac>)
 800b206:	91a0      	str	r1, [sp, #640]	; 0x280
 800b208:	f10d 0804 	add.w	r8, sp, #4
 800b20c:	49a5      	ldr	r1, [pc, #660]	; (800b4a4 <__ssvfiscanf_r+0x2b0>)
 800b20e:	4fa6      	ldr	r7, [pc, #664]	; (800b4a8 <__ssvfiscanf_r+0x2b4>)
 800b210:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b4ac <__ssvfiscanf_r+0x2b8>
 800b214:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b218:	4606      	mov	r6, r0
 800b21a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	7813      	ldrb	r3, [r2, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 815a 	beq.w	800b4da <__ssvfiscanf_r+0x2e6>
 800b226:	5dd9      	ldrb	r1, [r3, r7]
 800b228:	f011 0108 	ands.w	r1, r1, #8
 800b22c:	f102 0501 	add.w	r5, r2, #1
 800b230:	d019      	beq.n	800b266 <__ssvfiscanf_r+0x72>
 800b232:	6863      	ldr	r3, [r4, #4]
 800b234:	2b00      	cmp	r3, #0
 800b236:	dd0f      	ble.n	800b258 <__ssvfiscanf_r+0x64>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	781a      	ldrb	r2, [r3, #0]
 800b23c:	5cba      	ldrb	r2, [r7, r2]
 800b23e:	0712      	lsls	r2, r2, #28
 800b240:	d401      	bmi.n	800b246 <__ssvfiscanf_r+0x52>
 800b242:	462a      	mov	r2, r5
 800b244:	e7eb      	b.n	800b21e <__ssvfiscanf_r+0x2a>
 800b246:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b248:	3201      	adds	r2, #1
 800b24a:	9245      	str	r2, [sp, #276]	; 0x114
 800b24c:	6862      	ldr	r2, [r4, #4]
 800b24e:	3301      	adds	r3, #1
 800b250:	3a01      	subs	r2, #1
 800b252:	6062      	str	r2, [r4, #4]
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	e7ec      	b.n	800b232 <__ssvfiscanf_r+0x3e>
 800b258:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b25a:	4621      	mov	r1, r4
 800b25c:	4630      	mov	r0, r6
 800b25e:	4798      	blx	r3
 800b260:	2800      	cmp	r0, #0
 800b262:	d0e9      	beq.n	800b238 <__ssvfiscanf_r+0x44>
 800b264:	e7ed      	b.n	800b242 <__ssvfiscanf_r+0x4e>
 800b266:	2b25      	cmp	r3, #37	; 0x25
 800b268:	d012      	beq.n	800b290 <__ssvfiscanf_r+0x9c>
 800b26a:	469a      	mov	sl, r3
 800b26c:	6863      	ldr	r3, [r4, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f340 8091 	ble.w	800b396 <__ssvfiscanf_r+0x1a2>
 800b274:	6822      	ldr	r2, [r4, #0]
 800b276:	7813      	ldrb	r3, [r2, #0]
 800b278:	4553      	cmp	r3, sl
 800b27a:	f040 812e 	bne.w	800b4da <__ssvfiscanf_r+0x2e6>
 800b27e:	6863      	ldr	r3, [r4, #4]
 800b280:	3b01      	subs	r3, #1
 800b282:	6063      	str	r3, [r4, #4]
 800b284:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b286:	3201      	adds	r2, #1
 800b288:	3301      	adds	r3, #1
 800b28a:	6022      	str	r2, [r4, #0]
 800b28c:	9345      	str	r3, [sp, #276]	; 0x114
 800b28e:	e7d8      	b.n	800b242 <__ssvfiscanf_r+0x4e>
 800b290:	9141      	str	r1, [sp, #260]	; 0x104
 800b292:	9143      	str	r1, [sp, #268]	; 0x10c
 800b294:	7853      	ldrb	r3, [r2, #1]
 800b296:	2b2a      	cmp	r3, #42	; 0x2a
 800b298:	bf02      	ittt	eq
 800b29a:	2310      	moveq	r3, #16
 800b29c:	1c95      	addeq	r5, r2, #2
 800b29e:	9341      	streq	r3, [sp, #260]	; 0x104
 800b2a0:	220a      	movs	r2, #10
 800b2a2:	46aa      	mov	sl, r5
 800b2a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b2a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b2ac:	2b09      	cmp	r3, #9
 800b2ae:	d91d      	bls.n	800b2ec <__ssvfiscanf_r+0xf8>
 800b2b0:	487e      	ldr	r0, [pc, #504]	; (800b4ac <__ssvfiscanf_r+0x2b8>)
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	f7f4 ff9c 	bl	80001f0 <memchr>
 800b2b8:	b140      	cbz	r0, 800b2cc <__ssvfiscanf_r+0xd8>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	eba0 0009 	sub.w	r0, r0, r9
 800b2c0:	fa03 f000 	lsl.w	r0, r3, r0
 800b2c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2c6:	4318      	orrs	r0, r3
 800b2c8:	9041      	str	r0, [sp, #260]	; 0x104
 800b2ca:	4655      	mov	r5, sl
 800b2cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b2d0:	2b78      	cmp	r3, #120	; 0x78
 800b2d2:	d806      	bhi.n	800b2e2 <__ssvfiscanf_r+0xee>
 800b2d4:	2b57      	cmp	r3, #87	; 0x57
 800b2d6:	d810      	bhi.n	800b2fa <__ssvfiscanf_r+0x106>
 800b2d8:	2b25      	cmp	r3, #37	; 0x25
 800b2da:	d0c6      	beq.n	800b26a <__ssvfiscanf_r+0x76>
 800b2dc:	d856      	bhi.n	800b38c <__ssvfiscanf_r+0x198>
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d064      	beq.n	800b3ac <__ssvfiscanf_r+0x1b8>
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	9347      	str	r3, [sp, #284]	; 0x11c
 800b2e6:	230a      	movs	r3, #10
 800b2e8:	9342      	str	r3, [sp, #264]	; 0x108
 800b2ea:	e071      	b.n	800b3d0 <__ssvfiscanf_r+0x1dc>
 800b2ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b2ee:	fb02 1103 	mla	r1, r2, r3, r1
 800b2f2:	3930      	subs	r1, #48	; 0x30
 800b2f4:	9143      	str	r1, [sp, #268]	; 0x10c
 800b2f6:	4655      	mov	r5, sl
 800b2f8:	e7d3      	b.n	800b2a2 <__ssvfiscanf_r+0xae>
 800b2fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b2fe:	2a20      	cmp	r2, #32
 800b300:	d8ef      	bhi.n	800b2e2 <__ssvfiscanf_r+0xee>
 800b302:	a101      	add	r1, pc, #4	; (adr r1, 800b308 <__ssvfiscanf_r+0x114>)
 800b304:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b308:	0800b3bb 	.word	0x0800b3bb
 800b30c:	0800b2e3 	.word	0x0800b2e3
 800b310:	0800b2e3 	.word	0x0800b2e3
 800b314:	0800b419 	.word	0x0800b419
 800b318:	0800b2e3 	.word	0x0800b2e3
 800b31c:	0800b2e3 	.word	0x0800b2e3
 800b320:	0800b2e3 	.word	0x0800b2e3
 800b324:	0800b2e3 	.word	0x0800b2e3
 800b328:	0800b2e3 	.word	0x0800b2e3
 800b32c:	0800b2e3 	.word	0x0800b2e3
 800b330:	0800b2e3 	.word	0x0800b2e3
 800b334:	0800b42f 	.word	0x0800b42f
 800b338:	0800b405 	.word	0x0800b405
 800b33c:	0800b393 	.word	0x0800b393
 800b340:	0800b393 	.word	0x0800b393
 800b344:	0800b393 	.word	0x0800b393
 800b348:	0800b2e3 	.word	0x0800b2e3
 800b34c:	0800b409 	.word	0x0800b409
 800b350:	0800b2e3 	.word	0x0800b2e3
 800b354:	0800b2e3 	.word	0x0800b2e3
 800b358:	0800b2e3 	.word	0x0800b2e3
 800b35c:	0800b2e3 	.word	0x0800b2e3
 800b360:	0800b43f 	.word	0x0800b43f
 800b364:	0800b411 	.word	0x0800b411
 800b368:	0800b3b3 	.word	0x0800b3b3
 800b36c:	0800b2e3 	.word	0x0800b2e3
 800b370:	0800b2e3 	.word	0x0800b2e3
 800b374:	0800b43b 	.word	0x0800b43b
 800b378:	0800b2e3 	.word	0x0800b2e3
 800b37c:	0800b405 	.word	0x0800b405
 800b380:	0800b2e3 	.word	0x0800b2e3
 800b384:	0800b2e3 	.word	0x0800b2e3
 800b388:	0800b3bb 	.word	0x0800b3bb
 800b38c:	3b45      	subs	r3, #69	; 0x45
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d8a7      	bhi.n	800b2e2 <__ssvfiscanf_r+0xee>
 800b392:	2305      	movs	r3, #5
 800b394:	e01b      	b.n	800b3ce <__ssvfiscanf_r+0x1da>
 800b396:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b398:	4621      	mov	r1, r4
 800b39a:	4630      	mov	r0, r6
 800b39c:	4798      	blx	r3
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	f43f af68 	beq.w	800b274 <__ssvfiscanf_r+0x80>
 800b3a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f040 808d 	bne.w	800b4c6 <__ssvfiscanf_r+0x2d2>
 800b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b0:	e08f      	b.n	800b4d2 <__ssvfiscanf_r+0x2de>
 800b3b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b3b4:	f042 0220 	orr.w	r2, r2, #32
 800b3b8:	9241      	str	r2, [sp, #260]	; 0x104
 800b3ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b3bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3c0:	9241      	str	r2, [sp, #260]	; 0x104
 800b3c2:	2210      	movs	r2, #16
 800b3c4:	2b6f      	cmp	r3, #111	; 0x6f
 800b3c6:	9242      	str	r2, [sp, #264]	; 0x108
 800b3c8:	bf34      	ite	cc
 800b3ca:	2303      	movcc	r3, #3
 800b3cc:	2304      	movcs	r3, #4
 800b3ce:	9347      	str	r3, [sp, #284]	; 0x11c
 800b3d0:	6863      	ldr	r3, [r4, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dd42      	ble.n	800b45c <__ssvfiscanf_r+0x268>
 800b3d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b3d8:	0659      	lsls	r1, r3, #25
 800b3da:	d404      	bmi.n	800b3e6 <__ssvfiscanf_r+0x1f2>
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	781a      	ldrb	r2, [r3, #0]
 800b3e0:	5cba      	ldrb	r2, [r7, r2]
 800b3e2:	0712      	lsls	r2, r2, #28
 800b3e4:	d441      	bmi.n	800b46a <__ssvfiscanf_r+0x276>
 800b3e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	dc50      	bgt.n	800b48e <__ssvfiscanf_r+0x29a>
 800b3ec:	466b      	mov	r3, sp
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	a941      	add	r1, sp, #260	; 0x104
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f000 fa0a 	bl	800b80c <_scanf_chars>
 800b3f8:	2801      	cmp	r0, #1
 800b3fa:	d06e      	beq.n	800b4da <__ssvfiscanf_r+0x2e6>
 800b3fc:	2802      	cmp	r0, #2
 800b3fe:	f47f af20 	bne.w	800b242 <__ssvfiscanf_r+0x4e>
 800b402:	e7cf      	b.n	800b3a4 <__ssvfiscanf_r+0x1b0>
 800b404:	220a      	movs	r2, #10
 800b406:	e7dd      	b.n	800b3c4 <__ssvfiscanf_r+0x1d0>
 800b408:	2300      	movs	r3, #0
 800b40a:	9342      	str	r3, [sp, #264]	; 0x108
 800b40c:	2303      	movs	r3, #3
 800b40e:	e7de      	b.n	800b3ce <__ssvfiscanf_r+0x1da>
 800b410:	2308      	movs	r3, #8
 800b412:	9342      	str	r3, [sp, #264]	; 0x108
 800b414:	2304      	movs	r3, #4
 800b416:	e7da      	b.n	800b3ce <__ssvfiscanf_r+0x1da>
 800b418:	4629      	mov	r1, r5
 800b41a:	4640      	mov	r0, r8
 800b41c:	f000 fb48 	bl	800bab0 <__sccl>
 800b420:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b426:	9341      	str	r3, [sp, #260]	; 0x104
 800b428:	4605      	mov	r5, r0
 800b42a:	2301      	movs	r3, #1
 800b42c:	e7cf      	b.n	800b3ce <__ssvfiscanf_r+0x1da>
 800b42e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b434:	9341      	str	r3, [sp, #260]	; 0x104
 800b436:	2300      	movs	r3, #0
 800b438:	e7c9      	b.n	800b3ce <__ssvfiscanf_r+0x1da>
 800b43a:	2302      	movs	r3, #2
 800b43c:	e7c7      	b.n	800b3ce <__ssvfiscanf_r+0x1da>
 800b43e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b440:	06c3      	lsls	r3, r0, #27
 800b442:	f53f aefe 	bmi.w	800b242 <__ssvfiscanf_r+0x4e>
 800b446:	9b00      	ldr	r3, [sp, #0]
 800b448:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b44a:	1d19      	adds	r1, r3, #4
 800b44c:	9100      	str	r1, [sp, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f010 0f01 	tst.w	r0, #1
 800b454:	bf14      	ite	ne
 800b456:	801a      	strhne	r2, [r3, #0]
 800b458:	601a      	streq	r2, [r3, #0]
 800b45a:	e6f2      	b.n	800b242 <__ssvfiscanf_r+0x4e>
 800b45c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b45e:	4621      	mov	r1, r4
 800b460:	4630      	mov	r0, r6
 800b462:	4798      	blx	r3
 800b464:	2800      	cmp	r0, #0
 800b466:	d0b6      	beq.n	800b3d6 <__ssvfiscanf_r+0x1e2>
 800b468:	e79c      	b.n	800b3a4 <__ssvfiscanf_r+0x1b0>
 800b46a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b46c:	3201      	adds	r2, #1
 800b46e:	9245      	str	r2, [sp, #276]	; 0x114
 800b470:	6862      	ldr	r2, [r4, #4]
 800b472:	3a01      	subs	r2, #1
 800b474:	2a00      	cmp	r2, #0
 800b476:	6062      	str	r2, [r4, #4]
 800b478:	dd02      	ble.n	800b480 <__ssvfiscanf_r+0x28c>
 800b47a:	3301      	adds	r3, #1
 800b47c:	6023      	str	r3, [r4, #0]
 800b47e:	e7ad      	b.n	800b3dc <__ssvfiscanf_r+0x1e8>
 800b480:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b482:	4621      	mov	r1, r4
 800b484:	4630      	mov	r0, r6
 800b486:	4798      	blx	r3
 800b488:	2800      	cmp	r0, #0
 800b48a:	d0a7      	beq.n	800b3dc <__ssvfiscanf_r+0x1e8>
 800b48c:	e78a      	b.n	800b3a4 <__ssvfiscanf_r+0x1b0>
 800b48e:	2b04      	cmp	r3, #4
 800b490:	dc0e      	bgt.n	800b4b0 <__ssvfiscanf_r+0x2bc>
 800b492:	466b      	mov	r3, sp
 800b494:	4622      	mov	r2, r4
 800b496:	a941      	add	r1, sp, #260	; 0x104
 800b498:	4630      	mov	r0, r6
 800b49a:	f000 fa11 	bl	800b8c0 <_scanf_i>
 800b49e:	e7ab      	b.n	800b3f8 <__ssvfiscanf_r+0x204>
 800b4a0:	0800b141 	.word	0x0800b141
 800b4a4:	0800b1bb 	.word	0x0800b1bb
 800b4a8:	0800d0f3 	.word	0x0800d0f3
 800b4ac:	0800d0aa 	.word	0x0800d0aa
 800b4b0:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <__ssvfiscanf_r+0x2ec>)
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f43f aec5 	beq.w	800b242 <__ssvfiscanf_r+0x4e>
 800b4b8:	466b      	mov	r3, sp
 800b4ba:	4622      	mov	r2, r4
 800b4bc:	a941      	add	r1, sp, #260	; 0x104
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f3af 8000 	nop.w
 800b4c4:	e798      	b.n	800b3f8 <__ssvfiscanf_r+0x204>
 800b4c6:	89a3      	ldrh	r3, [r4, #12]
 800b4c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b4cc:	bf18      	it	ne
 800b4ce:	f04f 30ff 	movne.w	r0, #4294967295
 800b4d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4da:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b4dc:	e7f9      	b.n	800b4d2 <__ssvfiscanf_r+0x2de>
 800b4de:	bf00      	nop
 800b4e0:	00000000 	.word	0x00000000

0800b4e4 <_printf_common>:
 800b4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e8:	4616      	mov	r6, r2
 800b4ea:	4699      	mov	r9, r3
 800b4ec:	688a      	ldr	r2, [r1, #8]
 800b4ee:	690b      	ldr	r3, [r1, #16]
 800b4f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	bfb8      	it	lt
 800b4f8:	4613      	movlt	r3, r2
 800b4fa:	6033      	str	r3, [r6, #0]
 800b4fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b500:	4607      	mov	r7, r0
 800b502:	460c      	mov	r4, r1
 800b504:	b10a      	cbz	r2, 800b50a <_printf_common+0x26>
 800b506:	3301      	adds	r3, #1
 800b508:	6033      	str	r3, [r6, #0]
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	0699      	lsls	r1, r3, #26
 800b50e:	bf42      	ittt	mi
 800b510:	6833      	ldrmi	r3, [r6, #0]
 800b512:	3302      	addmi	r3, #2
 800b514:	6033      	strmi	r3, [r6, #0]
 800b516:	6825      	ldr	r5, [r4, #0]
 800b518:	f015 0506 	ands.w	r5, r5, #6
 800b51c:	d106      	bne.n	800b52c <_printf_common+0x48>
 800b51e:	f104 0a19 	add.w	sl, r4, #25
 800b522:	68e3      	ldr	r3, [r4, #12]
 800b524:	6832      	ldr	r2, [r6, #0]
 800b526:	1a9b      	subs	r3, r3, r2
 800b528:	42ab      	cmp	r3, r5
 800b52a:	dc26      	bgt.n	800b57a <_printf_common+0x96>
 800b52c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b530:	1e13      	subs	r3, r2, #0
 800b532:	6822      	ldr	r2, [r4, #0]
 800b534:	bf18      	it	ne
 800b536:	2301      	movne	r3, #1
 800b538:	0692      	lsls	r2, r2, #26
 800b53a:	d42b      	bmi.n	800b594 <_printf_common+0xb0>
 800b53c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b540:	4649      	mov	r1, r9
 800b542:	4638      	mov	r0, r7
 800b544:	47c0      	blx	r8
 800b546:	3001      	adds	r0, #1
 800b548:	d01e      	beq.n	800b588 <_printf_common+0xa4>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	68e5      	ldr	r5, [r4, #12]
 800b54e:	6832      	ldr	r2, [r6, #0]
 800b550:	f003 0306 	and.w	r3, r3, #6
 800b554:	2b04      	cmp	r3, #4
 800b556:	bf08      	it	eq
 800b558:	1aad      	subeq	r5, r5, r2
 800b55a:	68a3      	ldr	r3, [r4, #8]
 800b55c:	6922      	ldr	r2, [r4, #16]
 800b55e:	bf0c      	ite	eq
 800b560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b564:	2500      	movne	r5, #0
 800b566:	4293      	cmp	r3, r2
 800b568:	bfc4      	itt	gt
 800b56a:	1a9b      	subgt	r3, r3, r2
 800b56c:	18ed      	addgt	r5, r5, r3
 800b56e:	2600      	movs	r6, #0
 800b570:	341a      	adds	r4, #26
 800b572:	42b5      	cmp	r5, r6
 800b574:	d11a      	bne.n	800b5ac <_printf_common+0xc8>
 800b576:	2000      	movs	r0, #0
 800b578:	e008      	b.n	800b58c <_printf_common+0xa8>
 800b57a:	2301      	movs	r3, #1
 800b57c:	4652      	mov	r2, sl
 800b57e:	4649      	mov	r1, r9
 800b580:	4638      	mov	r0, r7
 800b582:	47c0      	blx	r8
 800b584:	3001      	adds	r0, #1
 800b586:	d103      	bne.n	800b590 <_printf_common+0xac>
 800b588:	f04f 30ff 	mov.w	r0, #4294967295
 800b58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b590:	3501      	adds	r5, #1
 800b592:	e7c6      	b.n	800b522 <_printf_common+0x3e>
 800b594:	18e1      	adds	r1, r4, r3
 800b596:	1c5a      	adds	r2, r3, #1
 800b598:	2030      	movs	r0, #48	; 0x30
 800b59a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b59e:	4422      	add	r2, r4
 800b5a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5a8:	3302      	adds	r3, #2
 800b5aa:	e7c7      	b.n	800b53c <_printf_common+0x58>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	47c0      	blx	r8
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d0e6      	beq.n	800b588 <_printf_common+0xa4>
 800b5ba:	3601      	adds	r6, #1
 800b5bc:	e7d9      	b.n	800b572 <_printf_common+0x8e>
	...

0800b5c0 <_printf_i>:
 800b5c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	7e0f      	ldrb	r7, [r1, #24]
 800b5c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5c8:	2f78      	cmp	r7, #120	; 0x78
 800b5ca:	4691      	mov	r9, r2
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	460c      	mov	r4, r1
 800b5d0:	469a      	mov	sl, r3
 800b5d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5d6:	d807      	bhi.n	800b5e8 <_printf_i+0x28>
 800b5d8:	2f62      	cmp	r7, #98	; 0x62
 800b5da:	d80a      	bhi.n	800b5f2 <_printf_i+0x32>
 800b5dc:	2f00      	cmp	r7, #0
 800b5de:	f000 80d8 	beq.w	800b792 <_printf_i+0x1d2>
 800b5e2:	2f58      	cmp	r7, #88	; 0x58
 800b5e4:	f000 80a3 	beq.w	800b72e <_printf_i+0x16e>
 800b5e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5f0:	e03a      	b.n	800b668 <_printf_i+0xa8>
 800b5f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5f6:	2b15      	cmp	r3, #21
 800b5f8:	d8f6      	bhi.n	800b5e8 <_printf_i+0x28>
 800b5fa:	a101      	add	r1, pc, #4	; (adr r1, 800b600 <_printf_i+0x40>)
 800b5fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b600:	0800b659 	.word	0x0800b659
 800b604:	0800b66d 	.word	0x0800b66d
 800b608:	0800b5e9 	.word	0x0800b5e9
 800b60c:	0800b5e9 	.word	0x0800b5e9
 800b610:	0800b5e9 	.word	0x0800b5e9
 800b614:	0800b5e9 	.word	0x0800b5e9
 800b618:	0800b66d 	.word	0x0800b66d
 800b61c:	0800b5e9 	.word	0x0800b5e9
 800b620:	0800b5e9 	.word	0x0800b5e9
 800b624:	0800b5e9 	.word	0x0800b5e9
 800b628:	0800b5e9 	.word	0x0800b5e9
 800b62c:	0800b779 	.word	0x0800b779
 800b630:	0800b69d 	.word	0x0800b69d
 800b634:	0800b75b 	.word	0x0800b75b
 800b638:	0800b5e9 	.word	0x0800b5e9
 800b63c:	0800b5e9 	.word	0x0800b5e9
 800b640:	0800b79b 	.word	0x0800b79b
 800b644:	0800b5e9 	.word	0x0800b5e9
 800b648:	0800b69d 	.word	0x0800b69d
 800b64c:	0800b5e9 	.word	0x0800b5e9
 800b650:	0800b5e9 	.word	0x0800b5e9
 800b654:	0800b763 	.word	0x0800b763
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	1d1a      	adds	r2, r3, #4
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	602a      	str	r2, [r5, #0]
 800b660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b668:	2301      	movs	r3, #1
 800b66a:	e0a3      	b.n	800b7b4 <_printf_i+0x1f4>
 800b66c:	6820      	ldr	r0, [r4, #0]
 800b66e:	6829      	ldr	r1, [r5, #0]
 800b670:	0606      	lsls	r6, r0, #24
 800b672:	f101 0304 	add.w	r3, r1, #4
 800b676:	d50a      	bpl.n	800b68e <_printf_i+0xce>
 800b678:	680e      	ldr	r6, [r1, #0]
 800b67a:	602b      	str	r3, [r5, #0]
 800b67c:	2e00      	cmp	r6, #0
 800b67e:	da03      	bge.n	800b688 <_printf_i+0xc8>
 800b680:	232d      	movs	r3, #45	; 0x2d
 800b682:	4276      	negs	r6, r6
 800b684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b688:	485e      	ldr	r0, [pc, #376]	; (800b804 <_printf_i+0x244>)
 800b68a:	230a      	movs	r3, #10
 800b68c:	e019      	b.n	800b6c2 <_printf_i+0x102>
 800b68e:	680e      	ldr	r6, [r1, #0]
 800b690:	602b      	str	r3, [r5, #0]
 800b692:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b696:	bf18      	it	ne
 800b698:	b236      	sxthne	r6, r6
 800b69a:	e7ef      	b.n	800b67c <_printf_i+0xbc>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	1d19      	adds	r1, r3, #4
 800b6a2:	6029      	str	r1, [r5, #0]
 800b6a4:	0601      	lsls	r1, r0, #24
 800b6a6:	d501      	bpl.n	800b6ac <_printf_i+0xec>
 800b6a8:	681e      	ldr	r6, [r3, #0]
 800b6aa:	e002      	b.n	800b6b2 <_printf_i+0xf2>
 800b6ac:	0646      	lsls	r6, r0, #25
 800b6ae:	d5fb      	bpl.n	800b6a8 <_printf_i+0xe8>
 800b6b0:	881e      	ldrh	r6, [r3, #0]
 800b6b2:	4854      	ldr	r0, [pc, #336]	; (800b804 <_printf_i+0x244>)
 800b6b4:	2f6f      	cmp	r7, #111	; 0x6f
 800b6b6:	bf0c      	ite	eq
 800b6b8:	2308      	moveq	r3, #8
 800b6ba:	230a      	movne	r3, #10
 800b6bc:	2100      	movs	r1, #0
 800b6be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6c2:	6865      	ldr	r5, [r4, #4]
 800b6c4:	60a5      	str	r5, [r4, #8]
 800b6c6:	2d00      	cmp	r5, #0
 800b6c8:	bfa2      	ittt	ge
 800b6ca:	6821      	ldrge	r1, [r4, #0]
 800b6cc:	f021 0104 	bicge.w	r1, r1, #4
 800b6d0:	6021      	strge	r1, [r4, #0]
 800b6d2:	b90e      	cbnz	r6, 800b6d8 <_printf_i+0x118>
 800b6d4:	2d00      	cmp	r5, #0
 800b6d6:	d04d      	beq.n	800b774 <_printf_i+0x1b4>
 800b6d8:	4615      	mov	r5, r2
 800b6da:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6de:	fb03 6711 	mls	r7, r3, r1, r6
 800b6e2:	5dc7      	ldrb	r7, [r0, r7]
 800b6e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6e8:	4637      	mov	r7, r6
 800b6ea:	42bb      	cmp	r3, r7
 800b6ec:	460e      	mov	r6, r1
 800b6ee:	d9f4      	bls.n	800b6da <_printf_i+0x11a>
 800b6f0:	2b08      	cmp	r3, #8
 800b6f2:	d10b      	bne.n	800b70c <_printf_i+0x14c>
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	07de      	lsls	r6, r3, #31
 800b6f8:	d508      	bpl.n	800b70c <_printf_i+0x14c>
 800b6fa:	6923      	ldr	r3, [r4, #16]
 800b6fc:	6861      	ldr	r1, [r4, #4]
 800b6fe:	4299      	cmp	r1, r3
 800b700:	bfde      	ittt	le
 800b702:	2330      	movle	r3, #48	; 0x30
 800b704:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b708:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b70c:	1b52      	subs	r2, r2, r5
 800b70e:	6122      	str	r2, [r4, #16]
 800b710:	f8cd a000 	str.w	sl, [sp]
 800b714:	464b      	mov	r3, r9
 800b716:	aa03      	add	r2, sp, #12
 800b718:	4621      	mov	r1, r4
 800b71a:	4640      	mov	r0, r8
 800b71c:	f7ff fee2 	bl	800b4e4 <_printf_common>
 800b720:	3001      	adds	r0, #1
 800b722:	d14c      	bne.n	800b7be <_printf_i+0x1fe>
 800b724:	f04f 30ff 	mov.w	r0, #4294967295
 800b728:	b004      	add	sp, #16
 800b72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72e:	4835      	ldr	r0, [pc, #212]	; (800b804 <_printf_i+0x244>)
 800b730:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b734:	6829      	ldr	r1, [r5, #0]
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	f851 6b04 	ldr.w	r6, [r1], #4
 800b73c:	6029      	str	r1, [r5, #0]
 800b73e:	061d      	lsls	r5, r3, #24
 800b740:	d514      	bpl.n	800b76c <_printf_i+0x1ac>
 800b742:	07df      	lsls	r7, r3, #31
 800b744:	bf44      	itt	mi
 800b746:	f043 0320 	orrmi.w	r3, r3, #32
 800b74a:	6023      	strmi	r3, [r4, #0]
 800b74c:	b91e      	cbnz	r6, 800b756 <_printf_i+0x196>
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	f023 0320 	bic.w	r3, r3, #32
 800b754:	6023      	str	r3, [r4, #0]
 800b756:	2310      	movs	r3, #16
 800b758:	e7b0      	b.n	800b6bc <_printf_i+0xfc>
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	f043 0320 	orr.w	r3, r3, #32
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	2378      	movs	r3, #120	; 0x78
 800b764:	4828      	ldr	r0, [pc, #160]	; (800b808 <_printf_i+0x248>)
 800b766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b76a:	e7e3      	b.n	800b734 <_printf_i+0x174>
 800b76c:	0659      	lsls	r1, r3, #25
 800b76e:	bf48      	it	mi
 800b770:	b2b6      	uxthmi	r6, r6
 800b772:	e7e6      	b.n	800b742 <_printf_i+0x182>
 800b774:	4615      	mov	r5, r2
 800b776:	e7bb      	b.n	800b6f0 <_printf_i+0x130>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	6826      	ldr	r6, [r4, #0]
 800b77c:	6961      	ldr	r1, [r4, #20]
 800b77e:	1d18      	adds	r0, r3, #4
 800b780:	6028      	str	r0, [r5, #0]
 800b782:	0635      	lsls	r5, r6, #24
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	d501      	bpl.n	800b78c <_printf_i+0x1cc>
 800b788:	6019      	str	r1, [r3, #0]
 800b78a:	e002      	b.n	800b792 <_printf_i+0x1d2>
 800b78c:	0670      	lsls	r0, r6, #25
 800b78e:	d5fb      	bpl.n	800b788 <_printf_i+0x1c8>
 800b790:	8019      	strh	r1, [r3, #0]
 800b792:	2300      	movs	r3, #0
 800b794:	6123      	str	r3, [r4, #16]
 800b796:	4615      	mov	r5, r2
 800b798:	e7ba      	b.n	800b710 <_printf_i+0x150>
 800b79a:	682b      	ldr	r3, [r5, #0]
 800b79c:	1d1a      	adds	r2, r3, #4
 800b79e:	602a      	str	r2, [r5, #0]
 800b7a0:	681d      	ldr	r5, [r3, #0]
 800b7a2:	6862      	ldr	r2, [r4, #4]
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f7f4 fd22 	bl	80001f0 <memchr>
 800b7ac:	b108      	cbz	r0, 800b7b2 <_printf_i+0x1f2>
 800b7ae:	1b40      	subs	r0, r0, r5
 800b7b0:	6060      	str	r0, [r4, #4]
 800b7b2:	6863      	ldr	r3, [r4, #4]
 800b7b4:	6123      	str	r3, [r4, #16]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7bc:	e7a8      	b.n	800b710 <_printf_i+0x150>
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	462a      	mov	r2, r5
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	47d0      	blx	sl
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	d0ab      	beq.n	800b724 <_printf_i+0x164>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	079b      	lsls	r3, r3, #30
 800b7d0:	d413      	bmi.n	800b7fa <_printf_i+0x23a>
 800b7d2:	68e0      	ldr	r0, [r4, #12]
 800b7d4:	9b03      	ldr	r3, [sp, #12]
 800b7d6:	4298      	cmp	r0, r3
 800b7d8:	bfb8      	it	lt
 800b7da:	4618      	movlt	r0, r3
 800b7dc:	e7a4      	b.n	800b728 <_printf_i+0x168>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	4632      	mov	r2, r6
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	4640      	mov	r0, r8
 800b7e6:	47d0      	blx	sl
 800b7e8:	3001      	adds	r0, #1
 800b7ea:	d09b      	beq.n	800b724 <_printf_i+0x164>
 800b7ec:	3501      	adds	r5, #1
 800b7ee:	68e3      	ldr	r3, [r4, #12]
 800b7f0:	9903      	ldr	r1, [sp, #12]
 800b7f2:	1a5b      	subs	r3, r3, r1
 800b7f4:	42ab      	cmp	r3, r5
 800b7f6:	dcf2      	bgt.n	800b7de <_printf_i+0x21e>
 800b7f8:	e7eb      	b.n	800b7d2 <_printf_i+0x212>
 800b7fa:	2500      	movs	r5, #0
 800b7fc:	f104 0619 	add.w	r6, r4, #25
 800b800:	e7f5      	b.n	800b7ee <_printf_i+0x22e>
 800b802:	bf00      	nop
 800b804:	0800d0b5 	.word	0x0800d0b5
 800b808:	0800d0c6 	.word	0x0800d0c6

0800b80c <_scanf_chars>:
 800b80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b810:	4615      	mov	r5, r2
 800b812:	688a      	ldr	r2, [r1, #8]
 800b814:	4680      	mov	r8, r0
 800b816:	460c      	mov	r4, r1
 800b818:	b932      	cbnz	r2, 800b828 <_scanf_chars+0x1c>
 800b81a:	698a      	ldr	r2, [r1, #24]
 800b81c:	2a00      	cmp	r2, #0
 800b81e:	bf0c      	ite	eq
 800b820:	2201      	moveq	r2, #1
 800b822:	f04f 32ff 	movne.w	r2, #4294967295
 800b826:	608a      	str	r2, [r1, #8]
 800b828:	6822      	ldr	r2, [r4, #0]
 800b82a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b8bc <_scanf_chars+0xb0>
 800b82e:	06d1      	lsls	r1, r2, #27
 800b830:	bf5f      	itttt	pl
 800b832:	681a      	ldrpl	r2, [r3, #0]
 800b834:	1d11      	addpl	r1, r2, #4
 800b836:	6019      	strpl	r1, [r3, #0]
 800b838:	6816      	ldrpl	r6, [r2, #0]
 800b83a:	2700      	movs	r7, #0
 800b83c:	69a0      	ldr	r0, [r4, #24]
 800b83e:	b188      	cbz	r0, 800b864 <_scanf_chars+0x58>
 800b840:	2801      	cmp	r0, #1
 800b842:	d107      	bne.n	800b854 <_scanf_chars+0x48>
 800b844:	682a      	ldr	r2, [r5, #0]
 800b846:	7811      	ldrb	r1, [r2, #0]
 800b848:	6962      	ldr	r2, [r4, #20]
 800b84a:	5c52      	ldrb	r2, [r2, r1]
 800b84c:	b952      	cbnz	r2, 800b864 <_scanf_chars+0x58>
 800b84e:	2f00      	cmp	r7, #0
 800b850:	d031      	beq.n	800b8b6 <_scanf_chars+0xaa>
 800b852:	e022      	b.n	800b89a <_scanf_chars+0x8e>
 800b854:	2802      	cmp	r0, #2
 800b856:	d120      	bne.n	800b89a <_scanf_chars+0x8e>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b860:	071b      	lsls	r3, r3, #28
 800b862:	d41a      	bmi.n	800b89a <_scanf_chars+0x8e>
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	06da      	lsls	r2, r3, #27
 800b868:	bf5e      	ittt	pl
 800b86a:	682b      	ldrpl	r3, [r5, #0]
 800b86c:	781b      	ldrbpl	r3, [r3, #0]
 800b86e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b872:	682a      	ldr	r2, [r5, #0]
 800b874:	686b      	ldr	r3, [r5, #4]
 800b876:	3201      	adds	r2, #1
 800b878:	602a      	str	r2, [r5, #0]
 800b87a:	68a2      	ldr	r2, [r4, #8]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	3a01      	subs	r2, #1
 800b880:	606b      	str	r3, [r5, #4]
 800b882:	3701      	adds	r7, #1
 800b884:	60a2      	str	r2, [r4, #8]
 800b886:	b142      	cbz	r2, 800b89a <_scanf_chars+0x8e>
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dcd7      	bgt.n	800b83c <_scanf_chars+0x30>
 800b88c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b890:	4629      	mov	r1, r5
 800b892:	4640      	mov	r0, r8
 800b894:	4798      	blx	r3
 800b896:	2800      	cmp	r0, #0
 800b898:	d0d0      	beq.n	800b83c <_scanf_chars+0x30>
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	f013 0310 	ands.w	r3, r3, #16
 800b8a0:	d105      	bne.n	800b8ae <_scanf_chars+0xa2>
 800b8a2:	68e2      	ldr	r2, [r4, #12]
 800b8a4:	3201      	adds	r2, #1
 800b8a6:	60e2      	str	r2, [r4, #12]
 800b8a8:	69a2      	ldr	r2, [r4, #24]
 800b8aa:	b102      	cbz	r2, 800b8ae <_scanf_chars+0xa2>
 800b8ac:	7033      	strb	r3, [r6, #0]
 800b8ae:	6923      	ldr	r3, [r4, #16]
 800b8b0:	443b      	add	r3, r7
 800b8b2:	6123      	str	r3, [r4, #16]
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ba:	bf00      	nop
 800b8bc:	0800d0f3 	.word	0x0800d0f3

0800b8c0 <_scanf_i>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	4698      	mov	r8, r3
 800b8c6:	4b76      	ldr	r3, [pc, #472]	; (800baa0 <_scanf_i+0x1e0>)
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	4682      	mov	sl, r0
 800b8cc:	4616      	mov	r6, r2
 800b8ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	ab03      	add	r3, sp, #12
 800b8d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8da:	4b72      	ldr	r3, [pc, #456]	; (800baa4 <_scanf_i+0x1e4>)
 800b8dc:	69a1      	ldr	r1, [r4, #24]
 800b8de:	4a72      	ldr	r2, [pc, #456]	; (800baa8 <_scanf_i+0x1e8>)
 800b8e0:	2903      	cmp	r1, #3
 800b8e2:	bf18      	it	ne
 800b8e4:	461a      	movne	r2, r3
 800b8e6:	68a3      	ldr	r3, [r4, #8]
 800b8e8:	9201      	str	r2, [sp, #4]
 800b8ea:	1e5a      	subs	r2, r3, #1
 800b8ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b8f0:	bf88      	it	hi
 800b8f2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b8f6:	4627      	mov	r7, r4
 800b8f8:	bf82      	ittt	hi
 800b8fa:	eb03 0905 	addhi.w	r9, r3, r5
 800b8fe:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b902:	60a3      	strhi	r3, [r4, #8]
 800b904:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b908:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b90c:	bf98      	it	ls
 800b90e:	f04f 0900 	movls.w	r9, #0
 800b912:	6023      	str	r3, [r4, #0]
 800b914:	463d      	mov	r5, r7
 800b916:	f04f 0b00 	mov.w	fp, #0
 800b91a:	6831      	ldr	r1, [r6, #0]
 800b91c:	ab03      	add	r3, sp, #12
 800b91e:	7809      	ldrb	r1, [r1, #0]
 800b920:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b924:	2202      	movs	r2, #2
 800b926:	f7f4 fc63 	bl	80001f0 <memchr>
 800b92a:	b328      	cbz	r0, 800b978 <_scanf_i+0xb8>
 800b92c:	f1bb 0f01 	cmp.w	fp, #1
 800b930:	d159      	bne.n	800b9e6 <_scanf_i+0x126>
 800b932:	6862      	ldr	r2, [r4, #4]
 800b934:	b92a      	cbnz	r2, 800b942 <_scanf_i+0x82>
 800b936:	6822      	ldr	r2, [r4, #0]
 800b938:	2308      	movs	r3, #8
 800b93a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b93e:	6063      	str	r3, [r4, #4]
 800b940:	6022      	str	r2, [r4, #0]
 800b942:	6822      	ldr	r2, [r4, #0]
 800b944:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b948:	6022      	str	r2, [r4, #0]
 800b94a:	68a2      	ldr	r2, [r4, #8]
 800b94c:	1e51      	subs	r1, r2, #1
 800b94e:	60a1      	str	r1, [r4, #8]
 800b950:	b192      	cbz	r2, 800b978 <_scanf_i+0xb8>
 800b952:	6832      	ldr	r2, [r6, #0]
 800b954:	1c51      	adds	r1, r2, #1
 800b956:	6031      	str	r1, [r6, #0]
 800b958:	7812      	ldrb	r2, [r2, #0]
 800b95a:	f805 2b01 	strb.w	r2, [r5], #1
 800b95e:	6872      	ldr	r2, [r6, #4]
 800b960:	3a01      	subs	r2, #1
 800b962:	2a00      	cmp	r2, #0
 800b964:	6072      	str	r2, [r6, #4]
 800b966:	dc07      	bgt.n	800b978 <_scanf_i+0xb8>
 800b968:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b96c:	4631      	mov	r1, r6
 800b96e:	4650      	mov	r0, sl
 800b970:	4790      	blx	r2
 800b972:	2800      	cmp	r0, #0
 800b974:	f040 8085 	bne.w	800ba82 <_scanf_i+0x1c2>
 800b978:	f10b 0b01 	add.w	fp, fp, #1
 800b97c:	f1bb 0f03 	cmp.w	fp, #3
 800b980:	d1cb      	bne.n	800b91a <_scanf_i+0x5a>
 800b982:	6863      	ldr	r3, [r4, #4]
 800b984:	b90b      	cbnz	r3, 800b98a <_scanf_i+0xca>
 800b986:	230a      	movs	r3, #10
 800b988:	6063      	str	r3, [r4, #4]
 800b98a:	6863      	ldr	r3, [r4, #4]
 800b98c:	4947      	ldr	r1, [pc, #284]	; (800baac <_scanf_i+0x1ec>)
 800b98e:	6960      	ldr	r0, [r4, #20]
 800b990:	1ac9      	subs	r1, r1, r3
 800b992:	f000 f88d 	bl	800bab0 <__sccl>
 800b996:	f04f 0b00 	mov.w	fp, #0
 800b99a:	68a3      	ldr	r3, [r4, #8]
 800b99c:	6822      	ldr	r2, [r4, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d03d      	beq.n	800ba1e <_scanf_i+0x15e>
 800b9a2:	6831      	ldr	r1, [r6, #0]
 800b9a4:	6960      	ldr	r0, [r4, #20]
 800b9a6:	f891 c000 	ldrb.w	ip, [r1]
 800b9aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d035      	beq.n	800ba1e <_scanf_i+0x15e>
 800b9b2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b9b6:	d124      	bne.n	800ba02 <_scanf_i+0x142>
 800b9b8:	0510      	lsls	r0, r2, #20
 800b9ba:	d522      	bpl.n	800ba02 <_scanf_i+0x142>
 800b9bc:	f10b 0b01 	add.w	fp, fp, #1
 800b9c0:	f1b9 0f00 	cmp.w	r9, #0
 800b9c4:	d003      	beq.n	800b9ce <_scanf_i+0x10e>
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	f109 39ff 	add.w	r9, r9, #4294967295
 800b9cc:	60a3      	str	r3, [r4, #8]
 800b9ce:	6873      	ldr	r3, [r6, #4]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	6073      	str	r3, [r6, #4]
 800b9d6:	dd1b      	ble.n	800ba10 <_scanf_i+0x150>
 800b9d8:	6833      	ldr	r3, [r6, #0]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	6033      	str	r3, [r6, #0]
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	60a3      	str	r3, [r4, #8]
 800b9e4:	e7d9      	b.n	800b99a <_scanf_i+0xda>
 800b9e6:	f1bb 0f02 	cmp.w	fp, #2
 800b9ea:	d1ae      	bne.n	800b94a <_scanf_i+0x8a>
 800b9ec:	6822      	ldr	r2, [r4, #0]
 800b9ee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b9f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b9f6:	d1bf      	bne.n	800b978 <_scanf_i+0xb8>
 800b9f8:	2310      	movs	r3, #16
 800b9fa:	6063      	str	r3, [r4, #4]
 800b9fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba00:	e7a2      	b.n	800b948 <_scanf_i+0x88>
 800ba02:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ba06:	6022      	str	r2, [r4, #0]
 800ba08:	780b      	ldrb	r3, [r1, #0]
 800ba0a:	f805 3b01 	strb.w	r3, [r5], #1
 800ba0e:	e7de      	b.n	800b9ce <_scanf_i+0x10e>
 800ba10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba14:	4631      	mov	r1, r6
 800ba16:	4650      	mov	r0, sl
 800ba18:	4798      	blx	r3
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d0df      	beq.n	800b9de <_scanf_i+0x11e>
 800ba1e:	6823      	ldr	r3, [r4, #0]
 800ba20:	05db      	lsls	r3, r3, #23
 800ba22:	d50d      	bpl.n	800ba40 <_scanf_i+0x180>
 800ba24:	42bd      	cmp	r5, r7
 800ba26:	d909      	bls.n	800ba3c <_scanf_i+0x17c>
 800ba28:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ba2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba30:	4632      	mov	r2, r6
 800ba32:	4650      	mov	r0, sl
 800ba34:	4798      	blx	r3
 800ba36:	f105 39ff 	add.w	r9, r5, #4294967295
 800ba3a:	464d      	mov	r5, r9
 800ba3c:	42bd      	cmp	r5, r7
 800ba3e:	d02d      	beq.n	800ba9c <_scanf_i+0x1dc>
 800ba40:	6822      	ldr	r2, [r4, #0]
 800ba42:	f012 0210 	ands.w	r2, r2, #16
 800ba46:	d113      	bne.n	800ba70 <_scanf_i+0x1b0>
 800ba48:	702a      	strb	r2, [r5, #0]
 800ba4a:	6863      	ldr	r3, [r4, #4]
 800ba4c:	9e01      	ldr	r6, [sp, #4]
 800ba4e:	4639      	mov	r1, r7
 800ba50:	4650      	mov	r0, sl
 800ba52:	47b0      	blx	r6
 800ba54:	6821      	ldr	r1, [r4, #0]
 800ba56:	f8d8 3000 	ldr.w	r3, [r8]
 800ba5a:	f011 0f20 	tst.w	r1, #32
 800ba5e:	d013      	beq.n	800ba88 <_scanf_i+0x1c8>
 800ba60:	1d1a      	adds	r2, r3, #4
 800ba62:	f8c8 2000 	str.w	r2, [r8]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6018      	str	r0, [r3, #0]
 800ba6a:	68e3      	ldr	r3, [r4, #12]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	60e3      	str	r3, [r4, #12]
 800ba70:	1bed      	subs	r5, r5, r7
 800ba72:	44ab      	add	fp, r5
 800ba74:	6925      	ldr	r5, [r4, #16]
 800ba76:	445d      	add	r5, fp
 800ba78:	6125      	str	r5, [r4, #16]
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	b007      	add	sp, #28
 800ba7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba82:	f04f 0b00 	mov.w	fp, #0
 800ba86:	e7ca      	b.n	800ba1e <_scanf_i+0x15e>
 800ba88:	1d1a      	adds	r2, r3, #4
 800ba8a:	f8c8 2000 	str.w	r2, [r8]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f011 0f01 	tst.w	r1, #1
 800ba94:	bf14      	ite	ne
 800ba96:	8018      	strhne	r0, [r3, #0]
 800ba98:	6018      	streq	r0, [r3, #0]
 800ba9a:	e7e6      	b.n	800ba6a <_scanf_i+0x1aa>
 800ba9c:	2001      	movs	r0, #1
 800ba9e:	e7ed      	b.n	800ba7c <_scanf_i+0x1bc>
 800baa0:	0800d078 	.word	0x0800d078
 800baa4:	0800bd0d 	.word	0x0800bd0d
 800baa8:	0800bc25 	.word	0x0800bc25
 800baac:	0800d0f0 	.word	0x0800d0f0

0800bab0 <__sccl>:
 800bab0:	b570      	push	{r4, r5, r6, lr}
 800bab2:	780b      	ldrb	r3, [r1, #0]
 800bab4:	4604      	mov	r4, r0
 800bab6:	2b5e      	cmp	r3, #94	; 0x5e
 800bab8:	bf0b      	itete	eq
 800baba:	784b      	ldrbeq	r3, [r1, #1]
 800babc:	1c48      	addne	r0, r1, #1
 800babe:	1c88      	addeq	r0, r1, #2
 800bac0:	2200      	movne	r2, #0
 800bac2:	bf08      	it	eq
 800bac4:	2201      	moveq	r2, #1
 800bac6:	1e61      	subs	r1, r4, #1
 800bac8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bacc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bad0:	42a9      	cmp	r1, r5
 800bad2:	d1fb      	bne.n	800bacc <__sccl+0x1c>
 800bad4:	b90b      	cbnz	r3, 800bada <__sccl+0x2a>
 800bad6:	3801      	subs	r0, #1
 800bad8:	bd70      	pop	{r4, r5, r6, pc}
 800bada:	f082 0201 	eor.w	r2, r2, #1
 800bade:	54e2      	strb	r2, [r4, r3]
 800bae0:	4605      	mov	r5, r0
 800bae2:	4628      	mov	r0, r5
 800bae4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bae8:	292d      	cmp	r1, #45	; 0x2d
 800baea:	d006      	beq.n	800bafa <__sccl+0x4a>
 800baec:	295d      	cmp	r1, #93	; 0x5d
 800baee:	d0f3      	beq.n	800bad8 <__sccl+0x28>
 800baf0:	b909      	cbnz	r1, 800baf6 <__sccl+0x46>
 800baf2:	4628      	mov	r0, r5
 800baf4:	e7f0      	b.n	800bad8 <__sccl+0x28>
 800baf6:	460b      	mov	r3, r1
 800baf8:	e7f1      	b.n	800bade <__sccl+0x2e>
 800bafa:	786e      	ldrb	r6, [r5, #1]
 800bafc:	2e5d      	cmp	r6, #93	; 0x5d
 800bafe:	d0fa      	beq.n	800baf6 <__sccl+0x46>
 800bb00:	42b3      	cmp	r3, r6
 800bb02:	dcf8      	bgt.n	800baf6 <__sccl+0x46>
 800bb04:	3502      	adds	r5, #2
 800bb06:	4619      	mov	r1, r3
 800bb08:	3101      	adds	r1, #1
 800bb0a:	428e      	cmp	r6, r1
 800bb0c:	5462      	strb	r2, [r4, r1]
 800bb0e:	dcfb      	bgt.n	800bb08 <__sccl+0x58>
 800bb10:	1af1      	subs	r1, r6, r3
 800bb12:	3901      	subs	r1, #1
 800bb14:	1c58      	adds	r0, r3, #1
 800bb16:	42b3      	cmp	r3, r6
 800bb18:	bfa8      	it	ge
 800bb1a:	2100      	movge	r1, #0
 800bb1c:	1843      	adds	r3, r0, r1
 800bb1e:	e7e0      	b.n	800bae2 <__sccl+0x32>

0800bb20 <_strtol_l.constprop.0>:
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb26:	d001      	beq.n	800bb2c <_strtol_l.constprop.0+0xc>
 800bb28:	2b24      	cmp	r3, #36	; 0x24
 800bb2a:	d906      	bls.n	800bb3a <_strtol_l.constprop.0+0x1a>
 800bb2c:	f7ff f91e 	bl	800ad6c <__errno>
 800bb30:	2316      	movs	r3, #22
 800bb32:	6003      	str	r3, [r0, #0]
 800bb34:	2000      	movs	r0, #0
 800bb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bc20 <_strtol_l.constprop.0+0x100>
 800bb3e:	460d      	mov	r5, r1
 800bb40:	462e      	mov	r6, r5
 800bb42:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb46:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bb4a:	f017 0708 	ands.w	r7, r7, #8
 800bb4e:	d1f7      	bne.n	800bb40 <_strtol_l.constprop.0+0x20>
 800bb50:	2c2d      	cmp	r4, #45	; 0x2d
 800bb52:	d132      	bne.n	800bbba <_strtol_l.constprop.0+0x9a>
 800bb54:	782c      	ldrb	r4, [r5, #0]
 800bb56:	2701      	movs	r7, #1
 800bb58:	1cb5      	adds	r5, r6, #2
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d05b      	beq.n	800bc16 <_strtol_l.constprop.0+0xf6>
 800bb5e:	2b10      	cmp	r3, #16
 800bb60:	d109      	bne.n	800bb76 <_strtol_l.constprop.0+0x56>
 800bb62:	2c30      	cmp	r4, #48	; 0x30
 800bb64:	d107      	bne.n	800bb76 <_strtol_l.constprop.0+0x56>
 800bb66:	782c      	ldrb	r4, [r5, #0]
 800bb68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bb6c:	2c58      	cmp	r4, #88	; 0x58
 800bb6e:	d14d      	bne.n	800bc0c <_strtol_l.constprop.0+0xec>
 800bb70:	786c      	ldrb	r4, [r5, #1]
 800bb72:	2310      	movs	r3, #16
 800bb74:	3502      	adds	r5, #2
 800bb76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bb7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb7e:	f04f 0c00 	mov.w	ip, #0
 800bb82:	fbb8 f9f3 	udiv	r9, r8, r3
 800bb86:	4666      	mov	r6, ip
 800bb88:	fb03 8a19 	mls	sl, r3, r9, r8
 800bb8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bb90:	f1be 0f09 	cmp.w	lr, #9
 800bb94:	d816      	bhi.n	800bbc4 <_strtol_l.constprop.0+0xa4>
 800bb96:	4674      	mov	r4, lr
 800bb98:	42a3      	cmp	r3, r4
 800bb9a:	dd24      	ble.n	800bbe6 <_strtol_l.constprop.0+0xc6>
 800bb9c:	f1bc 0f00 	cmp.w	ip, #0
 800bba0:	db1e      	blt.n	800bbe0 <_strtol_l.constprop.0+0xc0>
 800bba2:	45b1      	cmp	r9, r6
 800bba4:	d31c      	bcc.n	800bbe0 <_strtol_l.constprop.0+0xc0>
 800bba6:	d101      	bne.n	800bbac <_strtol_l.constprop.0+0x8c>
 800bba8:	45a2      	cmp	sl, r4
 800bbaa:	db19      	blt.n	800bbe0 <_strtol_l.constprop.0+0xc0>
 800bbac:	fb06 4603 	mla	r6, r6, r3, r4
 800bbb0:	f04f 0c01 	mov.w	ip, #1
 800bbb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbb8:	e7e8      	b.n	800bb8c <_strtol_l.constprop.0+0x6c>
 800bbba:	2c2b      	cmp	r4, #43	; 0x2b
 800bbbc:	bf04      	itt	eq
 800bbbe:	782c      	ldrbeq	r4, [r5, #0]
 800bbc0:	1cb5      	addeq	r5, r6, #2
 800bbc2:	e7ca      	b.n	800bb5a <_strtol_l.constprop.0+0x3a>
 800bbc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bbc8:	f1be 0f19 	cmp.w	lr, #25
 800bbcc:	d801      	bhi.n	800bbd2 <_strtol_l.constprop.0+0xb2>
 800bbce:	3c37      	subs	r4, #55	; 0x37
 800bbd0:	e7e2      	b.n	800bb98 <_strtol_l.constprop.0+0x78>
 800bbd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bbd6:	f1be 0f19 	cmp.w	lr, #25
 800bbda:	d804      	bhi.n	800bbe6 <_strtol_l.constprop.0+0xc6>
 800bbdc:	3c57      	subs	r4, #87	; 0x57
 800bbde:	e7db      	b.n	800bb98 <_strtol_l.constprop.0+0x78>
 800bbe0:	f04f 3cff 	mov.w	ip, #4294967295
 800bbe4:	e7e6      	b.n	800bbb4 <_strtol_l.constprop.0+0x94>
 800bbe6:	f1bc 0f00 	cmp.w	ip, #0
 800bbea:	da05      	bge.n	800bbf8 <_strtol_l.constprop.0+0xd8>
 800bbec:	2322      	movs	r3, #34	; 0x22
 800bbee:	6003      	str	r3, [r0, #0]
 800bbf0:	4646      	mov	r6, r8
 800bbf2:	b942      	cbnz	r2, 800bc06 <_strtol_l.constprop.0+0xe6>
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	e79e      	b.n	800bb36 <_strtol_l.constprop.0+0x16>
 800bbf8:	b107      	cbz	r7, 800bbfc <_strtol_l.constprop.0+0xdc>
 800bbfa:	4276      	negs	r6, r6
 800bbfc:	2a00      	cmp	r2, #0
 800bbfe:	d0f9      	beq.n	800bbf4 <_strtol_l.constprop.0+0xd4>
 800bc00:	f1bc 0f00 	cmp.w	ip, #0
 800bc04:	d000      	beq.n	800bc08 <_strtol_l.constprop.0+0xe8>
 800bc06:	1e69      	subs	r1, r5, #1
 800bc08:	6011      	str	r1, [r2, #0]
 800bc0a:	e7f3      	b.n	800bbf4 <_strtol_l.constprop.0+0xd4>
 800bc0c:	2430      	movs	r4, #48	; 0x30
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1b1      	bne.n	800bb76 <_strtol_l.constprop.0+0x56>
 800bc12:	2308      	movs	r3, #8
 800bc14:	e7af      	b.n	800bb76 <_strtol_l.constprop.0+0x56>
 800bc16:	2c30      	cmp	r4, #48	; 0x30
 800bc18:	d0a5      	beq.n	800bb66 <_strtol_l.constprop.0+0x46>
 800bc1a:	230a      	movs	r3, #10
 800bc1c:	e7ab      	b.n	800bb76 <_strtol_l.constprop.0+0x56>
 800bc1e:	bf00      	nop
 800bc20:	0800d0f3 	.word	0x0800d0f3

0800bc24 <_strtol_r>:
 800bc24:	f7ff bf7c 	b.w	800bb20 <_strtol_l.constprop.0>

0800bc28 <_strtoul_l.constprop.0>:
 800bc28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc2c:	4f36      	ldr	r7, [pc, #216]	; (800bd08 <_strtoul_l.constprop.0+0xe0>)
 800bc2e:	4686      	mov	lr, r0
 800bc30:	460d      	mov	r5, r1
 800bc32:	4628      	mov	r0, r5
 800bc34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc38:	5de6      	ldrb	r6, [r4, r7]
 800bc3a:	f016 0608 	ands.w	r6, r6, #8
 800bc3e:	d1f8      	bne.n	800bc32 <_strtoul_l.constprop.0+0xa>
 800bc40:	2c2d      	cmp	r4, #45	; 0x2d
 800bc42:	d12f      	bne.n	800bca4 <_strtoul_l.constprop.0+0x7c>
 800bc44:	782c      	ldrb	r4, [r5, #0]
 800bc46:	2601      	movs	r6, #1
 800bc48:	1c85      	adds	r5, r0, #2
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d057      	beq.n	800bcfe <_strtoul_l.constprop.0+0xd6>
 800bc4e:	2b10      	cmp	r3, #16
 800bc50:	d109      	bne.n	800bc66 <_strtoul_l.constprop.0+0x3e>
 800bc52:	2c30      	cmp	r4, #48	; 0x30
 800bc54:	d107      	bne.n	800bc66 <_strtoul_l.constprop.0+0x3e>
 800bc56:	7828      	ldrb	r0, [r5, #0]
 800bc58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bc5c:	2858      	cmp	r0, #88	; 0x58
 800bc5e:	d149      	bne.n	800bcf4 <_strtoul_l.constprop.0+0xcc>
 800bc60:	786c      	ldrb	r4, [r5, #1]
 800bc62:	2310      	movs	r3, #16
 800bc64:	3502      	adds	r5, #2
 800bc66:	f04f 38ff 	mov.w	r8, #4294967295
 800bc6a:	2700      	movs	r7, #0
 800bc6c:	fbb8 f8f3 	udiv	r8, r8, r3
 800bc70:	fb03 f908 	mul.w	r9, r3, r8
 800bc74:	ea6f 0909 	mvn.w	r9, r9
 800bc78:	4638      	mov	r0, r7
 800bc7a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bc7e:	f1bc 0f09 	cmp.w	ip, #9
 800bc82:	d814      	bhi.n	800bcae <_strtoul_l.constprop.0+0x86>
 800bc84:	4664      	mov	r4, ip
 800bc86:	42a3      	cmp	r3, r4
 800bc88:	dd22      	ble.n	800bcd0 <_strtoul_l.constprop.0+0xa8>
 800bc8a:	2f00      	cmp	r7, #0
 800bc8c:	db1d      	blt.n	800bcca <_strtoul_l.constprop.0+0xa2>
 800bc8e:	4580      	cmp	r8, r0
 800bc90:	d31b      	bcc.n	800bcca <_strtoul_l.constprop.0+0xa2>
 800bc92:	d101      	bne.n	800bc98 <_strtoul_l.constprop.0+0x70>
 800bc94:	45a1      	cmp	r9, r4
 800bc96:	db18      	blt.n	800bcca <_strtoul_l.constprop.0+0xa2>
 800bc98:	fb00 4003 	mla	r0, r0, r3, r4
 800bc9c:	2701      	movs	r7, #1
 800bc9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bca2:	e7ea      	b.n	800bc7a <_strtoul_l.constprop.0+0x52>
 800bca4:	2c2b      	cmp	r4, #43	; 0x2b
 800bca6:	bf04      	itt	eq
 800bca8:	782c      	ldrbeq	r4, [r5, #0]
 800bcaa:	1c85      	addeq	r5, r0, #2
 800bcac:	e7cd      	b.n	800bc4a <_strtoul_l.constprop.0+0x22>
 800bcae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bcb2:	f1bc 0f19 	cmp.w	ip, #25
 800bcb6:	d801      	bhi.n	800bcbc <_strtoul_l.constprop.0+0x94>
 800bcb8:	3c37      	subs	r4, #55	; 0x37
 800bcba:	e7e4      	b.n	800bc86 <_strtoul_l.constprop.0+0x5e>
 800bcbc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bcc0:	f1bc 0f19 	cmp.w	ip, #25
 800bcc4:	d804      	bhi.n	800bcd0 <_strtoul_l.constprop.0+0xa8>
 800bcc6:	3c57      	subs	r4, #87	; 0x57
 800bcc8:	e7dd      	b.n	800bc86 <_strtoul_l.constprop.0+0x5e>
 800bcca:	f04f 37ff 	mov.w	r7, #4294967295
 800bcce:	e7e6      	b.n	800bc9e <_strtoul_l.constprop.0+0x76>
 800bcd0:	2f00      	cmp	r7, #0
 800bcd2:	da07      	bge.n	800bce4 <_strtoul_l.constprop.0+0xbc>
 800bcd4:	2322      	movs	r3, #34	; 0x22
 800bcd6:	f8ce 3000 	str.w	r3, [lr]
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	b932      	cbnz	r2, 800bcee <_strtoul_l.constprop.0+0xc6>
 800bce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bce4:	b106      	cbz	r6, 800bce8 <_strtoul_l.constprop.0+0xc0>
 800bce6:	4240      	negs	r0, r0
 800bce8:	2a00      	cmp	r2, #0
 800bcea:	d0f9      	beq.n	800bce0 <_strtoul_l.constprop.0+0xb8>
 800bcec:	b107      	cbz	r7, 800bcf0 <_strtoul_l.constprop.0+0xc8>
 800bcee:	1e69      	subs	r1, r5, #1
 800bcf0:	6011      	str	r1, [r2, #0]
 800bcf2:	e7f5      	b.n	800bce0 <_strtoul_l.constprop.0+0xb8>
 800bcf4:	2430      	movs	r4, #48	; 0x30
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1b5      	bne.n	800bc66 <_strtoul_l.constprop.0+0x3e>
 800bcfa:	2308      	movs	r3, #8
 800bcfc:	e7b3      	b.n	800bc66 <_strtoul_l.constprop.0+0x3e>
 800bcfe:	2c30      	cmp	r4, #48	; 0x30
 800bd00:	d0a9      	beq.n	800bc56 <_strtoul_l.constprop.0+0x2e>
 800bd02:	230a      	movs	r3, #10
 800bd04:	e7af      	b.n	800bc66 <_strtoul_l.constprop.0+0x3e>
 800bd06:	bf00      	nop
 800bd08:	0800d0f3 	.word	0x0800d0f3

0800bd0c <_strtoul_r>:
 800bd0c:	f7ff bf8c 	b.w	800bc28 <_strtoul_l.constprop.0>

0800bd10 <__submore>:
 800bd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd14:	460c      	mov	r4, r1
 800bd16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bd18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd1c:	4299      	cmp	r1, r3
 800bd1e:	d11d      	bne.n	800bd5c <__submore+0x4c>
 800bd20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd24:	f000 f8b6 	bl	800be94 <_malloc_r>
 800bd28:	b918      	cbnz	r0, 800bd32 <__submore+0x22>
 800bd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd36:	63a3      	str	r3, [r4, #56]	; 0x38
 800bd38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bd3c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bd42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bd46:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bd4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bd4e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bd52:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bd56:	6020      	str	r0, [r4, #0]
 800bd58:	2000      	movs	r0, #0
 800bd5a:	e7e8      	b.n	800bd2e <__submore+0x1e>
 800bd5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bd5e:	0077      	lsls	r7, r6, #1
 800bd60:	463a      	mov	r2, r7
 800bd62:	f000 f90b 	bl	800bf7c <_realloc_r>
 800bd66:	4605      	mov	r5, r0
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d0de      	beq.n	800bd2a <__submore+0x1a>
 800bd6c:	eb00 0806 	add.w	r8, r0, r6
 800bd70:	4601      	mov	r1, r0
 800bd72:	4632      	mov	r2, r6
 800bd74:	4640      	mov	r0, r8
 800bd76:	f7ff f823 	bl	800adc0 <memcpy>
 800bd7a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bd7e:	f8c4 8000 	str.w	r8, [r4]
 800bd82:	e7e9      	b.n	800bd58 <__submore+0x48>

0800bd84 <__retarget_lock_acquire_recursive>:
 800bd84:	4770      	bx	lr

0800bd86 <__retarget_lock_release_recursive>:
 800bd86:	4770      	bx	lr

0800bd88 <memmove>:
 800bd88:	4288      	cmp	r0, r1
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	eb01 0402 	add.w	r4, r1, r2
 800bd90:	d902      	bls.n	800bd98 <memmove+0x10>
 800bd92:	4284      	cmp	r4, r0
 800bd94:	4623      	mov	r3, r4
 800bd96:	d807      	bhi.n	800bda8 <memmove+0x20>
 800bd98:	1e43      	subs	r3, r0, #1
 800bd9a:	42a1      	cmp	r1, r4
 800bd9c:	d008      	beq.n	800bdb0 <memmove+0x28>
 800bd9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bda2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bda6:	e7f8      	b.n	800bd9a <memmove+0x12>
 800bda8:	4402      	add	r2, r0
 800bdaa:	4601      	mov	r1, r0
 800bdac:	428a      	cmp	r2, r1
 800bdae:	d100      	bne.n	800bdb2 <memmove+0x2a>
 800bdb0:	bd10      	pop	{r4, pc}
 800bdb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdba:	e7f7      	b.n	800bdac <memmove+0x24>

0800bdbc <_free_r>:
 800bdbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdbe:	2900      	cmp	r1, #0
 800bdc0:	d044      	beq.n	800be4c <_free_r+0x90>
 800bdc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc6:	9001      	str	r0, [sp, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f1a1 0404 	sub.w	r4, r1, #4
 800bdce:	bfb8      	it	lt
 800bdd0:	18e4      	addlt	r4, r4, r3
 800bdd2:	f000 f913 	bl	800bffc <__malloc_lock>
 800bdd6:	4a1e      	ldr	r2, [pc, #120]	; (800be50 <_free_r+0x94>)
 800bdd8:	9801      	ldr	r0, [sp, #4]
 800bdda:	6813      	ldr	r3, [r2, #0]
 800bddc:	b933      	cbnz	r3, 800bdec <_free_r+0x30>
 800bdde:	6063      	str	r3, [r4, #4]
 800bde0:	6014      	str	r4, [r2, #0]
 800bde2:	b003      	add	sp, #12
 800bde4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bde8:	f000 b90e 	b.w	800c008 <__malloc_unlock>
 800bdec:	42a3      	cmp	r3, r4
 800bdee:	d908      	bls.n	800be02 <_free_r+0x46>
 800bdf0:	6825      	ldr	r5, [r4, #0]
 800bdf2:	1961      	adds	r1, r4, r5
 800bdf4:	428b      	cmp	r3, r1
 800bdf6:	bf01      	itttt	eq
 800bdf8:	6819      	ldreq	r1, [r3, #0]
 800bdfa:	685b      	ldreq	r3, [r3, #4]
 800bdfc:	1949      	addeq	r1, r1, r5
 800bdfe:	6021      	streq	r1, [r4, #0]
 800be00:	e7ed      	b.n	800bdde <_free_r+0x22>
 800be02:	461a      	mov	r2, r3
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	b10b      	cbz	r3, 800be0c <_free_r+0x50>
 800be08:	42a3      	cmp	r3, r4
 800be0a:	d9fa      	bls.n	800be02 <_free_r+0x46>
 800be0c:	6811      	ldr	r1, [r2, #0]
 800be0e:	1855      	adds	r5, r2, r1
 800be10:	42a5      	cmp	r5, r4
 800be12:	d10b      	bne.n	800be2c <_free_r+0x70>
 800be14:	6824      	ldr	r4, [r4, #0]
 800be16:	4421      	add	r1, r4
 800be18:	1854      	adds	r4, r2, r1
 800be1a:	42a3      	cmp	r3, r4
 800be1c:	6011      	str	r1, [r2, #0]
 800be1e:	d1e0      	bne.n	800bde2 <_free_r+0x26>
 800be20:	681c      	ldr	r4, [r3, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	6053      	str	r3, [r2, #4]
 800be26:	4421      	add	r1, r4
 800be28:	6011      	str	r1, [r2, #0]
 800be2a:	e7da      	b.n	800bde2 <_free_r+0x26>
 800be2c:	d902      	bls.n	800be34 <_free_r+0x78>
 800be2e:	230c      	movs	r3, #12
 800be30:	6003      	str	r3, [r0, #0]
 800be32:	e7d6      	b.n	800bde2 <_free_r+0x26>
 800be34:	6825      	ldr	r5, [r4, #0]
 800be36:	1961      	adds	r1, r4, r5
 800be38:	428b      	cmp	r3, r1
 800be3a:	bf04      	itt	eq
 800be3c:	6819      	ldreq	r1, [r3, #0]
 800be3e:	685b      	ldreq	r3, [r3, #4]
 800be40:	6063      	str	r3, [r4, #4]
 800be42:	bf04      	itt	eq
 800be44:	1949      	addeq	r1, r1, r5
 800be46:	6021      	streq	r1, [r4, #0]
 800be48:	6054      	str	r4, [r2, #4]
 800be4a:	e7ca      	b.n	800bde2 <_free_r+0x26>
 800be4c:	b003      	add	sp, #12
 800be4e:	bd30      	pop	{r4, r5, pc}
 800be50:	200039cc 	.word	0x200039cc

0800be54 <sbrk_aligned>:
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	4e0e      	ldr	r6, [pc, #56]	; (800be90 <sbrk_aligned+0x3c>)
 800be58:	460c      	mov	r4, r1
 800be5a:	6831      	ldr	r1, [r6, #0]
 800be5c:	4605      	mov	r5, r0
 800be5e:	b911      	cbnz	r1, 800be66 <sbrk_aligned+0x12>
 800be60:	f000 f8bc 	bl	800bfdc <_sbrk_r>
 800be64:	6030      	str	r0, [r6, #0]
 800be66:	4621      	mov	r1, r4
 800be68:	4628      	mov	r0, r5
 800be6a:	f000 f8b7 	bl	800bfdc <_sbrk_r>
 800be6e:	1c43      	adds	r3, r0, #1
 800be70:	d00a      	beq.n	800be88 <sbrk_aligned+0x34>
 800be72:	1cc4      	adds	r4, r0, #3
 800be74:	f024 0403 	bic.w	r4, r4, #3
 800be78:	42a0      	cmp	r0, r4
 800be7a:	d007      	beq.n	800be8c <sbrk_aligned+0x38>
 800be7c:	1a21      	subs	r1, r4, r0
 800be7e:	4628      	mov	r0, r5
 800be80:	f000 f8ac 	bl	800bfdc <_sbrk_r>
 800be84:	3001      	adds	r0, #1
 800be86:	d101      	bne.n	800be8c <sbrk_aligned+0x38>
 800be88:	f04f 34ff 	mov.w	r4, #4294967295
 800be8c:	4620      	mov	r0, r4
 800be8e:	bd70      	pop	{r4, r5, r6, pc}
 800be90:	200039d0 	.word	0x200039d0

0800be94 <_malloc_r>:
 800be94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be98:	1ccd      	adds	r5, r1, #3
 800be9a:	f025 0503 	bic.w	r5, r5, #3
 800be9e:	3508      	adds	r5, #8
 800bea0:	2d0c      	cmp	r5, #12
 800bea2:	bf38      	it	cc
 800bea4:	250c      	movcc	r5, #12
 800bea6:	2d00      	cmp	r5, #0
 800bea8:	4607      	mov	r7, r0
 800beaa:	db01      	blt.n	800beb0 <_malloc_r+0x1c>
 800beac:	42a9      	cmp	r1, r5
 800beae:	d905      	bls.n	800bebc <_malloc_r+0x28>
 800beb0:	230c      	movs	r3, #12
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	2600      	movs	r6, #0
 800beb6:	4630      	mov	r0, r6
 800beb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bebc:	4e2e      	ldr	r6, [pc, #184]	; (800bf78 <_malloc_r+0xe4>)
 800bebe:	f000 f89d 	bl	800bffc <__malloc_lock>
 800bec2:	6833      	ldr	r3, [r6, #0]
 800bec4:	461c      	mov	r4, r3
 800bec6:	bb34      	cbnz	r4, 800bf16 <_malloc_r+0x82>
 800bec8:	4629      	mov	r1, r5
 800beca:	4638      	mov	r0, r7
 800becc:	f7ff ffc2 	bl	800be54 <sbrk_aligned>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	4604      	mov	r4, r0
 800bed4:	d14d      	bne.n	800bf72 <_malloc_r+0xde>
 800bed6:	6834      	ldr	r4, [r6, #0]
 800bed8:	4626      	mov	r6, r4
 800beda:	2e00      	cmp	r6, #0
 800bedc:	d140      	bne.n	800bf60 <_malloc_r+0xcc>
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	4631      	mov	r1, r6
 800bee2:	4638      	mov	r0, r7
 800bee4:	eb04 0803 	add.w	r8, r4, r3
 800bee8:	f000 f878 	bl	800bfdc <_sbrk_r>
 800beec:	4580      	cmp	r8, r0
 800beee:	d13a      	bne.n	800bf66 <_malloc_r+0xd2>
 800bef0:	6821      	ldr	r1, [r4, #0]
 800bef2:	3503      	adds	r5, #3
 800bef4:	1a6d      	subs	r5, r5, r1
 800bef6:	f025 0503 	bic.w	r5, r5, #3
 800befa:	3508      	adds	r5, #8
 800befc:	2d0c      	cmp	r5, #12
 800befe:	bf38      	it	cc
 800bf00:	250c      	movcc	r5, #12
 800bf02:	4629      	mov	r1, r5
 800bf04:	4638      	mov	r0, r7
 800bf06:	f7ff ffa5 	bl	800be54 <sbrk_aligned>
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d02b      	beq.n	800bf66 <_malloc_r+0xd2>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	442b      	add	r3, r5
 800bf12:	6023      	str	r3, [r4, #0]
 800bf14:	e00e      	b.n	800bf34 <_malloc_r+0xa0>
 800bf16:	6822      	ldr	r2, [r4, #0]
 800bf18:	1b52      	subs	r2, r2, r5
 800bf1a:	d41e      	bmi.n	800bf5a <_malloc_r+0xc6>
 800bf1c:	2a0b      	cmp	r2, #11
 800bf1e:	d916      	bls.n	800bf4e <_malloc_r+0xba>
 800bf20:	1961      	adds	r1, r4, r5
 800bf22:	42a3      	cmp	r3, r4
 800bf24:	6025      	str	r5, [r4, #0]
 800bf26:	bf18      	it	ne
 800bf28:	6059      	strne	r1, [r3, #4]
 800bf2a:	6863      	ldr	r3, [r4, #4]
 800bf2c:	bf08      	it	eq
 800bf2e:	6031      	streq	r1, [r6, #0]
 800bf30:	5162      	str	r2, [r4, r5]
 800bf32:	604b      	str	r3, [r1, #4]
 800bf34:	4638      	mov	r0, r7
 800bf36:	f104 060b 	add.w	r6, r4, #11
 800bf3a:	f000 f865 	bl	800c008 <__malloc_unlock>
 800bf3e:	f026 0607 	bic.w	r6, r6, #7
 800bf42:	1d23      	adds	r3, r4, #4
 800bf44:	1af2      	subs	r2, r6, r3
 800bf46:	d0b6      	beq.n	800beb6 <_malloc_r+0x22>
 800bf48:	1b9b      	subs	r3, r3, r6
 800bf4a:	50a3      	str	r3, [r4, r2]
 800bf4c:	e7b3      	b.n	800beb6 <_malloc_r+0x22>
 800bf4e:	6862      	ldr	r2, [r4, #4]
 800bf50:	42a3      	cmp	r3, r4
 800bf52:	bf0c      	ite	eq
 800bf54:	6032      	streq	r2, [r6, #0]
 800bf56:	605a      	strne	r2, [r3, #4]
 800bf58:	e7ec      	b.n	800bf34 <_malloc_r+0xa0>
 800bf5a:	4623      	mov	r3, r4
 800bf5c:	6864      	ldr	r4, [r4, #4]
 800bf5e:	e7b2      	b.n	800bec6 <_malloc_r+0x32>
 800bf60:	4634      	mov	r4, r6
 800bf62:	6876      	ldr	r6, [r6, #4]
 800bf64:	e7b9      	b.n	800beda <_malloc_r+0x46>
 800bf66:	230c      	movs	r3, #12
 800bf68:	603b      	str	r3, [r7, #0]
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	f000 f84c 	bl	800c008 <__malloc_unlock>
 800bf70:	e7a1      	b.n	800beb6 <_malloc_r+0x22>
 800bf72:	6025      	str	r5, [r4, #0]
 800bf74:	e7de      	b.n	800bf34 <_malloc_r+0xa0>
 800bf76:	bf00      	nop
 800bf78:	200039cc 	.word	0x200039cc

0800bf7c <_realloc_r>:
 800bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf80:	4680      	mov	r8, r0
 800bf82:	4614      	mov	r4, r2
 800bf84:	460e      	mov	r6, r1
 800bf86:	b921      	cbnz	r1, 800bf92 <_realloc_r+0x16>
 800bf88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	f7ff bf81 	b.w	800be94 <_malloc_r>
 800bf92:	b92a      	cbnz	r2, 800bfa0 <_realloc_r+0x24>
 800bf94:	f7ff ff12 	bl	800bdbc <_free_r>
 800bf98:	4625      	mov	r5, r4
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa0:	f000 f838 	bl	800c014 <_malloc_usable_size_r>
 800bfa4:	4284      	cmp	r4, r0
 800bfa6:	4607      	mov	r7, r0
 800bfa8:	d802      	bhi.n	800bfb0 <_realloc_r+0x34>
 800bfaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfae:	d812      	bhi.n	800bfd6 <_realloc_r+0x5a>
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	f7ff ff6e 	bl	800be94 <_malloc_r>
 800bfb8:	4605      	mov	r5, r0
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d0ed      	beq.n	800bf9a <_realloc_r+0x1e>
 800bfbe:	42bc      	cmp	r4, r7
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	bf28      	it	cs
 800bfc6:	463a      	movcs	r2, r7
 800bfc8:	f7fe fefa 	bl	800adc0 <memcpy>
 800bfcc:	4631      	mov	r1, r6
 800bfce:	4640      	mov	r0, r8
 800bfd0:	f7ff fef4 	bl	800bdbc <_free_r>
 800bfd4:	e7e1      	b.n	800bf9a <_realloc_r+0x1e>
 800bfd6:	4635      	mov	r5, r6
 800bfd8:	e7df      	b.n	800bf9a <_realloc_r+0x1e>
	...

0800bfdc <_sbrk_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d06      	ldr	r5, [pc, #24]	; (800bff8 <_sbrk_r+0x1c>)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	602b      	str	r3, [r5, #0]
 800bfe8:	f7f6 fcdc 	bl	80029a4 <_sbrk>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d102      	bne.n	800bff6 <_sbrk_r+0x1a>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	b103      	cbz	r3, 800bff6 <_sbrk_r+0x1a>
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	200039c4 	.word	0x200039c4

0800bffc <__malloc_lock>:
 800bffc:	4801      	ldr	r0, [pc, #4]	; (800c004 <__malloc_lock+0x8>)
 800bffe:	f7ff bec1 	b.w	800bd84 <__retarget_lock_acquire_recursive>
 800c002:	bf00      	nop
 800c004:	200039c8 	.word	0x200039c8

0800c008 <__malloc_unlock>:
 800c008:	4801      	ldr	r0, [pc, #4]	; (800c010 <__malloc_unlock+0x8>)
 800c00a:	f7ff bebc 	b.w	800bd86 <__retarget_lock_release_recursive>
 800c00e:	bf00      	nop
 800c010:	200039c8 	.word	0x200039c8

0800c014 <_malloc_usable_size_r>:
 800c014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c018:	1f18      	subs	r0, r3, #4
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	bfbc      	itt	lt
 800c01e:	580b      	ldrlt	r3, [r1, r0]
 800c020:	18c0      	addlt	r0, r0, r3
 800c022:	4770      	bx	lr

0800c024 <pow>:
 800c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c026:	ed2d 8b02 	vpush	{d8}
 800c02a:	eeb0 8a40 	vmov.f32	s16, s0
 800c02e:	eef0 8a60 	vmov.f32	s17, s1
 800c032:	ec55 4b11 	vmov	r4, r5, d1
 800c036:	f000 f893 	bl	800c160 <__ieee754_pow>
 800c03a:	4622      	mov	r2, r4
 800c03c:	462b      	mov	r3, r5
 800c03e:	4620      	mov	r0, r4
 800c040:	4629      	mov	r1, r5
 800c042:	ec57 6b10 	vmov	r6, r7, d0
 800c046:	f7f4 fd79 	bl	8000b3c <__aeabi_dcmpun>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d13b      	bne.n	800c0c6 <pow+0xa2>
 800c04e:	ec51 0b18 	vmov	r0, r1, d8
 800c052:	2200      	movs	r2, #0
 800c054:	2300      	movs	r3, #0
 800c056:	f7f4 fd3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c05a:	b1b8      	cbz	r0, 800c08c <pow+0x68>
 800c05c:	2200      	movs	r2, #0
 800c05e:	2300      	movs	r3, #0
 800c060:	4620      	mov	r0, r4
 800c062:	4629      	mov	r1, r5
 800c064:	f7f4 fd38 	bl	8000ad8 <__aeabi_dcmpeq>
 800c068:	2800      	cmp	r0, #0
 800c06a:	d146      	bne.n	800c0fa <pow+0xd6>
 800c06c:	ec45 4b10 	vmov	d0, r4, r5
 800c070:	f000 fe8f 	bl	800cd92 <finite>
 800c074:	b338      	cbz	r0, 800c0c6 <pow+0xa2>
 800c076:	2200      	movs	r2, #0
 800c078:	2300      	movs	r3, #0
 800c07a:	4620      	mov	r0, r4
 800c07c:	4629      	mov	r1, r5
 800c07e:	f7f4 fd35 	bl	8000aec <__aeabi_dcmplt>
 800c082:	b300      	cbz	r0, 800c0c6 <pow+0xa2>
 800c084:	f7fe fe72 	bl	800ad6c <__errno>
 800c088:	2322      	movs	r3, #34	; 0x22
 800c08a:	e01b      	b.n	800c0c4 <pow+0xa0>
 800c08c:	ec47 6b10 	vmov	d0, r6, r7
 800c090:	f000 fe7f 	bl	800cd92 <finite>
 800c094:	b9e0      	cbnz	r0, 800c0d0 <pow+0xac>
 800c096:	eeb0 0a48 	vmov.f32	s0, s16
 800c09a:	eef0 0a68 	vmov.f32	s1, s17
 800c09e:	f000 fe78 	bl	800cd92 <finite>
 800c0a2:	b1a8      	cbz	r0, 800c0d0 <pow+0xac>
 800c0a4:	ec45 4b10 	vmov	d0, r4, r5
 800c0a8:	f000 fe73 	bl	800cd92 <finite>
 800c0ac:	b180      	cbz	r0, 800c0d0 <pow+0xac>
 800c0ae:	4632      	mov	r2, r6
 800c0b0:	463b      	mov	r3, r7
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	4639      	mov	r1, r7
 800c0b6:	f7f4 fd41 	bl	8000b3c <__aeabi_dcmpun>
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d0e2      	beq.n	800c084 <pow+0x60>
 800c0be:	f7fe fe55 	bl	800ad6c <__errno>
 800c0c2:	2321      	movs	r3, #33	; 0x21
 800c0c4:	6003      	str	r3, [r0, #0]
 800c0c6:	ecbd 8b02 	vpop	{d8}
 800c0ca:	ec47 6b10 	vmov	d0, r6, r7
 800c0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	f7f4 fcfe 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d0f2      	beq.n	800c0c6 <pow+0xa2>
 800c0e0:	eeb0 0a48 	vmov.f32	s0, s16
 800c0e4:	eef0 0a68 	vmov.f32	s1, s17
 800c0e8:	f000 fe53 	bl	800cd92 <finite>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d0ea      	beq.n	800c0c6 <pow+0xa2>
 800c0f0:	ec45 4b10 	vmov	d0, r4, r5
 800c0f4:	f000 fe4d 	bl	800cd92 <finite>
 800c0f8:	e7c3      	b.n	800c082 <pow+0x5e>
 800c0fa:	4f01      	ldr	r7, [pc, #4]	; (800c100 <pow+0xdc>)
 800c0fc:	2600      	movs	r6, #0
 800c0fe:	e7e2      	b.n	800c0c6 <pow+0xa2>
 800c100:	3ff00000 	.word	0x3ff00000

0800c104 <sqrt>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	ed2d 8b02 	vpush	{d8}
 800c10a:	ec55 4b10 	vmov	r4, r5, d0
 800c10e:	f000 fd55 	bl	800cbbc <__ieee754_sqrt>
 800c112:	4622      	mov	r2, r4
 800c114:	462b      	mov	r3, r5
 800c116:	4620      	mov	r0, r4
 800c118:	4629      	mov	r1, r5
 800c11a:	eeb0 8a40 	vmov.f32	s16, s0
 800c11e:	eef0 8a60 	vmov.f32	s17, s1
 800c122:	f7f4 fd0b 	bl	8000b3c <__aeabi_dcmpun>
 800c126:	b990      	cbnz	r0, 800c14e <sqrt+0x4a>
 800c128:	2200      	movs	r2, #0
 800c12a:	2300      	movs	r3, #0
 800c12c:	4620      	mov	r0, r4
 800c12e:	4629      	mov	r1, r5
 800c130:	f7f4 fcdc 	bl	8000aec <__aeabi_dcmplt>
 800c134:	b158      	cbz	r0, 800c14e <sqrt+0x4a>
 800c136:	f7fe fe19 	bl	800ad6c <__errno>
 800c13a:	2321      	movs	r3, #33	; 0x21
 800c13c:	6003      	str	r3, [r0, #0]
 800c13e:	2200      	movs	r2, #0
 800c140:	2300      	movs	r3, #0
 800c142:	4610      	mov	r0, r2
 800c144:	4619      	mov	r1, r3
 800c146:	f7f4 fb89 	bl	800085c <__aeabi_ddiv>
 800c14a:	ec41 0b18 	vmov	d8, r0, r1
 800c14e:	eeb0 0a48 	vmov.f32	s0, s16
 800c152:	eef0 0a68 	vmov.f32	s1, s17
 800c156:	ecbd 8b02 	vpop	{d8}
 800c15a:	bd38      	pop	{r3, r4, r5, pc}
 800c15c:	0000      	movs	r0, r0
	...

0800c160 <__ieee754_pow>:
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	ed2d 8b06 	vpush	{d8-d10}
 800c168:	b089      	sub	sp, #36	; 0x24
 800c16a:	ed8d 1b00 	vstr	d1, [sp]
 800c16e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c172:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c176:	ea58 0102 	orrs.w	r1, r8, r2
 800c17a:	ec57 6b10 	vmov	r6, r7, d0
 800c17e:	d115      	bne.n	800c1ac <__ieee754_pow+0x4c>
 800c180:	19b3      	adds	r3, r6, r6
 800c182:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c186:	4152      	adcs	r2, r2
 800c188:	4299      	cmp	r1, r3
 800c18a:	4b89      	ldr	r3, [pc, #548]	; (800c3b0 <__ieee754_pow+0x250>)
 800c18c:	4193      	sbcs	r3, r2
 800c18e:	f080 84d2 	bcs.w	800cb36 <__ieee754_pow+0x9d6>
 800c192:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c196:	4630      	mov	r0, r6
 800c198:	4639      	mov	r1, r7
 800c19a:	f7f4 f87f 	bl	800029c <__adddf3>
 800c19e:	ec41 0b10 	vmov	d0, r0, r1
 800c1a2:	b009      	add	sp, #36	; 0x24
 800c1a4:	ecbd 8b06 	vpop	{d8-d10}
 800c1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ac:	4b81      	ldr	r3, [pc, #516]	; (800c3b4 <__ieee754_pow+0x254>)
 800c1ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c1b2:	429c      	cmp	r4, r3
 800c1b4:	ee10 aa10 	vmov	sl, s0
 800c1b8:	463d      	mov	r5, r7
 800c1ba:	dc06      	bgt.n	800c1ca <__ieee754_pow+0x6a>
 800c1bc:	d101      	bne.n	800c1c2 <__ieee754_pow+0x62>
 800c1be:	2e00      	cmp	r6, #0
 800c1c0:	d1e7      	bne.n	800c192 <__ieee754_pow+0x32>
 800c1c2:	4598      	cmp	r8, r3
 800c1c4:	dc01      	bgt.n	800c1ca <__ieee754_pow+0x6a>
 800c1c6:	d10f      	bne.n	800c1e8 <__ieee754_pow+0x88>
 800c1c8:	b172      	cbz	r2, 800c1e8 <__ieee754_pow+0x88>
 800c1ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c1ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c1d2:	ea55 050a 	orrs.w	r5, r5, sl
 800c1d6:	d1dc      	bne.n	800c192 <__ieee754_pow+0x32>
 800c1d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1dc:	18db      	adds	r3, r3, r3
 800c1de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c1e2:	4152      	adcs	r2, r2
 800c1e4:	429d      	cmp	r5, r3
 800c1e6:	e7d0      	b.n	800c18a <__ieee754_pow+0x2a>
 800c1e8:	2d00      	cmp	r5, #0
 800c1ea:	da3b      	bge.n	800c264 <__ieee754_pow+0x104>
 800c1ec:	4b72      	ldr	r3, [pc, #456]	; (800c3b8 <__ieee754_pow+0x258>)
 800c1ee:	4598      	cmp	r8, r3
 800c1f0:	dc51      	bgt.n	800c296 <__ieee754_pow+0x136>
 800c1f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c1f6:	4598      	cmp	r8, r3
 800c1f8:	f340 84ac 	ble.w	800cb54 <__ieee754_pow+0x9f4>
 800c1fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c200:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c204:	2b14      	cmp	r3, #20
 800c206:	dd0f      	ble.n	800c228 <__ieee754_pow+0xc8>
 800c208:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c20c:	fa22 f103 	lsr.w	r1, r2, r3
 800c210:	fa01 f303 	lsl.w	r3, r1, r3
 800c214:	4293      	cmp	r3, r2
 800c216:	f040 849d 	bne.w	800cb54 <__ieee754_pow+0x9f4>
 800c21a:	f001 0101 	and.w	r1, r1, #1
 800c21e:	f1c1 0302 	rsb	r3, r1, #2
 800c222:	9304      	str	r3, [sp, #16]
 800c224:	b182      	cbz	r2, 800c248 <__ieee754_pow+0xe8>
 800c226:	e05f      	b.n	800c2e8 <__ieee754_pow+0x188>
 800c228:	2a00      	cmp	r2, #0
 800c22a:	d15b      	bne.n	800c2e4 <__ieee754_pow+0x184>
 800c22c:	f1c3 0314 	rsb	r3, r3, #20
 800c230:	fa48 f103 	asr.w	r1, r8, r3
 800c234:	fa01 f303 	lsl.w	r3, r1, r3
 800c238:	4543      	cmp	r3, r8
 800c23a:	f040 8488 	bne.w	800cb4e <__ieee754_pow+0x9ee>
 800c23e:	f001 0101 	and.w	r1, r1, #1
 800c242:	f1c1 0302 	rsb	r3, r1, #2
 800c246:	9304      	str	r3, [sp, #16]
 800c248:	4b5c      	ldr	r3, [pc, #368]	; (800c3bc <__ieee754_pow+0x25c>)
 800c24a:	4598      	cmp	r8, r3
 800c24c:	d132      	bne.n	800c2b4 <__ieee754_pow+0x154>
 800c24e:	f1b9 0f00 	cmp.w	r9, #0
 800c252:	f280 8478 	bge.w	800cb46 <__ieee754_pow+0x9e6>
 800c256:	4959      	ldr	r1, [pc, #356]	; (800c3bc <__ieee754_pow+0x25c>)
 800c258:	4632      	mov	r2, r6
 800c25a:	463b      	mov	r3, r7
 800c25c:	2000      	movs	r0, #0
 800c25e:	f7f4 fafd 	bl	800085c <__aeabi_ddiv>
 800c262:	e79c      	b.n	800c19e <__ieee754_pow+0x3e>
 800c264:	2300      	movs	r3, #0
 800c266:	9304      	str	r3, [sp, #16]
 800c268:	2a00      	cmp	r2, #0
 800c26a:	d13d      	bne.n	800c2e8 <__ieee754_pow+0x188>
 800c26c:	4b51      	ldr	r3, [pc, #324]	; (800c3b4 <__ieee754_pow+0x254>)
 800c26e:	4598      	cmp	r8, r3
 800c270:	d1ea      	bne.n	800c248 <__ieee754_pow+0xe8>
 800c272:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c276:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c27a:	ea53 030a 	orrs.w	r3, r3, sl
 800c27e:	f000 845a 	beq.w	800cb36 <__ieee754_pow+0x9d6>
 800c282:	4b4f      	ldr	r3, [pc, #316]	; (800c3c0 <__ieee754_pow+0x260>)
 800c284:	429c      	cmp	r4, r3
 800c286:	dd08      	ble.n	800c29a <__ieee754_pow+0x13a>
 800c288:	f1b9 0f00 	cmp.w	r9, #0
 800c28c:	f2c0 8457 	blt.w	800cb3e <__ieee754_pow+0x9de>
 800c290:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c294:	e783      	b.n	800c19e <__ieee754_pow+0x3e>
 800c296:	2302      	movs	r3, #2
 800c298:	e7e5      	b.n	800c266 <__ieee754_pow+0x106>
 800c29a:	f1b9 0f00 	cmp.w	r9, #0
 800c29e:	f04f 0000 	mov.w	r0, #0
 800c2a2:	f04f 0100 	mov.w	r1, #0
 800c2a6:	f6bf af7a 	bge.w	800c19e <__ieee754_pow+0x3e>
 800c2aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c2ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c2b2:	e774      	b.n	800c19e <__ieee754_pow+0x3e>
 800c2b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c2b8:	d106      	bne.n	800c2c8 <__ieee754_pow+0x168>
 800c2ba:	4632      	mov	r2, r6
 800c2bc:	463b      	mov	r3, r7
 800c2be:	4630      	mov	r0, r6
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	f7f4 f9a1 	bl	8000608 <__aeabi_dmul>
 800c2c6:	e76a      	b.n	800c19e <__ieee754_pow+0x3e>
 800c2c8:	4b3e      	ldr	r3, [pc, #248]	; (800c3c4 <__ieee754_pow+0x264>)
 800c2ca:	4599      	cmp	r9, r3
 800c2cc:	d10c      	bne.n	800c2e8 <__ieee754_pow+0x188>
 800c2ce:	2d00      	cmp	r5, #0
 800c2d0:	db0a      	blt.n	800c2e8 <__ieee754_pow+0x188>
 800c2d2:	ec47 6b10 	vmov	d0, r6, r7
 800c2d6:	b009      	add	sp, #36	; 0x24
 800c2d8:	ecbd 8b06 	vpop	{d8-d10}
 800c2dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e0:	f000 bc6c 	b.w	800cbbc <__ieee754_sqrt>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9304      	str	r3, [sp, #16]
 800c2e8:	ec47 6b10 	vmov	d0, r6, r7
 800c2ec:	f000 fd48 	bl	800cd80 <fabs>
 800c2f0:	ec51 0b10 	vmov	r0, r1, d0
 800c2f4:	f1ba 0f00 	cmp.w	sl, #0
 800c2f8:	d129      	bne.n	800c34e <__ieee754_pow+0x1ee>
 800c2fa:	b124      	cbz	r4, 800c306 <__ieee754_pow+0x1a6>
 800c2fc:	4b2f      	ldr	r3, [pc, #188]	; (800c3bc <__ieee754_pow+0x25c>)
 800c2fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c302:	429a      	cmp	r2, r3
 800c304:	d123      	bne.n	800c34e <__ieee754_pow+0x1ee>
 800c306:	f1b9 0f00 	cmp.w	r9, #0
 800c30a:	da05      	bge.n	800c318 <__ieee754_pow+0x1b8>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	2000      	movs	r0, #0
 800c312:	492a      	ldr	r1, [pc, #168]	; (800c3bc <__ieee754_pow+0x25c>)
 800c314:	f7f4 faa2 	bl	800085c <__aeabi_ddiv>
 800c318:	2d00      	cmp	r5, #0
 800c31a:	f6bf af40 	bge.w	800c19e <__ieee754_pow+0x3e>
 800c31e:	9b04      	ldr	r3, [sp, #16]
 800c320:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c324:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c328:	4323      	orrs	r3, r4
 800c32a:	d108      	bne.n	800c33e <__ieee754_pow+0x1de>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4610      	mov	r0, r2
 800c332:	4619      	mov	r1, r3
 800c334:	f7f3 ffb0 	bl	8000298 <__aeabi_dsub>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	e78f      	b.n	800c25e <__ieee754_pow+0xfe>
 800c33e:	9b04      	ldr	r3, [sp, #16]
 800c340:	2b01      	cmp	r3, #1
 800c342:	f47f af2c 	bne.w	800c19e <__ieee754_pow+0x3e>
 800c346:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c34a:	4619      	mov	r1, r3
 800c34c:	e727      	b.n	800c19e <__ieee754_pow+0x3e>
 800c34e:	0feb      	lsrs	r3, r5, #31
 800c350:	3b01      	subs	r3, #1
 800c352:	9306      	str	r3, [sp, #24]
 800c354:	9a06      	ldr	r2, [sp, #24]
 800c356:	9b04      	ldr	r3, [sp, #16]
 800c358:	4313      	orrs	r3, r2
 800c35a:	d102      	bne.n	800c362 <__ieee754_pow+0x202>
 800c35c:	4632      	mov	r2, r6
 800c35e:	463b      	mov	r3, r7
 800c360:	e7e6      	b.n	800c330 <__ieee754_pow+0x1d0>
 800c362:	4b19      	ldr	r3, [pc, #100]	; (800c3c8 <__ieee754_pow+0x268>)
 800c364:	4598      	cmp	r8, r3
 800c366:	f340 80fb 	ble.w	800c560 <__ieee754_pow+0x400>
 800c36a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c36e:	4598      	cmp	r8, r3
 800c370:	4b13      	ldr	r3, [pc, #76]	; (800c3c0 <__ieee754_pow+0x260>)
 800c372:	dd0c      	ble.n	800c38e <__ieee754_pow+0x22e>
 800c374:	429c      	cmp	r4, r3
 800c376:	dc0f      	bgt.n	800c398 <__ieee754_pow+0x238>
 800c378:	f1b9 0f00 	cmp.w	r9, #0
 800c37c:	da0f      	bge.n	800c39e <__ieee754_pow+0x23e>
 800c37e:	2000      	movs	r0, #0
 800c380:	b009      	add	sp, #36	; 0x24
 800c382:	ecbd 8b06 	vpop	{d8-d10}
 800c386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38a:	f000 bcf0 	b.w	800cd6e <__math_oflow>
 800c38e:	429c      	cmp	r4, r3
 800c390:	dbf2      	blt.n	800c378 <__ieee754_pow+0x218>
 800c392:	4b0a      	ldr	r3, [pc, #40]	; (800c3bc <__ieee754_pow+0x25c>)
 800c394:	429c      	cmp	r4, r3
 800c396:	dd19      	ble.n	800c3cc <__ieee754_pow+0x26c>
 800c398:	f1b9 0f00 	cmp.w	r9, #0
 800c39c:	dcef      	bgt.n	800c37e <__ieee754_pow+0x21e>
 800c39e:	2000      	movs	r0, #0
 800c3a0:	b009      	add	sp, #36	; 0x24
 800c3a2:	ecbd 8b06 	vpop	{d8-d10}
 800c3a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	f000 bcd7 	b.w	800cd5c <__math_uflow>
 800c3ae:	bf00      	nop
 800c3b0:	fff00000 	.word	0xfff00000
 800c3b4:	7ff00000 	.word	0x7ff00000
 800c3b8:	433fffff 	.word	0x433fffff
 800c3bc:	3ff00000 	.word	0x3ff00000
 800c3c0:	3fefffff 	.word	0x3fefffff
 800c3c4:	3fe00000 	.word	0x3fe00000
 800c3c8:	41e00000 	.word	0x41e00000
 800c3cc:	4b60      	ldr	r3, [pc, #384]	; (800c550 <__ieee754_pow+0x3f0>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f7f3 ff62 	bl	8000298 <__aeabi_dsub>
 800c3d4:	a354      	add	r3, pc, #336	; (adr r3, 800c528 <__ieee754_pow+0x3c8>)
 800c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3da:	4604      	mov	r4, r0
 800c3dc:	460d      	mov	r5, r1
 800c3de:	f7f4 f913 	bl	8000608 <__aeabi_dmul>
 800c3e2:	a353      	add	r3, pc, #332	; (adr r3, 800c530 <__ieee754_pow+0x3d0>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	460f      	mov	r7, r1
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	f7f4 f90a 	bl	8000608 <__aeabi_dmul>
 800c3f4:	4b57      	ldr	r3, [pc, #348]	; (800c554 <__ieee754_pow+0x3f4>)
 800c3f6:	4682      	mov	sl, r0
 800c3f8:	468b      	mov	fp, r1
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	4629      	mov	r1, r5
 800c400:	f7f4 f902 	bl	8000608 <__aeabi_dmul>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	a14b      	add	r1, pc, #300	; (adr r1, 800c538 <__ieee754_pow+0x3d8>)
 800c40a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c40e:	f7f3 ff43 	bl	8000298 <__aeabi_dsub>
 800c412:	4622      	mov	r2, r4
 800c414:	462b      	mov	r3, r5
 800c416:	f7f4 f8f7 	bl	8000608 <__aeabi_dmul>
 800c41a:	4602      	mov	r2, r0
 800c41c:	460b      	mov	r3, r1
 800c41e:	2000      	movs	r0, #0
 800c420:	494d      	ldr	r1, [pc, #308]	; (800c558 <__ieee754_pow+0x3f8>)
 800c422:	f7f3 ff39 	bl	8000298 <__aeabi_dsub>
 800c426:	4622      	mov	r2, r4
 800c428:	4680      	mov	r8, r0
 800c42a:	4689      	mov	r9, r1
 800c42c:	462b      	mov	r3, r5
 800c42e:	4620      	mov	r0, r4
 800c430:	4629      	mov	r1, r5
 800c432:	f7f4 f8e9 	bl	8000608 <__aeabi_dmul>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	4640      	mov	r0, r8
 800c43c:	4649      	mov	r1, r9
 800c43e:	f7f4 f8e3 	bl	8000608 <__aeabi_dmul>
 800c442:	a33f      	add	r3, pc, #252	; (adr r3, 800c540 <__ieee754_pow+0x3e0>)
 800c444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c448:	f7f4 f8de 	bl	8000608 <__aeabi_dmul>
 800c44c:	4602      	mov	r2, r0
 800c44e:	460b      	mov	r3, r1
 800c450:	4650      	mov	r0, sl
 800c452:	4659      	mov	r1, fp
 800c454:	f7f3 ff20 	bl	8000298 <__aeabi_dsub>
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	4680      	mov	r8, r0
 800c45e:	4689      	mov	r9, r1
 800c460:	4630      	mov	r0, r6
 800c462:	4639      	mov	r1, r7
 800c464:	f7f3 ff1a 	bl	800029c <__adddf3>
 800c468:	2000      	movs	r0, #0
 800c46a:	4632      	mov	r2, r6
 800c46c:	463b      	mov	r3, r7
 800c46e:	4604      	mov	r4, r0
 800c470:	460d      	mov	r5, r1
 800c472:	f7f3 ff11 	bl	8000298 <__aeabi_dsub>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4640      	mov	r0, r8
 800c47c:	4649      	mov	r1, r9
 800c47e:	f7f3 ff0b 	bl	8000298 <__aeabi_dsub>
 800c482:	9b04      	ldr	r3, [sp, #16]
 800c484:	9a06      	ldr	r2, [sp, #24]
 800c486:	3b01      	subs	r3, #1
 800c488:	4313      	orrs	r3, r2
 800c48a:	4682      	mov	sl, r0
 800c48c:	468b      	mov	fp, r1
 800c48e:	f040 81e7 	bne.w	800c860 <__ieee754_pow+0x700>
 800c492:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c548 <__ieee754_pow+0x3e8>
 800c496:	eeb0 8a47 	vmov.f32	s16, s14
 800c49a:	eef0 8a67 	vmov.f32	s17, s15
 800c49e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c4a2:	2600      	movs	r6, #0
 800c4a4:	4632      	mov	r2, r6
 800c4a6:	463b      	mov	r3, r7
 800c4a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4ac:	f7f3 fef4 	bl	8000298 <__aeabi_dsub>
 800c4b0:	4622      	mov	r2, r4
 800c4b2:	462b      	mov	r3, r5
 800c4b4:	f7f4 f8a8 	bl	8000608 <__aeabi_dmul>
 800c4b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4bc:	4680      	mov	r8, r0
 800c4be:	4689      	mov	r9, r1
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	4659      	mov	r1, fp
 800c4c4:	f7f4 f8a0 	bl	8000608 <__aeabi_dmul>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	f7f3 fee4 	bl	800029c <__adddf3>
 800c4d4:	4632      	mov	r2, r6
 800c4d6:	463b      	mov	r3, r7
 800c4d8:	4680      	mov	r8, r0
 800c4da:	4689      	mov	r9, r1
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f7f4 f892 	bl	8000608 <__aeabi_dmul>
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	f7f3 fed4 	bl	800029c <__adddf3>
 800c4f4:	4b19      	ldr	r3, [pc, #100]	; (800c55c <__ieee754_pow+0x3fc>)
 800c4f6:	4299      	cmp	r1, r3
 800c4f8:	ec45 4b19 	vmov	d9, r4, r5
 800c4fc:	4606      	mov	r6, r0
 800c4fe:	460f      	mov	r7, r1
 800c500:	468b      	mov	fp, r1
 800c502:	f340 82f1 	ble.w	800cae8 <__ieee754_pow+0x988>
 800c506:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c50a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c50e:	4303      	orrs	r3, r0
 800c510:	f000 81e4 	beq.w	800c8dc <__ieee754_pow+0x77c>
 800c514:	ec51 0b18 	vmov	r0, r1, d8
 800c518:	2200      	movs	r2, #0
 800c51a:	2300      	movs	r3, #0
 800c51c:	f7f4 fae6 	bl	8000aec <__aeabi_dcmplt>
 800c520:	3800      	subs	r0, #0
 800c522:	bf18      	it	ne
 800c524:	2001      	movne	r0, #1
 800c526:	e72b      	b.n	800c380 <__ieee754_pow+0x220>
 800c528:	60000000 	.word	0x60000000
 800c52c:	3ff71547 	.word	0x3ff71547
 800c530:	f85ddf44 	.word	0xf85ddf44
 800c534:	3e54ae0b 	.word	0x3e54ae0b
 800c538:	55555555 	.word	0x55555555
 800c53c:	3fd55555 	.word	0x3fd55555
 800c540:	652b82fe 	.word	0x652b82fe
 800c544:	3ff71547 	.word	0x3ff71547
 800c548:	00000000 	.word	0x00000000
 800c54c:	bff00000 	.word	0xbff00000
 800c550:	3ff00000 	.word	0x3ff00000
 800c554:	3fd00000 	.word	0x3fd00000
 800c558:	3fe00000 	.word	0x3fe00000
 800c55c:	408fffff 	.word	0x408fffff
 800c560:	4bd5      	ldr	r3, [pc, #852]	; (800c8b8 <__ieee754_pow+0x758>)
 800c562:	402b      	ands	r3, r5
 800c564:	2200      	movs	r2, #0
 800c566:	b92b      	cbnz	r3, 800c574 <__ieee754_pow+0x414>
 800c568:	4bd4      	ldr	r3, [pc, #848]	; (800c8bc <__ieee754_pow+0x75c>)
 800c56a:	f7f4 f84d 	bl	8000608 <__aeabi_dmul>
 800c56e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c572:	460c      	mov	r4, r1
 800c574:	1523      	asrs	r3, r4, #20
 800c576:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c57a:	4413      	add	r3, r2
 800c57c:	9305      	str	r3, [sp, #20]
 800c57e:	4bd0      	ldr	r3, [pc, #832]	; (800c8c0 <__ieee754_pow+0x760>)
 800c580:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c584:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c588:	429c      	cmp	r4, r3
 800c58a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c58e:	dd08      	ble.n	800c5a2 <__ieee754_pow+0x442>
 800c590:	4bcc      	ldr	r3, [pc, #816]	; (800c8c4 <__ieee754_pow+0x764>)
 800c592:	429c      	cmp	r4, r3
 800c594:	f340 8162 	ble.w	800c85c <__ieee754_pow+0x6fc>
 800c598:	9b05      	ldr	r3, [sp, #20]
 800c59a:	3301      	adds	r3, #1
 800c59c:	9305      	str	r3, [sp, #20]
 800c59e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c5a2:	2400      	movs	r4, #0
 800c5a4:	00e3      	lsls	r3, r4, #3
 800c5a6:	9307      	str	r3, [sp, #28]
 800c5a8:	4bc7      	ldr	r3, [pc, #796]	; (800c8c8 <__ieee754_pow+0x768>)
 800c5aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5ae:	ed93 7b00 	vldr	d7, [r3]
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	ec53 2b17 	vmov	r2, r3, d7
 800c5b8:	eeb0 9a47 	vmov.f32	s18, s14
 800c5bc:	eef0 9a67 	vmov.f32	s19, s15
 800c5c0:	4682      	mov	sl, r0
 800c5c2:	f7f3 fe69 	bl	8000298 <__aeabi_dsub>
 800c5c6:	4652      	mov	r2, sl
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	460f      	mov	r7, r1
 800c5cc:	462b      	mov	r3, r5
 800c5ce:	ec51 0b19 	vmov	r0, r1, d9
 800c5d2:	f7f3 fe63 	bl	800029c <__adddf3>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	460b      	mov	r3, r1
 800c5da:	2000      	movs	r0, #0
 800c5dc:	49bb      	ldr	r1, [pc, #748]	; (800c8cc <__ieee754_pow+0x76c>)
 800c5de:	f7f4 f93d 	bl	800085c <__aeabi_ddiv>
 800c5e2:	ec41 0b1a 	vmov	d10, r0, r1
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	4639      	mov	r1, r7
 800c5ee:	f7f4 f80b 	bl	8000608 <__aeabi_dmul>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5f8:	9302      	str	r3, [sp, #8]
 800c5fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c5fe:	46ab      	mov	fp, r5
 800c600:	106d      	asrs	r5, r5, #1
 800c602:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c606:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c60a:	ec41 0b18 	vmov	d8, r0, r1
 800c60e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c612:	2200      	movs	r2, #0
 800c614:	4640      	mov	r0, r8
 800c616:	4649      	mov	r1, r9
 800c618:	4614      	mov	r4, r2
 800c61a:	461d      	mov	r5, r3
 800c61c:	f7f3 fff4 	bl	8000608 <__aeabi_dmul>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4630      	mov	r0, r6
 800c626:	4639      	mov	r1, r7
 800c628:	f7f3 fe36 	bl	8000298 <__aeabi_dsub>
 800c62c:	ec53 2b19 	vmov	r2, r3, d9
 800c630:	4606      	mov	r6, r0
 800c632:	460f      	mov	r7, r1
 800c634:	4620      	mov	r0, r4
 800c636:	4629      	mov	r1, r5
 800c638:	f7f3 fe2e 	bl	8000298 <__aeabi_dsub>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4650      	mov	r0, sl
 800c642:	4659      	mov	r1, fp
 800c644:	f7f3 fe28 	bl	8000298 <__aeabi_dsub>
 800c648:	4642      	mov	r2, r8
 800c64a:	464b      	mov	r3, r9
 800c64c:	f7f3 ffdc 	bl	8000608 <__aeabi_dmul>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4630      	mov	r0, r6
 800c656:	4639      	mov	r1, r7
 800c658:	f7f3 fe1e 	bl	8000298 <__aeabi_dsub>
 800c65c:	ec53 2b1a 	vmov	r2, r3, d10
 800c660:	f7f3 ffd2 	bl	8000608 <__aeabi_dmul>
 800c664:	ec53 2b18 	vmov	r2, r3, d8
 800c668:	ec41 0b19 	vmov	d9, r0, r1
 800c66c:	ec51 0b18 	vmov	r0, r1, d8
 800c670:	f7f3 ffca 	bl	8000608 <__aeabi_dmul>
 800c674:	a37c      	add	r3, pc, #496	; (adr r3, 800c868 <__ieee754_pow+0x708>)
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	4604      	mov	r4, r0
 800c67c:	460d      	mov	r5, r1
 800c67e:	f7f3 ffc3 	bl	8000608 <__aeabi_dmul>
 800c682:	a37b      	add	r3, pc, #492	; (adr r3, 800c870 <__ieee754_pow+0x710>)
 800c684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c688:	f7f3 fe08 	bl	800029c <__adddf3>
 800c68c:	4622      	mov	r2, r4
 800c68e:	462b      	mov	r3, r5
 800c690:	f7f3 ffba 	bl	8000608 <__aeabi_dmul>
 800c694:	a378      	add	r3, pc, #480	; (adr r3, 800c878 <__ieee754_pow+0x718>)
 800c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69a:	f7f3 fdff 	bl	800029c <__adddf3>
 800c69e:	4622      	mov	r2, r4
 800c6a0:	462b      	mov	r3, r5
 800c6a2:	f7f3 ffb1 	bl	8000608 <__aeabi_dmul>
 800c6a6:	a376      	add	r3, pc, #472	; (adr r3, 800c880 <__ieee754_pow+0x720>)
 800c6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ac:	f7f3 fdf6 	bl	800029c <__adddf3>
 800c6b0:	4622      	mov	r2, r4
 800c6b2:	462b      	mov	r3, r5
 800c6b4:	f7f3 ffa8 	bl	8000608 <__aeabi_dmul>
 800c6b8:	a373      	add	r3, pc, #460	; (adr r3, 800c888 <__ieee754_pow+0x728>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	f7f3 fded 	bl	800029c <__adddf3>
 800c6c2:	4622      	mov	r2, r4
 800c6c4:	462b      	mov	r3, r5
 800c6c6:	f7f3 ff9f 	bl	8000608 <__aeabi_dmul>
 800c6ca:	a371      	add	r3, pc, #452	; (adr r3, 800c890 <__ieee754_pow+0x730>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f7f3 fde4 	bl	800029c <__adddf3>
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	460f      	mov	r7, r1
 800c6da:	462b      	mov	r3, r5
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f3 ff92 	bl	8000608 <__aeabi_dmul>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	4639      	mov	r1, r7
 800c6ec:	f7f3 ff8c 	bl	8000608 <__aeabi_dmul>
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	460d      	mov	r5, r1
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	ec51 0b18 	vmov	r0, r1, d8
 800c6fc:	f7f3 fdce 	bl	800029c <__adddf3>
 800c700:	ec53 2b19 	vmov	r2, r3, d9
 800c704:	f7f3 ff80 	bl	8000608 <__aeabi_dmul>
 800c708:	4622      	mov	r2, r4
 800c70a:	462b      	mov	r3, r5
 800c70c:	f7f3 fdc6 	bl	800029c <__adddf3>
 800c710:	4642      	mov	r2, r8
 800c712:	4682      	mov	sl, r0
 800c714:	468b      	mov	fp, r1
 800c716:	464b      	mov	r3, r9
 800c718:	4640      	mov	r0, r8
 800c71a:	4649      	mov	r1, r9
 800c71c:	f7f3 ff74 	bl	8000608 <__aeabi_dmul>
 800c720:	4b6b      	ldr	r3, [pc, #428]	; (800c8d0 <__ieee754_pow+0x770>)
 800c722:	2200      	movs	r2, #0
 800c724:	4606      	mov	r6, r0
 800c726:	460f      	mov	r7, r1
 800c728:	f7f3 fdb8 	bl	800029c <__adddf3>
 800c72c:	4652      	mov	r2, sl
 800c72e:	465b      	mov	r3, fp
 800c730:	f7f3 fdb4 	bl	800029c <__adddf3>
 800c734:	2000      	movs	r0, #0
 800c736:	4604      	mov	r4, r0
 800c738:	460d      	mov	r5, r1
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	4640      	mov	r0, r8
 800c740:	4649      	mov	r1, r9
 800c742:	f7f3 ff61 	bl	8000608 <__aeabi_dmul>
 800c746:	4b62      	ldr	r3, [pc, #392]	; (800c8d0 <__ieee754_pow+0x770>)
 800c748:	4680      	mov	r8, r0
 800c74a:	4689      	mov	r9, r1
 800c74c:	2200      	movs	r2, #0
 800c74e:	4620      	mov	r0, r4
 800c750:	4629      	mov	r1, r5
 800c752:	f7f3 fda1 	bl	8000298 <__aeabi_dsub>
 800c756:	4632      	mov	r2, r6
 800c758:	463b      	mov	r3, r7
 800c75a:	f7f3 fd9d 	bl	8000298 <__aeabi_dsub>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4650      	mov	r0, sl
 800c764:	4659      	mov	r1, fp
 800c766:	f7f3 fd97 	bl	8000298 <__aeabi_dsub>
 800c76a:	ec53 2b18 	vmov	r2, r3, d8
 800c76e:	f7f3 ff4b 	bl	8000608 <__aeabi_dmul>
 800c772:	4622      	mov	r2, r4
 800c774:	4606      	mov	r6, r0
 800c776:	460f      	mov	r7, r1
 800c778:	462b      	mov	r3, r5
 800c77a:	ec51 0b19 	vmov	r0, r1, d9
 800c77e:	f7f3 ff43 	bl	8000608 <__aeabi_dmul>
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	4630      	mov	r0, r6
 800c788:	4639      	mov	r1, r7
 800c78a:	f7f3 fd87 	bl	800029c <__adddf3>
 800c78e:	4606      	mov	r6, r0
 800c790:	460f      	mov	r7, r1
 800c792:	4602      	mov	r2, r0
 800c794:	460b      	mov	r3, r1
 800c796:	4640      	mov	r0, r8
 800c798:	4649      	mov	r1, r9
 800c79a:	f7f3 fd7f 	bl	800029c <__adddf3>
 800c79e:	a33e      	add	r3, pc, #248	; (adr r3, 800c898 <__ieee754_pow+0x738>)
 800c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	460d      	mov	r5, r1
 800c7aa:	f7f3 ff2d 	bl	8000608 <__aeabi_dmul>
 800c7ae:	4642      	mov	r2, r8
 800c7b0:	ec41 0b18 	vmov	d8, r0, r1
 800c7b4:	464b      	mov	r3, r9
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	f7f3 fd6d 	bl	8000298 <__aeabi_dsub>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	f7f3 fd67 	bl	8000298 <__aeabi_dsub>
 800c7ca:	a335      	add	r3, pc, #212	; (adr r3, 800c8a0 <__ieee754_pow+0x740>)
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	f7f3 ff1a 	bl	8000608 <__aeabi_dmul>
 800c7d4:	a334      	add	r3, pc, #208	; (adr r3, 800c8a8 <__ieee754_pow+0x748>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	4606      	mov	r6, r0
 800c7dc:	460f      	mov	r7, r1
 800c7de:	4620      	mov	r0, r4
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	f7f3 ff11 	bl	8000608 <__aeabi_dmul>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	4639      	mov	r1, r7
 800c7ee:	f7f3 fd55 	bl	800029c <__adddf3>
 800c7f2:	9a07      	ldr	r2, [sp, #28]
 800c7f4:	4b37      	ldr	r3, [pc, #220]	; (800c8d4 <__ieee754_pow+0x774>)
 800c7f6:	4413      	add	r3, r2
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f7f3 fd4e 	bl	800029c <__adddf3>
 800c800:	4682      	mov	sl, r0
 800c802:	9805      	ldr	r0, [sp, #20]
 800c804:	468b      	mov	fp, r1
 800c806:	f7f3 fe95 	bl	8000534 <__aeabi_i2d>
 800c80a:	9a07      	ldr	r2, [sp, #28]
 800c80c:	4b32      	ldr	r3, [pc, #200]	; (800c8d8 <__ieee754_pow+0x778>)
 800c80e:	4413      	add	r3, r2
 800c810:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c814:	4606      	mov	r6, r0
 800c816:	460f      	mov	r7, r1
 800c818:	4652      	mov	r2, sl
 800c81a:	465b      	mov	r3, fp
 800c81c:	ec51 0b18 	vmov	r0, r1, d8
 800c820:	f7f3 fd3c 	bl	800029c <__adddf3>
 800c824:	4642      	mov	r2, r8
 800c826:	464b      	mov	r3, r9
 800c828:	f7f3 fd38 	bl	800029c <__adddf3>
 800c82c:	4632      	mov	r2, r6
 800c82e:	463b      	mov	r3, r7
 800c830:	f7f3 fd34 	bl	800029c <__adddf3>
 800c834:	2000      	movs	r0, #0
 800c836:	4632      	mov	r2, r6
 800c838:	463b      	mov	r3, r7
 800c83a:	4604      	mov	r4, r0
 800c83c:	460d      	mov	r5, r1
 800c83e:	f7f3 fd2b 	bl	8000298 <__aeabi_dsub>
 800c842:	4642      	mov	r2, r8
 800c844:	464b      	mov	r3, r9
 800c846:	f7f3 fd27 	bl	8000298 <__aeabi_dsub>
 800c84a:	ec53 2b18 	vmov	r2, r3, d8
 800c84e:	f7f3 fd23 	bl	8000298 <__aeabi_dsub>
 800c852:	4602      	mov	r2, r0
 800c854:	460b      	mov	r3, r1
 800c856:	4650      	mov	r0, sl
 800c858:	4659      	mov	r1, fp
 800c85a:	e610      	b.n	800c47e <__ieee754_pow+0x31e>
 800c85c:	2401      	movs	r4, #1
 800c85e:	e6a1      	b.n	800c5a4 <__ieee754_pow+0x444>
 800c860:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c8b0 <__ieee754_pow+0x750>
 800c864:	e617      	b.n	800c496 <__ieee754_pow+0x336>
 800c866:	bf00      	nop
 800c868:	4a454eef 	.word	0x4a454eef
 800c86c:	3fca7e28 	.word	0x3fca7e28
 800c870:	93c9db65 	.word	0x93c9db65
 800c874:	3fcd864a 	.word	0x3fcd864a
 800c878:	a91d4101 	.word	0xa91d4101
 800c87c:	3fd17460 	.word	0x3fd17460
 800c880:	518f264d 	.word	0x518f264d
 800c884:	3fd55555 	.word	0x3fd55555
 800c888:	db6fabff 	.word	0xdb6fabff
 800c88c:	3fdb6db6 	.word	0x3fdb6db6
 800c890:	33333303 	.word	0x33333303
 800c894:	3fe33333 	.word	0x3fe33333
 800c898:	e0000000 	.word	0xe0000000
 800c89c:	3feec709 	.word	0x3feec709
 800c8a0:	dc3a03fd 	.word	0xdc3a03fd
 800c8a4:	3feec709 	.word	0x3feec709
 800c8a8:	145b01f5 	.word	0x145b01f5
 800c8ac:	be3e2fe0 	.word	0xbe3e2fe0
 800c8b0:	00000000 	.word	0x00000000
 800c8b4:	3ff00000 	.word	0x3ff00000
 800c8b8:	7ff00000 	.word	0x7ff00000
 800c8bc:	43400000 	.word	0x43400000
 800c8c0:	0003988e 	.word	0x0003988e
 800c8c4:	000bb679 	.word	0x000bb679
 800c8c8:	0800d258 	.word	0x0800d258
 800c8cc:	3ff00000 	.word	0x3ff00000
 800c8d0:	40080000 	.word	0x40080000
 800c8d4:	0800d278 	.word	0x0800d278
 800c8d8:	0800d268 	.word	0x0800d268
 800c8dc:	a3b5      	add	r3, pc, #724	; (adr r3, 800cbb4 <__ieee754_pow+0xa54>)
 800c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e2:	4640      	mov	r0, r8
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	f7f3 fcd9 	bl	800029c <__adddf3>
 800c8ea:	4622      	mov	r2, r4
 800c8ec:	ec41 0b1a 	vmov	d10, r0, r1
 800c8f0:	462b      	mov	r3, r5
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	f7f3 fccf 	bl	8000298 <__aeabi_dsub>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	ec51 0b1a 	vmov	r0, r1, d10
 800c902:	f7f4 f911 	bl	8000b28 <__aeabi_dcmpgt>
 800c906:	2800      	cmp	r0, #0
 800c908:	f47f ae04 	bne.w	800c514 <__ieee754_pow+0x3b4>
 800c90c:	4aa4      	ldr	r2, [pc, #656]	; (800cba0 <__ieee754_pow+0xa40>)
 800c90e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c912:	4293      	cmp	r3, r2
 800c914:	f340 8108 	ble.w	800cb28 <__ieee754_pow+0x9c8>
 800c918:	151b      	asrs	r3, r3, #20
 800c91a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c91e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c922:	fa4a f303 	asr.w	r3, sl, r3
 800c926:	445b      	add	r3, fp
 800c928:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c92c:	4e9d      	ldr	r6, [pc, #628]	; (800cba4 <__ieee754_pow+0xa44>)
 800c92e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c932:	4116      	asrs	r6, r2
 800c934:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c938:	2000      	movs	r0, #0
 800c93a:	ea23 0106 	bic.w	r1, r3, r6
 800c93e:	f1c2 0214 	rsb	r2, r2, #20
 800c942:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c946:	fa4a fa02 	asr.w	sl, sl, r2
 800c94a:	f1bb 0f00 	cmp.w	fp, #0
 800c94e:	4602      	mov	r2, r0
 800c950:	460b      	mov	r3, r1
 800c952:	4620      	mov	r0, r4
 800c954:	4629      	mov	r1, r5
 800c956:	bfb8      	it	lt
 800c958:	f1ca 0a00 	rsblt	sl, sl, #0
 800c95c:	f7f3 fc9c 	bl	8000298 <__aeabi_dsub>
 800c960:	ec41 0b19 	vmov	d9, r0, r1
 800c964:	4642      	mov	r2, r8
 800c966:	464b      	mov	r3, r9
 800c968:	ec51 0b19 	vmov	r0, r1, d9
 800c96c:	f7f3 fc96 	bl	800029c <__adddf3>
 800c970:	a37b      	add	r3, pc, #492	; (adr r3, 800cb60 <__ieee754_pow+0xa00>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	2000      	movs	r0, #0
 800c978:	4604      	mov	r4, r0
 800c97a:	460d      	mov	r5, r1
 800c97c:	f7f3 fe44 	bl	8000608 <__aeabi_dmul>
 800c980:	ec53 2b19 	vmov	r2, r3, d9
 800c984:	4606      	mov	r6, r0
 800c986:	460f      	mov	r7, r1
 800c988:	4620      	mov	r0, r4
 800c98a:	4629      	mov	r1, r5
 800c98c:	f7f3 fc84 	bl	8000298 <__aeabi_dsub>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4640      	mov	r0, r8
 800c996:	4649      	mov	r1, r9
 800c998:	f7f3 fc7e 	bl	8000298 <__aeabi_dsub>
 800c99c:	a372      	add	r3, pc, #456	; (adr r3, 800cb68 <__ieee754_pow+0xa08>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f3 fe31 	bl	8000608 <__aeabi_dmul>
 800c9a6:	a372      	add	r3, pc, #456	; (adr r3, 800cb70 <__ieee754_pow+0xa10>)
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	4680      	mov	r8, r0
 800c9ae:	4689      	mov	r9, r1
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	f7f3 fe28 	bl	8000608 <__aeabi_dmul>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4640      	mov	r0, r8
 800c9be:	4649      	mov	r1, r9
 800c9c0:	f7f3 fc6c 	bl	800029c <__adddf3>
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	460d      	mov	r5, r1
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	4639      	mov	r1, r7
 800c9d0:	f7f3 fc64 	bl	800029c <__adddf3>
 800c9d4:	4632      	mov	r2, r6
 800c9d6:	463b      	mov	r3, r7
 800c9d8:	4680      	mov	r8, r0
 800c9da:	4689      	mov	r9, r1
 800c9dc:	f7f3 fc5c 	bl	8000298 <__aeabi_dsub>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	f7f3 fc56 	bl	8000298 <__aeabi_dsub>
 800c9ec:	4642      	mov	r2, r8
 800c9ee:	4606      	mov	r6, r0
 800c9f0:	460f      	mov	r7, r1
 800c9f2:	464b      	mov	r3, r9
 800c9f4:	4640      	mov	r0, r8
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	f7f3 fe06 	bl	8000608 <__aeabi_dmul>
 800c9fc:	a35e      	add	r3, pc, #376	; (adr r3, 800cb78 <__ieee754_pow+0xa18>)
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	4604      	mov	r4, r0
 800ca04:	460d      	mov	r5, r1
 800ca06:	f7f3 fdff 	bl	8000608 <__aeabi_dmul>
 800ca0a:	a35d      	add	r3, pc, #372	; (adr r3, 800cb80 <__ieee754_pow+0xa20>)
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	f7f3 fc42 	bl	8000298 <__aeabi_dsub>
 800ca14:	4622      	mov	r2, r4
 800ca16:	462b      	mov	r3, r5
 800ca18:	f7f3 fdf6 	bl	8000608 <__aeabi_dmul>
 800ca1c:	a35a      	add	r3, pc, #360	; (adr r3, 800cb88 <__ieee754_pow+0xa28>)
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	f7f3 fc3b 	bl	800029c <__adddf3>
 800ca26:	4622      	mov	r2, r4
 800ca28:	462b      	mov	r3, r5
 800ca2a:	f7f3 fded 	bl	8000608 <__aeabi_dmul>
 800ca2e:	a358      	add	r3, pc, #352	; (adr r3, 800cb90 <__ieee754_pow+0xa30>)
 800ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca34:	f7f3 fc30 	bl	8000298 <__aeabi_dsub>
 800ca38:	4622      	mov	r2, r4
 800ca3a:	462b      	mov	r3, r5
 800ca3c:	f7f3 fde4 	bl	8000608 <__aeabi_dmul>
 800ca40:	a355      	add	r3, pc, #340	; (adr r3, 800cb98 <__ieee754_pow+0xa38>)
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	f7f3 fc29 	bl	800029c <__adddf3>
 800ca4a:	4622      	mov	r2, r4
 800ca4c:	462b      	mov	r3, r5
 800ca4e:	f7f3 fddb 	bl	8000608 <__aeabi_dmul>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4640      	mov	r0, r8
 800ca58:	4649      	mov	r1, r9
 800ca5a:	f7f3 fc1d 	bl	8000298 <__aeabi_dsub>
 800ca5e:	4604      	mov	r4, r0
 800ca60:	460d      	mov	r5, r1
 800ca62:	4602      	mov	r2, r0
 800ca64:	460b      	mov	r3, r1
 800ca66:	4640      	mov	r0, r8
 800ca68:	4649      	mov	r1, r9
 800ca6a:	f7f3 fdcd 	bl	8000608 <__aeabi_dmul>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	ec41 0b19 	vmov	d9, r0, r1
 800ca74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca78:	4620      	mov	r0, r4
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	f7f3 fc0c 	bl	8000298 <__aeabi_dsub>
 800ca80:	4602      	mov	r2, r0
 800ca82:	460b      	mov	r3, r1
 800ca84:	ec51 0b19 	vmov	r0, r1, d9
 800ca88:	f7f3 fee8 	bl	800085c <__aeabi_ddiv>
 800ca8c:	4632      	mov	r2, r6
 800ca8e:	4604      	mov	r4, r0
 800ca90:	460d      	mov	r5, r1
 800ca92:	463b      	mov	r3, r7
 800ca94:	4640      	mov	r0, r8
 800ca96:	4649      	mov	r1, r9
 800ca98:	f7f3 fdb6 	bl	8000608 <__aeabi_dmul>
 800ca9c:	4632      	mov	r2, r6
 800ca9e:	463b      	mov	r3, r7
 800caa0:	f7f3 fbfc 	bl	800029c <__adddf3>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	4620      	mov	r0, r4
 800caaa:	4629      	mov	r1, r5
 800caac:	f7f3 fbf4 	bl	8000298 <__aeabi_dsub>
 800cab0:	4642      	mov	r2, r8
 800cab2:	464b      	mov	r3, r9
 800cab4:	f7f3 fbf0 	bl	8000298 <__aeabi_dsub>
 800cab8:	460b      	mov	r3, r1
 800caba:	4602      	mov	r2, r0
 800cabc:	493a      	ldr	r1, [pc, #232]	; (800cba8 <__ieee754_pow+0xa48>)
 800cabe:	2000      	movs	r0, #0
 800cac0:	f7f3 fbea 	bl	8000298 <__aeabi_dsub>
 800cac4:	ec41 0b10 	vmov	d0, r0, r1
 800cac8:	ee10 3a90 	vmov	r3, s1
 800cacc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cad4:	da2b      	bge.n	800cb2e <__ieee754_pow+0x9ce>
 800cad6:	4650      	mov	r0, sl
 800cad8:	f000 f966 	bl	800cda8 <scalbn>
 800cadc:	ec51 0b10 	vmov	r0, r1, d0
 800cae0:	ec53 2b18 	vmov	r2, r3, d8
 800cae4:	f7ff bbed 	b.w	800c2c2 <__ieee754_pow+0x162>
 800cae8:	4b30      	ldr	r3, [pc, #192]	; (800cbac <__ieee754_pow+0xa4c>)
 800caea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800caee:	429e      	cmp	r6, r3
 800caf0:	f77f af0c 	ble.w	800c90c <__ieee754_pow+0x7ac>
 800caf4:	4b2e      	ldr	r3, [pc, #184]	; (800cbb0 <__ieee754_pow+0xa50>)
 800caf6:	440b      	add	r3, r1
 800caf8:	4303      	orrs	r3, r0
 800cafa:	d009      	beq.n	800cb10 <__ieee754_pow+0x9b0>
 800cafc:	ec51 0b18 	vmov	r0, r1, d8
 800cb00:	2200      	movs	r2, #0
 800cb02:	2300      	movs	r3, #0
 800cb04:	f7f3 fff2 	bl	8000aec <__aeabi_dcmplt>
 800cb08:	3800      	subs	r0, #0
 800cb0a:	bf18      	it	ne
 800cb0c:	2001      	movne	r0, #1
 800cb0e:	e447      	b.n	800c3a0 <__ieee754_pow+0x240>
 800cb10:	4622      	mov	r2, r4
 800cb12:	462b      	mov	r3, r5
 800cb14:	f7f3 fbc0 	bl	8000298 <__aeabi_dsub>
 800cb18:	4642      	mov	r2, r8
 800cb1a:	464b      	mov	r3, r9
 800cb1c:	f7f3 fffa 	bl	8000b14 <__aeabi_dcmpge>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	f43f aef3 	beq.w	800c90c <__ieee754_pow+0x7ac>
 800cb26:	e7e9      	b.n	800cafc <__ieee754_pow+0x99c>
 800cb28:	f04f 0a00 	mov.w	sl, #0
 800cb2c:	e71a      	b.n	800c964 <__ieee754_pow+0x804>
 800cb2e:	ec51 0b10 	vmov	r0, r1, d0
 800cb32:	4619      	mov	r1, r3
 800cb34:	e7d4      	b.n	800cae0 <__ieee754_pow+0x980>
 800cb36:	491c      	ldr	r1, [pc, #112]	; (800cba8 <__ieee754_pow+0xa48>)
 800cb38:	2000      	movs	r0, #0
 800cb3a:	f7ff bb30 	b.w	800c19e <__ieee754_pow+0x3e>
 800cb3e:	2000      	movs	r0, #0
 800cb40:	2100      	movs	r1, #0
 800cb42:	f7ff bb2c 	b.w	800c19e <__ieee754_pow+0x3e>
 800cb46:	4630      	mov	r0, r6
 800cb48:	4639      	mov	r1, r7
 800cb4a:	f7ff bb28 	b.w	800c19e <__ieee754_pow+0x3e>
 800cb4e:	9204      	str	r2, [sp, #16]
 800cb50:	f7ff bb7a 	b.w	800c248 <__ieee754_pow+0xe8>
 800cb54:	2300      	movs	r3, #0
 800cb56:	f7ff bb64 	b.w	800c222 <__ieee754_pow+0xc2>
 800cb5a:	bf00      	nop
 800cb5c:	f3af 8000 	nop.w
 800cb60:	00000000 	.word	0x00000000
 800cb64:	3fe62e43 	.word	0x3fe62e43
 800cb68:	fefa39ef 	.word	0xfefa39ef
 800cb6c:	3fe62e42 	.word	0x3fe62e42
 800cb70:	0ca86c39 	.word	0x0ca86c39
 800cb74:	be205c61 	.word	0xbe205c61
 800cb78:	72bea4d0 	.word	0x72bea4d0
 800cb7c:	3e663769 	.word	0x3e663769
 800cb80:	c5d26bf1 	.word	0xc5d26bf1
 800cb84:	3ebbbd41 	.word	0x3ebbbd41
 800cb88:	af25de2c 	.word	0xaf25de2c
 800cb8c:	3f11566a 	.word	0x3f11566a
 800cb90:	16bebd93 	.word	0x16bebd93
 800cb94:	3f66c16c 	.word	0x3f66c16c
 800cb98:	5555553e 	.word	0x5555553e
 800cb9c:	3fc55555 	.word	0x3fc55555
 800cba0:	3fe00000 	.word	0x3fe00000
 800cba4:	000fffff 	.word	0x000fffff
 800cba8:	3ff00000 	.word	0x3ff00000
 800cbac:	4090cbff 	.word	0x4090cbff
 800cbb0:	3f6f3400 	.word	0x3f6f3400
 800cbb4:	652b82fe 	.word	0x652b82fe
 800cbb8:	3c971547 	.word	0x3c971547

0800cbbc <__ieee754_sqrt>:
 800cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc0:	ec55 4b10 	vmov	r4, r5, d0
 800cbc4:	4e55      	ldr	r6, [pc, #340]	; (800cd1c <__ieee754_sqrt+0x160>)
 800cbc6:	43ae      	bics	r6, r5
 800cbc8:	ee10 0a10 	vmov	r0, s0
 800cbcc:	ee10 3a10 	vmov	r3, s0
 800cbd0:	462a      	mov	r2, r5
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	d110      	bne.n	800cbf8 <__ieee754_sqrt+0x3c>
 800cbd6:	ee10 2a10 	vmov	r2, s0
 800cbda:	462b      	mov	r3, r5
 800cbdc:	f7f3 fd14 	bl	8000608 <__aeabi_dmul>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	f7f3 fb58 	bl	800029c <__adddf3>
 800cbec:	4604      	mov	r4, r0
 800cbee:	460d      	mov	r5, r1
 800cbf0:	ec45 4b10 	vmov	d0, r4, r5
 800cbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbf8:	2d00      	cmp	r5, #0
 800cbfa:	dc10      	bgt.n	800cc1e <__ieee754_sqrt+0x62>
 800cbfc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cc00:	4330      	orrs	r0, r6
 800cc02:	d0f5      	beq.n	800cbf0 <__ieee754_sqrt+0x34>
 800cc04:	b15d      	cbz	r5, 800cc1e <__ieee754_sqrt+0x62>
 800cc06:	ee10 2a10 	vmov	r2, s0
 800cc0a:	462b      	mov	r3, r5
 800cc0c:	ee10 0a10 	vmov	r0, s0
 800cc10:	f7f3 fb42 	bl	8000298 <__aeabi_dsub>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	f7f3 fe20 	bl	800085c <__aeabi_ddiv>
 800cc1c:	e7e6      	b.n	800cbec <__ieee754_sqrt+0x30>
 800cc1e:	1512      	asrs	r2, r2, #20
 800cc20:	d074      	beq.n	800cd0c <__ieee754_sqrt+0x150>
 800cc22:	07d4      	lsls	r4, r2, #31
 800cc24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cc28:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cc2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cc30:	bf5e      	ittt	pl
 800cc32:	0fda      	lsrpl	r2, r3, #31
 800cc34:	005b      	lslpl	r3, r3, #1
 800cc36:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cc3a:	2400      	movs	r4, #0
 800cc3c:	0fda      	lsrs	r2, r3, #31
 800cc3e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cc42:	107f      	asrs	r7, r7, #1
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	2516      	movs	r5, #22
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cc4e:	1886      	adds	r6, r0, r2
 800cc50:	428e      	cmp	r6, r1
 800cc52:	bfde      	ittt	le
 800cc54:	1b89      	suble	r1, r1, r6
 800cc56:	18b0      	addle	r0, r6, r2
 800cc58:	18a4      	addle	r4, r4, r2
 800cc5a:	0049      	lsls	r1, r1, #1
 800cc5c:	3d01      	subs	r5, #1
 800cc5e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cc62:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cc66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc6a:	d1f0      	bne.n	800cc4e <__ieee754_sqrt+0x92>
 800cc6c:	462a      	mov	r2, r5
 800cc6e:	f04f 0e20 	mov.w	lr, #32
 800cc72:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cc76:	4281      	cmp	r1, r0
 800cc78:	eb06 0c05 	add.w	ip, r6, r5
 800cc7c:	dc02      	bgt.n	800cc84 <__ieee754_sqrt+0xc8>
 800cc7e:	d113      	bne.n	800cca8 <__ieee754_sqrt+0xec>
 800cc80:	459c      	cmp	ip, r3
 800cc82:	d811      	bhi.n	800cca8 <__ieee754_sqrt+0xec>
 800cc84:	f1bc 0f00 	cmp.w	ip, #0
 800cc88:	eb0c 0506 	add.w	r5, ip, r6
 800cc8c:	da43      	bge.n	800cd16 <__ieee754_sqrt+0x15a>
 800cc8e:	2d00      	cmp	r5, #0
 800cc90:	db41      	blt.n	800cd16 <__ieee754_sqrt+0x15a>
 800cc92:	f100 0801 	add.w	r8, r0, #1
 800cc96:	1a09      	subs	r1, r1, r0
 800cc98:	459c      	cmp	ip, r3
 800cc9a:	bf88      	it	hi
 800cc9c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800cca0:	eba3 030c 	sub.w	r3, r3, ip
 800cca4:	4432      	add	r2, r6
 800cca6:	4640      	mov	r0, r8
 800cca8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ccac:	f1be 0e01 	subs.w	lr, lr, #1
 800ccb0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ccb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ccb8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ccbc:	d1db      	bne.n	800cc76 <__ieee754_sqrt+0xba>
 800ccbe:	430b      	orrs	r3, r1
 800ccc0:	d006      	beq.n	800ccd0 <__ieee754_sqrt+0x114>
 800ccc2:	1c50      	adds	r0, r2, #1
 800ccc4:	bf13      	iteet	ne
 800ccc6:	3201      	addne	r2, #1
 800ccc8:	3401      	addeq	r4, #1
 800ccca:	4672      	moveq	r2, lr
 800cccc:	f022 0201 	bicne.w	r2, r2, #1
 800ccd0:	1063      	asrs	r3, r4, #1
 800ccd2:	0852      	lsrs	r2, r2, #1
 800ccd4:	07e1      	lsls	r1, r4, #31
 800ccd6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ccda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ccde:	bf48      	it	mi
 800cce0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cce4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cce8:	4614      	mov	r4, r2
 800ccea:	e781      	b.n	800cbf0 <__ieee754_sqrt+0x34>
 800ccec:	0ad9      	lsrs	r1, r3, #11
 800ccee:	3815      	subs	r0, #21
 800ccf0:	055b      	lsls	r3, r3, #21
 800ccf2:	2900      	cmp	r1, #0
 800ccf4:	d0fa      	beq.n	800ccec <__ieee754_sqrt+0x130>
 800ccf6:	02cd      	lsls	r5, r1, #11
 800ccf8:	d50a      	bpl.n	800cd10 <__ieee754_sqrt+0x154>
 800ccfa:	f1c2 0420 	rsb	r4, r2, #32
 800ccfe:	fa23 f404 	lsr.w	r4, r3, r4
 800cd02:	1e55      	subs	r5, r2, #1
 800cd04:	4093      	lsls	r3, r2
 800cd06:	4321      	orrs	r1, r4
 800cd08:	1b42      	subs	r2, r0, r5
 800cd0a:	e78a      	b.n	800cc22 <__ieee754_sqrt+0x66>
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	e7f0      	b.n	800ccf2 <__ieee754_sqrt+0x136>
 800cd10:	0049      	lsls	r1, r1, #1
 800cd12:	3201      	adds	r2, #1
 800cd14:	e7ef      	b.n	800ccf6 <__ieee754_sqrt+0x13a>
 800cd16:	4680      	mov	r8, r0
 800cd18:	e7bd      	b.n	800cc96 <__ieee754_sqrt+0xda>
 800cd1a:	bf00      	nop
 800cd1c:	7ff00000 	.word	0x7ff00000

0800cd20 <with_errno>:
 800cd20:	b570      	push	{r4, r5, r6, lr}
 800cd22:	4604      	mov	r4, r0
 800cd24:	460d      	mov	r5, r1
 800cd26:	4616      	mov	r6, r2
 800cd28:	f7fe f820 	bl	800ad6c <__errno>
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	6006      	str	r6, [r0, #0]
 800cd30:	4620      	mov	r0, r4
 800cd32:	bd70      	pop	{r4, r5, r6, pc}

0800cd34 <xflow>:
 800cd34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd36:	4614      	mov	r4, r2
 800cd38:	461d      	mov	r5, r3
 800cd3a:	b108      	cbz	r0, 800cd40 <xflow+0xc>
 800cd3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cd40:	e9cd 2300 	strd	r2, r3, [sp]
 800cd44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd48:	4620      	mov	r0, r4
 800cd4a:	4629      	mov	r1, r5
 800cd4c:	f7f3 fc5c 	bl	8000608 <__aeabi_dmul>
 800cd50:	2222      	movs	r2, #34	; 0x22
 800cd52:	b003      	add	sp, #12
 800cd54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd58:	f7ff bfe2 	b.w	800cd20 <with_errno>

0800cd5c <__math_uflow>:
 800cd5c:	b508      	push	{r3, lr}
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cd64:	f7ff ffe6 	bl	800cd34 <xflow>
 800cd68:	ec41 0b10 	vmov	d0, r0, r1
 800cd6c:	bd08      	pop	{r3, pc}

0800cd6e <__math_oflow>:
 800cd6e:	b508      	push	{r3, lr}
 800cd70:	2200      	movs	r2, #0
 800cd72:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cd76:	f7ff ffdd 	bl	800cd34 <xflow>
 800cd7a:	ec41 0b10 	vmov	d0, r0, r1
 800cd7e:	bd08      	pop	{r3, pc}

0800cd80 <fabs>:
 800cd80:	ec51 0b10 	vmov	r0, r1, d0
 800cd84:	ee10 2a10 	vmov	r2, s0
 800cd88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd8c:	ec43 2b10 	vmov	d0, r2, r3
 800cd90:	4770      	bx	lr

0800cd92 <finite>:
 800cd92:	b082      	sub	sp, #8
 800cd94:	ed8d 0b00 	vstr	d0, [sp]
 800cd98:	9801      	ldr	r0, [sp, #4]
 800cd9a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cd9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cda2:	0fc0      	lsrs	r0, r0, #31
 800cda4:	b002      	add	sp, #8
 800cda6:	4770      	bx	lr

0800cda8 <scalbn>:
 800cda8:	b570      	push	{r4, r5, r6, lr}
 800cdaa:	ec55 4b10 	vmov	r4, r5, d0
 800cdae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	462b      	mov	r3, r5
 800cdb6:	b99a      	cbnz	r2, 800cde0 <scalbn+0x38>
 800cdb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cdbc:	4323      	orrs	r3, r4
 800cdbe:	d036      	beq.n	800ce2e <scalbn+0x86>
 800cdc0:	4b39      	ldr	r3, [pc, #228]	; (800cea8 <scalbn+0x100>)
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	ee10 0a10 	vmov	r0, s0
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f7f3 fc1d 	bl	8000608 <__aeabi_dmul>
 800cdce:	4b37      	ldr	r3, [pc, #220]	; (800ceac <scalbn+0x104>)
 800cdd0:	429e      	cmp	r6, r3
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	460d      	mov	r5, r1
 800cdd6:	da10      	bge.n	800cdfa <scalbn+0x52>
 800cdd8:	a32b      	add	r3, pc, #172	; (adr r3, 800ce88 <scalbn+0xe0>)
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	e03a      	b.n	800ce56 <scalbn+0xae>
 800cde0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cde4:	428a      	cmp	r2, r1
 800cde6:	d10c      	bne.n	800ce02 <scalbn+0x5a>
 800cde8:	ee10 2a10 	vmov	r2, s0
 800cdec:	4620      	mov	r0, r4
 800cdee:	4629      	mov	r1, r5
 800cdf0:	f7f3 fa54 	bl	800029c <__adddf3>
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	460d      	mov	r5, r1
 800cdf8:	e019      	b.n	800ce2e <scalbn+0x86>
 800cdfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cdfe:	460b      	mov	r3, r1
 800ce00:	3a36      	subs	r2, #54	; 0x36
 800ce02:	4432      	add	r2, r6
 800ce04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce08:	428a      	cmp	r2, r1
 800ce0a:	dd08      	ble.n	800ce1e <scalbn+0x76>
 800ce0c:	2d00      	cmp	r5, #0
 800ce0e:	a120      	add	r1, pc, #128	; (adr r1, 800ce90 <scalbn+0xe8>)
 800ce10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce14:	da1c      	bge.n	800ce50 <scalbn+0xa8>
 800ce16:	a120      	add	r1, pc, #128	; (adr r1, 800ce98 <scalbn+0xf0>)
 800ce18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce1c:	e018      	b.n	800ce50 <scalbn+0xa8>
 800ce1e:	2a00      	cmp	r2, #0
 800ce20:	dd08      	ble.n	800ce34 <scalbn+0x8c>
 800ce22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce2e:	ec45 4b10 	vmov	d0, r4, r5
 800ce32:	bd70      	pop	{r4, r5, r6, pc}
 800ce34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ce38:	da19      	bge.n	800ce6e <scalbn+0xc6>
 800ce3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ce3e:	429e      	cmp	r6, r3
 800ce40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ce44:	dd0a      	ble.n	800ce5c <scalbn+0xb4>
 800ce46:	a112      	add	r1, pc, #72	; (adr r1, 800ce90 <scalbn+0xe8>)
 800ce48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1e2      	bne.n	800ce16 <scalbn+0x6e>
 800ce50:	a30f      	add	r3, pc, #60	; (adr r3, 800ce90 <scalbn+0xe8>)
 800ce52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce56:	f7f3 fbd7 	bl	8000608 <__aeabi_dmul>
 800ce5a:	e7cb      	b.n	800cdf4 <scalbn+0x4c>
 800ce5c:	a10a      	add	r1, pc, #40	; (adr r1, 800ce88 <scalbn+0xe0>)
 800ce5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d0b8      	beq.n	800cdd8 <scalbn+0x30>
 800ce66:	a10e      	add	r1, pc, #56	; (adr r1, 800cea0 <scalbn+0xf8>)
 800ce68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce6c:	e7b4      	b.n	800cdd8 <scalbn+0x30>
 800ce6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce72:	3236      	adds	r2, #54	; 0x36
 800ce74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	4b0c      	ldr	r3, [pc, #48]	; (800ceb0 <scalbn+0x108>)
 800ce80:	2200      	movs	r2, #0
 800ce82:	e7e8      	b.n	800ce56 <scalbn+0xae>
 800ce84:	f3af 8000 	nop.w
 800ce88:	c2f8f359 	.word	0xc2f8f359
 800ce8c:	01a56e1f 	.word	0x01a56e1f
 800ce90:	8800759c 	.word	0x8800759c
 800ce94:	7e37e43c 	.word	0x7e37e43c
 800ce98:	8800759c 	.word	0x8800759c
 800ce9c:	fe37e43c 	.word	0xfe37e43c
 800cea0:	c2f8f359 	.word	0xc2f8f359
 800cea4:	81a56e1f 	.word	0x81a56e1f
 800cea8:	43500000 	.word	0x43500000
 800ceac:	ffff3cb0 	.word	0xffff3cb0
 800ceb0:	3c900000 	.word	0x3c900000

0800ceb4 <_init>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	bf00      	nop
 800ceb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceba:	bc08      	pop	{r3}
 800cebc:	469e      	mov	lr, r3
 800cebe:	4770      	bx	lr

0800cec0 <_fini>:
 800cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec2:	bf00      	nop
 800cec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cec6:	bc08      	pop	{r3}
 800cec8:	469e      	mov	lr, r3
 800ceca:	4770      	bx	lr
