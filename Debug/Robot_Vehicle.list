
Robot_Vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e32c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800e4d0  0800e4d0  0001e4d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8c0  0800e8c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8c0  0800e8c0  0001e8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8c8  0800e8c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8c8  0800e8c8  0001e8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8cc  0800e8cc  0001e8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800e8d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a6c  20000074  0800e944  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ae0  0800e944  00023ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c956  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c57  00000000  00000000  0003c9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00040658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00041ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abfd  00000000  00000000  00043618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d46e  00000000  00000000  0005e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6875  00000000  00000000  0007b683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121ef8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007524  00000000  00000000  00121f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e4b4 	.word	0x0800e4b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800e4b4 	.word	0x0800e4b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <vApplicationGetIdleTaskMemory+0x30>)
 8000f12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000090 	.word	0x20000090
 8000f2c:	200000ec 	.word	0x200000ec

08000f30 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <vApplicationGetTimerTaskMemory+0x2c>)
 8000f40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <vApplicationGetTimerTaskMemory+0x30>)
 8000f46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200002ec 	.word	0x200002ec
 8000f60:	20000348 	.word	0x20000348

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	b0c2      	sub	sp, #264	; 0x108
 8000f68:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	buffer.x = 50;
 8000f6a:	4bae      	ldr	r3, [pc, #696]	; (8001224 <main+0x2c0>)
 8000f6c:	2232      	movs	r2, #50	; 0x32
 8000f6e:	61da      	str	r2, [r3, #28]
    buffer.y = 50;
 8000f70:	4bac      	ldr	r3, [pc, #688]	; (8001224 <main+0x2c0>)
 8000f72:	2232      	movs	r2, #50	; 0x32
 8000f74:	621a      	str	r2, [r3, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f76:	f002 f88d 	bl	8003094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7a:	f000 f999 	bl	80012b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f000 fc77 	bl	8001870 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f82:	f000 fc0f 	bl	80017a4 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000f86:	f000 fb77 	bl	8001678 <MX_TIM10_Init>
  MX_DMA_Init();
 8000f8a:	f000 fc3b 	bl	8001804 <MX_DMA_Init>
  MX_TIM11_Init();
 8000f8e:	f000 fbbb 	bl	8001708 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000f92:	f000 fa79 	bl	8001488 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f96:	f000 fa49 	bl	800142c <MX_I2C1_Init>
  MX_TIM5_Init();
 8000f9a:	f000 fb0d 	bl	80015b8 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000f9e:	f000 f9f1 	bl	8001384 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_DeInit(&hi2c1);
 8000fa2:	48a1      	ldr	r0, [pc, #644]	; (8001228 <main+0x2c4>)
 8000fa4:	f003 fd6c 	bl	8004a80 <HAL_I2C_DeInit>
  HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	48a0      	ldr	r0, [pc, #640]	; (800122c <main+0x2c8>)
 8000fac:	f005 fcbe 	bl	800692c <HAL_TIM_IC_Start_IT>
  GPIOC->ODR |= GPIO_ODR_OD10;
 8000fb0:	4b9f      	ldr	r3, [pc, #636]	; (8001230 <main+0x2cc>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	4a9e      	ldr	r2, [pc, #632]	; (8001230 <main+0x2cc>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD12;
 8000fbc:	4b9c      	ldr	r3, [pc, #624]	; (8001230 <main+0x2cc>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	4a9b      	ldr	r2, [pc, #620]	; (8001230 <main+0x2cc>)
 8000fc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc6:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD11;
 8000fc8:	4b99      	ldr	r3, [pc, #612]	; (8001230 <main+0x2cc>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	4a98      	ldr	r2, [pc, #608]	; (8001230 <main+0x2cc>)
 8000fce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fd2:	6153      	str	r3, [r2, #20]
  GPIOD->ODR |= GPIO_ODR_OD2;
 8000fd4:	4b97      	ldr	r3, [pc, #604]	; (8001234 <main+0x2d0>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4a96      	ldr	r2, [pc, #600]	; (8001234 <main+0x2d0>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6153      	str	r3, [r2, #20]
  GPIOB->ODR |= GPIO_ODR_OD15;
 8000fe0:	4b95      	ldr	r3, [pc, #596]	; (8001238 <main+0x2d4>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a94      	ldr	r2, [pc, #592]	; (8001238 <main+0x2d4>)
 8000fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fea:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= GPIO_ODR_OD6;
 8000fec:	4b90      	ldr	r3, [pc, #576]	; (8001230 <main+0x2cc>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	4a8f      	ldr	r2, [pc, #572]	; (8001230 <main+0x2cc>)
 8000ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff6:	6153      	str	r3, [r2, #20]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ff8:	4890      	ldr	r0, [pc, #576]	; (800123c <main+0x2d8>)
 8000ffa:	f002 fd61 	bl	8003ac0 <HAL_DMA_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <main+0xa4>
  {
    Error_Handler();
 8001004:	f001 f94b 	bl	800229e <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1,DMA_Handle,hdma_adc1);
 8001008:	4b8d      	ldr	r3, [pc, #564]	; (8001240 <main+0x2dc>)
 800100a:	4a8c      	ldr	r2, [pc, #560]	; (800123c <main+0x2d8>)
 800100c:	639a      	str	r2, [r3, #56]	; 0x38
 800100e:	4b8b      	ldr	r3, [pc, #556]	; (800123c <main+0x2d8>)
 8001010:	4a8b      	ldr	r2, [pc, #556]	; (8001240 <main+0x2dc>)
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&buffer.line_data, 1);
 8001014:	2201      	movs	r2, #1
 8001016:	498b      	ldr	r1, [pc, #556]	; (8001244 <main+0x2e0>)
 8001018:	4889      	ldr	r0, [pc, #548]	; (8001240 <main+0x2dc>)
 800101a:	f002 f8c1 	bl	80031a0 <HAL_ADC_Start_DMA>

  SCB->CCR |= (1<<1); //Bit 1 USERSETMPEND Enables unprivileged software access to the STIR, see Software trigger interrupt register (NVIC_STIR)
 800101e:	4b8a      	ldr	r3, [pc, #552]	; (8001248 <main+0x2e4>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	4a89      	ldr	r2, [pc, #548]	; (8001248 <main+0x2e4>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6153      	str	r3, [r2, #20]

  buffer.xEventGroup1 = xEventGroupCreate();
 800102a:	f008 f86a 	bl	8009102 <xEventGroupCreate>
 800102e:	4603      	mov	r3, r0
 8001030:	4a7c      	ldr	r2, [pc, #496]	; (8001224 <main+0x2c0>)
 8001032:	6593      	str	r3, [r2, #88]	; 0x58

  HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_1, &buffer.encod_dataA, sizeof(buffer.encod_dataA));
 8001034:	2304      	movs	r3, #4
 8001036:	4a85      	ldr	r2, [pc, #532]	; (800124c <main+0x2e8>)
 8001038:	2100      	movs	r1, #0
 800103a:	4885      	ldr	r0, [pc, #532]	; (8001250 <main+0x2ec>)
 800103c:	f005 fd90 	bl	8006b60 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_2, &buffer.encod_dataB, sizeof(buffer.encod_dataB));
 8001040:	2304      	movs	r3, #4
 8001042:	4a84      	ldr	r2, [pc, #528]	; (8001254 <main+0x2f0>)
 8001044:	2104      	movs	r1, #4
 8001046:	4882      	ldr	r0, [pc, #520]	; (8001250 <main+0x2ec>)
 8001048:	f005 fd8a 	bl	8006b60 <HAL_TIM_IC_Start_DMA>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  buffer.xTimer1_ultrs = xTimerCreate("Timer ultrs trigger", pdMS_TO_TICKS( 40 ), pdTRUE, ( void * ) 0, vCallbackFunctionTimer1);
 800104c:	4b82      	ldr	r3, [pc, #520]	; (8001258 <main+0x2f4>)
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	2201      	movs	r2, #1
 8001054:	2128      	movs	r1, #40	; 0x28
 8001056:	4881      	ldr	r0, [pc, #516]	; (800125c <main+0x2f8>)
 8001058:	f00a f9ea 	bl	800b430 <xTimerCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a71      	ldr	r2, [pc, #452]	; (8001224 <main+0x2c0>)
 8001060:	6093      	str	r3, [r2, #8]
  xTimerStart(buffer.xTimer1_ultrs, portMAX_DELAY);
 8001062:	4b70      	ldr	r3, [pc, #448]	; (8001224 <main+0x2c0>)
 8001064:	689c      	ldr	r4, [r3, #8]
 8001066:	f009 fbab 	bl	800a7c0 <xTaskGetTickCount>
 800106a:	4602      	mov	r2, r0
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	2101      	movs	r1, #1
 8001076:	4620      	mov	r0, r4
 8001078:	f00a fa36 	bl	800b4e8 <xTimerGenericCommand>

  buffer.xTimer2_encod = xTimerCreate("Timer encoder", pdMS_TO_TICKS( 10 ), pdTRUE, ( void * ) 0, vCallbackFunctionTimer2);
 800107c:	4b78      	ldr	r3, [pc, #480]	; (8001260 <main+0x2fc>)
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2300      	movs	r3, #0
 8001082:	2201      	movs	r2, #1
 8001084:	210a      	movs	r1, #10
 8001086:	4877      	ldr	r0, [pc, #476]	; (8001264 <main+0x300>)
 8001088:	f00a f9d2 	bl	800b430 <xTimerCreate>
 800108c:	4603      	mov	r3, r0
 800108e:	4a65      	ldr	r2, [pc, #404]	; (8001224 <main+0x2c0>)
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
  xTimerStart(buffer.xTimer2_encod, portMAX_DELAY);
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <main+0x2c0>)
 8001094:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001096:	f009 fb93 	bl	800a7c0 <xTaskGetTickCount>
 800109a:	4602      	mov	r2, r0
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2300      	movs	r3, #0
 80010a4:	2101      	movs	r1, #1
 80010a6:	4620      	mov	r0, r4
 80010a8:	f00a fa1e 	bl	800b4e8 <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  buffer.xQueue1_ultrs = xQueueCreate(10, sizeof(uint16_t));
 80010ac:	2200      	movs	r2, #0
 80010ae:	2102      	movs	r1, #2
 80010b0:	200a      	movs	r0, #10
 80010b2:	f008 fb89 	bl	80097c8 <xQueueGenericCreate>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a5a      	ldr	r2, [pc, #360]	; (8001224 <main+0x2c0>)
 80010ba:	6013      	str	r3, [r2, #0]
  buffer.xQueue2_instr4m = xQueueCreate(40, sizeof(uint8_t));
 80010bc:	2200      	movs	r2, #0
 80010be:	2101      	movs	r1, #1
 80010c0:	2028      	movs	r0, #40	; 0x28
 80010c2:	f008 fb81 	bl	80097c8 <xQueueGenericCreate>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a56      	ldr	r2, [pc, #344]	; (8001224 <main+0x2c0>)
 80010ca:	6193      	str	r3, [r2, #24]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UltrasonicDistance */
  osThreadDef(UltrasonicDistance, ultrasonic_dis, osPriorityNormal, 0, 128);
 80010cc:	4b66      	ldr	r3, [pc, #408]	; (8001268 <main+0x304>)
 80010ce:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80010d2:	461d      	mov	r5, r3
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UltrasonicDistanceHandle = osThreadCreate(osThread(UltrasonicDistance), NULL);
 80010e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 ffab 	bl	8009042 <osThreadCreate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a5f      	ldr	r2, [pc, #380]	; (800126c <main+0x308>)
 80010f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of LineTracking */
  osThreadDef(LineTracking, line_tracking, osPriorityNormal, 0, 128);
 80010f2:	4b5f      	ldr	r3, [pc, #380]	; (8001270 <main+0x30c>)
 80010f4:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80010f8:	461d      	mov	r5, r3
 80010fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LineTrackingHandle = osThreadCreate(osThread(LineTracking), NULL);
 8001106:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f007 ff98 	bl	8009042 <osThreadCreate>
 8001112:	4603      	mov	r3, r0
 8001114:	4a57      	ldr	r2, [pc, #348]	; (8001274 <main+0x310>)
 8001116:	6013      	str	r3, [r2, #0]

  /* definition and creation of LimitSwitch */
  osThreadDef(LimitSwitch, limit_switch, osPriorityNormal, 0, 128);
 8001118:	4b57      	ldr	r3, [pc, #348]	; (8001278 <main+0x314>)
 800111a:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800111e:	461d      	mov	r5, r3
 8001120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001124:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001128:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LimitSwitchHandle = osThreadCreate(osThread(LimitSwitch), NULL);
 800112c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f007 ff85 	bl	8009042 <osThreadCreate>
 8001138:	4603      	mov	r3, r0
 800113a:	4a50      	ldr	r2, [pc, #320]	; (800127c <main+0x318>)
 800113c:	6013      	str	r3, [r2, #0]

  /* definition and creation of InfraredMotion */
  osThreadDef(InfraredMotion, infrared_motion, osPriorityNormal, 0, 128);
 800113e:	4b50      	ldr	r3, [pc, #320]	; (8001280 <main+0x31c>)
 8001140:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001144:	461d      	mov	r5, r3
 8001146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800114e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InfraredMotionHandle = osThreadCreate(osThread(InfraredMotion), NULL);
 8001152:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f007 ff72 	bl	8009042 <osThreadCreate>
 800115e:	4603      	mov	r3, r0
 8001160:	4a48      	ldr	r2, [pc, #288]	; (8001284 <main+0x320>)
 8001162:	6013      	str	r3, [r2, #0]

  /* definition and creation of Accelerometer */
  osThreadDef(Accelerometer, accelerometer, osPriorityNormal, 0, 160);
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <main+0x324>)
 8001166:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800116a:	461d      	mov	r5, r3
 800116c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001170:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001174:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelerometerHandle = osThreadCreate(osThread(Accelerometer), NULL);
 8001178:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f007 ff5f 	bl	8009042 <osThreadCreate>
 8001184:	4603      	mov	r3, r0
 8001186:	4a41      	ldr	r2, [pc, #260]	; (800128c <main+0x328>)
 8001188:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motors */
  osThreadDef(Motors, motors, osPriorityNormal, 0, 400);
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <main+0x32c>)
 800118c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001190:	461d      	mov	r5, r3
 8001192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001196:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800119a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorsHandle = osThreadCreate(osThread(Motors), NULL);
 800119e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 ff4c 	bl	8009042 <osThreadCreate>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a39      	ldr	r2, [pc, #228]	; (8001294 <main+0x330>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of Encoders */
  osThreadDef(Encoders, encoders, osPriorityNormal, 0, 200);
 80011b0:	4b39      	ldr	r3, [pc, #228]	; (8001298 <main+0x334>)
 80011b2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80011b6:	461d      	mov	r5, r3
 80011b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncodersHandle = osThreadCreate(osThread(Encoders), NULL);
 80011c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 ff39 	bl	8009042 <osThreadCreate>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a32      	ldr	r2, [pc, #200]	; (800129c <main+0x338>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_task */
  osThreadDef(UART_task, uart_task, osPriorityNormal, 0, 128);
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <main+0x33c>)
 80011d8:	f107 0420 	add.w	r4, r7, #32
 80011dc:	461d      	mov	r5, r3
 80011de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_taskHandle = osThreadCreate(osThread(UART_task), NULL);
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f007 ff26 	bl	8009042 <osThreadCreate>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a2a      	ldr	r2, [pc, #168]	; (80012a4 <main+0x340>)
 80011fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of PID_regulation */
  osThreadDef(PID_regulation, pid, osPriorityNormal, 0, 200);
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <main+0x344>)
 80011fe:	1d3c      	adds	r4, r7, #4
 8001200:	461d      	mov	r5, r3
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800120a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PID_regulationHandle = osThreadCreate(osThread(PID_regulation), NULL);
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 ff15 	bl	8009042 <osThreadCreate>
 8001218:	4603      	mov	r3, r0
 800121a:	4a24      	ldr	r2, [pc, #144]	; (80012ac <main+0x348>)
 800121c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800121e:	f007 ff09 	bl	8009034 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001222:	e7fe      	b.n	8001222 <main+0x2be>
 8001224:	2000088c 	.word	0x2000088c
 8001228:	200005f0 	.word	0x200005f0
 800122c:	200006d4 	.word	0x200006d4
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40020400 	.word	0x40020400
 800123c:	20000590 	.word	0x20000590
 8001240:	20000548 	.word	0x20000548
 8001244:	200008dc 	.word	0x200008dc
 8001248:	e000ed00 	.word	0xe000ed00
 800124c:	200008b8 	.word	0x200008b8
 8001250:	2000068c 	.word	0x2000068c
 8001254:	200008bc 	.word	0x200008bc
 8001258:	08001a55 	.word	0x08001a55
 800125c:	0800e550 	.word	0x0800e550
 8001260:	08001a85 	.word	0x08001a85
 8001264:	0800e564 	.word	0x0800e564
 8001268:	0800e574 	.word	0x0800e574
 800126c:	20000868 	.word	0x20000868
 8001270:	0800e590 	.word	0x0800e590
 8001274:	2000086c 	.word	0x2000086c
 8001278:	0800e5ac 	.word	0x0800e5ac
 800127c:	20000870 	.word	0x20000870
 8001280:	0800e5c8 	.word	0x0800e5c8
 8001284:	20000874 	.word	0x20000874
 8001288:	0800e5e4 	.word	0x0800e5e4
 800128c:	20000878 	.word	0x20000878
 8001290:	0800e600 	.word	0x0800e600
 8001294:	2000087c 	.word	0x2000087c
 8001298:	0800e61c 	.word	0x0800e61c
 800129c:	20000880 	.word	0x20000880
 80012a0:	0800e638 	.word	0x0800e638
 80012a4:	20000884 	.word	0x20000884
 80012a8:	0800e654 	.word	0x0800e654
 80012ac:	20000888 	.word	0x20000888

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b094      	sub	sp, #80	; 0x50
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	2230      	movs	r2, #48	; 0x30
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f00b f88c 	bl	800c3dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	4b28      	ldr	r3, [pc, #160]	; (800137c <SystemClock_Config+0xcc>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	4a27      	ldr	r2, [pc, #156]	; (800137c <SystemClock_Config+0xcc>)
 80012de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <SystemClock_Config+0xcc>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <SystemClock_Config+0xd0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012fc:	4a20      	ldr	r2, [pc, #128]	; (8001380 <SystemClock_Config+0xd0>)
 80012fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <SystemClock_Config+0xd0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001318:	2310      	movs	r3, #16
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131c:	2302      	movs	r3, #2
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001320:	2300      	movs	r3, #0
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001324:	2308      	movs	r3, #8
 8001326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001328:	2354      	movs	r3, #84	; 0x54
 800132a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800132c:	2302      	movs	r3, #2
 800132e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001330:	2304      	movs	r3, #4
 8001332:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	4618      	mov	r0, r3
 800133a:	f004 fa4d 	bl	80057d8 <HAL_RCC_OscConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001344:	f000 ffab 	bl	800229e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001348:	230f      	movs	r3, #15
 800134a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134c:	2302      	movs	r3, #2
 800134e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2102      	movs	r1, #2
 8001364:	4618      	mov	r0, r3
 8001366:	f004 fcaf 	bl	8005cc8 <HAL_RCC_ClockConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001370:	f000 ff95 	bl	800229e <Error_Handler>
  }
}
 8001374:	bf00      	nop
 8001376:	3750      	adds	r7, #80	; 0x50
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_ADC1_Init+0x9c>)
 8001398:	4a22      	ldr	r2, [pc, #136]	; (8001424 <MX_ADC1_Init+0xa0>)
 800139a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_ADC1_Init+0x9c>)
 800139e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <MX_ADC1_Init+0xa4>)
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e6:	480e      	ldr	r0, [pc, #56]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013e8:	f001 fe96 	bl	8003118 <HAL_ADC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80013f2:	f000 ff54 	bl	800229e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013f6:	230f      	movs	r3, #15
 80013f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_ADC1_Init+0x9c>)
 8001408:	f001 ffd8 	bl	80033bc <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001412:	f000 ff44 	bl	800229e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000548 	.word	0x20000548
 8001424:	40012000 	.word	0x40012000
 8001428:	0f000001 	.word	0x0f000001

0800142c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_I2C1_Init+0x50>)
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <MX_I2C1_Init+0x54>)
 8001434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_I2C1_Init+0x50>)
 8001438:	4a12      	ldr	r2, [pc, #72]	; (8001484 <MX_I2C1_Init+0x58>)
 800143a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_I2C1_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_I2C1_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_I2C1_Init+0x50>)
 800144a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800144e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <MX_I2C1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_I2C1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_I2C1_Init+0x50>)
 800146a:	f003 f9c5 	bl	80047f8 <HAL_I2C_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001474:	f000 ff13 	bl	800229e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200005f0 	.word	0x200005f0
 8001480:	40005400 	.word	0x40005400
 8001484:	000186a0 	.word	0x000186a0

08001488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <MX_TIM3_Init+0x128>)
 80014ba:	4a3e      	ldr	r2, [pc, #248]	; (80015b4 <MX_TIM3_Init+0x12c>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <MX_TIM3_Init+0x128>)
 80014c0:	22a8      	movs	r2, #168	; 0xa8
 80014c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <MX_TIM3_Init+0x128>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80014ca:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <MX_TIM3_Init+0x128>)
 80014cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <MX_TIM3_Init+0x128>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d8:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <MX_TIM3_Init+0x128>)
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014de:	4834      	ldr	r0, [pc, #208]	; (80015b0 <MX_TIM3_Init+0x128>)
 80014e0:	f004 fe04 	bl	80060ec <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014ea:	f000 fed8 	bl	800229e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f8:	4619      	mov	r1, r3
 80014fa:	482d      	ldr	r0, [pc, #180]	; (80015b0 <MX_TIM3_Init+0x128>)
 80014fc:	f005 ff32 	bl	8007364 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001506:	f000 feca 	bl	800229e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800150a:	4829      	ldr	r0, [pc, #164]	; (80015b0 <MX_TIM3_Init+0x128>)
 800150c:	f004 fea0 	bl	8006250 <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001516:	f000 fec2 	bl	800229e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	4619      	mov	r1, r3
 8001528:	4821      	ldr	r0, [pc, #132]	; (80015b0 <MX_TIM3_Init+0x128>)
 800152a:	f006 fcd5 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001534:	f000 feb3 	bl	800229e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001538:	2370      	movs	r3, #112	; 0x70
 800153a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	4818      	ldr	r0, [pc, #96]	; (80015b0 <MX_TIM3_Init+0x128>)
 8001550:	f005 fe46 	bl	80071e0 <HAL_TIM_PWM_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800155a:	f000 fea0 	bl	800229e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2204      	movs	r2, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4812      	ldr	r0, [pc, #72]	; (80015b0 <MX_TIM3_Init+0x128>)
 8001566:	f005 fe3b 	bl	80071e0 <HAL_TIM_PWM_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001570:	f000 fe95 	bl	800229e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2208      	movs	r2, #8
 8001578:	4619      	mov	r1, r3
 800157a:	480d      	ldr	r0, [pc, #52]	; (80015b0 <MX_TIM3_Init+0x128>)
 800157c:	f005 fe30 	bl	80071e0 <HAL_TIM_PWM_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001586:	f000 fe8a 	bl	800229e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	220c      	movs	r2, #12
 800158e:	4619      	mov	r1, r3
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <MX_TIM3_Init+0x128>)
 8001592:	f005 fe25 	bl	80071e0 <HAL_TIM_PWM_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800159c:	f000 fe7f 	bl	800229e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <MX_TIM3_Init+0x128>)
 80015a2:	f001 fb69 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 80015a6:	bf00      	nop
 80015a8:	3738      	adds	r7, #56	; 0x38
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000644 	.word	0x20000644
 80015b4:	40000400 	.word	0x40000400

080015b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <MX_TIM5_Init+0xb8>)
 80015d6:	4a27      	ldr	r2, [pc, #156]	; (8001674 <MX_TIM5_Init+0xbc>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8399;
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <MX_TIM5_Init+0xb8>)
 80015dc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80015e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <MX_TIM5_Init+0xb8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_TIM5_Init+0xb8>)
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295
 80015ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_TIM5_Init+0xb8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_TIM5_Init+0xb8>)
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80015fc:	481c      	ldr	r0, [pc, #112]	; (8001670 <MX_TIM5_Init+0xb8>)
 80015fe:	f005 f945 	bl	800688c <HAL_TIM_IC_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001608:	f000 fe49 	bl	800229e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	4619      	mov	r1, r3
 800161a:	4815      	ldr	r0, [pc, #84]	; (8001670 <MX_TIM5_Init+0xb8>)
 800161c:	f006 fc5c 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001626:	f000 fe3a 	bl	800229e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800162a:	230a      	movs	r3, #10
 800162c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800162e:	2301      	movs	r3, #1
 8001630:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800163a:	463b      	mov	r3, r7
 800163c:	2200      	movs	r2, #0
 800163e:	4619      	mov	r1, r3
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <MX_TIM5_Init+0xb8>)
 8001642:	f005 fd31 	bl	80070a8 <HAL_TIM_IC_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800164c:	f000 fe27 	bl	800229e <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	2204      	movs	r2, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_TIM5_Init+0xb8>)
 8001658:	f005 fd26 	bl	80070a8 <HAL_TIM_IC_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001662:	f000 fe1c 	bl	800229e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000068c 	.word	0x2000068c
 8001674:	40000c00 	.word	0x40000c00

08001678 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800167e:	463b      	mov	r3, r7
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_TIM10_Init+0x88>)
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <MX_TIM10_Init+0x8c>)
 800168e:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 194;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_TIM10_Init+0x88>)
 8001692:	22c2      	movs	r2, #194	; 0xc2
 8001694:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_TIM10_Init+0x88>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_TIM10_Init+0x88>)
 800169e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_TIM10_Init+0x88>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_TIM10_Init+0x88>)
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <MX_TIM10_Init+0x88>)
 80016b2:	f004 fd1b 	bl	80060ec <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 80016bc:	f000 fdef 	bl	800229e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 80016c0:	480f      	ldr	r0, [pc, #60]	; (8001700 <MX_TIM10_Init+0x88>)
 80016c2:	f005 f8e3 	bl	800688c <HAL_TIM_IC_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 80016cc:	f000 fde7 	bl	800229e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80016d0:	230a      	movs	r3, #10
 80016d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016d4:	2301      	movs	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_TIM10_Init+0x88>)
 80016e8:	f005 fcde 	bl	80070a8 <HAL_TIM_IC_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 80016f2:	f000 fdd4 	bl	800229e <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200006d4 	.word	0x200006d4
 8001704:	40014400 	.word	0x40014400

08001708 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	615a      	str	r2, [r3, #20]
 800171e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <MX_TIM11_Init+0x94>)
 8001722:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <MX_TIM11_Init+0x98>)
 8001724:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 31;
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <MX_TIM11_Init+0x94>)
 8001728:	221f      	movs	r2, #31
 800172a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_TIM11_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_TIM11_Init+0x94>)
 8001734:	f242 7210 	movw	r2, #10000	; 0x2710
 8001738:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_TIM11_Init+0x94>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_TIM11_Init+0x94>)
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001746:	4815      	ldr	r0, [pc, #84]	; (800179c <MX_TIM11_Init+0x94>)
 8001748:	f004 fcd0 	bl	80060ec <HAL_TIM_Base_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001752:	f000 fda4 	bl	800229e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001756:	4811      	ldr	r0, [pc, #68]	; (800179c <MX_TIM11_Init+0x94>)
 8001758:	f004 fd7a 	bl	8006250 <HAL_TIM_PWM_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001762:	f000 fd9c 	bl	800229e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001766:	2360      	movs	r3, #96	; 0x60
 8001768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 800176a:	2314      	movs	r3, #20
 800176c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <MX_TIM11_Init+0x94>)
 800177e:	f005 fd2f 	bl	80071e0 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001788:	f000 fd89 	bl	800229e <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800178c:	4803      	ldr	r0, [pc, #12]	; (800179c <MX_TIM11_Init+0x94>)
 800178e:	f001 fa73 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8001792:	bf00      	nop
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000071c 	.word	0x2000071c
 80017a0:	40014800 	.word	0x40014800

080017a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017aa:	4a15      	ldr	r2, [pc, #84]	; (8001800 <MX_USART1_UART_Init+0x5c>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017dc:	f006 fbfe 	bl	8007fdc <HAL_UART_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017e6:	f000 fd5a 	bl	800229e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <MX_USART1_UART_Init+0x5c>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <MX_USART1_UART_Init+0x5c>)
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	60d3      	str	r3, [r2, #12]
  /* USER CODE END USART1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000824 	.word	0x20000824
 8001800:	40011000 	.word	0x40011000

08001804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_DMA_Init+0x68>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a16      	ldr	r2, [pc, #88]	; (800186c <MX_DMA_Init+0x68>)
 8001814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_DMA_Init+0x68>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_DMA_Init+0x68>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <MX_DMA_Init+0x68>)
 8001830:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <MX_DMA_Init+0x68>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2105      	movs	r1, #5
 8001846:	200d      	movs	r0, #13
 8001848:	f002 f910 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800184c:	200d      	movs	r0, #13
 800184e:	f002 f929 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2105      	movs	r1, #5
 8001856:	200f      	movs	r0, #15
 8001858:	f002 f908 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800185c:	200f      	movs	r0, #15
 800185e:	f002 f921 	bl	8003aa4 <HAL_NVIC_EnableIRQ>

}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <MX_GPIO_Init+0x178>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a56      	ldr	r2, [pc, #344]	; (80019e8 <MX_GPIO_Init+0x178>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b54      	ldr	r3, [pc, #336]	; (80019e8 <MX_GPIO_Init+0x178>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <MX_GPIO_Init+0x178>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a4f      	ldr	r2, [pc, #316]	; (80019e8 <MX_GPIO_Init+0x178>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <MX_GPIO_Init+0x178>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <MX_GPIO_Init+0x178>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <MX_GPIO_Init+0x178>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <MX_GPIO_Init+0x178>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <MX_GPIO_Init+0x178>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a41      	ldr	r2, [pc, #260]	; (80019e8 <MX_GPIO_Init+0x178>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <MX_GPIO_Init+0x178>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <MX_GPIO_Init+0x178>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a3a      	ldr	r2, [pc, #232]	; (80019e8 <MX_GPIO_Init+0x178>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <MX_GPIO_Init+0x178>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11
 8001912:	2200      	movs	r2, #0
 8001914:	f649 4140 	movw	r1, #40000	; 0x9c40
 8001918:	4834      	ldr	r0, [pc, #208]	; (80019ec <MX_GPIO_Init+0x17c>)
 800191a:	f002 ff3b 	bl	8004794 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2101      	movs	r1, #1
 8001922:	4833      	ldr	r0, [pc, #204]	; (80019f0 <MX_GPIO_Init+0x180>)
 8001924:	f002 ff36 	bl	8004794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192e:	4831      	ldr	r0, [pc, #196]	; (80019f4 <MX_GPIO_Init+0x184>)
 8001930:	f002 ff30 	bl	8004794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	2104      	movs	r1, #4
 8001938:	482f      	ldr	r0, [pc, #188]	; (80019f8 <MX_GPIO_Init+0x188>)
 800193a:	f002 ff2b 	bl	8004794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC15 PC6 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11
 800193e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001942:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4825      	ldr	r0, [pc, #148]	; (80019ec <MX_GPIO_Init+0x17c>)
 8001958:	f002 fcb4 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800195c:	2301      	movs	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	481f      	ldr	r0, [pc, #124]	; (80019f0 <MX_GPIO_Init+0x180>)
 8001974:	f002 fca6 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001978:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001984:	2302      	movs	r3, #2
 8001986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4819      	ldr	r0, [pc, #100]	; (80019f4 <MX_GPIO_Init+0x184>)
 8001990:	f002 fc98 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4811      	ldr	r0, [pc, #68]	; (80019f4 <MX_GPIO_Init+0x184>)
 80019ae:	f002 fc89 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019b2:	2304      	movs	r3, #4
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	480b      	ldr	r0, [pc, #44]	; (80019f8 <MX_GPIO_Init+0x188>)
 80019ca:	f002 fc7b 	bl	80042c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2105      	movs	r1, #5
 80019d2:	2028      	movs	r0, #40	; 0x28
 80019d4:	f002 f84a 	bl	8003a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019d8:	2028      	movs	r0, #40	; 0x28
 80019da:	f002 f863 	bl	8003aa4 <HAL_NVIC_EnableIRQ>

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40021c00 	.word	0x40021c00
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40020c00 	.word	0x40020c00

080019fc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	if(htim == &htim10 )
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d106      	bne.n	8001a1a <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		xQueueSendToBackFromISR(buffer.xQueue1_ultrs, (void*)(&(TIM10->CCR1)) ,NULL);
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	2300      	movs	r3, #0
 8001a12:	2200      	movs	r2, #0
 8001a14:	4905      	ldr	r1, [pc, #20]	; (8001a2c <HAL_TIM_IC_CaptureCallback+0x30>)
 8001a16:	f008 f82f 	bl	8009a78 <xQueueGenericSendFromISR>
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200006d4 	.word	0x200006d4
 8001a28:	2000088c 	.word	0x2000088c
 8001a2c:	40014434 	.word	0x40014434

08001a30 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d103      	bne.n	8001a48 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
	{
		HAL_TIM_PWM_Stop_IT(&htim11, TIM_CHANNEL_1);
 8001a40:	2100      	movs	r1, #0
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001a44:	f004 fe70 	bl	8006728 <HAL_TIM_PWM_Stop_IT>
	}
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000071c 	.word	0x2000071c

08001a54 <vCallbackFunctionTimer1>:

void vCallbackFunctionTimer1( TimerHandle_t xTimer )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_IT(&htim11, TIM_CHANNEL_1);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4807      	ldr	r0, [pc, #28]	; (8001a7c <vCallbackFunctionTimer1+0x28>)
 8001a60:	f004 fd64 	bl	800652c <HAL_TIM_PWM_Start_IT>
	xTaskNotifyGive(LineTrackingHandle);
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <vCallbackFunctionTimer1+0x2c>)
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	f009 fb7b 	bl	800b168 <xTaskGenericNotify>

}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000071c 	.word	0x2000071c
 8001a80:	2000086c 	.word	0x2000086c

08001a84 <vCallbackFunctionTimer2>:

void vCallbackFunctionTimer2( TimerHandle_t xTimer )
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	xTaskNotifyGive(EncodersHandle);
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <vCallbackFunctionTimer2+0x20>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	2300      	movs	r3, #0
 8001a92:	2202      	movs	r2, #2
 8001a94:	2100      	movs	r1, #0
 8001a96:	f009 fb67 	bl	800b168 <xTaskGenericNotify>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000880 	.word	0x20000880

08001aa8 <vApplicationIdleHook>:

void vApplicationIdleHook(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8001aac:	bf00      	nop
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af04      	add	r7, sp, #16
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) // Freefall/Motion interrupt
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		uint8_t result;
		HAL_I2C_Mem_Read(&hi2c1, (0x1D<<1), FF_MT_SRC, 1, &result, sizeof(uint8_t), 100);
 8001aca:	2364      	movs	r3, #100	; 0x64
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	f107 030f 	add.w	r3, r7, #15
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	2216      	movs	r2, #22
 8001adc:	213a      	movs	r1, #58	; 0x3a
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x48>)
 8001ae0:	f003 f8f8 	bl	8004cd4 <HAL_I2C_Mem_Read>
		__asm__ volatile("NOP");
 8001ae4:	bf00      	nop
	}
	if(GPIO_Pin == GPIO_PIN_14) //Data ready
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aec:	d104      	bne.n	8001af8 <HAL_GPIO_EXTI_Callback+0x40>
	{
		mma8452x_ReadData(&hi2c1, MMA8452X_I2C_ADDRESS, buffer.accelerm_data);
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001af0:	213a      	movs	r1, #58	; 0x3a
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x48>)
 8001af4:	f000 fe51 	bl	800279a <mma8452x_ReadData>
	}
}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200005f0 	.word	0x200005f0
 8001b04:	200008dd 	.word	0x200008dd

08001b08 <UART_RxCallback>:

void UART_RxCallback (UART_HandleTypeDef * huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	xQueueSendToBackFromISR(buffer.xQueue2_instr4m, (void*)(&(USART1->DR)) ,NULL);
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <UART_RxCallback+0x20>)
 8001b12:	6998      	ldr	r0, [r3, #24]
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	4904      	ldr	r1, [pc, #16]	; (8001b2c <UART_RxCallback+0x24>)
 8001b1a:	f007 ffad 	bl	8009a78 <xQueueGenericSendFromISR>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000088c 	.word	0x2000088c
 8001b2c:	40011004 	.word	0x40011004

08001b30 <DMA1_Stream2_Callback>:

void DMA1_Stream2_Callback(DMA_HandleTypeDef* hdma)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	buffer.encod_timeA = buffer.encod_dataA - buffer.encod_olddataA;
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <DMA1_Stream2_Callback+0x58>)
 8001b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <DMA1_Stream2_Callback+0x58>)
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <DMA1_Stream2_Callback+0x58>)
 8001b44:	63d3      	str	r3, [r2, #60]	; 0x3c
	buffer.angular_speedA = WHEEL_PERIMETER/(40*buffer.encod_timeA); // nm/(10^-4 * s)=10^-5 *m/s
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <DMA1_Stream2_Callback+0x58>)
 8001b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <DMA1_Stream2_Callback+0x5c>)
 8001b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <DMA1_Stream2_Callback+0x58>)
 8001b5e:	645a      	str	r2, [r3, #68]	; 0x44
	buffer.angular_speedA = buffer.angular_speedA/10; // 10^-1*mm/s or 10^-4 m/s
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <DMA1_Stream2_Callback+0x58>)
 8001b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <DMA1_Stream2_Callback+0x60>)
 8001b66:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6a:	1092      	asrs	r2, r2, #2
 8001b6c:	17db      	asrs	r3, r3, #31
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <DMA1_Stream2_Callback+0x58>)
 8001b72:	6453      	str	r3, [r2, #68]	; 0x44
	buffer.encod_olddataA =buffer.encod_dataA;
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <DMA1_Stream2_Callback+0x58>)
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <DMA1_Stream2_Callback+0x58>)
 8001b7a:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	2000088c 	.word	0x2000088c
 8001b8c:	0c28cb00 	.word	0x0c28cb00
 8001b90:	66666667 	.word	0x66666667

08001b94 <DMA1_Stream4_Callback>:

void DMA1_Stream4_Callback(DMA_HandleTypeDef* hdma)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	buffer.encod_timeB = buffer.encod_dataB - buffer.encod_olddataB;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <DMA1_Stream4_Callback+0x58>)
 8001b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <DMA1_Stream4_Callback+0x58>)
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	4a11      	ldr	r2, [pc, #68]	; (8001bec <DMA1_Stream4_Callback+0x58>)
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
	buffer.angular_speedB = WHEEL_PERIMETER/(40*buffer.encod_timeB);
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <DMA1_Stream4_Callback+0x58>)
 8001bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <DMA1_Stream4_Callback+0x5c>)
 8001bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <DMA1_Stream4_Callback+0x58>)
 8001bc2:	649a      	str	r2, [r3, #72]	; 0x48
	buffer.angular_speedB = buffer.angular_speedB/10;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <DMA1_Stream4_Callback+0x58>)
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <DMA1_Stream4_Callback+0x60>)
 8001bca:	fb82 1203 	smull	r1, r2, r2, r3
 8001bce:	1092      	asrs	r2, r2, #2
 8001bd0:	17db      	asrs	r3, r3, #31
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a05      	ldr	r2, [pc, #20]	; (8001bec <DMA1_Stream4_Callback+0x58>)
 8001bd6:	6493      	str	r3, [r2, #72]	; 0x48
	buffer.encod_olddataB =buffer.encod_dataB;
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <DMA1_Stream4_Callback+0x58>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	4a03      	ldr	r2, [pc, #12]	; (8001bec <DMA1_Stream4_Callback+0x58>)
 8001bde:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	2000088c 	.word	0x2000088c
 8001bf0:	0c28cb00 	.word	0x0c28cb00
 8001bf4:	66666667 	.word	0x66666667

08001bf8 <ultrasonic_dis>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ultrasonic_dis */
void ultrasonic_dis(void const * argument)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08c      	sub	sp, #48	; 0x30
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <ultrasonic_dis+0x74>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	4919      	ldr	r1, [pc, #100]	; (8001c70 <ultrasonic_dis+0x78>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f007 ffd0 	bl	8009bb0 <xQueueReceive>
	  uint16_t temp1 = buffer.distance_ultrs;
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <ultrasonic_dis+0x74>)
 8001c12:	889b      	ldrh	r3, [r3, #4]
 8001c14:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <ultrasonic_dis+0x74>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1e:	4914      	ldr	r1, [pc, #80]	; (8001c70 <ultrasonic_dis+0x78>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f007 ffc5 	bl	8009bb0 <xQueueReceive>
	  uint16_t temp2 = buffer.distance_ultrs;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <ultrasonic_dis+0x74>)
 8001c28:	889b      	ldrh	r3, [r3, #4]
 8001c2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  uint16_t temp3 = temp2 - temp1;
 8001c2c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001c2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	857b      	strh	r3, [r7, #42]	; 0x2a
	  char string_buff[30] = {0};
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
 8001c48:	615a      	str	r2, [r3, #20]
 8001c4a:	831a      	strh	r2, [r3, #24]
      sprintf(string_buff, "%d \r\n", temp3);
 8001c4c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <ultrasonic_dis+0x7c>)
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00a fbc9 	bl	800c3ec <siprintf>
	  //HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
	  xQueueReset(buffer.xQueue1_ultrs);
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <ultrasonic_dis+0x74>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f007 fcd1 	bl	8009608 <xQueueGenericReset>
	  __asm__ volatile("NOP");
 8001c66:	bf00      	nop
  {
 8001c68:	e7ca      	b.n	8001c00 <ultrasonic_dis+0x8>
 8001c6a:	bf00      	nop
 8001c6c:	2000088c 	.word	0x2000088c
 8001c70:	20000890 	.word	0x20000890
 8001c74:	0800e670 	.word	0x0800e670

08001c78 <line_tracking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_line_tracking */
void line_tracking(void const * argument)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN line_tracking */
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	2001      	movs	r0, #1
 8001c86:	f009 fa27 	bl	800b0d8 <ulTaskNotifyTake>
	  uint8_t result = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
	  result = buffer.line_data;
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <line_tracking+0x84>)
 8001c90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c94:	73fb      	strb	r3, [r7, #15]
	  if(result > 100)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b64      	cmp	r3, #100	; 0x64
 8001c9a:	d927      	bls.n	8001cec <line_tracking+0x74>
	  {
		  xEventGroupClearBits(buffer.xEventGroup1, 0x1);
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <line_tracking+0x84>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f007 fb16 	bl	80092d4 <xEventGroupClearBits>
		TIM3->CCR1 = 1000;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <line_tracking+0x88>)
 8001caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cae:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = 1000;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <line_tracking+0x88>)
 8001cb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cb6:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <line_tracking+0x8c>)
 8001cbc:	f004 fb22 	bl	8006304 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001cc0:	2108      	movs	r1, #8
 8001cc2:	4810      	ldr	r0, [pc, #64]	; (8001d04 <line_tracking+0x8c>)
 8001cc4:	f004 fb1e 	bl	8006304 <HAL_TIM_PWM_Start>
		vTaskDelay(250);
 8001cc8:	20fa      	movs	r0, #250	; 0xfa
 8001cca:	f008 fc35 	bl	800a538 <vTaskDelay>
		TIM3->CCR1 = 0;
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <line_tracking+0x88>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR3 = 0;
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <line_tracking+0x88>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	63da      	str	r2, [r3, #60]	; 0x3c
		 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4809      	ldr	r0, [pc, #36]	; (8001d04 <line_tracking+0x8c>)
 8001cde:	f004 fbc1 	bl	8006464 <HAL_TIM_PWM_Stop>
		 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001ce2:	2108      	movs	r1, #8
 8001ce4:	4807      	ldr	r0, [pc, #28]	; (8001d04 <line_tracking+0x8c>)
 8001ce6:	f004 fbbd 	bl	8006464 <HAL_TIM_PWM_Stop>
 8001cea:	e005      	b.n	8001cf8 <line_tracking+0x80>
	  }
	  else
	  {
		  xEventGroupSetBits(buffer.xEventGroup1, 0x1);
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <line_tracking+0x84>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f007 fb26 	bl	8009344 <xEventGroupSetBits>
	  }
	  __asm__ volatile("NOP");
 8001cf8:	bf00      	nop
  {
 8001cfa:	e7c1      	b.n	8001c80 <line_tracking+0x8>
 8001cfc:	2000088c 	.word	0x2000088c
 8001d00:	40000400 	.word	0x40000400
 8001d04:	20000644 	.word	0x20000644

08001d08 <limit_switch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_limit_switch */
void limit_switch(void const * argument)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN limit_switch */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f007 f9e2 	bl	80090da <osDelay>
 8001d16:	e7fb      	b.n	8001d10 <limit_switch+0x8>

08001d18 <infrared_motion>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infrared_motion */
void infrared_motion(void const * argument)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN infrared_motion */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d20:	2001      	movs	r0, #1
 8001d22:	f007 f9da 	bl	80090da <osDelay>
 8001d26:	e7fb      	b.n	8001d20 <infrared_motion+0x8>

08001d28 <accelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_accelerometer */
void accelerometer(void const * argument)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accelerometer */
	  HAL_StatusTypeDef result;
	  HAL_StatusTypeDef result2;
	  HAL_I2C_Init(&hi2c1);
 8001d30:	481c      	ldr	r0, [pc, #112]	; (8001da4 <accelerometer+0x7c>)
 8001d32:	f002 fd61 	bl	80047f8 <HAL_I2C_Init>
	  mma8452x_Standby(&hi2c1, MMA8452X_I2C_ADDRESS);
 8001d36:	213a      	movs	r1, #58	; 0x3a
 8001d38:	481a      	ldr	r0, [pc, #104]	; (8001da4 <accelerometer+0x7c>)
 8001d3a:	f000 fab5 	bl	80022a8 <mma8452x_Standby>
	  mma8452x_DataFormat(&hi2c1, MMA8452X_I2C_ADDRESS, 1);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	213a      	movs	r1, #58	; 0x3a
 8001d42:	4818      	ldr	r0, [pc, #96]	; (8001da4 <accelerometer+0x7c>)
 8001d44:	f000 fb06 	bl	8002354 <mma8452x_DataFormat>
	  mma8452x_DataRateSelection(&hi2c1, MMA8452X_I2C_ADDRESS, 4); //Output Data Rate (ODR) 50Hz
 8001d48:	2204      	movs	r2, #4
 8001d4a:	213a      	movs	r1, #58	; 0x3a
 8001d4c:	4815      	ldr	r0, [pc, #84]	; (8001da4 <accelerometer+0x7c>)
 8001d4e:	f000 fb41 	bl	80023d4 <mma8452x_DataRateSelection>
	  mma8452x_InterruptPolarityConfig(&hi2c1, MMA8452X_I2C_ADDRESS, 1);
 8001d52:	2201      	movs	r2, #1
 8001d54:	213a      	movs	r1, #58	; 0x3a
 8001d56:	4813      	ldr	r0, [pc, #76]	; (8001da4 <accelerometer+0x7c>)
 8001d58:	f000 fb89 	bl	800246e <mma8452x_InterruptPolarityConfig>
	  mma8452x_InterruptEnable(&hi2c1, MMA8452X_I2C_ADDRESS, EN_FF_MT, CFG_FF_MT);
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	2202      	movs	r2, #2
 8001d60:	213a      	movs	r1, #58	; 0x3a
 8001d62:	4810      	ldr	r0, [pc, #64]	; (8001da4 <accelerometer+0x7c>)
 8001d64:	f000 fbc4 	bl	80024f0 <mma8452x_InterruptEnable>
	  mma8452x_InterruptEnable(&hi2c1, MMA8452X_I2C_ADDRESS, EN_DRDY, CFG_DEFAULT);
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	213a      	movs	r1, #58	; 0x3a
 8001d6e:	480d      	ldr	r0, [pc, #52]	; (8001da4 <accelerometer+0x7c>)
 8001d70:	f000 fbbe 	bl	80024f0 <mma8452x_InterruptEnable>
	  mma8452x_MotionDetectionConfig(&hi2c1, MMA8452X_I2C_ADDRESS, 0xF8, 0, 20, 2);
 8001d74:	2302      	movs	r3, #2
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	2314      	movs	r3, #20
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	22f8      	movs	r2, #248	; 0xf8
 8001d80:	213a      	movs	r1, #58	; 0x3a
 8001d82:	4808      	ldr	r0, [pc, #32]	; (8001da4 <accelerometer+0x7c>)
 8001d84:	f000 fc78 	bl	8002678 <mma8452x_MotionDetectionConfig>
	  mma8452x_Active(&hi2c1, MMA8452X_I2C_ADDRESS);
 8001d88:	213a      	movs	r1, #58	; 0x3a
 8001d8a:	4806      	ldr	r0, [pc, #24]	; (8001da4 <accelerometer+0x7c>)
 8001d8c:	f000 fab7 	bl	80022fe <mma8452x_Active>
	  taskYIELD();
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <accelerometer+0x80>)
 8001d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	f3bf 8f4f 	dsb	sy
 8001d9c:	f3bf 8f6f 	isb	sy
  /* Infinite loop */
  for(;;)
 8001da0:	e7fe      	b.n	8001da0 <accelerometer+0x78>
 8001da2:	bf00      	nop
 8001da4:	200005f0 	.word	0x200005f0
 8001da8:	e000ed04 	.word	0xe000ed04
 8001dac:	00000000 	.word	0x00000000

08001db0 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void const * argument)
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  char buff;
	  xQueuePeek(buffer.xQueue2_instr4m, (void*)&buff, portMAX_DELAY);
 8001db8:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <motors+0x208>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f107 010e 	add.w	r1, r7, #14
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f007 ffd3 	bl	8009d70 <xQueuePeek>
	  xEventGroupWaitBits(buffer.xEventGroup1, 0x1, pdFALSE, pdTRUE, portMAX_DELAY);
 8001dca:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <motors+0x208>)
 8001dcc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2101      	movs	r1, #1
 8001dda:	f007 f9ad 	bl	8009138 <xEventGroupWaitBits>
	  if(buff == 'I')
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	2b49      	cmp	r3, #73	; 0x49
 8001de2:	d12b      	bne.n	8001e3c <motors+0x8c>
	  {
		  uint8_t i = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
		  while(buff != 'i')
 8001de8:	e01c      	b.n	8001e24 <motors+0x74>
		  {
			  xQueuePeek(buffer.xQueue2_instr4m, (void*)&buff, 50);
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <motors+0x208>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f107 010e 	add.w	r1, r7, #14
 8001df2:	2232      	movs	r2, #50	; 0x32
 8001df4:	4618      	mov	r0, r3
 8001df6:	f007 ffbb 	bl	8009d70 <xQueuePeek>
			  xQueueReceive(buffer.xQueue2_instr4m, (void*)(&(buffer.instruction_for_motors[i])), portMAX_DELAY);
 8001dfa:	4b6f      	ldr	r3, [pc, #444]	; (8001fb8 <motors+0x208>)
 8001dfc:	6998      	ldr	r0, [r3, #24]
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	3308      	adds	r3, #8
 8001e02:	4a6d      	ldr	r2, [pc, #436]	; (8001fb8 <motors+0x208>)
 8001e04:	4413      	add	r3, r2
 8001e06:	3304      	adds	r3, #4
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f007 fecf 	bl	8009bb0 <xQueueReceive>
			  i == 10 ? i = 0 : i++;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	2b0a      	cmp	r3, #10
 8001e16:	d102      	bne.n	8001e1e <motors+0x6e>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	e002      	b.n	8001e24 <motors+0x74>
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	3301      	adds	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
		  while(buff != 'i')
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	2b69      	cmp	r3, #105	; 0x69
 8001e28:	d1df      	bne.n	8001dea <motors+0x3a>
		  }
		  sscanf(buffer.instruction_for_motors, "IX%dY%di", &buffer.x, &buffer.y);
 8001e2a:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <motors+0x20c>)
 8001e2c:	4a64      	ldr	r2, [pc, #400]	; (8001fc0 <motors+0x210>)
 8001e2e:	4965      	ldr	r1, [pc, #404]	; (8001fc4 <motors+0x214>)
 8001e30:	4865      	ldr	r0, [pc, #404]	; (8001fc8 <motors+0x218>)
 8001e32:	f00a fafb 	bl	800c42c <siscanf>
		  buff = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73bb      	strb	r3, [r7, #14]
 8001e3a:	e007      	b.n	8001e4c <motors+0x9c>
	  }
	  else
	  {
		  char trash;
		  xQueueReceive(buffer.xQueue2_instr4m, (void*)(&(trash)), 1);
 8001e3c:	4b5e      	ldr	r3, [pc, #376]	; (8001fb8 <motors+0x208>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f107 010d 	add.w	r1, r7, #13
 8001e44:	2201      	movs	r2, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f007 feb2 	bl	8009bb0 <xQueueReceive>
	  }

	  buffer.x = buffer.x - 50;
 8001e4c:	4b5a      	ldr	r3, [pc, #360]	; (8001fb8 <motors+0x208>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	3b32      	subs	r3, #50	; 0x32
 8001e52:	4a59      	ldr	r2, [pc, #356]	; (8001fb8 <motors+0x208>)
 8001e54:	61d3      	str	r3, [r2, #28]
	  buffer.y = (buffer.y - 50)*-1;
 8001e56:	4b58      	ldr	r3, [pc, #352]	; (8001fb8 <motors+0x208>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001e5e:	4a56      	ldr	r2, [pc, #344]	; (8001fb8 <motors+0x208>)
 8001e60:	6213      	str	r3, [r2, #32]
	  buffer.pw = (int)(sqrt(pow(buffer.x,2) + pow(buffer.y,2)));
 8001e62:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <motors+0x208>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb64 	bl	8000534 <__aeabi_i2d>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8001fb0 <motors+0x200>
 8001e74:	ec43 2b10 	vmov	d0, r2, r3
 8001e78:	f00b fbd4 	bl	800d624 <pow>
 8001e7c:	ec55 4b10 	vmov	r4, r5, d0
 8001e80:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <motors+0x208>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb55 	bl	8000534 <__aeabi_i2d>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8001fb0 <motors+0x200>
 8001e92:	ec43 2b10 	vmov	d0, r2, r3
 8001e96:	f00b fbc5 	bl	800d624 <pow>
 8001e9a:	ec53 2b10 	vmov	r2, r3, d0
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe f9fb 	bl	800029c <__adddf3>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	ec43 2b17 	vmov	d7, r2, r3
 8001eae:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb2:	eef0 0a67 	vmov.f32	s1, s15
 8001eb6:	f00b fc25 	bl	800d704 <sqrt>
 8001eba:	ec53 2b10 	vmov	r2, r3, d0
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f7fe fe51 	bl	8000b68 <__aeabi_d2iz>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4a3b      	ldr	r2, [pc, #236]	; (8001fb8 <motors+0x208>)
 8001eca:	6253      	str	r3, [r2, #36]	; 0x24
	  if(buffer.pw > 50) buffer.pw = 50;
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <motors+0x208>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2b32      	cmp	r3, #50	; 0x32
 8001ed2:	dd02      	ble.n	8001eda <motors+0x12a>
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <motors+0x208>)
 8001ed6:	2232      	movs	r2, #50	; 0x32
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
	  __asm__ volatile("NOP");
 8001eda:	bf00      	nop

	  if(buffer.y>=0)  // A motor CH3,CH4,  B motor CH1, CH2 encodCH2 B
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <motors+0x208>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db5a      	blt.n	8001f9a <motors+0x1ea>
	  {
		  if(buffer.x>=0)
 8001ee4:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <motors+0x208>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db28      	blt.n	8001f3e <motors+0x18e>
		  {
//			 TIM3->CCR2 = (300/50)*buffer.pw-(300/50)*buffer.x+700;
//			 TIM3->CCR4 = (300/50)*buffer.pw+700;
			  buffer.wanted_speedB = (300/50)*buffer.pw-(300/50)*buffer.x+700;
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <motors+0x208>)
 8001eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef0:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <motors+0x208>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	0052      	lsls	r2, r2, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <motors+0x208>)
 8001f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
			  buffer.wanted_speedA = (300/50)*buffer.pw+700;
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <motors+0x208>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	0052      	lsls	r2, r2, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <motors+0x208>)
 8001f24:	851a      	strh	r2, [r3, #40]	; 0x28

			 if(buffer.pw <=5)
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <motors+0x208>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	f73f af44 	bgt.w	8001db8 <motors+0x8>
			 {
//				 TIM3->CCR2 = 0;
//				 TIM3->CCR4 = 0;
				 buffer.wanted_speedB = 0;
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <motors+0x208>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	855a      	strh	r2, [r3, #42]	; 0x2a
				 buffer.wanted_speedA = 0;
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <motors+0x208>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	851a      	strh	r2, [r3, #40]	; 0x28
 8001f3c:	e73c      	b.n	8001db8 <motors+0x8>
//				 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
			 }
//			 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//			 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
		  }
		  else if(buffer.x<0)
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <motors+0x208>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f6bf af38 	bge.w	8001db8 <motors+0x8>
		  {
//			 TIM3->CCR2 = (300/50)*buffer.pw+700;
//			 TIM3->CCR4 = (300/50)*buffer.pw+(300/50)*buffer.x+700;
			 buffer.wanted_speedB = (300/50)*buffer.pw+700;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <motors+0x208>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	0052      	lsls	r2, r2, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <motors+0x208>)
 8001f60:	855a      	strh	r2, [r3, #42]	; 0x2a
			 buffer.wanted_speedA = (300/50)*buffer.pw+(300/50)*buffer.x+700;
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <motors+0x208>)
 8001f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <motors+0x208>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	0052      	lsls	r2, r2, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <motors+0x208>)
 8001f80:	851a      	strh	r2, [r3, #40]	; 0x28
			 if(buffer.pw <=5)
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <motors+0x208>)
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	f73f af16 	bgt.w	8001db8 <motors+0x8>
			 {
//				 TIM3->CCR2 = 0;
//				 TIM3->CCR4 = 0;
				 buffer.wanted_speedB = 0;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <motors+0x208>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	855a      	strh	r2, [r3, #42]	; 0x2a
				 buffer.wanted_speedA = 0;
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <motors+0x208>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	851a      	strh	r2, [r3, #40]	; 0x28
 8001f98:	e70e      	b.n	8001db8 <motors+0x8>
			 }
//			 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//			 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
		  }
	  }
	  else if(buffer.y<0)
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <motors+0x208>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f6bf af0a 	bge.w	8001db8 <motors+0x8>
	  {
		  if(buffer.x>=0)
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <motors+0x208>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2b00      	cmp	r3, #0
  {
 8001faa:	e705      	b.n	8001db8 <motors+0x8>
 8001fac:	f3af 8000 	nop.w
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	40000000 	.word	0x40000000
 8001fb8:	2000088c 	.word	0x2000088c
 8001fbc:	200008ac 	.word	0x200008ac
 8001fc0:	200008a8 	.word	0x200008a8
 8001fc4:	0800e678 	.word	0x0800e678
 8001fc8:	20000898 	.word	0x20000898

08001fcc <encoders>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoders */
void encoders(void const * argument)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoders */

  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f009 f87d 	bl	800b0d8 <ulTaskNotifyTake>
	  if(TIM5->CNT - buffer.encod_dataA >= 1000)  //100ms
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <encoders+0x40>)
 8001fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <encoders+0x44>)
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fec:	d302      	bcc.n	8001ff4 <encoders+0x28>
	  {
		  buffer.angular_speedA = 0;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <encoders+0x44>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44
	  }
	  if(TIM5->CNT - buffer.encod_dataB >= 1000) //100ms
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <encoders+0x40>)
 8001ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <encoders+0x44>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002002:	d3e7      	bcc.n	8001fd4 <encoders+0x8>
	  {
		  buffer.angular_speedB = 0;
 8002004:	4b02      	ldr	r3, [pc, #8]	; (8002010 <encoders+0x44>)
 8002006:	2200      	movs	r2, #0
 8002008:	649a      	str	r2, [r3, #72]	; 0x48
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800200a:	e7e3      	b.n	8001fd4 <encoders+0x8>
 800200c:	40000c00 	.word	0x40000c00
 8002010:	2000088c 	.word	0x2000088c

08002014 <uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_task */
void uart_task(void const * argument)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08e      	sub	sp, #56	; 0x38
 8002018:	af02      	add	r7, sp, #8
 800201a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  char string_buff[20] = {0};
//	  sprintf(string_buff, " %d %d ", buffer.encod_data[0], buffer.encod_data[1]);
//	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
	  char string_buff2[20] = {0};
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	f107 0320 	add.w	r3, r7, #32
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
	  sprintf(string_buff2, " %d %d %d ", buffer.accelerm_data[0], buffer.accelerm_data[1], buffer.accelerm_data[2]);
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <uart_task+0x88>)
 8002030:	f993 3051 	ldrsb.w	r3, [r3, #81]	; 0x51
 8002034:	461a      	mov	r2, r3
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <uart_task+0x88>)
 8002038:	f993 3052 	ldrsb.w	r3, [r3, #82]	; 0x52
 800203c:	4619      	mov	r1, r3
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <uart_task+0x88>)
 8002040:	f993 3053 	ldrsb.w	r3, [r3, #83]	; 0x53
 8002044:	f107 001c 	add.w	r0, r7, #28
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	460b      	mov	r3, r1
 800204c:	4914      	ldr	r1, [pc, #80]	; (80020a0 <uart_task+0x8c>)
 800204e:	f00a f9cd 	bl	800c3ec <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff2, sizeof(string_buff2), 100);
 8002052:	f107 011c 	add.w	r1, r7, #28
 8002056:	2364      	movs	r3, #100	; 0x64
 8002058:	2214      	movs	r2, #20
 800205a:	4812      	ldr	r0, [pc, #72]	; (80020a4 <uart_task+0x90>)
 800205c:	f006 f80b 	bl	8008076 <HAL_UART_Transmit>
	  char string_buff3[20] = {0};
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
	  sprintf(string_buff3, " %d %d \n", buffer.angular_speedA, buffer.angular_speedB);
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <uart_task+0x88>)
 8002074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <uart_task+0x88>)
 8002078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207a:	f107 0008 	add.w	r0, r7, #8
 800207e:	490a      	ldr	r1, [pc, #40]	; (80020a8 <uart_task+0x94>)
 8002080:	f00a f9b4 	bl	800c3ec <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff3, sizeof(string_buff3), 100);
 8002084:	f107 0108 	add.w	r1, r7, #8
 8002088:	2364      	movs	r3, #100	; 0x64
 800208a:	2214      	movs	r2, #20
 800208c:	4805      	ldr	r0, [pc, #20]	; (80020a4 <uart_task+0x90>)
 800208e:	f005 fff2 	bl	8008076 <HAL_UART_Transmit>
	  vTaskDelay(160);
 8002092:	20a0      	movs	r0, #160	; 0xa0
 8002094:	f008 fa50 	bl	800a538 <vTaskDelay>
  {
 8002098:	e7c0      	b.n	800201c <uart_task+0x8>
 800209a:	bf00      	nop
 800209c:	2000088c 	.word	0x2000088c
 80020a0:	0800e684 	.word	0x0800e684
 80020a4:	20000824 	.word	0x20000824
 80020a8:	0800e690 	.word	0x0800e690
 80020ac:	00000000 	.word	0x00000000

080020b0 <pid>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pid */
void pid(void const * argument)
{
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pid */
	int16_t errorA = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	827b      	strh	r3, [r7, #18]
	int16_t errorB = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	823b      	strh	r3, [r7, #16]
	int16_t processed_speedA = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	81fb      	strh	r3, [r7, #14]
	int16_t processed_speedB = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	81bb      	strh	r3, [r7, #12]
	int32_t I_errorA = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
	int32_t I_errorB = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
	int16_t D_errorA = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	817b      	strh	r3, [r7, #10]
	int16_t D_errorB = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	813b      	strh	r3, [r7, #8]
	int16_t olderrorA = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	82fb      	strh	r3, [r7, #22]
	int16_t olderrorB = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	82bb      	strh	r3, [r7, #20]
  /* Infinite loop */
  for(;;)  //210 mm/s or 2100 10^-4*m/s is max speed --- 1000 in CCRx register
  {
	  errorA = ((uint16_t)(buffer.wanted_speedA*2.1)) -buffer.angular_speedA;
 80020e0:	4b65      	ldr	r3, [pc, #404]	; (8002278 <pid+0x1c8>)
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fa25 	bl	8000534 <__aeabi_i2d>
 80020ea:	a35f      	add	r3, pc, #380	; (adr r3, 8002268 <pid+0x1b8>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fa8a 	bl	8000608 <__aeabi_dmul>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7fe fd5c 	bl	8000bb8 <__aeabi_d2uiz>
 8002100:	4603      	mov	r3, r0
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b5c      	ldr	r3, [pc, #368]	; (8002278 <pid+0x1c8>)
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	b29b      	uxth	r3, r3
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	b29b      	uxth	r3, r3
 800210e:	827b      	strh	r3, [r7, #18]
	  I_errorA += errorA;
 8002110:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	4413      	add	r3, r2
 8002118:	61fb      	str	r3, [r7, #28]
	  D_errorA = errorA - olderrorA;
 800211a:	8a7a      	ldrh	r2, [r7, #18]
 800211c:	8afb      	ldrh	r3, [r7, #22]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	b29b      	uxth	r3, r3
 8002122:	817b      	strh	r3, [r7, #10]
	  errorB = ((uint16_t)(buffer.wanted_speedB*2.1)) -buffer.angular_speedB;
 8002124:	4b54      	ldr	r3, [pc, #336]	; (8002278 <pid+0x1c8>)
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa03 	bl	8000534 <__aeabi_i2d>
 800212e:	a34e      	add	r3, pc, #312	; (adr r3, 8002268 <pid+0x1b8>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa68 	bl	8000608 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	f7fe fd3a 	bl	8000bb8 <__aeabi_d2uiz>
 8002144:	4603      	mov	r3, r0
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b4b      	ldr	r3, [pc, #300]	; (8002278 <pid+0x1c8>)
 800214a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214c:	b29b      	uxth	r3, r3
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	b29b      	uxth	r3, r3
 8002152:	823b      	strh	r3, [r7, #16]
	  I_errorB += errorB;
 8002154:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4413      	add	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
	  D_errorB = errorB - olderrorB;
 800215e:	8a3a      	ldrh	r2, [r7, #16]
 8002160:	8abb      	ldrh	r3, [r7, #20]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	b29b      	uxth	r3, r3
 8002166:	813b      	strh	r3, [r7, #8]
	  processed_speedA = KP*errorA + KI*I_errorA + KD*D_errorA;
 8002168:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f9e1 	bl	8000534 <__aeabi_i2d>
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b41      	ldr	r3, [pc, #260]	; (800227c <pid+0x1cc>)
 8002178:	f7fe fa46 	bl	8000608 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4614      	mov	r4, r2
 8002182:	461d      	mov	r5, r3
 8002184:	69f8      	ldr	r0, [r7, #28]
 8002186:	f7fe f9d5 	bl	8000534 <__aeabi_i2d>
 800218a:	a339      	add	r3, pc, #228	; (adr r3, 8002270 <pid+0x1c0>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe fa3a 	bl	8000608 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4620      	mov	r0, r4
 800219a:	4629      	mov	r1, r5
 800219c:	f7fe f87e 	bl	800029c <__adddf3>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4614      	mov	r4, r2
 80021a6:	461d      	mov	r5, r3
 80021a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9c1 	bl	8000534 <__aeabi_i2d>
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <pid+0x1cc>)
 80021b8:	f7fe fa26 	bl	8000608 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4620      	mov	r0, r4
 80021c2:	4629      	mov	r1, r5
 80021c4:	f7fe f86a 	bl	800029c <__adddf3>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fcca 	bl	8000b68 <__aeabi_d2iz>
 80021d4:	4603      	mov	r3, r0
 80021d6:	81fb      	strh	r3, [r7, #14]
	  processed_speedB = KP*errorB + KI*I_errorB + KD*D_errorB;
 80021d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f9a9 	bl	8000534 <__aeabi_i2d>
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	4b25      	ldr	r3, [pc, #148]	; (800227c <pid+0x1cc>)
 80021e8:	f7fe fa0e 	bl	8000608 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	69b8      	ldr	r0, [r7, #24]
 80021f6:	f7fe f99d 	bl	8000534 <__aeabi_i2d>
 80021fa:	a31d      	add	r3, pc, #116	; (adr r3, 8002270 <pid+0x1c0>)
 80021fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002200:	f7fe fa02 	bl	8000608 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4620      	mov	r0, r4
 800220a:	4629      	mov	r1, r5
 800220c:	f7fe f846 	bl	800029c <__adddf3>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	461d      	mov	r5, r3
 8002218:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f989 	bl	8000534 <__aeabi_i2d>
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <pid+0x1cc>)
 8002228:	f7fe f9ee 	bl	8000608 <__aeabi_dmul>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4620      	mov	r0, r4
 8002232:	4629      	mov	r1, r5
 8002234:	f7fe f832 	bl	800029c <__adddf3>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	f7fe fc92 	bl	8000b68 <__aeabi_d2iz>
 8002244:	4603      	mov	r3, r0
 8002246:	81bb      	strh	r3, [r7, #12]
	  if(errorB>10)
 8002248:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800224c:	2b0a      	cmp	r3, #10
 800224e:	dd00      	ble.n	8002252 <pid+0x1a2>
	  {
		  __asm__ volatile("NOP");
 8002250:	bf00      	nop
	  }
	  olderrorA = errorA;
 8002252:	8a7b      	ldrh	r3, [r7, #18]
 8002254:	82fb      	strh	r3, [r7, #22]
	  olderrorB = errorB;
 8002256:	8a3b      	ldrh	r3, [r7, #16]
 8002258:	82bb      	strh	r3, [r7, #20]
	  vTaskDelay(5);
 800225a:	2005      	movs	r0, #5
 800225c:	f008 f96c 	bl	800a538 <vTaskDelay>
	  errorA = ((uint16_t)(buffer.wanted_speedA*2.1)) -buffer.angular_speedA;
 8002260:	e73e      	b.n	80020e0 <pid+0x30>
 8002262:	bf00      	nop
 8002264:	f3af 8000 	nop.w
 8002268:	cccccccd 	.word	0xcccccccd
 800226c:	4000cccc 	.word	0x4000cccc
 8002270:	d2f1a9fc 	.word	0xd2f1a9fc
 8002274:	3f50624d 	.word	0x3f50624d
 8002278:	2000088c 	.word	0x2000088c
 800227c:	3fe00000 	.word	0x3fe00000

08002280 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d101      	bne.n	8002296 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002292:	f000 ff21 	bl	80030d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a2:	b672      	cpsid	i
}
 80022a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <Error_Handler+0x8>

080022a8 <mma8452x_Standby>:
 *                the configuration information for the specified I2C.
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 */
void mma8452x_Standby(I2C_HandleTypeDef * hi2c, uint16_t DevAddress)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af04      	add	r7, sp, #16
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
	uint8_t register_value = 0x0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80022b8:	8879      	ldrh	r1, [r7, #2]
 80022ba:	2364      	movs	r3, #100	; 0x64
 80022bc:	9302      	str	r3, [sp, #8]
 80022be:	2301      	movs	r3, #1
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	f107 030f 	add.w	r3, r7, #15
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2301      	movs	r3, #1
 80022ca:	222a      	movs	r2, #42	; 0x2a
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f002 fd01 	bl	8004cd4 <HAL_I2C_Mem_Read>
	register_value &= ~CTRL_REG1_ACTIVE;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80022dc:	8879      	ldrh	r1, [r7, #2]
 80022de:	2364      	movs	r3, #100	; 0x64
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	2301      	movs	r3, #1
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	f107 030f 	add.w	r3, r7, #15
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	222a      	movs	r2, #42	; 0x2a
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f002 fbf5 	bl	8004ae0 <HAL_I2C_Mem_Write>
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <mma8452x_Active>:
 *                the configuration information for the specified I2C.
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 */
void mma8452x_Active(I2C_HandleTypeDef * hi2c, uint16_t DevAddress)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b088      	sub	sp, #32
 8002302:	af04      	add	r7, sp, #16
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	807b      	strh	r3, [r7, #2]
	uint8_t register_value = 0x0;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800230e:	8879      	ldrh	r1, [r7, #2]
 8002310:	2364      	movs	r3, #100	; 0x64
 8002312:	9302      	str	r3, [sp, #8]
 8002314:	2301      	movs	r3, #1
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	f107 030f 	add.w	r3, r7, #15
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2301      	movs	r3, #1
 8002320:	222a      	movs	r2, #42	; 0x2a
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f002 fcd6 	bl	8004cd4 <HAL_I2C_Mem_Read>
	register_value |= CTRL_REG1_ACTIVE;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002332:	8879      	ldrh	r1, [r7, #2]
 8002334:	2364      	movs	r3, #100	; 0x64
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	2301      	movs	r3, #1
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	f107 030f 	add.w	r3, r7, #15
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2301      	movs	r3, #1
 8002344:	222a      	movs	r2, #42	; 0x2a
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f002 fbca 	bl	8004ae0 <HAL_I2C_Mem_Write>
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <mma8452x_DataFormat>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  d_format If d_format is 1 then Data format limited to single Byte.
 * 		   If d_format is 0 then Data format limited to 12 Bits.
 */
void mma8452x_DataFormat(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t d_format)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af04      	add	r7, sp, #16
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
 8002360:	4613      	mov	r3, r2
 8002362:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff9d 	bl	80022a8 <mma8452x_Standby>
	uint8_t register_value = 0x0;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002372:	8879      	ldrh	r1, [r7, #2]
 8002374:	2364      	movs	r3, #100	; 0x64
 8002376:	9302      	str	r3, [sp, #8]
 8002378:	2301      	movs	r3, #1
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	f107 030f 	add.w	r3, r7, #15
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2301      	movs	r3, #1
 8002384:	222a      	movs	r2, #42	; 0x2a
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f002 fca4 	bl	8004cd4 <HAL_I2C_Mem_Read>
	if(d_format == 1)
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d105      	bne.n	800239e <mma8452x_DataFormat+0x4a>
	{
		register_value |= CTRL_REG1_F_READ;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	b2db      	uxtb	r3, r3
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e004      	b.n	80023a8 <mma8452x_DataFormat+0x54>
	}
	else
	{
		register_value &= ~CTRL_REG1_F_READ;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	f023 0302 	bic.w	r3, r3, #2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80023a8:	8879      	ldrh	r1, [r7, #2]
 80023aa:	2364      	movs	r3, #100	; 0x64
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	2301      	movs	r3, #1
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	f107 030f 	add.w	r3, r7, #15
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2301      	movs	r3, #1
 80023ba:	222a      	movs	r2, #42	; 0x2a
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f002 fb8f 	bl	8004ae0 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff99 	bl	80022fe <mma8452x_Active>
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <mma8452x_DataRateSelection>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  d_rate Value from 0 to 7 for selection output data rate for acceleration samples.
 * 		   The default value is 000 for a data rate of 800 Hz.
 */
void mma8452x_DataRateSelection(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t d_rate)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af04      	add	r7, sp, #16
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	4619      	mov	r1, r3
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff5d 	bl	80022a8 <mma8452x_Standby>
	uint8_t register_value = 0x0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80023f2:	8879      	ldrh	r1, [r7, #2]
 80023f4:	2364      	movs	r3, #100	; 0x64
 80023f6:	9302      	str	r3, [sp, #8]
 80023f8:	2301      	movs	r3, #1
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	f107 030f 	add.w	r3, r7, #15
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	222a      	movs	r2, #42	; 0x2a
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f002 fc64 	bl	8004cd4 <HAL_I2C_Mem_Read>
	register_value &= ~((7<<3));
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002412:	b2db      	uxtb	r3, r3
 8002414:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002416:	8879      	ldrh	r1, [r7, #2]
 8002418:	2364      	movs	r3, #100	; 0x64
 800241a:	9302      	str	r3, [sp, #8]
 800241c:	2301      	movs	r3, #1
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	f107 030f 	add.w	r3, r7, #15
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	2301      	movs	r3, #1
 8002428:	222a      	movs	r2, #42	; 0x2a
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f002 fb58 	bl	8004ae0 <HAL_I2C_Mem_Write>
	register_value |= (d_rate<<3);
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	b25a      	sxtb	r2, r3
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	b25b      	sxtb	r3, r3
 800243a:	4313      	orrs	r3, r2
 800243c:	b25b      	sxtb	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002442:	8879      	ldrh	r1, [r7, #2]
 8002444:	2364      	movs	r3, #100	; 0x64
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	2301      	movs	r3, #1
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	f107 030f 	add.w	r3, r7, #15
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2301      	movs	r3, #1
 8002454:	222a      	movs	r2, #42	; 0x2a
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f002 fb42 	bl	8004ae0 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff4c 	bl	80022fe <mma8452x_Active>
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <mma8452x_InterruptPolarityConfig>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  ipol Interrupt polarity ACTIVE high, or ACTIVE low. Default value: 0.
 *         0: ACTIVE low; 1: ACTIVE high
 */
void mma8452x_InterruptPolarityConfig(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t ipol)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b088      	sub	sp, #32
 8002472:	af04      	add	r7, sp, #16
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
 800247a:	4613      	mov	r3, r2
 800247c:	707b      	strb	r3, [r7, #1]
	mma8452x_Standby(hi2c, DevAddress);
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff10 	bl	80022a8 <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG3, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800248c:	8879      	ldrh	r1, [r7, #2]
 800248e:	2364      	movs	r3, #100	; 0x64
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	2301      	movs	r3, #1
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	f107 030f 	add.w	r3, r7, #15
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2301      	movs	r3, #1
 800249e:	222c      	movs	r2, #44	; 0x2c
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f002 fc17 	bl	8004cd4 <HAL_I2C_Mem_Read>
	if(ipol == 1)
 80024a6:	787b      	ldrb	r3, [r7, #1]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <mma8452x_InterruptPolarityConfig+0x4a>
	{
		register_value |= CTRL_REG3_IPOL;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e004      	b.n	80024c2 <mma8452x_InterruptPolarityConfig+0x54>
	}
	else
	{
		register_value &= ~CTRL_REG3_IPOL;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	f023 0302 	bic.w	r3, r3, #2
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG3, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80024c2:	8879      	ldrh	r1, [r7, #2]
 80024c4:	2364      	movs	r3, #100	; 0x64
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	2301      	movs	r3, #1
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	f107 030f 	add.w	r3, r7, #15
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2301      	movs	r3, #1
 80024d4:	222c      	movs	r2, #44	; 0x2c
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f002 fb02 	bl	8004ae0 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 80024dc:	887b      	ldrh	r3, [r7, #2]
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff0c 	bl	80022fe <mma8452x_Active>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <mma8452x_InterruptEnable>:
 *         in datasheet must be shifted to the left before calling the interface
 * @param  int_en The corresponding interrupt
 * @param  int_cfg The corresponding interrupt pin
 */
void mma8452x_InterruptEnable(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t int_en, uint8_t int_cfg)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af04      	add	r7, sp, #16
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	807b      	strh	r3, [r7, #2]
 8002502:	460b      	mov	r3, r1
 8002504:	707b      	strb	r3, [r7, #1]
 8002506:	4613      	mov	r3, r2
 8002508:	703b      	strb	r3, [r7, #0]
	mma8452x_Standby(hi2c, DevAddress);
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff feca 	bl	80022a8 <mma8452x_Standby>
	uint8_t register_value = 0x0;
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG4, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002518:	8879      	ldrh	r1, [r7, #2]
 800251a:	2364      	movs	r3, #100	; 0x64
 800251c:	9302      	str	r3, [sp, #8]
 800251e:	2301      	movs	r3, #1
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	f107 030f 	add.w	r3, r7, #15
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2301      	movs	r3, #1
 800252a:	222d      	movs	r2, #45	; 0x2d
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f002 fbd1 	bl	8004cd4 <HAL_I2C_Mem_Read>
	switch (int_en)
 8002532:	787b      	ldrb	r3, [r7, #1]
 8002534:	3b01      	subs	r3, #1
 8002536:	2b05      	cmp	r3, #5
 8002538:	d832      	bhi.n	80025a0 <mma8452x_InterruptEnable+0xb0>
 800253a:	a201      	add	r2, pc, #4	; (adr r2, 8002540 <mma8452x_InterruptEnable+0x50>)
 800253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002540:	08002595 	.word	0x08002595
 8002544:	08002589 	.word	0x08002589
 8002548:	0800257d 	.word	0x0800257d
 800254c:	08002571 	.word	0x08002571
 8002550:	08002565 	.word	0x08002565
 8002554:	08002559 	.word	0x08002559
	{
		 case EN_ASLP:
			 register_value |= CTRL_REG4_ASLP;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800255e:	b2db      	uxtb	r3, r3
 8002560:	73fb      	strb	r3, [r7, #15]
			 break;
 8002562:	e01e      	b.n	80025a2 <mma8452x_InterruptEnable+0xb2>
		 case EN_TRANS:
			 register_value |= CTRL_REG4_TRANS;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	f043 0320 	orr.w	r3, r3, #32
 800256a:	b2db      	uxtb	r3, r3
 800256c:	73fb      	strb	r3, [r7, #15]
			 break;
 800256e:	e018      	b.n	80025a2 <mma8452x_InterruptEnable+0xb2>
		 case EN_LNDPRT:
			 register_value |= CTRL_REG4_LNDPRT;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	b2db      	uxtb	r3, r3
 8002578:	73fb      	strb	r3, [r7, #15]
			 break;
 800257a:	e012      	b.n	80025a2 <mma8452x_InterruptEnable+0xb2>
		 case EN_PULSE:
			 register_value |= CTRL_REG4_PULSE;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	b2db      	uxtb	r3, r3
 8002584:	73fb      	strb	r3, [r7, #15]
			 break;
 8002586:	e00c      	b.n	80025a2 <mma8452x_InterruptEnable+0xb2>
		 case EN_FF_MT:
			 register_value |= CTRL_REG4_FF_MT;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	b2db      	uxtb	r3, r3
 8002590:	73fb      	strb	r3, [r7, #15]
			 break;
 8002592:	e006      	b.n	80025a2 <mma8452x_InterruptEnable+0xb2>
		 case EN_DRDY:
			 register_value |= CTRL_REG4_DRDY;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	73fb      	strb	r3, [r7, #15]
			 break;
 800259e:	e000      	b.n	80025a2 <mma8452x_InterruptEnable+0xb2>
		 default:
        	 __asm__ volatile("NOP");
 80025a0:	bf00      	nop
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG4, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80025a2:	8879      	ldrh	r1, [r7, #2]
 80025a4:	2364      	movs	r3, #100	; 0x64
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	2301      	movs	r3, #1
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	f107 030f 	add.w	r3, r7, #15
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2301      	movs	r3, #1
 80025b4:	222d      	movs	r2, #45	; 0x2d
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f002 fa92 	bl	8004ae0 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG5, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80025c0:	8879      	ldrh	r1, [r7, #2]
 80025c2:	2364      	movs	r3, #100	; 0x64
 80025c4:	9302      	str	r3, [sp, #8]
 80025c6:	2301      	movs	r3, #1
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	f107 030f 	add.w	r3, r7, #15
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2301      	movs	r3, #1
 80025d2:	222e      	movs	r2, #46	; 0x2e
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f002 fb7d 	bl	8004cd4 <HAL_I2C_Mem_Read>
	switch (int_cfg)
 80025da:	783b      	ldrb	r3, [r7, #0]
 80025dc:	3b01      	subs	r3, #1
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d832      	bhi.n	8002648 <mma8452x_InterruptEnable+0x158>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <mma8452x_InterruptEnable+0xf8>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	0800263d 	.word	0x0800263d
 80025ec:	08002631 	.word	0x08002631
 80025f0:	08002625 	.word	0x08002625
 80025f4:	08002619 	.word	0x08002619
 80025f8:	0800260d 	.word	0x0800260d
 80025fc:	08002601 	.word	0x08002601
	{
		 case CFG_ASLP:
			 register_value |= CTRL_REG5_ASLP;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002606:	b2db      	uxtb	r3, r3
 8002608:	73fb      	strb	r3, [r7, #15]
			 break;
 800260a:	e01e      	b.n	800264a <mma8452x_InterruptEnable+0x15a>
		 case CFG_TRANS:
			 register_value |= CTRL_REG5_TRANS;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	f043 0320 	orr.w	r3, r3, #32
 8002612:	b2db      	uxtb	r3, r3
 8002614:	73fb      	strb	r3, [r7, #15]
			 break;
 8002616:	e018      	b.n	800264a <mma8452x_InterruptEnable+0x15a>
		 case CFG_LNDPRT:
			 register_value |= CTRL_REG5_LNDPRT;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	f043 0310 	orr.w	r3, r3, #16
 800261e:	b2db      	uxtb	r3, r3
 8002620:	73fb      	strb	r3, [r7, #15]
			 break;
 8002622:	e012      	b.n	800264a <mma8452x_InterruptEnable+0x15a>
		 case CFG_PULSE:
			 register_value |= CTRL_REG5_PULSE;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	f043 0308 	orr.w	r3, r3, #8
 800262a:	b2db      	uxtb	r3, r3
 800262c:	73fb      	strb	r3, [r7, #15]
			 break;
 800262e:	e00c      	b.n	800264a <mma8452x_InterruptEnable+0x15a>
		 case CFG_FF_MT:
			 register_value |= CTRL_REG5_FF_MT;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	b2db      	uxtb	r3, r3
 8002638:	73fb      	strb	r3, [r7, #15]
			 break;
 800263a:	e006      	b.n	800264a <mma8452x_InterruptEnable+0x15a>
		 case CFG_DRDY:
			 register_value |= CTRL_REG5_DRDY;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	b2db      	uxtb	r3, r3
 8002644:	73fb      	strb	r3, [r7, #15]
			 break;
 8002646:	e000      	b.n	800264a <mma8452x_InterruptEnable+0x15a>
		 default:
			 __asm__ volatile("NOP");
 8002648:	bf00      	nop
	}
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)CTRL_REG5, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800264a:	8879      	ldrh	r1, [r7, #2]
 800264c:	2364      	movs	r3, #100	; 0x64
 800264e:	9302      	str	r3, [sp, #8]
 8002650:	2301      	movs	r3, #1
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	f107 030f 	add.w	r3, r7, #15
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2301      	movs	r3, #1
 800265c:	222e      	movs	r2, #46	; 0x2e
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f002 fa3e 	bl	8004ae0 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fe48 	bl	80022fe <mma8452x_Active>
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop

08002678 <mma8452x_MotionDetectionConfig>:
									uint16_t DevAddress,
									uint8_t byte_cfg,
									uint8_t dbcntm,
									uint8_t threshold,
									uint8_t d_count)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af04      	add	r7, sp, #16
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	461a      	mov	r2, r3
 8002686:	4603      	mov	r3, r0
 8002688:	807b      	strh	r3, [r7, #2]
 800268a:	460b      	mov	r3, r1
 800268c:	707b      	strb	r3, [r7, #1]
 800268e:	4613      	mov	r3, r2
 8002690:	703b      	strb	r3, [r7, #0]
	mma8452x_Standby(hi2c, DevAddress);
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fe06 	bl	80022a8 <mma8452x_Standby>
	uint8_t register_value = 0x0;
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_CFG, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80026a0:	8879      	ldrh	r1, [r7, #2]
 80026a2:	2364      	movs	r3, #100	; 0x64
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	2301      	movs	r3, #1
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	f107 030f 	add.w	r3, r7, #15
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2301      	movs	r3, #1
 80026b2:	2215      	movs	r2, #21
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f002 fb0d 	bl	8004cd4 <HAL_I2C_Mem_Read>
	register_value |= byte_cfg;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	4313      	orrs	r3, r2
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_CFG, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80026c4:	8879      	ldrh	r1, [r7, #2]
 80026c6:	2364      	movs	r3, #100	; 0x64
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	2301      	movs	r3, #1
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	f107 030f 	add.w	r3, r7, #15
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2301      	movs	r3, #1
 80026d6:	2215      	movs	r2, #21
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f002 fa01 	bl	8004ae0 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_THS, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80026e2:	8879      	ldrh	r1, [r7, #2]
 80026e4:	2364      	movs	r3, #100	; 0x64
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	2301      	movs	r3, #1
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	f107 030f 	add.w	r3, r7, #15
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	2301      	movs	r3, #1
 80026f4:	2217      	movs	r2, #23
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f002 faec 	bl	8004cd4 <HAL_I2C_Mem_Read>
	if(dbcntm == 1)
 80026fc:	783b      	ldrb	r3, [r7, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <mma8452x_MotionDetectionConfig+0x96>
	{
		register_value |= FF_MT_THS_DBCNTM;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002708:	b2db      	uxtb	r3, r3
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e007      	b.n	800271e <mma8452x_MotionDetectionConfig+0xa6>
	}
	else if(dbcntm == 0)
 800270e:	783b      	ldrb	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d104      	bne.n	800271e <mma8452x_MotionDetectionConfig+0xa6>
	{
		register_value &= ~FF_MT_THS_DBCNTM;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800271a:	b2db      	uxtb	r3, r3
 800271c:	73fb      	strb	r3, [r7, #15]
	}
	register_value &= ~127;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002724:	b2db      	uxtb	r3, r3
 8002726:	73fb      	strb	r3, [r7, #15]
	register_value |= threshold;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	7e3b      	ldrb	r3, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	b2db      	uxtb	r3, r3
 8002730:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_THS, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002732:	8879      	ldrh	r1, [r7, #2]
 8002734:	2364      	movs	r3, #100	; 0x64
 8002736:	9302      	str	r3, [sp, #8]
 8002738:	2301      	movs	r3, #1
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	f107 030f 	add.w	r3, r7, #15
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2301      	movs	r3, #1
 8002744:	2217      	movs	r2, #23
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f002 f9ca 	bl	8004ae0 <HAL_I2C_Mem_Write>
	register_value = 0x0;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)FF_MT_COUNT, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 8002750:	8879      	ldrh	r1, [r7, #2]
 8002752:	2364      	movs	r3, #100	; 0x64
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	2301      	movs	r3, #1
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	f107 030f 	add.w	r3, r7, #15
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2301      	movs	r3, #1
 8002762:	2218      	movs	r2, #24
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f002 fab5 	bl	8004cd4 <HAL_I2C_Mem_Read>
	register_value = d_count;
 800276a:	7f3b      	ldrb	r3, [r7, #28]
 800276c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, DevAddress, (uint16_t)FF_MT_COUNT, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 800276e:	8879      	ldrh	r1, [r7, #2]
 8002770:	2364      	movs	r3, #100	; 0x64
 8002772:	9302      	str	r3, [sp, #8]
 8002774:	2301      	movs	r3, #1
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	f107 030f 	add.w	r3, r7, #15
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2301      	movs	r3, #1
 8002780:	2218      	movs	r2, #24
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f002 f9ac 	bl	8004ae0 <HAL_I2C_Mem_Write>
	mma8452x_Active(hi2c, DevAddress);
 8002788:	887b      	ldrh	r3, [r7, #2]
 800278a:	4619      	mov	r1, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff fdb6 	bl	80022fe <mma8452x_Active>
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <mma8452x_ReadData>:
 * @param  DevAddress Target device address: The device 7 bits address value
 *         in datasheet must be shifted to the left before calling the interface
 * @param  pData Pointer to data buffer
 */
void mma8452x_ReadData(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, int8_t* pData)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b08a      	sub	sp, #40	; 0x28
 800279e:	af04      	add	r7, sp, #16
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	460b      	mov	r3, r1
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	817b      	strh	r3, [r7, #10]
	uint8_t register_value = 0x0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	757b      	strb	r3, [r7, #21]
	uint16_t size_of_data;
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)CTRL_REG1, 1, (uint8_t*)&register_value, sizeof(uint8_t), 100);
 80027ac:	8979      	ldrh	r1, [r7, #10]
 80027ae:	2364      	movs	r3, #100	; 0x64
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	2301      	movs	r3, #1
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	f107 0315 	add.w	r3, r7, #21
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2301      	movs	r3, #1
 80027be:	222a      	movs	r2, #42	; 0x2a
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f002 fa87 	bl	8004cd4 <HAL_I2C_Mem_Read>
	if((register_value & CTRL_REG1_F_READ) == CTRL_REG1_F_READ)
 80027c6:	7d7b      	ldrb	r3, [r7, #21]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <mma8452x_ReadData+0x3c>
	{
		size_of_data = 3;
 80027d0:	2303      	movs	r3, #3
 80027d2:	82fb      	strh	r3, [r7, #22]
 80027d4:	e001      	b.n	80027da <mma8452x_ReadData+0x40>
	}
	else
	{
		size_of_data = 6;
 80027d6:	2306      	movs	r3, #6
 80027d8:	82fb      	strh	r3, [r7, #22]
	}
	HAL_I2C_Mem_Read(hi2c, DevAddress, (uint16_t)OUT_X_MSB, 1, (uint8_t*)pData, size_of_data, 100);
 80027da:	8979      	ldrh	r1, [r7, #10]
 80027dc:	2364      	movs	r3, #100	; 0x64
 80027de:	9302      	str	r3, [sp, #8]
 80027e0:	8afb      	ldrh	r3, [r7, #22]
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2301      	movs	r3, #1
 80027ea:	2201      	movs	r2, #1
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f002 fa71 	bl	8004cd4 <HAL_I2C_Mem_Read>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_MspInit+0x54>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_MspInit+0x54>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_MspInit+0x54>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_MspInit+0x54>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_MspInit+0x54>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_MspInit+0x54>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	210f      	movs	r1, #15
 800283e:	f06f 0001 	mvn.w	r0, #1
 8002842:	f001 f913 	bl	8003a6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <HAL_ADC_MspInit+0xd4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d154      	bne.n	8002920 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b2c      	ldr	r3, [pc, #176]	; (800292c <HAL_ADC_MspInit+0xd8>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a2b      	ldr	r2, [pc, #172]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_ADC_MspInit+0xd8>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a24      	ldr	r2, [pc, #144]	; (800292c <HAL_ADC_MspInit+0xd8>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_ADC_MspInit+0xd8>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028ae:	2320      	movs	r3, #32
 80028b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b2:	2303      	movs	r3, #3
 80028b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4619      	mov	r1, r3
 80028c0:	481b      	ldr	r0, [pc, #108]	; (8002930 <HAL_ADC_MspInit+0xdc>)
 80028c2:	f001 fcff 	bl	80042c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028c8:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <HAL_ADC_MspInit+0xe4>)
 80028ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 8002900:	2200      	movs	r2, #0
 8002902:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 8002906:	f001 f8db 	bl	8003ac0 <HAL_DMA_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002910:	f7ff fcc5 	bl	800229e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
 800291a:	4a06      	ldr	r2, [pc, #24]	; (8002934 <HAL_ADC_MspInit+0xe0>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40012000 	.word	0x40012000
 800292c:	40023800 	.word	0x40023800
 8002930:	40020800 	.word	0x40020800
 8002934:	20000590 	.word	0x20000590
 8002938:	40026410 	.word	0x40026410

0800293c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_I2C_MspInit+0x84>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d12b      	bne.n	80029b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800297a:	23c0      	movs	r3, #192	; 0xc0
 800297c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800297e:	2312      	movs	r3, #18
 8002980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002986:	2303      	movs	r3, #3
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800298a:	2304      	movs	r3, #4
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <HAL_I2C_MspInit+0x8c>)
 8002996:	f001 fc95 	bl	80042c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 80029a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40005400 	.word	0x40005400
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020400 	.word	0x40020400

080029cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_I2C_MspDeInit+0x38>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10d      	bne.n	80029fa <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_I2C_MspDeInit+0x3c>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <HAL_I2C_MspDeInit+0x3c>)
 80029e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80029ea:	2140      	movs	r1, #64	; 0x40
 80029ec:	4807      	ldr	r0, [pc, #28]	; (8002a0c <HAL_I2C_MspDeInit+0x40>)
 80029ee:	f001 fded 	bl	80045cc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80029f2:	2180      	movs	r1, #128	; 0x80
 80029f4:	4805      	ldr	r0, [pc, #20]	; (8002a0c <HAL_I2C_MspDeInit+0x40>)
 80029f6:	f001 fde9 	bl	80045cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40005400 	.word	0x40005400
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020400 	.word	0x40020400

08002a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	; 0x30
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a35      	ldr	r2, [pc, #212]	; (8002b04 <HAL_TIM_Base_MspInit+0xf4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10e      	bne.n	8002a50 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a33      	ldr	r2, [pc, #204]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b31      	ldr	r3, [pc, #196]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002a4e:	e055      	b.n	8002afc <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM10)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <HAL_TIM_Base_MspInit+0xfc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d135      	bne.n	8002ac6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a29      	ldr	r2, [pc, #164]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	4818      	ldr	r0, [pc, #96]	; (8002b10 <HAL_TIM_Base_MspInit+0x100>)
 8002ab0:	f001 fc08 	bl	80042c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2105      	movs	r1, #5
 8002ab8:	2019      	movs	r0, #25
 8002aba:	f000 ffd7 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002abe:	2019      	movs	r0, #25
 8002ac0:	f000 fff0 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
}
 8002ac4:	e01a      	b.n	8002afc <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM11)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <HAL_TIM_Base_MspInit+0x104>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d115      	bne.n	8002afc <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	4a0b      	ldr	r2, [pc, #44]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ade:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_TIM_Base_MspInit+0xf8>)
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2105      	movs	r1, #5
 8002af0:	201a      	movs	r0, #26
 8002af2:	f000 ffbb 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002af6:	201a      	movs	r0, #26
 8002af8:	f000 ffd4 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
}
 8002afc:	bf00      	nop
 8002afe:	3730      	adds	r7, #48	; 0x30
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40014400 	.word	0x40014400
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40014800 	.word	0x40014800

08002b18 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a49      	ldr	r2, [pc, #292]	; (8002c5c <HAL_TIM_IC_MspInit+0x144>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	f040 808c 	bne.w	8002c54 <HAL_TIM_IC_MspInit+0x13c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_TIM_IC_MspInit+0x148>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <HAL_TIM_IC_MspInit+0x148>)
 8002b46:	f043 0308 	orr.w	r3, r3, #8
 8002b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4c:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_TIM_IC_MspInit+0x148>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	4b40      	ldr	r3, [pc, #256]	; (8002c60 <HAL_TIM_IC_MspInit+0x148>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	4a3f      	ldr	r2, [pc, #252]	; (8002c60 <HAL_TIM_IC_MspInit+0x148>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6313      	str	r3, [r2, #48]	; 0x30
 8002b68:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_TIM_IC_MspInit+0x148>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b74:	2303      	movs	r3, #3
 8002b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b84:	2302      	movs	r3, #2
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4835      	ldr	r0, [pc, #212]	; (8002c64 <HAL_TIM_IC_MspInit+0x14c>)
 8002b90:	f001 fb98 	bl	80042c4 <HAL_GPIO_Init>

    /* TIM5 DMA Init */
    /* TIM5_CH1 Init */
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8002b94:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002b96:	4a35      	ldr	r2, [pc, #212]	; (8002c6c <HAL_TIM_IC_MspInit+0x154>)
 8002b98:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8002b9a:	4b33      	ldr	r3, [pc, #204]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002b9c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002ba0:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ba2:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba8:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002bae:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bb4:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002bb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bba:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bbc:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bc2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8002bc4:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bca:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002bcc:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8002bd8:	4823      	ldr	r0, [pc, #140]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002bda:	f000 ff71 	bl	8003ac0 <HAL_DMA_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_TIM_IC_MspInit+0xd0>
    {
      Error_Handler();
 8002be4:	f7ff fb5b 	bl	800229e <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
 8002bee:	4a1e      	ldr	r2, [pc, #120]	; (8002c68 <HAL_TIM_IC_MspInit+0x150>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM5_CH2 Init */
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_TIM_IC_MspInit+0x15c>)
 8002bf8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002bfc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002c00:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_DISABLE;
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c1a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c22:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_CIRCULAR;
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c2a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002c38:	480d      	ldr	r0, [pc, #52]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c3a:	f000 ff41 	bl	8003ac0 <HAL_DMA_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_TIM_IC_MspInit+0x130>
    {
      Error_Handler();
 8002c44:	f7ff fb2b 	bl	800229e <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_TIM_IC_MspInit+0x158>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c54:	bf00      	nop
 8002c56:	3728      	adds	r7, #40	; 0x28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020000 	.word	0x40020000
 8002c68:	20000764 	.word	0x20000764
 8002c6c:	40026040 	.word	0x40026040
 8002c70:	200007c4 	.word	0x200007c4
 8002c74:	40026070 	.word	0x40026070

08002c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a33      	ldr	r2, [pc, #204]	; (8002d64 <HAL_TIM_MspPostInit+0xec>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d13c      	bne.n	8002d14 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_TIM_MspPostInit+0xf0>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a31      	ldr	r2, [pc, #196]	; (8002d68 <HAL_TIM_MspPostInit+0xf0>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <HAL_TIM_MspPostInit+0xf0>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_TIM_MspPostInit+0xf0>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <HAL_TIM_MspPostInit+0xf0>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <HAL_TIM_MspPostInit+0xf0>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cd2:	23c0      	movs	r3, #192	; 0xc0
 8002cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	481f      	ldr	r0, [pc, #124]	; (8002d6c <HAL_TIM_MspPostInit+0xf4>)
 8002cee:	f001 fae9 	bl	80042c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d02:	2302      	movs	r3, #2
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d06:	f107 0314 	add.w	r3, r7, #20
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4818      	ldr	r0, [pc, #96]	; (8002d70 <HAL_TIM_MspPostInit+0xf8>)
 8002d0e:	f001 fad9 	bl	80042c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002d12:	e023      	b.n	8002d5c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM11)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <HAL_TIM_MspPostInit+0xfc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d11e      	bne.n	8002d5c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_TIM_MspPostInit+0xf0>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <HAL_TIM_MspPostInit+0xf0>)
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_TIM_MspPostInit+0xf0>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d44:	2302      	movs	r3, #2
 8002d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4619      	mov	r1, r3
 8002d56:	4806      	ldr	r0, [pc, #24]	; (8002d70 <HAL_TIM_MspPostInit+0xf8>)
 8002d58:	f001 fab4 	bl	80042c4 <HAL_GPIO_Init>
}
 8002d5c:	bf00      	nop
 8002d5e:	3728      	adds	r7, #40	; 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40020400 	.word	0x40020400
 8002d74:	40014800 	.word	0x40014800

08002d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_UART_MspInit+0x94>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d134      	bne.n	8002e04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <HAL_UART_MspInit+0x98>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <HAL_UART_MspInit+0x98>)
 8002da4:	f043 0310 	orr.w	r3, r3, #16
 8002da8:	6453      	str	r3, [r2, #68]	; 0x44
 8002daa:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_UART_MspInit+0x98>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_UART_MspInit+0x98>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <HAL_UART_MspInit+0x98>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_UART_MspInit+0x98>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	2303      	movs	r3, #3
 8002de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002de4:	2307      	movs	r3, #7
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4619      	mov	r1, r3
 8002dee:	4809      	ldr	r0, [pc, #36]	; (8002e14 <HAL_UART_MspInit+0x9c>)
 8002df0:	f001 fa68 	bl	80042c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2105      	movs	r1, #5
 8002df8:	2025      	movs	r0, #37	; 0x25
 8002dfa:	f000 fe37 	bl	8003a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dfe:	2025      	movs	r0, #37	; 0x25
 8002e00:	f000 fe50 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e04:	bf00      	nop
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40011000 	.word	0x40011000
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020000 	.word	0x40020000

08002e18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	; 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	201c      	movs	r0, #28
 8002e2e:	f000 fe1d 	bl	8003a6c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e32:	201c      	movs	r0, #28
 8002e34:	f000 fe36 	bl	8003aa4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_InitTick+0xa8>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <HAL_InitTick+0xa8>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6413      	str	r3, [r2, #64]	; 0x40
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_InitTick+0xa8>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e54:	f107 0210 	add.w	r2, r7, #16
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 f912 	bl	8006088 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e64:	f003 f8e8 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_InitTick+0xac>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	0c9b      	lsrs	r3, r3, #18
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_InitTick+0xb0>)
 8002e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_InitTick+0xb0>)
 8002e86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e8a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002e8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <HAL_InitTick+0xb0>)
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_InitTick+0xb0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_InitTick+0xb0>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002e9e:	480a      	ldr	r0, [pc, #40]	; (8002ec8 <HAL_InitTick+0xb0>)
 8002ea0:	f003 f924 	bl	80060ec <HAL_TIM_Base_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002eaa:	4807      	ldr	r0, [pc, #28]	; (8002ec8 <HAL_InitTick+0xb0>)
 8002eac:	f003 f96e 	bl	800618c <HAL_TIM_Base_Start_IT>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	e000      	b.n	8002eb6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3730      	adds	r7, #48	; 0x30
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	431bde83 	.word	0x431bde83
 8002ec8:	200008e8 	.word	0x200008e8

08002ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ed0:	e7fe      	b.n	8002ed0 <NMI_Handler+0x4>

08002ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed6:	e7fe      	b.n	8002ed6 <HardFault_Handler+0x4>

08002ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002edc:	e7fe      	b.n	8002edc <MemManage_Handler+0x4>

08002ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee2:	e7fe      	b.n	8002ee2 <BusFault_Handler+0x4>

08002ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <UsageFault_Handler+0x4>

08002eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	DMA1_Stream2_Callback(&hdma_tim5_ch1);
 8002efc:	4803      	ldr	r0, [pc, #12]	; (8002f0c <DMA1_Stream2_IRQHandler+0x14>)
 8002efe:	f7fe fe17 	bl	8001b30 <DMA1_Stream2_Callback>
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8002f02:	4802      	ldr	r0, [pc, #8]	; (8002f0c <DMA1_Stream2_IRQHandler+0x14>)
 8002f04:	f000 ff74 	bl	8003df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000764 	.word	0x20000764

08002f10 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	DMA1_Stream4_Callback(&hdma_tim5_ch2);
 8002f14:	4803      	ldr	r0, [pc, #12]	; (8002f24 <DMA1_Stream4_IRQHandler+0x14>)
 8002f16:	f7fe fe3d 	bl	8001b94 <DMA1_Stream4_Callback>
  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8002f1a:	4802      	ldr	r0, [pc, #8]	; (8002f24 <DMA1_Stream4_IRQHandler+0x14>)
 8002f1c:	f000 ff68 	bl	8003df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200007c4 	.word	0x200007c4

08002f28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002f2e:	f003 ffb3 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200006d4 	.word	0x200006d4

08002f3c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002f40:	4802      	ldr	r0, [pc, #8]	; (8002f4c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002f42:	f003 ffa9 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000071c 	.word	0x2000071c

08002f50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f54:	4802      	ldr	r0, [pc, #8]	; (8002f60 <TIM2_IRQHandler+0x10>)
 8002f56:	f003 ff9f 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200008e8 	.word	0x200008e8

08002f64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if((USART1->SR & USART_SR_RXNE) == USART_SR_RXNE)
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <USART1_IRQHandler+0x2c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d108      	bne.n	8002f86 <USART1_IRQHandler+0x22>
	{
		USART1->SR &= ~USART_SR_RXNE;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <USART1_IRQHandler+0x2c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <USART1_IRQHandler+0x2c>)
 8002f7a:	f023 0320 	bic.w	r3, r3, #32
 8002f7e:	6013      	str	r3, [r2, #0]
		UART_RxCallback(&huart1);
 8002f80:	4804      	ldr	r0, [pc, #16]	; (8002f94 <USART1_IRQHandler+0x30>)
 8002f82:	f7fe fdc1 	bl	8001b08 <UART_RxCallback>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f86:	4803      	ldr	r0, [pc, #12]	; (8002f94 <USART1_IRQHandler+0x30>)
 8002f88:	f005 f908 	bl	800819c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40011000 	.word	0x40011000
 8002f94:	20000824 	.word	0x20000824

08002f98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002f9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fa0:	f001 fc12 	bl	80047c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002fa4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fa8:	f001 fc0e 	bl	80047c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <_sbrk+0x5c>)
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <_sbrk+0x60>)
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <_sbrk+0x64>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <_sbrk+0x64>)
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <_sbrk+0x68>)
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <_sbrk+0x64>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe0:	f009 f9c4 	bl	800c36c <__errno>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	220c      	movs	r2, #12
 8002fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	e009      	b.n	8003004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <_sbrk+0x64>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <_sbrk+0x64>)
 8003000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003002:	68fb      	ldr	r3, [r7, #12]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20018000 	.word	0x20018000
 8003010:	00000400 	.word	0x00000400
 8003014:	20000930 	.word	0x20000930
 8003018:	20003ae0 	.word	0x20003ae0

0800301c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <SystemInit+0x20>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <SystemInit+0x20>)
 8003028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800302c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003078 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003044:	480d      	ldr	r0, [pc, #52]	; (800307c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003046:	490e      	ldr	r1, [pc, #56]	; (8003080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003048:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800304c:	e002      	b.n	8003054 <LoopCopyDataInit>

0800304e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003052:	3304      	adds	r3, #4

08003054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003058:	d3f9      	bcc.n	800304e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305a:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800305c:	4c0b      	ldr	r4, [pc, #44]	; (800308c <LoopFillZerobss+0x26>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003060:	e001      	b.n	8003066 <LoopFillZerobss>

08003062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003064:	3204      	adds	r2, #4

08003066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003068:	d3fb      	bcc.n	8003062 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800306a:	f7ff ffd7 	bl	800301c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800306e:	f009 f983 	bl	800c378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003072:	f7fd ff77 	bl	8000f64 <main>
  bx  lr    
 8003076:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003078:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800307c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003080:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003084:	0800e8d0 	.word	0x0800e8d0
  ldr r2, =_sbss
 8003088:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800308c:	20003ae0 	.word	0x20003ae0

08003090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003090:	e7fe      	b.n	8003090 <ADC_IRQHandler>
	...

08003094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_Init+0x40>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <HAL_Init+0x40>)
 800309e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_Init+0x40>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_Init+0x40>)
 80030aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_Init+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <HAL_Init+0x40>)
 80030b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030bc:	2003      	movs	r0, #3
 80030be:	f000 fcca 	bl	8003a56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7ff fea8 	bl	8002e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c8:	f7ff fb98 	bl	80027fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023c00 	.word	0x40023c00

080030d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_IncTick+0x20>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x24>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <HAL_IncTick+0x24>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000008 	.word	0x20000008
 80030fc:	20000934 	.word	0x20000934

08003100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return uwTick;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_GetTick+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000934 	.word	0x20000934

08003118 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e033      	b.n	8003196 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fb8c 	bl	8002854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800315e:	f023 0302 	bic.w	r3, r3, #2
 8003162:	f043 0202 	orr.w	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa48 	bl	8003600 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
 8003186:	e001      	b.n	800318c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Start_DMA+0x1e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0ce      	b.n	800335c <HAL_ADC_Start_DMA+0x1bc>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d018      	beq.n	8003206 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031e4:	4b5f      	ldr	r3, [pc, #380]	; (8003364 <HAL_ADC_Start_DMA+0x1c4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a5f      	ldr	r2, [pc, #380]	; (8003368 <HAL_ADC_Start_DMA+0x1c8>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	0c9a      	lsrs	r2, r3, #18
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031f8:	e002      	b.n	8003200 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f9      	bne.n	80031fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003214:	d107      	bne.n	8003226 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003224:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	f040 8086 	bne.w	8003342 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003260:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003274:	d106      	bne.n	8003284 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f023 0206 	bic.w	r2, r3, #6
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
 8003282:	e002      	b.n	800328a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <HAL_ADC_Start_DMA+0x1cc>)
 8003294:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	4a35      	ldr	r2, [pc, #212]	; (8003370 <HAL_ADC_Start_DMA+0x1d0>)
 800329c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	4a34      	ldr	r2, [pc, #208]	; (8003374 <HAL_ADC_Start_DMA+0x1d4>)
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	4a33      	ldr	r2, [pc, #204]	; (8003378 <HAL_ADC_Start_DMA+0x1d8>)
 80032ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	334c      	adds	r3, #76	; 0x4c
 80032e2:	4619      	mov	r1, r3
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f000 fc98 	bl	8003c1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10f      	bne.n	8003318 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d129      	bne.n	800335a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	e020      	b.n	800335a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a17      	ldr	r2, [pc, #92]	; (800337c <HAL_ADC_Start_DMA+0x1dc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d11b      	bne.n	800335a <HAL_ADC_Start_DMA+0x1ba>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d114      	bne.n	800335a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	e00b      	b.n	800335a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f043 0210 	orr.w	r2, r3, #16
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000000 	.word	0x20000000
 8003368:	431bde83 	.word	0x431bde83
 800336c:	40012300 	.word	0x40012300
 8003370:	080037f9 	.word	0x080037f9
 8003374:	080038b3 	.word	0x080038b3
 8003378:	080038cf 	.word	0x080038cf
 800337c:	40012000 	.word	0x40012000

08003380 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1c>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e105      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x228>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	d925      	bls.n	8003434 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68d9      	ldr	r1, [r3, #12]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	3b1e      	subs	r3, #30
 80033fe:	2207      	movs	r2, #7
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43da      	mvns	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	400a      	ands	r2, r1
 800340c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68d9      	ldr	r1, [r3, #12]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	4618      	mov	r0, r3
 8003420:	4603      	mov	r3, r0
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4403      	add	r3, r0
 8003426:	3b1e      	subs	r3, #30
 8003428:	409a      	lsls	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	e022      	b.n	800347a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6919      	ldr	r1, [r3, #16]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	4613      	mov	r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	4413      	add	r3, r2
 8003448:	2207      	movs	r2, #7
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43da      	mvns	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	400a      	ands	r2, r1
 8003456:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6919      	ldr	r1, [r3, #16]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	4618      	mov	r0, r3
 800346a:	4603      	mov	r3, r0
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4403      	add	r3, r0
 8003470:	409a      	lsls	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d824      	bhi.n	80034cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	3b05      	subs	r3, #5
 8003494:	221f      	movs	r2, #31
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43da      	mvns	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	400a      	ands	r2, r1
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4618      	mov	r0, r3
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	3b05      	subs	r3, #5
 80034be:	fa00 f203 	lsl.w	r2, r0, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34
 80034ca:	e04c      	b.n	8003566 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	d824      	bhi.n	800351e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	3b23      	subs	r3, #35	; 0x23
 80034e6:	221f      	movs	r2, #31
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43da      	mvns	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	400a      	ands	r2, r1
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	4618      	mov	r0, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	3b23      	subs	r3, #35	; 0x23
 8003510:	fa00 f203 	lsl.w	r2, r0, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
 800351c:	e023      	b.n	8003566 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	3b41      	subs	r3, #65	; 0x41
 8003530:	221f      	movs	r2, #31
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	400a      	ands	r2, r1
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	4618      	mov	r0, r3
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	3b41      	subs	r3, #65	; 0x41
 800355a:	fa00 f203 	lsl.w	r2, r0, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_ADC_ConfigChannel+0x234>)
 8003568:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <HAL_ADC_ConfigChannel+0x238>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d109      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x1cc>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b12      	cmp	r3, #18
 800357a:	d105      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_ADC_ConfigChannel+0x238>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d123      	bne.n	80035da <HAL_ADC_ConfigChannel+0x21e>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d003      	beq.n	80035a2 <HAL_ADC_ConfigChannel+0x1e6>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b11      	cmp	r3, #17
 80035a0:	d11b      	bne.n	80035da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d111      	bne.n	80035da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_ADC_ConfigChannel+0x23c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a10      	ldr	r2, [pc, #64]	; (80035fc <HAL_ADC_ConfigChannel+0x240>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	0c9a      	lsrs	r2, r3, #18
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035cc:	e002      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f9      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40012300 	.word	0x40012300
 80035f4:	40012000 	.word	0x40012000
 80035f8:	20000000 	.word	0x20000000
 80035fc:	431bde83 	.word	0x431bde83

08003600 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003608:	4b79      	ldr	r3, [pc, #484]	; (80037f0 <ADC_Init+0x1f0>)
 800360a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	431a      	orrs	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	021a      	lsls	r2, r3, #8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003658:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800367a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6899      	ldr	r1, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <ADC_Init+0x1f4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6899      	ldr	r1, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6899      	ldr	r1, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	e00f      	b.n	80036fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0202 	bic.w	r2, r2, #2
 800370c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7e1b      	ldrb	r3, [r3, #24]
 8003718:	005a      	lsls	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800373a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800374a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	3b01      	subs	r3, #1
 8003758:	035a      	lsls	r2, r3, #13
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	e007      	b.n	8003774 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003772:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	3b01      	subs	r3, #1
 8003790:	051a      	lsls	r2, r3, #20
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6899      	ldr	r1, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037b6:	025a      	lsls	r2, r3, #9
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6899      	ldr	r1, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	029a      	lsls	r2, r3, #10
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	609a      	str	r2, [r3, #8]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	40012300 	.word	0x40012300
 80037f4:	0f000001 	.word	0x0f000001

080037f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d13c      	bne.n	800388c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d12b      	bne.n	8003884 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003830:	2b00      	cmp	r3, #0
 8003832:	d127      	bne.n	8003884 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800384c:	2b00      	cmp	r3, #0
 800384e:	d119      	bne.n	8003884 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0220 	bic.w	r2, r2, #32
 800385e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff fd7b 	bl	8003380 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800388a:	e00e      	b.n	80038aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff fd85 	bl	80033a8 <HAL_ADC_ErrorCallback>
}
 800389e:	e004      	b.n	80038aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7ff fd67 	bl	8003394 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2240      	movs	r2, #64	; 0x40
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f043 0204 	orr.w	r2, r3, #4
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff fd5a 	bl	80033a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003918:	4013      	ands	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392e:	4a04      	ldr	r2, [pc, #16]	; (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	60d3      	str	r3, [r2, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <__NVIC_GetPriorityGrouping+0x18>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	f003 0307 	and.w	r3, r3, #7
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	db0b      	blt.n	800398a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	4907      	ldr	r1, [pc, #28]	; (8003998 <__NVIC_EnableIRQ+0x38>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2001      	movs	r0, #1
 8003982:	fa00 f202 	lsl.w	r2, r0, r2
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100

0800399c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db0a      	blt.n	80039c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	490c      	ldr	r1, [pc, #48]	; (80039e8 <__NVIC_SetPriority+0x4c>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c4:	e00a      	b.n	80039dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4908      	ldr	r1, [pc, #32]	; (80039ec <__NVIC_SetPriority+0x50>)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	3b04      	subs	r3, #4
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	440b      	add	r3, r1
 80039da:	761a      	strb	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f1c3 0307 	rsb	r3, r3, #7
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	bf28      	it	cs
 8003a0e:	2304      	movcs	r3, #4
 8003a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d902      	bls.n	8003a20 <NVIC_EncodePriority+0x30>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3b03      	subs	r3, #3
 8003a1e:	e000      	b.n	8003a22 <NVIC_EncodePriority+0x32>
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	401a      	ands	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a38:	f04f 31ff 	mov.w	r1, #4294967295
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	43d9      	mvns	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	4313      	orrs	r3, r2
         );
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3724      	adds	r7, #36	; 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff4c 	bl	80038fc <__NVIC_SetPriorityGrouping>
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a7e:	f7ff ff61 	bl	8003944 <__NVIC_GetPriorityGrouping>
 8003a82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	6978      	ldr	r0, [r7, #20]
 8003a8a:	f7ff ffb1 	bl	80039f0 <NVIC_EncodePriority>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff80 	bl	800399c <__NVIC_SetPriority>
}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff54 	bl	8003960 <__NVIC_EnableIRQ>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003acc:	f7ff fb18 	bl	8003100 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e099      	b.n	8003c10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003afc:	e00f      	b.n	8003b1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003afe:	f7ff faff 	bl	8003100 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d908      	bls.n	8003b1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e078      	b.n	8003c10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e8      	bne.n	8003afe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4b38      	ldr	r3, [pc, #224]	; (8003c18 <HAL_DMA_Init+0x158>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d107      	bne.n	8003b88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	4313      	orrs	r3, r2
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0307 	bic.w	r3, r3, #7
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d117      	bne.n	8003be2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fb01 	bl	80041cc <DMA_CheckFifoParam>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bde:	2301      	movs	r3, #1
 8003be0:	e016      	b.n	8003c10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fab8 	bl	8004160 <DMA_CalcBaseAndBitshift>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf8:	223f      	movs	r2, #63	; 0x3f
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	f010803f 	.word	0xf010803f

08003c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_DMA_Start_IT+0x26>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e040      	b.n	8003cc4 <HAL_DMA_Start_IT+0xa8>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d12f      	bne.n	8003cb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa4a 	bl	8004104 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	223f      	movs	r2, #63	; 0x3f
 8003c76:	409a      	lsls	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0216 	orr.w	r2, r2, #22
 8003c8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0208 	orr.w	r2, r2, #8
 8003ca2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e005      	b.n	8003cc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cda:	f7ff fa11 	bl	8003100 <HAL_GetTick>
 8003cde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d008      	beq.n	8003cfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e052      	b.n	8003da4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0216 	bic.w	r2, r2, #22
 8003d0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <HAL_DMA_Abort+0x62>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0208 	bic.w	r2, r2, #8
 8003d3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d4e:	e013      	b.n	8003d78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d50:	f7ff f9d6 	bl	8003100 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	d90c      	bls.n	8003d78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2203      	movs	r2, #3
 8003d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e015      	b.n	8003da4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e4      	bne.n	8003d50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8a:	223f      	movs	r2, #63	; 0x3f
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d004      	beq.n	8003dca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e00c      	b.n	8003de4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2205      	movs	r2, #5
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dfc:	4b8e      	ldr	r3, [pc, #568]	; (8004038 <HAL_DMA_IRQHandler+0x248>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a8e      	ldr	r2, [pc, #568]	; (800403c <HAL_DMA_IRQHandler+0x24c>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	0a9b      	lsrs	r3, r3, #10
 8003e08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01a      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	2208      	movs	r2, #8
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	f043 0201 	orr.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	2201      	movs	r2, #1
 8003e62:	409a      	lsls	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d012      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	2201      	movs	r2, #1
 8003e80:	409a      	lsls	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f043 0202 	orr.w	r2, r3, #2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	2204      	movs	r2, #4
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d012      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	f043 0204 	orr.w	r2, r3, #4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	2210      	movs	r2, #16
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d043      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d03c      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	2210      	movs	r2, #16
 8003eec:	409a      	lsls	r2, r3
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d018      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d108      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d024      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
 8003f1e:	e01f      	b.n	8003f60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01b      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
 8003f30:	e016      	b.n	8003f60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d107      	bne.n	8003f50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0208 	bic.w	r2, r2, #8
 8003f4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	2220      	movs	r2, #32
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 808f 	beq.w	8004090 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8087 	beq.w	8004090 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f86:	2220      	movs	r2, #32
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d136      	bne.n	8004008 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0216 	bic.w	r2, r2, #22
 8003fa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_DMA_IRQHandler+0x1da>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0208 	bic.w	r2, r2, #8
 8003fd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	223f      	movs	r2, #63	; 0x3f
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d07e      	beq.n	80040fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
        }
        return;
 8004006:	e079      	b.n	80040fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01d      	beq.n	8004052 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10d      	bne.n	8004040 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	2b00      	cmp	r3, #0
 800402a:	d031      	beq.n	8004090 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
 8004034:	e02c      	b.n	8004090 <HAL_DMA_IRQHandler+0x2a0>
 8004036:	bf00      	nop
 8004038:	20000000 	.word	0x20000000
 800403c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
 8004050:	e01e      	b.n	8004090 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0210 	bic.w	r2, r2, #16
 800406e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	2b00      	cmp	r3, #0
 8004096:	d032      	beq.n	80040fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d022      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2205      	movs	r2, #5
 80040a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	3301      	adds	r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d307      	bcc.n	80040d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f2      	bne.n	80040bc <HAL_DMA_IRQHandler+0x2cc>
 80040d6:	e000      	b.n	80040da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	4798      	blx	r3
 80040fa:	e000      	b.n	80040fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80040fc:	bf00      	nop
    }
  }
}
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004120:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d108      	bne.n	8004144 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004142:	e007      	b.n	8004154 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	3b10      	subs	r3, #16
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <DMA_CalcBaseAndBitshift+0x64>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800417a:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <DMA_CalcBaseAndBitshift+0x68>)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d909      	bls.n	80041a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	1d1a      	adds	r2, r3, #4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	659a      	str	r2, [r3, #88]	; 0x58
 80041a0:	e007      	b.n	80041b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	aaaaaaab 	.word	0xaaaaaaab
 80041c8:	0800e6d8 	.word	0x0800e6d8

080041cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11f      	bne.n	8004226 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d856      	bhi.n	800429a <DMA_CheckFifoParam+0xce>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <DMA_CheckFifoParam+0x28>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004205 	.word	0x08004205
 80041f8:	08004217 	.word	0x08004217
 80041fc:	08004205 	.word	0x08004205
 8004200:	0800429b 	.word	0x0800429b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d046      	beq.n	800429e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004214:	e043      	b.n	800429e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800421e:	d140      	bne.n	80042a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004224:	e03d      	b.n	80042a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422e:	d121      	bne.n	8004274 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d837      	bhi.n	80042a6 <DMA_CheckFifoParam+0xda>
 8004236:	a201      	add	r2, pc, #4	; (adr r2, 800423c <DMA_CheckFifoParam+0x70>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	0800424d 	.word	0x0800424d
 8004240:	08004253 	.word	0x08004253
 8004244:	0800424d 	.word	0x0800424d
 8004248:	08004265 	.word	0x08004265
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
      break;
 8004250:	e030      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d025      	beq.n	80042aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004262:	e022      	b.n	80042aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800426c:	d11f      	bne.n	80042ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004272:	e01c      	b.n	80042ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d903      	bls.n	8004282 <DMA_CheckFifoParam+0xb6>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d003      	beq.n	8004288 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004280:	e018      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
      break;
 8004286:	e015      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00e      	beq.n	80042b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      break;
 8004298:	e00b      	b.n	80042b2 <DMA_CheckFifoParam+0xe6>
      break;
 800429a:	bf00      	nop
 800429c:	e00a      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
      break;
 800429e:	bf00      	nop
 80042a0:	e008      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
      break;
 80042a2:	bf00      	nop
 80042a4:	e006      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
      break;
 80042a6:	bf00      	nop
 80042a8:	e004      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
      break;
 80042aa:	bf00      	nop
 80042ac:	e002      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <DMA_CheckFifoParam+0xe8>
      break;
 80042b2:	bf00      	nop
    }
  } 
  
  return status; 
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop

080042c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e159      	b.n	8004594 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042e0:	2201      	movs	r2, #1
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	f040 8148 	bne.w	800458e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d005      	beq.n	8004316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004312:	2b02      	cmp	r3, #2
 8004314:	d130      	bne.n	8004378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	2203      	movs	r2, #3
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800434c:	2201      	movs	r2, #1
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 0201 	and.w	r2, r3, #1
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b03      	cmp	r3, #3
 8004382:	d017      	beq.n	80043b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d123      	bne.n	8004408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	08da      	lsrs	r2, r3, #3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3208      	adds	r2, #8
 80043c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	220f      	movs	r2, #15
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	08da      	lsrs	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3208      	adds	r2, #8
 8004402:	69b9      	ldr	r1, [r7, #24]
 8004404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	2203      	movs	r2, #3
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0203 	and.w	r2, r3, #3
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a2 	beq.w	800458e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	4b57      	ldr	r3, [pc, #348]	; (80045ac <HAL_GPIO_Init+0x2e8>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	4a56      	ldr	r2, [pc, #344]	; (80045ac <HAL_GPIO_Init+0x2e8>)
 8004454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004458:	6453      	str	r3, [r2, #68]	; 0x44
 800445a:	4b54      	ldr	r3, [pc, #336]	; (80045ac <HAL_GPIO_Init+0x2e8>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004466:	4a52      	ldr	r2, [pc, #328]	; (80045b0 <HAL_GPIO_Init+0x2ec>)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	3302      	adds	r3, #2
 800446e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	220f      	movs	r2, #15
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a49      	ldr	r2, [pc, #292]	; (80045b4 <HAL_GPIO_Init+0x2f0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d019      	beq.n	80044c6 <HAL_GPIO_Init+0x202>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a48      	ldr	r2, [pc, #288]	; (80045b8 <HAL_GPIO_Init+0x2f4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_GPIO_Init+0x1fe>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a47      	ldr	r2, [pc, #284]	; (80045bc <HAL_GPIO_Init+0x2f8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00d      	beq.n	80044be <HAL_GPIO_Init+0x1fa>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a46      	ldr	r2, [pc, #280]	; (80045c0 <HAL_GPIO_Init+0x2fc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <HAL_GPIO_Init+0x1f6>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a45      	ldr	r2, [pc, #276]	; (80045c4 <HAL_GPIO_Init+0x300>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <HAL_GPIO_Init+0x1f2>
 80044b2:	2304      	movs	r3, #4
 80044b4:	e008      	b.n	80044c8 <HAL_GPIO_Init+0x204>
 80044b6:	2307      	movs	r3, #7
 80044b8:	e006      	b.n	80044c8 <HAL_GPIO_Init+0x204>
 80044ba:	2303      	movs	r3, #3
 80044bc:	e004      	b.n	80044c8 <HAL_GPIO_Init+0x204>
 80044be:	2302      	movs	r3, #2
 80044c0:	e002      	b.n	80044c8 <HAL_GPIO_Init+0x204>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_GPIO_Init+0x204>
 80044c6:	2300      	movs	r3, #0
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	f002 0203 	and.w	r2, r2, #3
 80044ce:	0092      	lsls	r2, r2, #2
 80044d0:	4093      	lsls	r3, r2
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044d8:	4935      	ldr	r1, [pc, #212]	; (80045b0 <HAL_GPIO_Init+0x2ec>)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	3302      	adds	r3, #2
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044e6:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <HAL_GPIO_Init+0x304>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800450a:	4a2f      	ldr	r2, [pc, #188]	; (80045c8 <HAL_GPIO_Init+0x304>)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004510:	4b2d      	ldr	r3, [pc, #180]	; (80045c8 <HAL_GPIO_Init+0x304>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004534:	4a24      	ldr	r2, [pc, #144]	; (80045c8 <HAL_GPIO_Init+0x304>)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800453a:	4b23      	ldr	r3, [pc, #140]	; (80045c8 <HAL_GPIO_Init+0x304>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800455e:	4a1a      	ldr	r2, [pc, #104]	; (80045c8 <HAL_GPIO_Init+0x304>)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004564:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <HAL_GPIO_Init+0x304>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004588:	4a0f      	ldr	r2, [pc, #60]	; (80045c8 <HAL_GPIO_Init+0x304>)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3301      	adds	r3, #1
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b0f      	cmp	r3, #15
 8004598:	f67f aea2 	bls.w	80042e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	3724      	adds	r7, #36	; 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40013800 	.word	0x40013800
 80045b4:	40020000 	.word	0x40020000
 80045b8:	40020400 	.word	0x40020400
 80045bc:	40020800 	.word	0x40020800
 80045c0:	40020c00 	.word	0x40020c00
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40013c00 	.word	0x40013c00

080045cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e0bb      	b.n	8004760 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045e8:	2201      	movs	r2, #1
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	429a      	cmp	r2, r3
 8004600:	f040 80ab 	bne.w	800475a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004604:	4a5c      	ldr	r2, [pc, #368]	; (8004778 <HAL_GPIO_DeInit+0x1ac>)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	089b      	lsrs	r3, r3, #2
 800460a:	3302      	adds	r3, #2
 800460c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004610:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	220f      	movs	r2, #15
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	4013      	ands	r3, r2
 8004624:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a54      	ldr	r2, [pc, #336]	; (800477c <HAL_GPIO_DeInit+0x1b0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d019      	beq.n	8004662 <HAL_GPIO_DeInit+0x96>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a53      	ldr	r2, [pc, #332]	; (8004780 <HAL_GPIO_DeInit+0x1b4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_GPIO_DeInit+0x92>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a52      	ldr	r2, [pc, #328]	; (8004784 <HAL_GPIO_DeInit+0x1b8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00d      	beq.n	800465a <HAL_GPIO_DeInit+0x8e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a51      	ldr	r2, [pc, #324]	; (8004788 <HAL_GPIO_DeInit+0x1bc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <HAL_GPIO_DeInit+0x8a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a50      	ldr	r2, [pc, #320]	; (800478c <HAL_GPIO_DeInit+0x1c0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d101      	bne.n	8004652 <HAL_GPIO_DeInit+0x86>
 800464e:	2304      	movs	r3, #4
 8004650:	e008      	b.n	8004664 <HAL_GPIO_DeInit+0x98>
 8004652:	2307      	movs	r3, #7
 8004654:	e006      	b.n	8004664 <HAL_GPIO_DeInit+0x98>
 8004656:	2303      	movs	r3, #3
 8004658:	e004      	b.n	8004664 <HAL_GPIO_DeInit+0x98>
 800465a:	2302      	movs	r3, #2
 800465c:	e002      	b.n	8004664 <HAL_GPIO_DeInit+0x98>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_GPIO_DeInit+0x98>
 8004662:	2300      	movs	r3, #0
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	f002 0203 	and.w	r2, r2, #3
 800466a:	0092      	lsls	r2, r2, #2
 800466c:	4093      	lsls	r3, r2
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	d132      	bne.n	80046da <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004674:	4b46      	ldr	r3, [pc, #280]	; (8004790 <HAL_GPIO_DeInit+0x1c4>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	43db      	mvns	r3, r3
 800467c:	4944      	ldr	r1, [pc, #272]	; (8004790 <HAL_GPIO_DeInit+0x1c4>)
 800467e:	4013      	ands	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004682:	4b43      	ldr	r3, [pc, #268]	; (8004790 <HAL_GPIO_DeInit+0x1c4>)
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	43db      	mvns	r3, r3
 800468a:	4941      	ldr	r1, [pc, #260]	; (8004790 <HAL_GPIO_DeInit+0x1c4>)
 800468c:	4013      	ands	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004690:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <HAL_GPIO_DeInit+0x1c4>)
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	43db      	mvns	r3, r3
 8004698:	493d      	ldr	r1, [pc, #244]	; (8004790 <HAL_GPIO_DeInit+0x1c4>)
 800469a:	4013      	ands	r3, r2
 800469c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800469e:	4b3c      	ldr	r3, [pc, #240]	; (8004790 <HAL_GPIO_DeInit+0x1c4>)
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	43db      	mvns	r3, r3
 80046a6:	493a      	ldr	r1, [pc, #232]	; (8004790 <HAL_GPIO_DeInit+0x1c4>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	220f      	movs	r2, #15
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80046bc:	4a2e      	ldr	r2, [pc, #184]	; (8004778 <HAL_GPIO_DeInit+0x1ac>)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	089b      	lsrs	r3, r3, #2
 80046c2:	3302      	adds	r3, #2
 80046c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	43da      	mvns	r2, r3
 80046cc:	482a      	ldr	r0, [pc, #168]	; (8004778 <HAL_GPIO_DeInit+0x1ac>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	400a      	ands	r2, r1
 80046d4:	3302      	adds	r3, #2
 80046d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	2103      	movs	r1, #3
 80046e4:	fa01 f303 	lsl.w	r3, r1, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	401a      	ands	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	08da      	lsrs	r2, r3, #3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3208      	adds	r2, #8
 80046f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	220f      	movs	r2, #15
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	08d2      	lsrs	r2, r2, #3
 8004710:	4019      	ands	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3208      	adds	r2, #8
 8004716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	2103      	movs	r1, #3
 8004724:	fa01 f303 	lsl.w	r3, r1, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	401a      	ands	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	2101      	movs	r1, #1
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	401a      	ands	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	2103      	movs	r1, #3
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	43db      	mvns	r3, r3
 8004754:	401a      	ands	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	3301      	adds	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b0f      	cmp	r3, #15
 8004764:	f67f af40 	bls.w	80045e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40013800 	.word	0x40013800
 800477c:	40020000 	.word	0x40020000
 8004780:	40020400 	.word	0x40020400
 8004784:	40020800 	.word	0x40020800
 8004788:	40020c00 	.word	0x40020c00
 800478c:	40021000 	.word	0x40021000
 8004790:	40013c00 	.word	0x40013c00

08004794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]
 80047a0:	4613      	mov	r3, r2
 80047a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047a4:	787b      	ldrb	r3, [r7, #1]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047b0:	e003      	b.n	80047ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047b2:	887b      	ldrh	r3, [r7, #2]
 80047b4:	041a      	lsls	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	619a      	str	r2, [r3, #24]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d006      	beq.n	80047ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047de:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd f966 	bl	8001ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40013c00 	.word	0x40013c00

080047f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e12b      	b.n	8004a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fe f88c 	bl	800293c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800484a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800485a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800485c:	f001 fbec 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8004860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4a81      	ldr	r2, [pc, #516]	; (8004a6c <HAL_I2C_Init+0x274>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d807      	bhi.n	800487c <HAL_I2C_Init+0x84>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a80      	ldr	r2, [pc, #512]	; (8004a70 <HAL_I2C_Init+0x278>)
 8004870:	4293      	cmp	r3, r2
 8004872:	bf94      	ite	ls
 8004874:	2301      	movls	r3, #1
 8004876:	2300      	movhi	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	e006      	b.n	800488a <HAL_I2C_Init+0x92>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a7d      	ldr	r2, [pc, #500]	; (8004a74 <HAL_I2C_Init+0x27c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	bf94      	ite	ls
 8004884:	2301      	movls	r3, #1
 8004886:	2300      	movhi	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e0e7      	b.n	8004a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4a78      	ldr	r2, [pc, #480]	; (8004a78 <HAL_I2C_Init+0x280>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	0c9b      	lsrs	r3, r3, #18
 800489c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a6a      	ldr	r2, [pc, #424]	; (8004a6c <HAL_I2C_Init+0x274>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d802      	bhi.n	80048cc <HAL_I2C_Init+0xd4>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	3301      	adds	r3, #1
 80048ca:	e009      	b.n	80048e0 <HAL_I2C_Init+0xe8>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	4a69      	ldr	r2, [pc, #420]	; (8004a7c <HAL_I2C_Init+0x284>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	3301      	adds	r3, #1
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	495c      	ldr	r1, [pc, #368]	; (8004a6c <HAL_I2C_Init+0x274>)
 80048fc:	428b      	cmp	r3, r1
 80048fe:	d819      	bhi.n	8004934 <HAL_I2C_Init+0x13c>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1e59      	subs	r1, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	fbb1 f3f3 	udiv	r3, r1, r3
 800490e:	1c59      	adds	r1, r3, #1
 8004910:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004914:	400b      	ands	r3, r1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_I2C_Init+0x138>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1e59      	subs	r1, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	fbb1 f3f3 	udiv	r3, r1, r3
 8004928:	3301      	adds	r3, #1
 800492a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492e:	e051      	b.n	80049d4 <HAL_I2C_Init+0x1dc>
 8004930:	2304      	movs	r3, #4
 8004932:	e04f      	b.n	80049d4 <HAL_I2C_Init+0x1dc>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d111      	bne.n	8004960 <HAL_I2C_Init+0x168>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1e58      	subs	r0, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6859      	ldr	r1, [r3, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	440b      	add	r3, r1
 800494a:	fbb0 f3f3 	udiv	r3, r0, r3
 800494e:	3301      	adds	r3, #1
 8004950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	e012      	b.n	8004986 <HAL_I2C_Init+0x18e>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	1e58      	subs	r0, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6859      	ldr	r1, [r3, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	0099      	lsls	r1, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	fbb0 f3f3 	udiv	r3, r0, r3
 8004976:	3301      	adds	r3, #1
 8004978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_I2C_Init+0x196>
 800498a:	2301      	movs	r3, #1
 800498c:	e022      	b.n	80049d4 <HAL_I2C_Init+0x1dc>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10e      	bne.n	80049b4 <HAL_I2C_Init+0x1bc>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1e58      	subs	r0, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6859      	ldr	r1, [r3, #4]
 800499e:	460b      	mov	r3, r1
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	440b      	add	r3, r1
 80049a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a8:	3301      	adds	r3, #1
 80049aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b2:	e00f      	b.n	80049d4 <HAL_I2C_Init+0x1dc>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1e58      	subs	r0, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	0099      	lsls	r1, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ca:	3301      	adds	r3, #1
 80049cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	6809      	ldr	r1, [r1, #0]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6911      	ldr	r1, [r2, #16]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68d2      	ldr	r2, [r2, #12]
 8004a0e:	4311      	orrs	r1, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	000186a0 	.word	0x000186a0
 8004a70:	001e847f 	.word	0x001e847f
 8004a74:	003d08ff 	.word	0x003d08ff
 8004a78:	431bde83 	.word	0x431bde83
 8004a7c:	10624dd3 	.word	0x10624dd3

08004a80 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e021      	b.n	8004ad6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2224      	movs	r2, #36	; 0x24
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd ff8e 	bl	80029cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	4608      	mov	r0, r1
 8004aea:	4611      	mov	r1, r2
 8004aec:	461a      	mov	r2, r3
 8004aee:	4603      	mov	r3, r0
 8004af0:	817b      	strh	r3, [r7, #10]
 8004af2:	460b      	mov	r3, r1
 8004af4:	813b      	strh	r3, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004afa:	f7fe fb01 	bl	8003100 <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	f040 80d9 	bne.w	8004cc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	2319      	movs	r3, #25
 8004b14:	2201      	movs	r2, #1
 8004b16:	496d      	ldr	r1, [pc, #436]	; (8004ccc <HAL_I2C_Mem_Write+0x1ec>)
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fc7f 	bl	800541c <I2C_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b24:	2302      	movs	r3, #2
 8004b26:	e0cc      	b.n	8004cc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_I2C_Mem_Write+0x56>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e0c5      	b.n	8004cc2 <HAL_I2C_Mem_Write+0x1e2>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d007      	beq.n	8004b5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2221      	movs	r2, #33	; 0x21
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2240      	movs	r2, #64	; 0x40
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a4d      	ldr	r2, [pc, #308]	; (8004cd0 <HAL_I2C_Mem_Write+0x1f0>)
 8004b9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b9e:	88f8      	ldrh	r0, [r7, #6]
 8004ba0:	893a      	ldrh	r2, [r7, #8]
 8004ba2:	8979      	ldrh	r1, [r7, #10]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	4603      	mov	r3, r0
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fab6 	bl	8005120 <I2C_RequestMemoryWrite>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d052      	beq.n	8004c60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e081      	b.n	8004cc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 fd00 	bl	80055c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00d      	beq.n	8004bea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d107      	bne.n	8004be6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e06b      	b.n	8004cc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	781a      	ldrb	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d11b      	bne.n	8004c60 <HAL_I2C_Mem_Write+0x180>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d017      	beq.n	8004c60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1aa      	bne.n	8004bbe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fcec 	bl	800564a <I2C_WaitOnBTFFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00d      	beq.n	8004c94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d107      	bne.n	8004c90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e016      	b.n	8004cc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e000      	b.n	8004cc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	00100002 	.word	0x00100002
 8004cd0:	ffff0000 	.word	0xffff0000

08004cd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08c      	sub	sp, #48	; 0x30
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	4608      	mov	r0, r1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	817b      	strh	r3, [r7, #10]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	813b      	strh	r3, [r7, #8]
 8004cea:	4613      	mov	r3, r2
 8004cec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cee:	f7fe fa07 	bl	8003100 <HAL_GetTick>
 8004cf2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	f040 8208 	bne.w	8005112 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2319      	movs	r3, #25
 8004d08:	2201      	movs	r2, #1
 8004d0a:	497b      	ldr	r1, [pc, #492]	; (8004ef8 <HAL_I2C_Mem_Read+0x224>)
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fb85 	bl	800541c <I2C_WaitOnFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e1fb      	b.n	8005114 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_I2C_Mem_Read+0x56>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e1f4      	b.n	8005114 <HAL_I2C_Mem_Read+0x440>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d007      	beq.n	8004d50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2222      	movs	r2, #34	; 0x22
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2240      	movs	r2, #64	; 0x40
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a5b      	ldr	r2, [pc, #364]	; (8004efc <HAL_I2C_Mem_Read+0x228>)
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d92:	88f8      	ldrh	r0, [r7, #6]
 8004d94:	893a      	ldrh	r2, [r7, #8]
 8004d96:	8979      	ldrh	r1, [r7, #10]
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	9301      	str	r3, [sp, #4]
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	4603      	mov	r3, r0
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fa52 	bl	800524c <I2C_RequestMemoryRead>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e1b0      	b.n	8005114 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d113      	bne.n	8004de2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	623b      	str	r3, [r7, #32]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	623b      	str	r3, [r7, #32]
 8004dce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e184      	b.n	80050ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d11b      	bne.n	8004e22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	e164      	b.n	80050ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d11b      	bne.n	8004e62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	e144      	b.n	80050ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e78:	e138      	b.n	80050ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	f200 80f1 	bhi.w	8005066 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d123      	bne.n	8004ed4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 fc1b 	bl	80056cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e139      	b.n	8005114 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed2:	e10b      	b.n	80050ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d14e      	bne.n	8004f7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4906      	ldr	r1, [pc, #24]	; (8004f00 <HAL_I2C_Mem_Read+0x22c>)
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fa98 	bl	800541c <I2C_WaitOnFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d008      	beq.n	8004f04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e10e      	b.n	8005114 <HAL_I2C_Mem_Read+0x440>
 8004ef6:	bf00      	nop
 8004ef8:	00100002 	.word	0x00100002
 8004efc:	ffff0000 	.word	0xffff0000
 8004f00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f78:	e0b8      	b.n	80050ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	2200      	movs	r2, #0
 8004f82:	4966      	ldr	r1, [pc, #408]	; (800511c <HAL_I2C_Mem_Read+0x448>)
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fa49 	bl	800541c <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0bf      	b.n	8005114 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	2200      	movs	r2, #0
 8004fde:	494f      	ldr	r1, [pc, #316]	; (800511c <HAL_I2C_Mem_Read+0x448>)
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fa1b 	bl	800541c <I2C_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e091      	b.n	8005114 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005064:	e042      	b.n	80050ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005068:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fb2e 	bl	80056cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e04c      	b.n	8005114 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d118      	bne.n	80050ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f47f aec2 	bne.w	8004e7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005112:	2302      	movs	r3, #2
  }
}
 8005114:	4618      	mov	r0, r3
 8005116:	3728      	adds	r7, #40	; 0x28
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	00010004 	.word	0x00010004

08005120 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	4608      	mov	r0, r1
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	4603      	mov	r3, r0
 8005130:	817b      	strh	r3, [r7, #10]
 8005132:	460b      	mov	r3, r1
 8005134:	813b      	strh	r3, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005148:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	2200      	movs	r2, #0
 8005152:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f960 	bl	800541c <I2C_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005170:	d103      	bne.n	800517a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e05f      	b.n	800523e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800517e:	897b      	ldrh	r3, [r7, #10]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800518c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	6a3a      	ldr	r2, [r7, #32]
 8005192:	492d      	ldr	r1, [pc, #180]	; (8005248 <I2C_RequestMemoryWrite+0x128>)
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f998 	bl	80054ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e04c      	b.n	800523e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	6a39      	ldr	r1, [r7, #32]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fa02 	bl	80055c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00d      	beq.n	80051e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d107      	bne.n	80051e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e02b      	b.n	800523e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d105      	bne.n	80051f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ec:	893b      	ldrh	r3, [r7, #8]
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	611a      	str	r2, [r3, #16]
 80051f6:	e021      	b.n	800523c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051f8:	893b      	ldrh	r3, [r7, #8]
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005208:	6a39      	ldr	r1, [r7, #32]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f9dc 	bl	80055c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	2b04      	cmp	r3, #4
 800521c:	d107      	bne.n	800522e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e005      	b.n	800523e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005232:	893b      	ldrh	r3, [r7, #8]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	00010002 	.word	0x00010002

0800524c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	4608      	mov	r0, r1
 8005256:	4611      	mov	r1, r2
 8005258:	461a      	mov	r2, r3
 800525a:	4603      	mov	r3, r0
 800525c:	817b      	strh	r3, [r7, #10]
 800525e:	460b      	mov	r3, r1
 8005260:	813b      	strh	r3, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005274:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005284:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	2200      	movs	r2, #0
 800528e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f8c2 	bl	800541c <I2C_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00d      	beq.n	80052ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ac:	d103      	bne.n	80052b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e0aa      	b.n	8005410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ba:	897b      	ldrh	r3, [r7, #10]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	6a3a      	ldr	r2, [r7, #32]
 80052ce:	4952      	ldr	r1, [pc, #328]	; (8005418 <I2C_RequestMemoryRead+0x1cc>)
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f8fa 	bl	80054ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e097      	b.n	8005410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	6a39      	ldr	r1, [r7, #32]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f964 	bl	80055c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00d      	beq.n	8005322 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2b04      	cmp	r3, #4
 800530c:	d107      	bne.n	800531e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e076      	b.n	8005410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d105      	bne.n	8005334 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005328:	893b      	ldrh	r3, [r7, #8]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	611a      	str	r2, [r3, #16]
 8005332:	e021      	b.n	8005378 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005334:	893b      	ldrh	r3, [r7, #8]
 8005336:	0a1b      	lsrs	r3, r3, #8
 8005338:	b29b      	uxth	r3, r3
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005344:	6a39      	ldr	r1, [r7, #32]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f93e 	bl	80055c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	2b04      	cmp	r3, #4
 8005358:	d107      	bne.n	800536a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005368:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e050      	b.n	8005410 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800536e:	893b      	ldrh	r3, [r7, #8]
 8005370:	b2da      	uxtb	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537a:	6a39      	ldr	r1, [r7, #32]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f923 	bl	80055c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	2b04      	cmp	r3, #4
 800538e:	d107      	bne.n	80053a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e035      	b.n	8005410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f82b 	bl	800541c <I2C_WaitOnFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053da:	d103      	bne.n	80053e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e013      	b.n	8005410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053e8:	897b      	ldrh	r3, [r7, #10]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	6a3a      	ldr	r2, [r7, #32]
 80053fc:	4906      	ldr	r1, [pc, #24]	; (8005418 <I2C_RequestMemoryRead+0x1cc>)
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f863 	bl	80054ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	00010002 	.word	0x00010002

0800541c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800542c:	e025      	b.n	800547a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d021      	beq.n	800547a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005436:	f7fd fe63 	bl	8003100 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d302      	bcc.n	800544c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d116      	bne.n	800547a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e023      	b.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	d10d      	bne.n	80054a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	43da      	mvns	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4013      	ands	r3, r2
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	e00c      	b.n	80054ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	43da      	mvns	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4013      	ands	r3, r2
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bf0c      	ite	eq
 80054b2:	2301      	moveq	r3, #1
 80054b4:	2300      	movne	r3, #0
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d0b6      	beq.n	800542e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054d8:	e051      	b.n	800557e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e8:	d123      	bne.n	8005532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005502:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	f043 0204 	orr.w	r2, r3, #4
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e046      	b.n	80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005538:	d021      	beq.n	800557e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553a:	f7fd fde1 	bl	8003100 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	429a      	cmp	r2, r3
 8005548:	d302      	bcc.n	8005550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d116      	bne.n	800557e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f043 0220 	orr.w	r2, r3, #32
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e020      	b.n	80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d10c      	bne.n	80055a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	43da      	mvns	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	e00b      	b.n	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	43da      	mvns	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d18d      	bne.n	80054da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055d4:	e02d      	b.n	8005632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 f8ce 	bl	8005778 <I2C_IsAcknowledgeFailed>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e02d      	b.n	8005642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ec:	d021      	beq.n	8005632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ee:	f7fd fd87 	bl	8003100 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d302      	bcc.n	8005604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d116      	bne.n	8005632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f043 0220 	orr.w	r2, r3, #32
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e007      	b.n	8005642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563c:	2b80      	cmp	r3, #128	; 0x80
 800563e:	d1ca      	bne.n	80055d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005656:	e02d      	b.n	80056b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f88d 	bl	8005778 <I2C_IsAcknowledgeFailed>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e02d      	b.n	80056c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d021      	beq.n	80056b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005670:	f7fd fd46 	bl	8003100 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	429a      	cmp	r2, r3
 800567e:	d302      	bcc.n	8005686 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d116      	bne.n	80056b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f043 0220 	orr.w	r2, r3, #32
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e007      	b.n	80056c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d1ca      	bne.n	8005658 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056d8:	e042      	b.n	8005760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d119      	bne.n	800571c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0210 	mvn.w	r2, #16
 80056f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e029      	b.n	8005770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571c:	f7fd fcf0 	bl	8003100 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	429a      	cmp	r2, r3
 800572a:	d302      	bcc.n	8005732 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d116      	bne.n	8005760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	f043 0220 	orr.w	r2, r3, #32
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e007      	b.n	8005770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d1b5      	bne.n	80056da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578e:	d11b      	bne.n	80057c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005798:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	f043 0204 	orr.w	r2, r3, #4
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e267      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d075      	beq.n	80058e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057f6:	4b88      	ldr	r3, [pc, #544]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d00c      	beq.n	800581c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005802:	4b85      	ldr	r3, [pc, #532]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800580a:	2b08      	cmp	r3, #8
 800580c:	d112      	bne.n	8005834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800580e:	4b82      	ldr	r3, [pc, #520]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800581a:	d10b      	bne.n	8005834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800581c:	4b7e      	ldr	r3, [pc, #504]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d05b      	beq.n	80058e0 <HAL_RCC_OscConfig+0x108>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d157      	bne.n	80058e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e242      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583c:	d106      	bne.n	800584c <HAL_RCC_OscConfig+0x74>
 800583e:	4b76      	ldr	r3, [pc, #472]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a75      	ldr	r2, [pc, #468]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e01d      	b.n	8005888 <HAL_RCC_OscConfig+0xb0>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005854:	d10c      	bne.n	8005870 <HAL_RCC_OscConfig+0x98>
 8005856:	4b70      	ldr	r3, [pc, #448]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a6f      	ldr	r2, [pc, #444]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 800585c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	4b6d      	ldr	r3, [pc, #436]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6c      	ldr	r2, [pc, #432]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	e00b      	b.n	8005888 <HAL_RCC_OscConfig+0xb0>
 8005870:	4b69      	ldr	r3, [pc, #420]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a68      	ldr	r2, [pc, #416]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	4b66      	ldr	r3, [pc, #408]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a65      	ldr	r2, [pc, #404]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d013      	beq.n	80058b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005890:	f7fd fc36 	bl	8003100 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005898:	f7fd fc32 	bl	8003100 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b64      	cmp	r3, #100	; 0x64
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e207      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058aa:	4b5b      	ldr	r3, [pc, #364]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0f0      	beq.n	8005898 <HAL_RCC_OscConfig+0xc0>
 80058b6:	e014      	b.n	80058e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fd fc22 	bl	8003100 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058c0:	f7fd fc1e 	bl	8003100 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e1f3      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058d2:	4b51      	ldr	r3, [pc, #324]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0xe8>
 80058de:	e000      	b.n	80058e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d063      	beq.n	80059b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058ee:	4b4a      	ldr	r3, [pc, #296]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 030c 	and.w	r3, r3, #12
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00b      	beq.n	8005912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058fa:	4b47      	ldr	r3, [pc, #284]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005902:	2b08      	cmp	r3, #8
 8005904:	d11c      	bne.n	8005940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005906:	4b44      	ldr	r3, [pc, #272]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d116      	bne.n	8005940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005912:	4b41      	ldr	r3, [pc, #260]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_RCC_OscConfig+0x152>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d001      	beq.n	800592a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e1c7      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800592a:	4b3b      	ldr	r3, [pc, #236]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4937      	ldr	r1, [pc, #220]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593e:	e03a      	b.n	80059b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d020      	beq.n	800598a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005948:	4b34      	ldr	r3, [pc, #208]	; (8005a1c <HAL_RCC_OscConfig+0x244>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594e:	f7fd fbd7 	bl	8003100 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005956:	f7fd fbd3 	bl	8003100 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e1a8      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005968:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f0      	beq.n	8005956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005974:	4b28      	ldr	r3, [pc, #160]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4925      	ldr	r1, [pc, #148]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 8005984:	4313      	orrs	r3, r2
 8005986:	600b      	str	r3, [r1, #0]
 8005988:	e015      	b.n	80059b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <HAL_RCC_OscConfig+0x244>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd fbb6 	bl	8003100 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005998:	f7fd fbb2 	bl	8003100 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e187      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059aa:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d036      	beq.n	8005a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d016      	beq.n	80059f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ca:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <HAL_RCC_OscConfig+0x248>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d0:	f7fd fb96 	bl	8003100 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059d8:	f7fd fb92 	bl	8003100 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e167      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_RCC_OscConfig+0x240>)
 80059ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x200>
 80059f6:	e01b      	b.n	8005a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <HAL_RCC_OscConfig+0x248>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059fe:	f7fd fb7f 	bl	8003100 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a04:	e00e      	b.n	8005a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a06:	f7fd fb7b 	bl	8003100 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d907      	bls.n	8005a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e150      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	42470000 	.word	0x42470000
 8005a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a24:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1ea      	bne.n	8005a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8097 	beq.w	8005b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a42:	4b81      	ldr	r3, [pc, #516]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10f      	bne.n	8005a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	4b7d      	ldr	r3, [pc, #500]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	4a7c      	ldr	r2, [pc, #496]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a5e:	4b7a      	ldr	r3, [pc, #488]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a66:	60bb      	str	r3, [r7, #8]
 8005a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6e:	4b77      	ldr	r3, [pc, #476]	; (8005c4c <HAL_RCC_OscConfig+0x474>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d118      	bne.n	8005aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a7a:	4b74      	ldr	r3, [pc, #464]	; (8005c4c <HAL_RCC_OscConfig+0x474>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a73      	ldr	r2, [pc, #460]	; (8005c4c <HAL_RCC_OscConfig+0x474>)
 8005a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a86:	f7fd fb3b 	bl	8003100 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8e:	f7fd fb37 	bl	8003100 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e10c      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa0:	4b6a      	ldr	r3, [pc, #424]	; (8005c4c <HAL_RCC_OscConfig+0x474>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d106      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x2ea>
 8005ab4:	4b64      	ldr	r3, [pc, #400]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	4a63      	ldr	r2, [pc, #396]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac0:	e01c      	b.n	8005afc <HAL_RCC_OscConfig+0x324>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x30c>
 8005aca:	4b5f      	ldr	r3, [pc, #380]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ace:	4a5e      	ldr	r2, [pc, #376]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005ad0:	f043 0304 	orr.w	r3, r3, #4
 8005ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad6:	4b5c      	ldr	r3, [pc, #368]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ada:	4a5b      	ldr	r2, [pc, #364]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae2:	e00b      	b.n	8005afc <HAL_RCC_OscConfig+0x324>
 8005ae4:	4b58      	ldr	r3, [pc, #352]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	4a57      	ldr	r2, [pc, #348]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	6713      	str	r3, [r2, #112]	; 0x70
 8005af0:	4b55      	ldr	r3, [pc, #340]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	4a54      	ldr	r2, [pc, #336]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005af6:	f023 0304 	bic.w	r3, r3, #4
 8005afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d015      	beq.n	8005b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b04:	f7fd fafc 	bl	8003100 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b0c:	f7fd faf8 	bl	8003100 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e0cb      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b22:	4b49      	ldr	r3, [pc, #292]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0ee      	beq.n	8005b0c <HAL_RCC_OscConfig+0x334>
 8005b2e:	e014      	b.n	8005b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b30:	f7fd fae6 	bl	8003100 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b36:	e00a      	b.n	8005b4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b38:	f7fd fae2 	bl	8003100 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e0b5      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4e:	4b3e      	ldr	r3, [pc, #248]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1ee      	bne.n	8005b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b60:	4b39      	ldr	r3, [pc, #228]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	4a38      	ldr	r2, [pc, #224]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80a1 	beq.w	8005cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b76:	4b34      	ldr	r3, [pc, #208]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d05c      	beq.n	8005c3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d141      	bne.n	8005c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8a:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <HAL_RCC_OscConfig+0x478>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b90:	f7fd fab6 	bl	8003100 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fd fab2 	bl	8003100 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e087      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005baa:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	019b      	lsls	r3, r3, #6
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	041b      	lsls	r3, r3, #16
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	061b      	lsls	r3, r3, #24
 8005bda:	491b      	ldr	r1, [pc, #108]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005be0:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <HAL_RCC_OscConfig+0x478>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be6:	f7fd fa8b 	bl	8003100 <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bee:	f7fd fa87 	bl	8003100 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e05c      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f0      	beq.n	8005bee <HAL_RCC_OscConfig+0x416>
 8005c0c:	e054      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0e:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <HAL_RCC_OscConfig+0x478>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c14:	f7fd fa74 	bl	8003100 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c1c:	f7fd fa70 	bl	8003100 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e045      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <HAL_RCC_OscConfig+0x470>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f0      	bne.n	8005c1c <HAL_RCC_OscConfig+0x444>
 8005c3a:	e03d      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d107      	bne.n	8005c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e038      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	40007000 	.word	0x40007000
 8005c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c54:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <HAL_RCC_OscConfig+0x4ec>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d028      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d121      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d11a      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d111      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d001      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40023800 	.word	0x40023800

08005cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0cc      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cdc:	4b68      	ldr	r3, [pc, #416]	; (8005e80 <HAL_RCC_ClockConfig+0x1b8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d90c      	bls.n	8005d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cea:	4b65      	ldr	r3, [pc, #404]	; (8005e80 <HAL_RCC_ClockConfig+0x1b8>)
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf2:	4b63      	ldr	r3, [pc, #396]	; (8005e80 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0b8      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d020      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d1c:	4b59      	ldr	r3, [pc, #356]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	4a58      	ldr	r2, [pc, #352]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d34:	4b53      	ldr	r3, [pc, #332]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	4a52      	ldr	r2, [pc, #328]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d40:	4b50      	ldr	r3, [pc, #320]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	494d      	ldr	r1, [pc, #308]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d044      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d107      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d66:	4b47      	ldr	r3, [pc, #284]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d119      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e07f      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d003      	beq.n	8005d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d107      	bne.n	8005d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d86:	4b3f      	ldr	r3, [pc, #252]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e06f      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d96:	4b3b      	ldr	r3, [pc, #236]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e067      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005da6:	4b37      	ldr	r3, [pc, #220]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f023 0203 	bic.w	r2, r3, #3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4934      	ldr	r1, [pc, #208]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005db8:	f7fd f9a2 	bl	8003100 <HAL_GetTick>
 8005dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dbe:	e00a      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc0:	f7fd f99e 	bl	8003100 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e04f      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd6:	4b2b      	ldr	r3, [pc, #172]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 020c 	and.w	r2, r3, #12
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d1eb      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005de8:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <HAL_RCC_ClockConfig+0x1b8>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d20c      	bcs.n	8005e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df6:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <HAL_RCC_ClockConfig+0x1b8>)
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfe:	4b20      	ldr	r3, [pc, #128]	; (8005e80 <HAL_RCC_ClockConfig+0x1b8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e032      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d008      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e1c:	4b19      	ldr	r3, [pc, #100]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4916      	ldr	r1, [pc, #88]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	490e      	ldr	r1, [pc, #56]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e4e:	f000 f821 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 8005e52:	4602      	mov	r2, r0
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	490a      	ldr	r1, [pc, #40]	; (8005e88 <HAL_RCC_ClockConfig+0x1c0>)
 8005e60:	5ccb      	ldrb	r3, [r1, r3]
 8005e62:	fa22 f303 	lsr.w	r3, r2, r3
 8005e66:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <HAL_RCC_ClockConfig+0x1c8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fc ffd2 	bl	8002e18 <HAL_InitTick>

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40023c00 	.word	0x40023c00
 8005e84:	40023800 	.word	0x40023800
 8005e88:	0800e6c0 	.word	0x0800e6c0
 8005e8c:	20000000 	.word	0x20000000
 8005e90:	20000004 	.word	0x20000004

08005e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e98:	b090      	sub	sp, #64	; 0x40
 8005e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eac:	4b59      	ldr	r3, [pc, #356]	; (8006014 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 030c 	and.w	r3, r3, #12
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d00d      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	f200 80a1 	bhi.w	8006000 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d003      	beq.n	8005ece <HAL_RCC_GetSysClockFreq+0x3a>
 8005ec6:	e09b      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ec8:	4b53      	ldr	r3, [pc, #332]	; (8006018 <HAL_RCC_GetSysClockFreq+0x184>)
 8005eca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005ecc:	e09b      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ece:	4b53      	ldr	r3, [pc, #332]	; (800601c <HAL_RCC_GetSysClockFreq+0x188>)
 8005ed0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ed2:	e098      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ed4:	4b4f      	ldr	r3, [pc, #316]	; (8006014 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ede:	4b4d      	ldr	r3, [pc, #308]	; (8006014 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d028      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eea:	4b4a      	ldr	r3, [pc, #296]	; (8006014 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	099b      	lsrs	r3, r3, #6
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	623b      	str	r3, [r7, #32]
 8005ef4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005efc:	2100      	movs	r1, #0
 8005efe:	4b47      	ldr	r3, [pc, #284]	; (800601c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f00:	fb03 f201 	mul.w	r2, r3, r1
 8005f04:	2300      	movs	r3, #0
 8005f06:	fb00 f303 	mul.w	r3, r0, r3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	4a43      	ldr	r2, [pc, #268]	; (800601c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f0e:	fba0 1202 	umull	r1, r2, r0, r2
 8005f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f14:	460a      	mov	r2, r1
 8005f16:	62ba      	str	r2, [r7, #40]	; 0x28
 8005f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f1a:	4413      	add	r3, r2
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f20:	2200      	movs	r2, #0
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	61fa      	str	r2, [r7, #28]
 8005f26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005f2e:	f7fa fe63 	bl	8000bf8 <__aeabi_uldivmod>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4613      	mov	r3, r2
 8005f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f3a:	e053      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3c:	4b35      	ldr	r3, [pc, #212]	; (8006014 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	099b      	lsrs	r3, r3, #6
 8005f42:	2200      	movs	r2, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	617a      	str	r2, [r7, #20]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005f4e:	f04f 0b00 	mov.w	fp, #0
 8005f52:	4652      	mov	r2, sl
 8005f54:	465b      	mov	r3, fp
 8005f56:	f04f 0000 	mov.w	r0, #0
 8005f5a:	f04f 0100 	mov.w	r1, #0
 8005f5e:	0159      	lsls	r1, r3, #5
 8005f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f64:	0150      	lsls	r0, r2, #5
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	ebb2 080a 	subs.w	r8, r2, sl
 8005f6e:	eb63 090b 	sbc.w	r9, r3, fp
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f86:	ebb2 0408 	subs.w	r4, r2, r8
 8005f8a:	eb63 0509 	sbc.w	r5, r3, r9
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	00eb      	lsls	r3, r5, #3
 8005f98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f9c:	00e2      	lsls	r2, r4, #3
 8005f9e:	4614      	mov	r4, r2
 8005fa0:	461d      	mov	r5, r3
 8005fa2:	eb14 030a 	adds.w	r3, r4, sl
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	eb45 030b 	adc.w	r3, r5, fp
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fba:	4629      	mov	r1, r5
 8005fbc:	028b      	lsls	r3, r1, #10
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	028a      	lsls	r2, r1, #10
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	2200      	movs	r2, #0
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	60fa      	str	r2, [r7, #12]
 8005fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fd8:	f7fa fe0e 	bl	8000bf8 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	3301      	adds	r3, #1
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ffe:	e002      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_RCC_GetSysClockFreq+0x184>)
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006008:	4618      	mov	r0, r3
 800600a:	3740      	adds	r7, #64	; 0x40
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006012:	bf00      	nop
 8006014:	40023800 	.word	0x40023800
 8006018:	00f42400 	.word	0x00f42400
 800601c:	017d7840 	.word	0x017d7840

08006020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006024:	4b03      	ldr	r3, [pc, #12]	; (8006034 <HAL_RCC_GetHCLKFreq+0x14>)
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20000000 	.word	0x20000000

08006038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800603c:	f7ff fff0 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006040:	4602      	mov	r2, r0
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	0a9b      	lsrs	r3, r3, #10
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	4903      	ldr	r1, [pc, #12]	; (800605c <HAL_RCC_GetPCLK1Freq+0x24>)
 800604e:	5ccb      	ldrb	r3, [r1, r3]
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40023800 	.word	0x40023800
 800605c:	0800e6d0 	.word	0x0800e6d0

08006060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006064:	f7ff ffdc 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	0b5b      	lsrs	r3, r3, #13
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4903      	ldr	r1, [pc, #12]	; (8006084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40023800 	.word	0x40023800
 8006084:	0800e6d0 	.word	0x0800e6d0

08006088 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	220f      	movs	r2, #15
 8006096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006098:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 0203 	and.w	r2, r3, #3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80060a4:	4b0f      	ldr	r3, [pc, #60]	; (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80060bc:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	08db      	lsrs	r3, r3, #3
 80060c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060ca:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <HAL_RCC_GetClockConfig+0x60>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0207 	and.w	r2, r3, #7
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	601a      	str	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40023800 	.word	0x40023800
 80060e8:	40023c00 	.word	0x40023c00

080060ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e041      	b.n	8006182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fc fc7c 	bl	8002a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f001 faea 	bl	8007704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	d001      	beq.n	80061a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e044      	b.n	800622e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1e      	ldr	r2, [pc, #120]	; (800623c <HAL_TIM_Base_Start_IT+0xb0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d018      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x6c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ce:	d013      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x6c>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1a      	ldr	r2, [pc, #104]	; (8006240 <HAL_TIM_Base_Start_IT+0xb4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00e      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x6c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a19      	ldr	r2, [pc, #100]	; (8006244 <HAL_TIM_Base_Start_IT+0xb8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x6c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a17      	ldr	r2, [pc, #92]	; (8006248 <HAL_TIM_Base_Start_IT+0xbc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x6c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a16      	ldr	r2, [pc, #88]	; (800624c <HAL_TIM_Base_Start_IT+0xc0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d111      	bne.n	800621c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b06      	cmp	r3, #6
 8006208:	d010      	beq.n	800622c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0201 	orr.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621a:	e007      	b.n	800622c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40010000 	.word	0x40010000
 8006240:	40000400 	.word	0x40000400
 8006244:	40000800 	.word	0x40000800
 8006248:	40000c00 	.word	0x40000c00
 800624c:	40014000 	.word	0x40014000

08006250 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e041      	b.n	80062e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d106      	bne.n	800627c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f839 	bl	80062ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3304      	adds	r3, #4
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f001 fa38 	bl	8007704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d109      	bne.n	8006328 <HAL_TIM_PWM_Start+0x24>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	e022      	b.n	800636e <HAL_TIM_PWM_Start+0x6a>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b04      	cmp	r3, #4
 800632c:	d109      	bne.n	8006342 <HAL_TIM_PWM_Start+0x3e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	bf14      	ite	ne
 800633a:	2301      	movne	r3, #1
 800633c:	2300      	moveq	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	e015      	b.n	800636e <HAL_TIM_PWM_Start+0x6a>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b08      	cmp	r3, #8
 8006346:	d109      	bne.n	800635c <HAL_TIM_PWM_Start+0x58>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	bf14      	ite	ne
 8006354:	2301      	movne	r3, #1
 8006356:	2300      	moveq	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e008      	b.n	800636e <HAL_TIM_PWM_Start+0x6a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	bf14      	ite	ne
 8006368:	2301      	movne	r3, #1
 800636a:	2300      	moveq	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e068      	b.n	8006448 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d104      	bne.n	8006386 <HAL_TIM_PWM_Start+0x82>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006384:	e013      	b.n	80063ae <HAL_TIM_PWM_Start+0xaa>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b04      	cmp	r3, #4
 800638a:	d104      	bne.n	8006396 <HAL_TIM_PWM_Start+0x92>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006394:	e00b      	b.n	80063ae <HAL_TIM_PWM_Start+0xaa>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d104      	bne.n	80063a6 <HAL_TIM_PWM_Start+0xa2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a4:	e003      	b.n	80063ae <HAL_TIM_PWM_Start+0xaa>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2201      	movs	r2, #1
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fd68 	bl	8007e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a23      	ldr	r2, [pc, #140]	; (8006450 <HAL_TIM_PWM_Start+0x14c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d107      	bne.n	80063d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1d      	ldr	r2, [pc, #116]	; (8006450 <HAL_TIM_PWM_Start+0x14c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d018      	beq.n	8006412 <HAL_TIM_PWM_Start+0x10e>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e8:	d013      	beq.n	8006412 <HAL_TIM_PWM_Start+0x10e>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a19      	ldr	r2, [pc, #100]	; (8006454 <HAL_TIM_PWM_Start+0x150>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00e      	beq.n	8006412 <HAL_TIM_PWM_Start+0x10e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a17      	ldr	r2, [pc, #92]	; (8006458 <HAL_TIM_PWM_Start+0x154>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d009      	beq.n	8006412 <HAL_TIM_PWM_Start+0x10e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a16      	ldr	r2, [pc, #88]	; (800645c <HAL_TIM_PWM_Start+0x158>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d004      	beq.n	8006412 <HAL_TIM_PWM_Start+0x10e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a14      	ldr	r2, [pc, #80]	; (8006460 <HAL_TIM_PWM_Start+0x15c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d111      	bne.n	8006436 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b06      	cmp	r3, #6
 8006422:	d010      	beq.n	8006446 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006434:	e007      	b.n	8006446 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40010000 	.word	0x40010000
 8006454:	40000400 	.word	0x40000400
 8006458:	40000800 	.word	0x40000800
 800645c:	40000c00 	.word	0x40000c00
 8006460:	40014000 	.word	0x40014000

08006464 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2200      	movs	r2, #0
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f001 fd08 	bl	8007e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a29      	ldr	r2, [pc, #164]	; (8006528 <HAL_TIM_PWM_Stop+0xc4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d117      	bne.n	80064b6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a1a      	ldr	r2, [r3, #32]
 800648c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10f      	bne.n	80064b6 <HAL_TIM_PWM_Stop+0x52>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a1a      	ldr	r2, [r3, #32]
 800649c:	f240 4344 	movw	r3, #1092	; 0x444
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d107      	bne.n	80064b6 <HAL_TIM_PWM_Stop+0x52>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10f      	bne.n	80064e6 <HAL_TIM_PWM_Stop+0x82>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	f240 4344 	movw	r3, #1092	; 0x444
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d107      	bne.n	80064e6 <HAL_TIM_PWM_Stop+0x82>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d104      	bne.n	80064f6 <HAL_TIM_PWM_Stop+0x92>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f4:	e013      	b.n	800651e <HAL_TIM_PWM_Stop+0xba>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d104      	bne.n	8006506 <HAL_TIM_PWM_Stop+0xa2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006504:	e00b      	b.n	800651e <HAL_TIM_PWM_Stop+0xba>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b08      	cmp	r3, #8
 800650a:	d104      	bne.n	8006516 <HAL_TIM_PWM_Stop+0xb2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006514:	e003      	b.n	800651e <HAL_TIM_PWM_Stop+0xba>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40010000 	.word	0x40010000

0800652c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d109      	bne.n	8006554 <HAL_TIM_PWM_Start_IT+0x28>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	e022      	b.n	800659a <HAL_TIM_PWM_Start_IT+0x6e>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b04      	cmp	r3, #4
 8006558:	d109      	bne.n	800656e <HAL_TIM_PWM_Start_IT+0x42>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b01      	cmp	r3, #1
 8006564:	bf14      	ite	ne
 8006566:	2301      	movne	r3, #1
 8006568:	2300      	moveq	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	e015      	b.n	800659a <HAL_TIM_PWM_Start_IT+0x6e>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d109      	bne.n	8006588 <HAL_TIM_PWM_Start_IT+0x5c>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	bf14      	ite	ne
 8006580:	2301      	movne	r3, #1
 8006582:	2300      	moveq	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	e008      	b.n	800659a <HAL_TIM_PWM_Start_IT+0x6e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b01      	cmp	r3, #1
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e0b3      	b.n	800670a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <HAL_TIM_PWM_Start_IT+0x86>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b0:	e013      	b.n	80065da <HAL_TIM_PWM_Start_IT+0xae>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d104      	bne.n	80065c2 <HAL_TIM_PWM_Start_IT+0x96>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065c0:	e00b      	b.n	80065da <HAL_TIM_PWM_Start_IT+0xae>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d104      	bne.n	80065d2 <HAL_TIM_PWM_Start_IT+0xa6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065d0:	e003      	b.n	80065da <HAL_TIM_PWM_Start_IT+0xae>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d841      	bhi.n	8006664 <HAL_TIM_PWM_Start_IT+0x138>
 80065e0:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80065e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e6:	bf00      	nop
 80065e8:	0800661d 	.word	0x0800661d
 80065ec:	08006665 	.word	0x08006665
 80065f0:	08006665 	.word	0x08006665
 80065f4:	08006665 	.word	0x08006665
 80065f8:	0800662f 	.word	0x0800662f
 80065fc:	08006665 	.word	0x08006665
 8006600:	08006665 	.word	0x08006665
 8006604:	08006665 	.word	0x08006665
 8006608:	08006641 	.word	0x08006641
 800660c:	08006665 	.word	0x08006665
 8006610:	08006665 	.word	0x08006665
 8006614:	08006665 	.word	0x08006665
 8006618:	08006653 	.word	0x08006653
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0202 	orr.w	r2, r2, #2
 800662a:	60da      	str	r2, [r3, #12]
      break;
 800662c:	e01d      	b.n	800666a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0204 	orr.w	r2, r2, #4
 800663c:	60da      	str	r2, [r3, #12]
      break;
 800663e:	e014      	b.n	800666a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0208 	orr.w	r2, r2, #8
 800664e:	60da      	str	r2, [r3, #12]
      break;
 8006650:	e00b      	b.n	800666a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0210 	orr.w	r2, r2, #16
 8006660:	60da      	str	r2, [r3, #12]
      break;
 8006662:	e002      	b.n	800666a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
      break;
 8006668:	bf00      	nop
  }

  if (status == HAL_OK)
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d14b      	bne.n	8006708 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2201      	movs	r2, #1
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fc07 	bl	8007e8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a24      	ldr	r2, [pc, #144]	; (8006714 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d107      	bne.n	8006698 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006696:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d018      	beq.n	80066d4 <HAL_TIM_PWM_Start_IT+0x1a8>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066aa:	d013      	beq.n	80066d4 <HAL_TIM_PWM_Start_IT+0x1a8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00e      	beq.n	80066d4 <HAL_TIM_PWM_Start_IT+0x1a8>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a18      	ldr	r2, [pc, #96]	; (800671c <HAL_TIM_PWM_Start_IT+0x1f0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d009      	beq.n	80066d4 <HAL_TIM_PWM_Start_IT+0x1a8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a16      	ldr	r2, [pc, #88]	; (8006720 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d004      	beq.n	80066d4 <HAL_TIM_PWM_Start_IT+0x1a8>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a15      	ldr	r2, [pc, #84]	; (8006724 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d111      	bne.n	80066f8 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b06      	cmp	r3, #6
 80066e4:	d010      	beq.n	8006708 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0201 	orr.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f6:	e007      	b.n	8006708 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40010000 	.word	0x40010000
 8006718:	40000400 	.word	0x40000400
 800671c:	40000800 	.word	0x40000800
 8006720:	40000c00 	.word	0x40000c00
 8006724:	40014000 	.word	0x40014000

08006728 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b0c      	cmp	r3, #12
 800673a:	d841      	bhi.n	80067c0 <HAL_TIM_PWM_Stop_IT+0x98>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006779 	.word	0x08006779
 8006748:	080067c1 	.word	0x080067c1
 800674c:	080067c1 	.word	0x080067c1
 8006750:	080067c1 	.word	0x080067c1
 8006754:	0800678b 	.word	0x0800678b
 8006758:	080067c1 	.word	0x080067c1
 800675c:	080067c1 	.word	0x080067c1
 8006760:	080067c1 	.word	0x080067c1
 8006764:	0800679d 	.word	0x0800679d
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067c1 	.word	0x080067c1
 8006770:	080067c1 	.word	0x080067c1
 8006774:	080067af 	.word	0x080067af
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0202 	bic.w	r2, r2, #2
 8006786:	60da      	str	r2, [r3, #12]
      break;
 8006788:	e01d      	b.n	80067c6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0204 	bic.w	r2, r2, #4
 8006798:	60da      	str	r2, [r3, #12]
      break;
 800679a:	e014      	b.n	80067c6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0208 	bic.w	r2, r2, #8
 80067aa:	60da      	str	r2, [r3, #12]
      break;
 80067ac:	e00b      	b.n	80067c6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0210 	bic.w	r2, r2, #16
 80067bc:	60da      	str	r2, [r3, #12]
      break;
 80067be:	e002      	b.n	80067c6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	73fb      	strb	r3, [r7, #15]
      break;
 80067c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d157      	bne.n	800687c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2200      	movs	r2, #0
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 fb59 	bl	8007e8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2a      	ldr	r2, [pc, #168]	; (8006888 <HAL_TIM_PWM_Stop_IT+0x160>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d117      	bne.n	8006814 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6a1a      	ldr	r2, [r3, #32]
 80067ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10f      	bne.n	8006814 <HAL_TIM_PWM_Stop_IT+0xec>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6a1a      	ldr	r2, [r3, #32]
 80067fa:	f240 4344 	movw	r3, #1092	; 0x444
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d107      	bne.n	8006814 <HAL_TIM_PWM_Stop_IT+0xec>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006812:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6a1a      	ldr	r2, [r3, #32]
 800681a:	f241 1311 	movw	r3, #4369	; 0x1111
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10f      	bne.n	8006844 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6a1a      	ldr	r2, [r3, #32]
 800682a:	f240 4344 	movw	r3, #1092	; 0x444
 800682e:	4013      	ands	r3, r2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d107      	bne.n	8006844 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0201 	bic.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d104      	bne.n	8006854 <HAL_TIM_PWM_Stop_IT+0x12c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006852:	e013      	b.n	800687c <HAL_TIM_PWM_Stop_IT+0x154>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b04      	cmp	r3, #4
 8006858:	d104      	bne.n	8006864 <HAL_TIM_PWM_Stop_IT+0x13c>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006862:	e00b      	b.n	800687c <HAL_TIM_PWM_Stop_IT+0x154>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b08      	cmp	r3, #8
 8006868:	d104      	bne.n	8006874 <HAL_TIM_PWM_Stop_IT+0x14c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006872:	e003      	b.n	800687c <HAL_TIM_PWM_Stop_IT+0x154>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	40010000 	.word	0x40010000

0800688c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e041      	b.n	8006922 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fc f930 	bl	8002b18 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f000 ff1a 	bl	8007704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <HAL_TIM_IC_Start_IT+0x1e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006946:	b2db      	uxtb	r3, r3
 8006948:	e013      	b.n	8006972 <HAL_TIM_IC_Start_IT+0x46>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b04      	cmp	r3, #4
 800694e:	d104      	bne.n	800695a <HAL_TIM_IC_Start_IT+0x2e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006956:	b2db      	uxtb	r3, r3
 8006958:	e00b      	b.n	8006972 <HAL_TIM_IC_Start_IT+0x46>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d104      	bne.n	800696a <HAL_TIM_IC_Start_IT+0x3e>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006966:	b2db      	uxtb	r3, r3
 8006968:	e003      	b.n	8006972 <HAL_TIM_IC_Start_IT+0x46>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006970:	b2db      	uxtb	r3, r3
 8006972:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d104      	bne.n	8006984 <HAL_TIM_IC_Start_IT+0x58>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006980:	b2db      	uxtb	r3, r3
 8006982:	e013      	b.n	80069ac <HAL_TIM_IC_Start_IT+0x80>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b04      	cmp	r3, #4
 8006988:	d104      	bne.n	8006994 <HAL_TIM_IC_Start_IT+0x68>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006990:	b2db      	uxtb	r3, r3
 8006992:	e00b      	b.n	80069ac <HAL_TIM_IC_Start_IT+0x80>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b08      	cmp	r3, #8
 8006998:	d104      	bne.n	80069a4 <HAL_TIM_IC_Start_IT+0x78>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	e003      	b.n	80069ac <HAL_TIM_IC_Start_IT+0x80>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d102      	bne.n	80069ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80069b4:	7b7b      	ldrb	r3, [r7, #13]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d001      	beq.n	80069be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e0c2      	b.n	8006b44 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <HAL_TIM_IC_Start_IT+0xa2>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069cc:	e013      	b.n	80069f6 <HAL_TIM_IC_Start_IT+0xca>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d104      	bne.n	80069de <HAL_TIM_IC_Start_IT+0xb2>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069dc:	e00b      	b.n	80069f6 <HAL_TIM_IC_Start_IT+0xca>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d104      	bne.n	80069ee <HAL_TIM_IC_Start_IT+0xc2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ec:	e003      	b.n	80069f6 <HAL_TIM_IC_Start_IT+0xca>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_IC_Start_IT+0xda>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a04:	e013      	b.n	8006a2e <HAL_TIM_IC_Start_IT+0x102>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d104      	bne.n	8006a16 <HAL_TIM_IC_Start_IT+0xea>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a14:	e00b      	b.n	8006a2e <HAL_TIM_IC_Start_IT+0x102>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d104      	bne.n	8006a26 <HAL_TIM_IC_Start_IT+0xfa>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a24:	e003      	b.n	8006a2e <HAL_TIM_IC_Start_IT+0x102>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b0c      	cmp	r3, #12
 8006a32:	d841      	bhi.n	8006ab8 <HAL_TIM_IC_Start_IT+0x18c>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <HAL_TIM_IC_Start_IT+0x110>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a71 	.word	0x08006a71
 8006a40:	08006ab9 	.word	0x08006ab9
 8006a44:	08006ab9 	.word	0x08006ab9
 8006a48:	08006ab9 	.word	0x08006ab9
 8006a4c:	08006a83 	.word	0x08006a83
 8006a50:	08006ab9 	.word	0x08006ab9
 8006a54:	08006ab9 	.word	0x08006ab9
 8006a58:	08006ab9 	.word	0x08006ab9
 8006a5c:	08006a95 	.word	0x08006a95
 8006a60:	08006ab9 	.word	0x08006ab9
 8006a64:	08006ab9 	.word	0x08006ab9
 8006a68:	08006ab9 	.word	0x08006ab9
 8006a6c:	08006aa7 	.word	0x08006aa7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0202 	orr.w	r2, r2, #2
 8006a7e:	60da      	str	r2, [r3, #12]
      break;
 8006a80:	e01d      	b.n	8006abe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0204 	orr.w	r2, r2, #4
 8006a90:	60da      	str	r2, [r3, #12]
      break;
 8006a92:	e014      	b.n	8006abe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0208 	orr.w	r2, r2, #8
 8006aa2:	60da      	str	r2, [r3, #12]
      break;
 8006aa4:	e00b      	b.n	8006abe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0210 	orr.w	r2, r2, #16
 8006ab4:	60da      	str	r2, [r3, #12]
      break;
 8006ab6:	e002      	b.n	8006abe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	73fb      	strb	r3, [r7, #15]
      break;
 8006abc:	bf00      	nop
  }

  if (status == HAL_OK)
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d13e      	bne.n	8006b42 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f9dd 	bl	8007e8c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <HAL_TIM_IC_Start_IT+0x220>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d018      	beq.n	8006b0e <HAL_TIM_IC_Start_IT+0x1e2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae4:	d013      	beq.n	8006b0e <HAL_TIM_IC_Start_IT+0x1e2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a19      	ldr	r2, [pc, #100]	; (8006b50 <HAL_TIM_IC_Start_IT+0x224>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00e      	beq.n	8006b0e <HAL_TIM_IC_Start_IT+0x1e2>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a17      	ldr	r2, [pc, #92]	; (8006b54 <HAL_TIM_IC_Start_IT+0x228>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d009      	beq.n	8006b0e <HAL_TIM_IC_Start_IT+0x1e2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a16      	ldr	r2, [pc, #88]	; (8006b58 <HAL_TIM_IC_Start_IT+0x22c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d004      	beq.n	8006b0e <HAL_TIM_IC_Start_IT+0x1e2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a14      	ldr	r2, [pc, #80]	; (8006b5c <HAL_TIM_IC_Start_IT+0x230>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d111      	bne.n	8006b32 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b06      	cmp	r3, #6
 8006b1e:	d010      	beq.n	8006b42 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b30:	e007      	b.n	8006b42 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0201 	orr.w	r2, r2, #1
 8006b40:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40000c00 	.word	0x40000c00
 8006b5c:	40014000 	.word	0x40014000

08006b60 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <HAL_TIM_IC_Start_DMA+0x22>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	e013      	b.n	8006baa <HAL_TIM_IC_Start_DMA+0x4a>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d104      	bne.n	8006b92 <HAL_TIM_IC_Start_DMA+0x32>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	e00b      	b.n	8006baa <HAL_TIM_IC_Start_DMA+0x4a>
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d104      	bne.n	8006ba2 <HAL_TIM_IC_Start_DMA+0x42>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	e003      	b.n	8006baa <HAL_TIM_IC_Start_DMA+0x4a>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <HAL_TIM_IC_Start_DMA+0x5c>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	e013      	b.n	8006be4 <HAL_TIM_IC_Start_DMA+0x84>
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d104      	bne.n	8006bcc <HAL_TIM_IC_Start_DMA+0x6c>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	e00b      	b.n	8006be4 <HAL_TIM_IC_Start_DMA+0x84>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d104      	bne.n	8006bdc <HAL_TIM_IC_Start_DMA+0x7c>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	e003      	b.n	8006be4 <HAL_TIM_IC_Start_DMA+0x84>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8006be6:	7dbb      	ldrb	r3, [r7, #22]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d002      	beq.n	8006bf2 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006bec:	7d7b      	ldrb	r3, [r7, #21]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d101      	bne.n	8006bf6 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e13c      	b.n	8006e70 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8006bf6:	7dbb      	ldrb	r3, [r7, #22]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d143      	bne.n	8006c84 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006bfc:	7d7b      	ldrb	r3, [r7, #21]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d140      	bne.n	8006c84 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <HAL_TIM_IC_Start_DMA+0xb2>
 8006c08:	887b      	ldrh	r3, [r7, #2]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e12e      	b.n	8006e70 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <HAL_TIM_IC_Start_DMA+0xc2>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c20:	e013      	b.n	8006c4a <HAL_TIM_IC_Start_DMA+0xea>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d104      	bne.n	8006c32 <HAL_TIM_IC_Start_DMA+0xd2>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c30:	e00b      	b.n	8006c4a <HAL_TIM_IC_Start_DMA+0xea>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d104      	bne.n	8006c42 <HAL_TIM_IC_Start_DMA+0xe2>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c40:	e003      	b.n	8006c4a <HAL_TIM_IC_Start_DMA+0xea>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2202      	movs	r2, #2
 8006c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <HAL_TIM_IC_Start_DMA+0xfa>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8006c58:	e016      	b.n	8006c88 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_IC_Start_DMA+0x10a>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8006c68:	e00e      	b.n	8006c88 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_IC_Start_DMA+0x11a>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8006c78:	e006      	b.n	8006c88 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8006c82:	e001      	b.n	8006c88 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0f3      	b.n	8006e70 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 f8fb 	bl	8007e8c <TIM_CCxChannelCmd>

  switch (Channel)
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b0c      	cmp	r3, #12
 8006c9a:	f200 80ad 	bhi.w	8006df8 <HAL_TIM_IC_Start_DMA+0x298>
 8006c9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <HAL_TIM_IC_Start_DMA+0x144>)
 8006ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca4:	08006cd9 	.word	0x08006cd9
 8006ca8:	08006df9 	.word	0x08006df9
 8006cac:	08006df9 	.word	0x08006df9
 8006cb0:	08006df9 	.word	0x08006df9
 8006cb4:	08006d21 	.word	0x08006d21
 8006cb8:	08006df9 	.word	0x08006df9
 8006cbc:	08006df9 	.word	0x08006df9
 8006cc0:	08006df9 	.word	0x08006df9
 8006cc4:	08006d69 	.word	0x08006d69
 8006cc8:	08006df9 	.word	0x08006df9
 8006ccc:	08006df9 	.word	0x08006df9
 8006cd0:	08006df9 	.word	0x08006df9
 8006cd4:	08006db1 	.word	0x08006db1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	4a66      	ldr	r2, [pc, #408]	; (8006e78 <HAL_TIM_IC_Start_DMA+0x318>)
 8006cde:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	4a65      	ldr	r2, [pc, #404]	; (8006e7c <HAL_TIM_IC_Start_DMA+0x31c>)
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	4a64      	ldr	r2, [pc, #400]	; (8006e80 <HAL_TIM_IC_Start_DMA+0x320>)
 8006cee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3334      	adds	r3, #52	; 0x34
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	887b      	ldrh	r3, [r7, #2]
 8006d00:	f7fc ff8c 	bl	8003c1c <HAL_DMA_Start_IT>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e0b0      	b.n	8006e70 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d1c:	60da      	str	r2, [r3, #12]
      break;
 8006d1e:	e06e      	b.n	8006dfe <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	4a54      	ldr	r2, [pc, #336]	; (8006e78 <HAL_TIM_IC_Start_DMA+0x318>)
 8006d26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2c:	4a53      	ldr	r2, [pc, #332]	; (8006e7c <HAL_TIM_IC_Start_DMA+0x31c>)
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	4a52      	ldr	r2, [pc, #328]	; (8006e80 <HAL_TIM_IC_Start_DMA+0x320>)
 8006d36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3338      	adds	r3, #56	; 0x38
 8006d42:	4619      	mov	r1, r3
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	887b      	ldrh	r3, [r7, #2]
 8006d48:	f7fc ff68 	bl	8003c1c <HAL_DMA_Start_IT>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e08c      	b.n	8006e70 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d64:	60da      	str	r2, [r3, #12]
      break;
 8006d66:	e04a      	b.n	8006dfe <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	4a42      	ldr	r2, [pc, #264]	; (8006e78 <HAL_TIM_IC_Start_DMA+0x318>)
 8006d6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	4a41      	ldr	r2, [pc, #260]	; (8006e7c <HAL_TIM_IC_Start_DMA+0x31c>)
 8006d76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	4a40      	ldr	r2, [pc, #256]	; (8006e80 <HAL_TIM_IC_Start_DMA+0x320>)
 8006d7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	333c      	adds	r3, #60	; 0x3c
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	887b      	ldrh	r3, [r7, #2]
 8006d90:	f7fc ff44 	bl	8003c1c <HAL_DMA_Start_IT>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e068      	b.n	8006e70 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dac:	60da      	str	r2, [r3, #12]
      break;
 8006dae:	e026      	b.n	8006dfe <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	4a30      	ldr	r2, [pc, #192]	; (8006e78 <HAL_TIM_IC_Start_DMA+0x318>)
 8006db6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbc:	4a2f      	ldr	r2, [pc, #188]	; (8006e7c <HAL_TIM_IC_Start_DMA+0x31c>)
 8006dbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	4a2e      	ldr	r2, [pc, #184]	; (8006e80 <HAL_TIM_IC_Start_DMA+0x320>)
 8006dc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3340      	adds	r3, #64	; 0x40
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	887b      	ldrh	r3, [r7, #2]
 8006dd8:	f7fc ff20 	bl	8003c1c <HAL_DMA_Start_IT>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e044      	b.n	8006e70 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006df4:	60da      	str	r2, [r3, #12]
      break;
 8006df6:	e002      	b.n	8006dfe <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfc:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a20      	ldr	r2, [pc, #128]	; (8006e84 <HAL_TIM_IC_Start_DMA+0x324>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d018      	beq.n	8006e3a <HAL_TIM_IC_Start_DMA+0x2da>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e10:	d013      	beq.n	8006e3a <HAL_TIM_IC_Start_DMA+0x2da>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1c      	ldr	r2, [pc, #112]	; (8006e88 <HAL_TIM_IC_Start_DMA+0x328>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00e      	beq.n	8006e3a <HAL_TIM_IC_Start_DMA+0x2da>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1a      	ldr	r2, [pc, #104]	; (8006e8c <HAL_TIM_IC_Start_DMA+0x32c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d009      	beq.n	8006e3a <HAL_TIM_IC_Start_DMA+0x2da>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a19      	ldr	r2, [pc, #100]	; (8006e90 <HAL_TIM_IC_Start_DMA+0x330>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d004      	beq.n	8006e3a <HAL_TIM_IC_Start_DMA+0x2da>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a17      	ldr	r2, [pc, #92]	; (8006e94 <HAL_TIM_IC_Start_DMA+0x334>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d111      	bne.n	8006e5e <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	2b06      	cmp	r3, #6
 8006e4a:	d010      	beq.n	8006e6e <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0201 	orr.w	r2, r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5c:	e007      	b.n	8006e6e <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0201 	orr.w	r2, r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	080075d5 	.word	0x080075d5
 8006e7c:	0800769d 	.word	0x0800769d
 8006e80:	08007543 	.word	0x08007543
 8006e84:	40010000 	.word	0x40010000
 8006e88:	40000400 	.word	0x40000400
 8006e8c:	40000800 	.word	0x40000800
 8006e90:	40000c00 	.word	0x40000c00
 8006e94:	40014000 	.word	0x40014000

08006e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d122      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d11b      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0202 	mvn.w	r2, #2
 8006ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fa fd8e 	bl	80019fc <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fb05 	bl	80074f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fa fda1 	bl	8001a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d122      	bne.n	8006f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d11b      	bne.n	8006f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0204 	mvn.w	r2, #4
 8006f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fa fd64 	bl	80019fc <HAL_TIM_IC_CaptureCallback>
 8006f34:	e005      	b.n	8006f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fadb 	bl	80074f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7fa fd77 	bl	8001a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d122      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d11b      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0208 	mvn.w	r2, #8
 8006f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2204      	movs	r2, #4
 8006f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fa fd3a 	bl	80019fc <HAL_TIM_IC_CaptureCallback>
 8006f88:	e005      	b.n	8006f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fab1 	bl	80074f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7fa fd4d 	bl	8001a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b10      	cmp	r3, #16
 8006fa8:	d122      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b10      	cmp	r3, #16
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f06f 0210 	mvn.w	r2, #16
 8006fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7fa fd10 	bl	80019fc <HAL_TIM_IC_CaptureCallback>
 8006fdc:	e005      	b.n	8006fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa87 	bl	80074f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7fa fd23 	bl	8001a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d10e      	bne.n	800701c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b01      	cmp	r3, #1
 800700a:	d107      	bne.n	800701c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0201 	mvn.w	r2, #1
 8007014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fb f932 	bl	8002280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007026:	2b80      	cmp	r3, #128	; 0x80
 8007028:	d10e      	bne.n	8007048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007034:	2b80      	cmp	r3, #128	; 0x80
 8007036:	d107      	bne.n	8007048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 ffc0 	bl	8007fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d10e      	bne.n	8007074 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	2b40      	cmp	r3, #64	; 0x40
 8007062:	d107      	bne.n	8007074 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800706c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa53 	bl	800751a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b20      	cmp	r3, #32
 8007080:	d10e      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0320 	and.w	r3, r3, #32
 800708c:	2b20      	cmp	r3, #32
 800708e:	d107      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0220 	mvn.w	r2, #32
 8007098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 ff8a 	bl	8007fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e088      	b.n	80071d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d11b      	bne.n	800710c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6819      	ldr	r1, [r3, #0]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f000 fd1a 	bl	8007b1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 020c 	bic.w	r2, r2, #12
 80070f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6999      	ldr	r1, [r3, #24]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	619a      	str	r2, [r3, #24]
 800710a:	e060      	b.n	80071ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b04      	cmp	r3, #4
 8007110:	d11c      	bne.n	800714c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6819      	ldr	r1, [r3, #0]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f000 fd92 	bl	8007c4a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007134:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6999      	ldr	r1, [r3, #24]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	021a      	lsls	r2, r3, #8
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	619a      	str	r2, [r3, #24]
 800714a:	e040      	b.n	80071ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b08      	cmp	r3, #8
 8007150:	d11b      	bne.n	800718a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6819      	ldr	r1, [r3, #0]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f000 fddf 	bl	8007d24 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69da      	ldr	r2, [r3, #28]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 020c 	bic.w	r2, r2, #12
 8007174:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69d9      	ldr	r1, [r3, #28]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	61da      	str	r2, [r3, #28]
 8007188:	e021      	b.n	80071ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b0c      	cmp	r3, #12
 800718e:	d11c      	bne.n	80071ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6819      	ldr	r1, [r3, #0]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f000 fdfc 	bl	8007d9c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69da      	ldr	r2, [r3, #28]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69d9      	ldr	r1, [r3, #28]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	021a      	lsls	r2, r3, #8
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	61da      	str	r2, [r3, #28]
 80071c8:	e001      	b.n	80071ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e0ae      	b.n	800735c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b0c      	cmp	r3, #12
 800720a:	f200 809f 	bhi.w	800734c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007249 	.word	0x08007249
 8007218:	0800734d 	.word	0x0800734d
 800721c:	0800734d 	.word	0x0800734d
 8007220:	0800734d 	.word	0x0800734d
 8007224:	08007289 	.word	0x08007289
 8007228:	0800734d 	.word	0x0800734d
 800722c:	0800734d 	.word	0x0800734d
 8007230:	0800734d 	.word	0x0800734d
 8007234:	080072cb 	.word	0x080072cb
 8007238:	0800734d 	.word	0x0800734d
 800723c:	0800734d 	.word	0x0800734d
 8007240:	0800734d 	.word	0x0800734d
 8007244:	0800730b 	.word	0x0800730b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fad8 	bl	8007804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0208 	orr.w	r2, r2, #8
 8007262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0204 	bic.w	r2, r2, #4
 8007272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6999      	ldr	r1, [r3, #24]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	619a      	str	r2, [r3, #24]
      break;
 8007286:	e064      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fb1e 	bl	80078d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6999      	ldr	r1, [r3, #24]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	021a      	lsls	r2, r3, #8
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	619a      	str	r2, [r3, #24]
      break;
 80072c8:	e043      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fb69 	bl	80079a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0208 	orr.w	r2, r2, #8
 80072e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0204 	bic.w	r2, r2, #4
 80072f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69d9      	ldr	r1, [r3, #28]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	691a      	ldr	r2, [r3, #16]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	61da      	str	r2, [r3, #28]
      break;
 8007308:	e023      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fbb3 	bl	8007a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69d9      	ldr	r1, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	021a      	lsls	r2, r3, #8
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	61da      	str	r2, [r3, #28]
      break;
 800734a:	e002      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	75fb      	strb	r3, [r7, #23]
      break;
 8007350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_TIM_ConfigClockSource+0x1c>
 800737c:	2302      	movs	r3, #2
 800737e:	e0b4      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x186>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800739e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b8:	d03e      	beq.n	8007438 <HAL_TIM_ConfigClockSource+0xd4>
 80073ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073be:	f200 8087 	bhi.w	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c6:	f000 8086 	beq.w	80074d6 <HAL_TIM_ConfigClockSource+0x172>
 80073ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ce:	d87f      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d0:	2b70      	cmp	r3, #112	; 0x70
 80073d2:	d01a      	beq.n	800740a <HAL_TIM_ConfigClockSource+0xa6>
 80073d4:	2b70      	cmp	r3, #112	; 0x70
 80073d6:	d87b      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d8:	2b60      	cmp	r3, #96	; 0x60
 80073da:	d050      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x11a>
 80073dc:	2b60      	cmp	r3, #96	; 0x60
 80073de:	d877      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e0:	2b50      	cmp	r3, #80	; 0x50
 80073e2:	d03c      	beq.n	800745e <HAL_TIM_ConfigClockSource+0xfa>
 80073e4:	2b50      	cmp	r3, #80	; 0x50
 80073e6:	d873      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e8:	2b40      	cmp	r3, #64	; 0x40
 80073ea:	d058      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x13a>
 80073ec:	2b40      	cmp	r3, #64	; 0x40
 80073ee:	d86f      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f0:	2b30      	cmp	r3, #48	; 0x30
 80073f2:	d064      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 80073f4:	2b30      	cmp	r3, #48	; 0x30
 80073f6:	d86b      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d060      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d867      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d05c      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 8007404:	2b10      	cmp	r3, #16
 8007406:	d05a      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 8007408:	e062      	b.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6899      	ldr	r1, [r3, #8]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f000 fd17 	bl	8007e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800742c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	609a      	str	r2, [r3, #8]
      break;
 8007436:	e04f      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	6899      	ldr	r1, [r3, #8]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f000 fd00 	bl	8007e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800745a:	609a      	str	r2, [r3, #8]
      break;
 800745c:	e03c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6859      	ldr	r1, [r3, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	461a      	mov	r2, r3
 800746c:	f000 fbbe 	bl	8007bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2150      	movs	r1, #80	; 0x50
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fccd 	bl	8007e16 <TIM_ITRx_SetConfig>
      break;
 800747c:	e02c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6859      	ldr	r1, [r3, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	461a      	mov	r2, r3
 800748c:	f000 fc1a 	bl	8007cc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2160      	movs	r1, #96	; 0x60
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fcbd 	bl	8007e16 <TIM_ITRx_SetConfig>
      break;
 800749c:	e01c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f000 fb9e 	bl	8007bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2140      	movs	r1, #64	; 0x40
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fcad 	bl	8007e16 <TIM_ITRx_SetConfig>
      break;
 80074bc:	e00c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f000 fca4 	bl	8007e16 <TIM_ITRx_SetConfig>
      break;
 80074ce:	e003      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
      break;
 80074d4:	e000      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d107      	bne.n	800756a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007568:	e02a      	b.n	80075c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	429a      	cmp	r2, r3
 8007572:	d107      	bne.n	8007584 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2202      	movs	r2, #2
 8007578:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007582:	e01d      	b.n	80075c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	429a      	cmp	r2, r3
 800758c:	d107      	bne.n	800759e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2204      	movs	r2, #4
 8007592:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800759c:	e010      	b.n	80075c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d107      	bne.n	80075b8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2208      	movs	r2, #8
 80075ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075b6:	e003      	b.n	80075c0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff ffb4 	bl	800752e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
}
 80075cc:	bf00      	nop
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d10f      	bne.n	800760c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d146      	bne.n	8007688 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800760a:	e03d      	b.n	8007688 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d10f      	bne.n	8007636 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2202      	movs	r2, #2
 800761a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d131      	bne.n	8007688 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007634:	e028      	b.n	8007688 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	d10f      	bne.n	8007660 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2204      	movs	r2, #4
 8007644:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d11c      	bne.n	8007688 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800765e:	e013      	b.n	8007688 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	429a      	cmp	r2, r3
 8007668:	d10e      	bne.n	8007688 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2208      	movs	r2, #8
 800766e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d107      	bne.n	8007688 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f7fa f9b7 	bl	80019fc <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	771a      	strb	r2, [r3, #28]
}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d103      	bne.n	80076bc <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	771a      	strb	r2, [r3, #28]
 80076ba:	e019      	b.n	80076f0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d103      	bne.n	80076ce <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2202      	movs	r2, #2
 80076ca:	771a      	strb	r2, [r3, #28]
 80076cc:	e010      	b.n	80076f0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d103      	bne.n	80076e0 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2204      	movs	r2, #4
 80076dc:	771a      	strb	r2, [r3, #28]
 80076de:	e007      	b.n	80076f0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d102      	bne.n	80076f0 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2208      	movs	r2, #8
 80076ee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7ff ff08 	bl	8007506 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
}
 80076fc:	bf00      	nop
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a34      	ldr	r2, [pc, #208]	; (80077e8 <TIM_Base_SetConfig+0xe4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d00f      	beq.n	800773c <TIM_Base_SetConfig+0x38>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007722:	d00b      	beq.n	800773c <TIM_Base_SetConfig+0x38>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a31      	ldr	r2, [pc, #196]	; (80077ec <TIM_Base_SetConfig+0xe8>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d007      	beq.n	800773c <TIM_Base_SetConfig+0x38>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a30      	ldr	r2, [pc, #192]	; (80077f0 <TIM_Base_SetConfig+0xec>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_Base_SetConfig+0x38>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a2f      	ldr	r2, [pc, #188]	; (80077f4 <TIM_Base_SetConfig+0xf0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d108      	bne.n	800774e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a25      	ldr	r2, [pc, #148]	; (80077e8 <TIM_Base_SetConfig+0xe4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d01b      	beq.n	800778e <TIM_Base_SetConfig+0x8a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775c:	d017      	beq.n	800778e <TIM_Base_SetConfig+0x8a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a22      	ldr	r2, [pc, #136]	; (80077ec <TIM_Base_SetConfig+0xe8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d013      	beq.n	800778e <TIM_Base_SetConfig+0x8a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a21      	ldr	r2, [pc, #132]	; (80077f0 <TIM_Base_SetConfig+0xec>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00f      	beq.n	800778e <TIM_Base_SetConfig+0x8a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a20      	ldr	r2, [pc, #128]	; (80077f4 <TIM_Base_SetConfig+0xf0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d00b      	beq.n	800778e <TIM_Base_SetConfig+0x8a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a1f      	ldr	r2, [pc, #124]	; (80077f8 <TIM_Base_SetConfig+0xf4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d007      	beq.n	800778e <TIM_Base_SetConfig+0x8a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <TIM_Base_SetConfig+0xf8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d003      	beq.n	800778e <TIM_Base_SetConfig+0x8a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <TIM_Base_SetConfig+0xfc>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d108      	bne.n	80077a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a08      	ldr	r2, [pc, #32]	; (80077e8 <TIM_Base_SetConfig+0xe4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d103      	bne.n	80077d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	691a      	ldr	r2, [r3, #16]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	615a      	str	r2, [r3, #20]
}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40010000 	.word	0x40010000
 80077ec:	40000400 	.word	0x40000400
 80077f0:	40000800 	.word	0x40000800
 80077f4:	40000c00 	.word	0x40000c00
 80077f8:	40014000 	.word	0x40014000
 80077fc:	40014400 	.word	0x40014400
 8007800:	40014800 	.word	0x40014800

08007804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f023 0201 	bic.w	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 0302 	bic.w	r3, r3, #2
 800784c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4313      	orrs	r3, r2
 8007856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a1c      	ldr	r2, [pc, #112]	; (80078cc <TIM_OC1_SetConfig+0xc8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d10c      	bne.n	800787a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f023 0308 	bic.w	r3, r3, #8
 8007866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	4313      	orrs	r3, r2
 8007870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f023 0304 	bic.w	r3, r3, #4
 8007878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a13      	ldr	r2, [pc, #76]	; (80078cc <TIM_OC1_SetConfig+0xc8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d111      	bne.n	80078a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	621a      	str	r2, [r3, #32]
}
 80078c0:	bf00      	nop
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	40010000 	.word	0x40010000

080078d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f023 0210 	bic.w	r2, r3, #16
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	021b      	lsls	r3, r3, #8
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f023 0320 	bic.w	r3, r3, #32
 800791a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a1e      	ldr	r2, [pc, #120]	; (80079a4 <TIM_OC2_SetConfig+0xd4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d10d      	bne.n	800794c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800794a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a15      	ldr	r2, [pc, #84]	; (80079a4 <TIM_OC2_SetConfig+0xd4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d113      	bne.n	800797c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800795a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	4313      	orrs	r3, r2
 800796e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	621a      	str	r2, [r3, #32]
}
 8007996:	bf00      	nop
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	40010000 	.word	0x40010000

080079a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0303 	bic.w	r3, r3, #3
 80079de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	021b      	lsls	r3, r3, #8
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a1d      	ldr	r2, [pc, #116]	; (8007a78 <TIM_OC3_SetConfig+0xd0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d10d      	bne.n	8007a22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a14      	ldr	r2, [pc, #80]	; (8007a78 <TIM_OC3_SetConfig+0xd0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d113      	bne.n	8007a52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	621a      	str	r2, [r3, #32]
}
 8007a6c:	bf00      	nop
 8007a6e:	371c      	adds	r7, #28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	40010000 	.word	0x40010000

08007a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	031b      	lsls	r3, r3, #12
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a10      	ldr	r2, [pc, #64]	; (8007b18 <TIM_OC4_SetConfig+0x9c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d109      	bne.n	8007af0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	019b      	lsls	r3, r3, #6
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	621a      	str	r2, [r3, #32]
}
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	40010000 	.word	0x40010000

08007b1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f023 0201 	bic.w	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4a24      	ldr	r2, [pc, #144]	; (8007bd8 <TIM_TI1_SetConfig+0xbc>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d013      	beq.n	8007b72 <TIM_TI1_SetConfig+0x56>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b50:	d00f      	beq.n	8007b72 <TIM_TI1_SetConfig+0x56>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4a21      	ldr	r2, [pc, #132]	; (8007bdc <TIM_TI1_SetConfig+0xc0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00b      	beq.n	8007b72 <TIM_TI1_SetConfig+0x56>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4a20      	ldr	r2, [pc, #128]	; (8007be0 <TIM_TI1_SetConfig+0xc4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d007      	beq.n	8007b72 <TIM_TI1_SetConfig+0x56>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4a1f      	ldr	r2, [pc, #124]	; (8007be4 <TIM_TI1_SetConfig+0xc8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d003      	beq.n	8007b72 <TIM_TI1_SetConfig+0x56>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4a1e      	ldr	r2, [pc, #120]	; (8007be8 <TIM_TI1_SetConfig+0xcc>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d101      	bne.n	8007b76 <TIM_TI1_SetConfig+0x5a>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <TIM_TI1_SetConfig+0x5c>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d008      	beq.n	8007b8e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f023 0303 	bic.w	r3, r3, #3
 8007b82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e003      	b.n	8007b96 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f043 0301 	orr.w	r3, r3, #1
 8007b94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f023 030a 	bic.w	r3, r3, #10
 8007bb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f003 030a 	and.w	r3, r3, #10
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	621a      	str	r2, [r3, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40010000 	.word	0x40010000
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40000c00 	.word	0x40000c00
 8007be8:	40014000 	.word	0x40014000

08007bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f023 0201 	bic.w	r2, r3, #1
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f023 030a 	bic.w	r3, r3, #10
 8007c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b087      	sub	sp, #28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	607a      	str	r2, [r7, #4]
 8007c56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	f023 0210 	bic.w	r2, r3, #16
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	031b      	lsls	r3, r3, #12
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	621a      	str	r2, [r3, #32]
}
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	f023 0210 	bic.w	r2, r3, #16
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	031b      	lsls	r3, r3, #12
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	621a      	str	r2, [r3, #32]
}
 8007d18:	bf00      	nop
 8007d1a:	371c      	adds	r7, #28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f023 0303 	bic.w	r3, r3, #3
 8007d50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007d74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	621a      	str	r2, [r3, #32]
}
 8007d90:	bf00      	nop
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	021b      	lsls	r3, r3, #8
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	031b      	lsls	r3, r3, #12
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007dee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	031b      	lsls	r3, r3, #12
 8007df4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	621a      	str	r2, [r3, #32]
}
 8007e0a:	bf00      	nop
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f043 0307 	orr.w	r3, r3, #7
 8007e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	609a      	str	r2, [r3, #8]
}
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	021a      	lsls	r2, r3, #8
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	609a      	str	r2, [r3, #8]
}
 8007e80:	bf00      	nop
 8007e82:	371c      	adds	r7, #28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f003 031f 	and.w	r3, r3, #31
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a1a      	ldr	r2, [r3, #32]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	43db      	mvns	r3, r3
 8007eae:	401a      	ands	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6a1a      	ldr	r2, [r3, #32]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f003 031f 	and.w	r3, r3, #31
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
	...

08007ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e050      	b.n	8007f92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d018      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3c:	d013      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d00e      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a16      	ldr	r2, [pc, #88]	; (8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d009      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a15      	ldr	r2, [pc, #84]	; (8007fac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d004      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a13      	ldr	r2, [pc, #76]	; (8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d10c      	bne.n	8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	40010000 	.word	0x40010000
 8007fa4:	40000400 	.word	0x40000400
 8007fa8:	40000800 	.word	0x40000800
 8007fac:	40000c00 	.word	0x40000c00
 8007fb0:	40014000 	.word	0x40014000

08007fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e03f      	b.n	800806e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fa feb8 	bl	8002d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2224      	movs	r2, #36	; 0x24
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800801e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fd7b 	bl	8008b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	695a      	ldr	r2, [r3, #20]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2220      	movs	r2, #32
 8008068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b08a      	sub	sp, #40	; 0x28
 800807a:	af02      	add	r7, sp, #8
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	603b      	str	r3, [r7, #0]
 8008082:	4613      	mov	r3, r2
 8008084:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b20      	cmp	r3, #32
 8008094:	d17c      	bne.n	8008190 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <HAL_UART_Transmit+0x2c>
 800809c:	88fb      	ldrh	r3, [r7, #6]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e075      	b.n	8008192 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_UART_Transmit+0x3e>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e06e      	b.n	8008192 <HAL_UART_Transmit+0x11c>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2221      	movs	r2, #33	; 0x21
 80080c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080ca:	f7fb f819 	bl	8003100 <HAL_GetTick>
 80080ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	88fa      	ldrh	r2, [r7, #6]
 80080d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	88fa      	ldrh	r2, [r7, #6]
 80080da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e4:	d108      	bne.n	80080f8 <HAL_UART_Transmit+0x82>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d104      	bne.n	80080f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	e003      	b.n	8008100 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008108:	e02a      	b.n	8008160 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2200      	movs	r2, #0
 8008112:	2180      	movs	r1, #128	; 0x80
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 faf9 	bl	800870c <UART_WaitOnFlagUntilTimeout>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e036      	b.n	8008192 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10b      	bne.n	8008142 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008138:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	3302      	adds	r3, #2
 800813e:	61bb      	str	r3, [r7, #24]
 8008140:	e007      	b.n	8008152 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	781a      	ldrb	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	3301      	adds	r3, #1
 8008150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008156:	b29b      	uxth	r3, r3
 8008158:	3b01      	subs	r3, #1
 800815a:	b29a      	uxth	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1cf      	bne.n	800810a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2200      	movs	r2, #0
 8008172:	2140      	movs	r1, #64	; 0x40
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fac9 	bl	800870c <UART_WaitOnFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e006      	b.n	8008192 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	e000      	b.n	8008192 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008190:	2302      	movs	r3, #2
  }
}
 8008192:	4618      	mov	r0, r3
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b0ba      	sub	sp, #232	; 0xe8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d2:	f003 030f 	and.w	r3, r3, #15
 80081d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80081da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10f      	bne.n	8008202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <HAL_UART_IRQHandler+0x66>
 80081ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fbd3 	bl	80089a6 <UART_Receive_IT>
      return;
 8008200:	e256      	b.n	80086b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80de 	beq.w	80083c8 <HAL_UART_IRQHandler+0x22c>
 800820c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800821c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 80d1 	beq.w	80083c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <HAL_UART_IRQHandler+0xae>
 8008232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	f043 0201 	orr.w	r2, r3, #1
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800824a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00b      	beq.n	800826e <HAL_UART_IRQHandler+0xd2>
 8008256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d005      	beq.n	800826e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f043 0202 	orr.w	r2, r3, #2
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800826e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00b      	beq.n	8008292 <HAL_UART_IRQHandler+0xf6>
 800827a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d005      	beq.n	8008292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	f043 0204 	orr.w	r2, r3, #4
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d011      	beq.n	80082c2 <HAL_UART_IRQHandler+0x126>
 800829e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d105      	bne.n	80082b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d005      	beq.n	80082c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f043 0208 	orr.w	r2, r3, #8
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 81ed 	beq.w	80086a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d008      	beq.n	80082ea <HAL_UART_IRQHandler+0x14e>
 80082d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fb5e 	bl	80089a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	bf0c      	ite	eq
 80082f8:	2301      	moveq	r3, #1
 80082fa:	2300      	movne	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	f003 0308 	and.w	r3, r3, #8
 800830a:	2b00      	cmp	r3, #0
 800830c:	d103      	bne.n	8008316 <HAL_UART_IRQHandler+0x17a>
 800830e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008312:	2b00      	cmp	r3, #0
 8008314:	d04f      	beq.n	80083b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa66 	bl	80087e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008326:	2b40      	cmp	r3, #64	; 0x40
 8008328:	d141      	bne.n	80083ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3314      	adds	r3, #20
 8008330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3314      	adds	r3, #20
 8008352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800835a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800836e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1d9      	bne.n	800832a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	2b00      	cmp	r3, #0
 800837c:	d013      	beq.n	80083a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008382:	4a7d      	ldr	r2, [pc, #500]	; (8008578 <HAL_UART_IRQHandler+0x3dc>)
 8008384:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	4618      	mov	r0, r3
 800838c:	f7fb fd0e 	bl	8003dac <HAL_DMA_Abort_IT>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d016      	beq.n	80083c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a4:	e00e      	b.n	80083c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f99a 	bl	80086e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ac:	e00a      	b.n	80083c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f996 	bl	80086e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b4:	e006      	b.n	80083c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f992 	bl	80086e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083c2:	e170      	b.n	80086a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c4:	bf00      	nop
    return;
 80083c6:	e16e      	b.n	80086a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	f040 814a 	bne.w	8008666 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 8143 	beq.w	8008666 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 813c 	beq.w	8008666 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ee:	2300      	movs	r3, #0
 80083f0:	60bb      	str	r3, [r7, #8]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840e:	2b40      	cmp	r3, #64	; 0x40
 8008410:	f040 80b4 	bne.w	800857c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 8140 	beq.w	80086aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800842e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008432:	429a      	cmp	r2, r3
 8008434:	f080 8139 	bcs.w	80086aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800843e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844a:	f000 8088 	beq.w	800855e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	330c      	adds	r3, #12
 8008454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800846c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	330c      	adds	r3, #12
 8008476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800847a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800847e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1d9      	bne.n	800844e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3314      	adds	r3, #20
 80084a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084ac:	f023 0301 	bic.w	r3, r3, #1
 80084b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3314      	adds	r3, #20
 80084ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e1      	bne.n	800849a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3314      	adds	r3, #20
 80084dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3314      	adds	r3, #20
 80084f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e3      	bne.n	80084d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2220      	movs	r2, #32
 8008512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	330c      	adds	r3, #12
 8008522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800852c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852e:	f023 0310 	bic.w	r3, r3, #16
 8008532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	330c      	adds	r3, #12
 800853c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008540:	65ba      	str	r2, [r7, #88]	; 0x58
 8008542:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800854e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e3      	bne.n	800851c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	4618      	mov	r0, r3
 800855a:	f7fb fbb7 	bl	8003ccc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008566:	b29b      	uxth	r3, r3
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	b29b      	uxth	r3, r3
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f8c0 	bl	80086f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008574:	e099      	b.n	80086aa <HAL_UART_IRQHandler+0x50e>
 8008576:	bf00      	nop
 8008578:	080088af 	.word	0x080088af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008584:	b29b      	uxth	r3, r3
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008590:	b29b      	uxth	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 808b 	beq.w	80086ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 8086 	beq.w	80086ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	330c      	adds	r3, #12
 80085a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	330c      	adds	r3, #12
 80085c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085c6:	647a      	str	r2, [r7, #68]	; 0x44
 80085c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e3      	bne.n	80085a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3314      	adds	r3, #20
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	623b      	str	r3, [r7, #32]
   return(result);
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f023 0301 	bic.w	r3, r3, #1
 80085f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3314      	adds	r3, #20
 80085fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085fe:	633a      	str	r2, [r7, #48]	; 0x30
 8008600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e3      	bne.n	80085da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	330c      	adds	r3, #12
 8008626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0310 	bic.w	r3, r3, #16
 8008636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	330c      	adds	r3, #12
 8008640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008644:	61fa      	str	r2, [r7, #28]
 8008646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	69b9      	ldr	r1, [r7, #24]
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	617b      	str	r3, [r7, #20]
   return(result);
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e3      	bne.n	8008620 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f848 	bl	80086f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008664:	e023      	b.n	80086ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866e:	2b00      	cmp	r3, #0
 8008670:	d009      	beq.n	8008686 <HAL_UART_IRQHandler+0x4ea>
 8008672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f929 	bl	80088d6 <UART_Transmit_IT>
    return;
 8008684:	e014      	b.n	80086b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00e      	beq.n	80086b0 <HAL_UART_IRQHandler+0x514>
 8008692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f969 	bl	8008976 <UART_EndTransmit_IT>
    return;
 80086a4:	e004      	b.n	80086b0 <HAL_UART_IRQHandler+0x514>
    return;
 80086a6:	bf00      	nop
 80086a8:	e002      	b.n	80086b0 <HAL_UART_IRQHandler+0x514>
      return;
 80086aa:	bf00      	nop
 80086ac:	e000      	b.n	80086b0 <HAL_UART_IRQHandler+0x514>
      return;
 80086ae:	bf00      	nop
  }
}
 80086b0:	37e8      	adds	r7, #232	; 0xe8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop

080086b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b090      	sub	sp, #64	; 0x40
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	4613      	mov	r3, r2
 800871a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800871c:	e050      	b.n	80087c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800871e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008724:	d04c      	beq.n	80087c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <UART_WaitOnFlagUntilTimeout+0x30>
 800872c:	f7fa fce8 	bl	8003100 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008738:	429a      	cmp	r2, r3
 800873a:	d241      	bcs.n	80087c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	330c      	adds	r3, #12
 8008742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	e853 3f00 	ldrex	r3, [r3]
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	330c      	adds	r3, #12
 800875a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800875c:	637a      	str	r2, [r7, #52]	; 0x34
 800875e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008764:	e841 2300 	strex	r3, r2, [r1]
 8008768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e5      	bne.n	800873c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3314      	adds	r3, #20
 8008776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	613b      	str	r3, [r7, #16]
   return(result);
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f023 0301 	bic.w	r3, r3, #1
 8008786:	63bb      	str	r3, [r7, #56]	; 0x38
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3314      	adds	r3, #20
 800878e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008790:	623a      	str	r2, [r7, #32]
 8008792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	69f9      	ldr	r1, [r7, #28]
 8008796:	6a3a      	ldr	r2, [r7, #32]
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	61bb      	str	r3, [r7, #24]
   return(result);
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e5      	bne.n	8008770 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e00f      	b.n	80087e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	4013      	ands	r3, r2
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	bf0c      	ite	eq
 80087d0:	2301      	moveq	r3, #1
 80087d2:	2300      	movne	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d09f      	beq.n	800871e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3740      	adds	r7, #64	; 0x40
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b095      	sub	sp, #84	; 0x54
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	330c      	adds	r3, #12
 80087f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	330c      	adds	r3, #12
 800880e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008810:	643a      	str	r2, [r7, #64]	; 0x40
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008818:	e841 2300 	strex	r3, r2, [r1]
 800881c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e5      	bne.n	80087f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3314      	adds	r3, #20
 800882a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	e853 3f00 	ldrex	r3, [r3]
 8008832:	61fb      	str	r3, [r7, #28]
   return(result);
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	f023 0301 	bic.w	r3, r3, #1
 800883a:	64bb      	str	r3, [r7, #72]	; 0x48
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3314      	adds	r3, #20
 8008842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800884a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800884c:	e841 2300 	strex	r3, r2, [r1]
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e5      	bne.n	8008824 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885c:	2b01      	cmp	r3, #1
 800885e:	d119      	bne.n	8008894 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	330c      	adds	r3, #12
 8008866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f023 0310 	bic.w	r3, r3, #16
 8008876:	647b      	str	r3, [r7, #68]	; 0x44
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	330c      	adds	r3, #12
 800887e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008880:	61ba      	str	r2, [r7, #24]
 8008882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	6979      	ldr	r1, [r7, #20]
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	613b      	str	r3, [r7, #16]
   return(result);
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e5      	bne.n	8008860 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2220      	movs	r2, #32
 8008898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088a2:	bf00      	nop
 80088a4:	3754      	adds	r7, #84	; 0x54
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7ff ff09 	bl	80086e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b21      	cmp	r3, #33	; 0x21
 80088e8:	d13e      	bne.n	8008968 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f2:	d114      	bne.n	800891e <UART_Transmit_IT+0x48>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d110      	bne.n	800891e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008910:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	1c9a      	adds	r2, r3, #2
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	621a      	str	r2, [r3, #32]
 800891c:	e008      	b.n	8008930 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	1c59      	adds	r1, r3, #1
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6211      	str	r1, [r2, #32]
 8008928:	781a      	ldrb	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008934:	b29b      	uxth	r3, r3
 8008936:	3b01      	subs	r3, #1
 8008938:	b29b      	uxth	r3, r3
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	4619      	mov	r1, r3
 800893e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10f      	bne.n	8008964 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008952:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008962:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	e000      	b.n	800896a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008968:	2302      	movs	r3, #2
  }
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800898c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff fe8e 	bl	80086b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b08c      	sub	sp, #48	; 0x30
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b22      	cmp	r3, #34	; 0x22
 80089b8:	f040 80ab 	bne.w	8008b12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089c4:	d117      	bne.n	80089f6 <UART_Receive_IT+0x50>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d113      	bne.n	80089f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ee:	1c9a      	adds	r2, r3, #2
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	629a      	str	r2, [r3, #40]	; 0x28
 80089f4:	e026      	b.n	8008a44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a08:	d007      	beq.n	8008a1a <UART_Receive_IT+0x74>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10a      	bne.n	8008a28 <UART_Receive_IT+0x82>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d106      	bne.n	8008a28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e008      	b.n	8008a3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	4619      	mov	r1, r3
 8008a52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d15a      	bne.n	8008b0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0220 	bic.w	r2, r2, #32
 8008a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695a      	ldr	r2, [r3, #20]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 0201 	bic.w	r2, r2, #1
 8008a86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d135      	bne.n	8008b04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	330c      	adds	r3, #12
 8008aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	613b      	str	r3, [r7, #16]
   return(result);
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f023 0310 	bic.w	r3, r3, #16
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	330c      	adds	r3, #12
 8008abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008abe:	623a      	str	r2, [r7, #32]
 8008ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	69f9      	ldr	r1, [r7, #28]
 8008ac4:	6a3a      	ldr	r2, [r7, #32]
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e5      	bne.n	8008a9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b10      	cmp	r3, #16
 8008ade:	d10a      	bne.n	8008af6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff fdf9 	bl	80086f4 <HAL_UARTEx_RxEventCallback>
 8008b02:	e002      	b.n	8008b0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff fde1 	bl	80086cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e002      	b.n	8008b14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e000      	b.n	8008b14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b12:	2302      	movs	r3, #2
  }
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3730      	adds	r7, #48	; 0x30
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b20:	b0c0      	sub	sp, #256	; 0x100
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b38:	68d9      	ldr	r1, [r3, #12]
 8008b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	ea40 0301 	orr.w	r3, r0, r1
 8008b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	431a      	orrs	r2, r3
 8008b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b74:	f021 010c 	bic.w	r1, r1, #12
 8008b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b82:	430b      	orrs	r3, r1
 8008b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b96:	6999      	ldr	r1, [r3, #24]
 8008b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	ea40 0301 	orr.w	r3, r0, r1
 8008ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4b8f      	ldr	r3, [pc, #572]	; (8008de8 <UART_SetConfig+0x2cc>)
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d005      	beq.n	8008bbc <UART_SetConfig+0xa0>
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	4b8d      	ldr	r3, [pc, #564]	; (8008dec <UART_SetConfig+0x2d0>)
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d104      	bne.n	8008bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bbc:	f7fd fa50 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 8008bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bc4:	e003      	b.n	8008bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bc6:	f7fd fa37 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8008bca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd8:	f040 810c 	bne.w	8008df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008be0:	2200      	movs	r2, #0
 8008be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008be6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bee:	4622      	mov	r2, r4
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	1891      	adds	r1, r2, r2
 8008bf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008bf6:	415b      	adcs	r3, r3
 8008bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008bfe:	4621      	mov	r1, r4
 8008c00:	eb12 0801 	adds.w	r8, r2, r1
 8008c04:	4629      	mov	r1, r5
 8008c06:	eb43 0901 	adc.w	r9, r3, r1
 8008c0a:	f04f 0200 	mov.w	r2, #0
 8008c0e:	f04f 0300 	mov.w	r3, #0
 8008c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c1e:	4690      	mov	r8, r2
 8008c20:	4699      	mov	r9, r3
 8008c22:	4623      	mov	r3, r4
 8008c24:	eb18 0303 	adds.w	r3, r8, r3
 8008c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	eb49 0303 	adc.w	r3, r9, r3
 8008c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	18db      	adds	r3, r3, r3
 8008c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8008c50:	4613      	mov	r3, r2
 8008c52:	eb42 0303 	adc.w	r3, r2, r3
 8008c56:	657b      	str	r3, [r7, #84]	; 0x54
 8008c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c60:	f7f7 ffca 	bl	8000bf8 <__aeabi_uldivmod>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4b61      	ldr	r3, [pc, #388]	; (8008df0 <UART_SetConfig+0x2d4>)
 8008c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c6e:	095b      	lsrs	r3, r3, #5
 8008c70:	011c      	lsls	r4, r3, #4
 8008c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c84:	4642      	mov	r2, r8
 8008c86:	464b      	mov	r3, r9
 8008c88:	1891      	adds	r1, r2, r2
 8008c8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c8c:	415b      	adcs	r3, r3
 8008c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c94:	4641      	mov	r1, r8
 8008c96:	eb12 0a01 	adds.w	sl, r2, r1
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cb4:	4692      	mov	sl, r2
 8008cb6:	469b      	mov	fp, r3
 8008cb8:	4643      	mov	r3, r8
 8008cba:	eb1a 0303 	adds.w	r3, sl, r3
 8008cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8008cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	18db      	adds	r3, r3, r3
 8008ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	eb42 0303 	adc.w	r3, r2, r3
 8008cec:	647b      	str	r3, [r7, #68]	; 0x44
 8008cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008cf6:	f7f7 ff7f 	bl	8000bf8 <__aeabi_uldivmod>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4b3b      	ldr	r3, [pc, #236]	; (8008df0 <UART_SetConfig+0x2d4>)
 8008d02:	fba3 2301 	umull	r2, r3, r3, r1
 8008d06:	095b      	lsrs	r3, r3, #5
 8008d08:	2264      	movs	r2, #100	; 0x64
 8008d0a:	fb02 f303 	mul.w	r3, r2, r3
 8008d0e:	1acb      	subs	r3, r1, r3
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d16:	4b36      	ldr	r3, [pc, #216]	; (8008df0 <UART_SetConfig+0x2d4>)
 8008d18:	fba3 2302 	umull	r2, r3, r3, r2
 8008d1c:	095b      	lsrs	r3, r3, #5
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d24:	441c      	add	r4, r3
 8008d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d38:	4642      	mov	r2, r8
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	1891      	adds	r1, r2, r2
 8008d3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d40:	415b      	adcs	r3, r3
 8008d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d48:	4641      	mov	r1, r8
 8008d4a:	1851      	adds	r1, r2, r1
 8008d4c:	6339      	str	r1, [r7, #48]	; 0x30
 8008d4e:	4649      	mov	r1, r9
 8008d50:	414b      	adcs	r3, r1
 8008d52:	637b      	str	r3, [r7, #52]	; 0x34
 8008d54:	f04f 0200 	mov.w	r2, #0
 8008d58:	f04f 0300 	mov.w	r3, #0
 8008d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d60:	4659      	mov	r1, fp
 8008d62:	00cb      	lsls	r3, r1, #3
 8008d64:	4651      	mov	r1, sl
 8008d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d6a:	4651      	mov	r1, sl
 8008d6c:	00ca      	lsls	r2, r1, #3
 8008d6e:	4610      	mov	r0, r2
 8008d70:	4619      	mov	r1, r3
 8008d72:	4603      	mov	r3, r0
 8008d74:	4642      	mov	r2, r8
 8008d76:	189b      	adds	r3, r3, r2
 8008d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d7c:	464b      	mov	r3, r9
 8008d7e:	460a      	mov	r2, r1
 8008d80:	eb42 0303 	adc.w	r3, r2, r3
 8008d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	18db      	adds	r3, r3, r3
 8008da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008da2:	4613      	mov	r3, r2
 8008da4:	eb42 0303 	adc.w	r3, r2, r3
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008db2:	f7f7 ff21 	bl	8000bf8 <__aeabi_uldivmod>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <UART_SetConfig+0x2d4>)
 8008dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8008dc0:	095b      	lsrs	r3, r3, #5
 8008dc2:	2164      	movs	r1, #100	; 0x64
 8008dc4:	fb01 f303 	mul.w	r3, r1, r3
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	3332      	adds	r3, #50	; 0x32
 8008dce:	4a08      	ldr	r2, [pc, #32]	; (8008df0 <UART_SetConfig+0x2d4>)
 8008dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd4:	095b      	lsrs	r3, r3, #5
 8008dd6:	f003 0207 	and.w	r2, r3, #7
 8008dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4422      	add	r2, r4
 8008de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008de4:	e105      	b.n	8008ff2 <UART_SetConfig+0x4d6>
 8008de6:	bf00      	nop
 8008de8:	40011000 	.word	0x40011000
 8008dec:	40011400 	.word	0x40011400
 8008df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e06:	4642      	mov	r2, r8
 8008e08:	464b      	mov	r3, r9
 8008e0a:	1891      	adds	r1, r2, r2
 8008e0c:	6239      	str	r1, [r7, #32]
 8008e0e:	415b      	adcs	r3, r3
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24
 8008e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e16:	4641      	mov	r1, r8
 8008e18:	1854      	adds	r4, r2, r1
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	eb43 0501 	adc.w	r5, r3, r1
 8008e20:	f04f 0200 	mov.w	r2, #0
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	00eb      	lsls	r3, r5, #3
 8008e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e2e:	00e2      	lsls	r2, r4, #3
 8008e30:	4614      	mov	r4, r2
 8008e32:	461d      	mov	r5, r3
 8008e34:	4643      	mov	r3, r8
 8008e36:	18e3      	adds	r3, r4, r3
 8008e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	eb45 0303 	adc.w	r3, r5, r3
 8008e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e56:	f04f 0200 	mov.w	r2, #0
 8008e5a:	f04f 0300 	mov.w	r3, #0
 8008e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e62:	4629      	mov	r1, r5
 8008e64:	008b      	lsls	r3, r1, #2
 8008e66:	4621      	mov	r1, r4
 8008e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	008a      	lsls	r2, r1, #2
 8008e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e74:	f7f7 fec0 	bl	8000bf8 <__aeabi_uldivmod>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4b60      	ldr	r3, [pc, #384]	; (8009000 <UART_SetConfig+0x4e4>)
 8008e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	011c      	lsls	r4, r3, #4
 8008e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e98:	4642      	mov	r2, r8
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	1891      	adds	r1, r2, r2
 8008e9e:	61b9      	str	r1, [r7, #24]
 8008ea0:	415b      	adcs	r3, r3
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ea8:	4641      	mov	r1, r8
 8008eaa:	1851      	adds	r1, r2, r1
 8008eac:	6139      	str	r1, [r7, #16]
 8008eae:	4649      	mov	r1, r9
 8008eb0:	414b      	adcs	r3, r1
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ec0:	4659      	mov	r1, fp
 8008ec2:	00cb      	lsls	r3, r1, #3
 8008ec4:	4651      	mov	r1, sl
 8008ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eca:	4651      	mov	r1, sl
 8008ecc:	00ca      	lsls	r2, r1, #3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	189b      	adds	r3, r3, r2
 8008ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008edc:	464b      	mov	r3, r9
 8008ede:	460a      	mov	r2, r1
 8008ee0:	eb42 0303 	adc.w	r3, r2, r3
 8008ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ef2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f00:	4649      	mov	r1, r9
 8008f02:	008b      	lsls	r3, r1, #2
 8008f04:	4641      	mov	r1, r8
 8008f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f0a:	4641      	mov	r1, r8
 8008f0c:	008a      	lsls	r2, r1, #2
 8008f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f12:	f7f7 fe71 	bl	8000bf8 <__aeabi_uldivmod>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4b39      	ldr	r3, [pc, #228]	; (8009000 <UART_SetConfig+0x4e4>)
 8008f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f20:	095b      	lsrs	r3, r3, #5
 8008f22:	2164      	movs	r1, #100	; 0x64
 8008f24:	fb01 f303 	mul.w	r3, r1, r3
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	3332      	adds	r3, #50	; 0x32
 8008f2e:	4a34      	ldr	r2, [pc, #208]	; (8009000 <UART_SetConfig+0x4e4>)
 8008f30:	fba2 2303 	umull	r2, r3, r2, r3
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f3a:	441c      	add	r4, r3
 8008f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f40:	2200      	movs	r2, #0
 8008f42:	673b      	str	r3, [r7, #112]	; 0x70
 8008f44:	677a      	str	r2, [r7, #116]	; 0x74
 8008f46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f4a:	4642      	mov	r2, r8
 8008f4c:	464b      	mov	r3, r9
 8008f4e:	1891      	adds	r1, r2, r2
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	415b      	adcs	r3, r3
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f5a:	4641      	mov	r1, r8
 8008f5c:	1851      	adds	r1, r2, r1
 8008f5e:	6039      	str	r1, [r7, #0]
 8008f60:	4649      	mov	r1, r9
 8008f62:	414b      	adcs	r3, r1
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	f04f 0200 	mov.w	r2, #0
 8008f6a:	f04f 0300 	mov.w	r3, #0
 8008f6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f72:	4659      	mov	r1, fp
 8008f74:	00cb      	lsls	r3, r1, #3
 8008f76:	4651      	mov	r1, sl
 8008f78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f7c:	4651      	mov	r1, sl
 8008f7e:	00ca      	lsls	r2, r1, #3
 8008f80:	4610      	mov	r0, r2
 8008f82:	4619      	mov	r1, r3
 8008f84:	4603      	mov	r3, r0
 8008f86:	4642      	mov	r2, r8
 8008f88:	189b      	adds	r3, r3, r2
 8008f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f8c:	464b      	mov	r3, r9
 8008f8e:	460a      	mov	r2, r1
 8008f90:	eb42 0303 	adc.w	r3, r2, r3
 8008f94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	663b      	str	r3, [r7, #96]	; 0x60
 8008fa0:	667a      	str	r2, [r7, #100]	; 0x64
 8008fa2:	f04f 0200 	mov.w	r2, #0
 8008fa6:	f04f 0300 	mov.w	r3, #0
 8008faa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008fae:	4649      	mov	r1, r9
 8008fb0:	008b      	lsls	r3, r1, #2
 8008fb2:	4641      	mov	r1, r8
 8008fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fb8:	4641      	mov	r1, r8
 8008fba:	008a      	lsls	r2, r1, #2
 8008fbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fc0:	f7f7 fe1a 	bl	8000bf8 <__aeabi_uldivmod>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <UART_SetConfig+0x4e4>)
 8008fca:	fba3 1302 	umull	r1, r3, r3, r2
 8008fce:	095b      	lsrs	r3, r3, #5
 8008fd0:	2164      	movs	r1, #100	; 0x64
 8008fd2:	fb01 f303 	mul.w	r3, r1, r3
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	011b      	lsls	r3, r3, #4
 8008fda:	3332      	adds	r3, #50	; 0x32
 8008fdc:	4a08      	ldr	r2, [pc, #32]	; (8009000 <UART_SetConfig+0x4e4>)
 8008fde:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe2:	095b      	lsrs	r3, r3, #5
 8008fe4:	f003 020f 	and.w	r2, r3, #15
 8008fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4422      	add	r2, r4
 8008ff0:	609a      	str	r2, [r3, #8]
}
 8008ff2:	bf00      	nop
 8008ff4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ffe:	bf00      	nop
 8009000:	51eb851f 	.word	0x51eb851f

08009004 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009016:	2b84      	cmp	r3, #132	; 0x84
 8009018:	d005      	beq.n	8009026 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800901a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	4413      	add	r3, r2
 8009022:	3303      	adds	r3, #3
 8009024:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009026:	68fb      	ldr	r3, [r7, #12]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009038:	f001 fab2 	bl	800a5a0 <vTaskStartScheduler>
  
  return osOK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	bd80      	pop	{r7, pc}

08009042 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009044:	b089      	sub	sp, #36	; 0x24
 8009046:	af04      	add	r7, sp, #16
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d020      	beq.n	8009096 <osThreadCreate+0x54>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d01c      	beq.n	8009096 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685c      	ldr	r4, [r3, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681d      	ldr	r5, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691e      	ldr	r6, [r3, #16]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff ffc8 	bl	8009004 <makeFreeRtosPriority>
 8009074:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800907e:	9202      	str	r2, [sp, #8]
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	9100      	str	r1, [sp, #0]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	4632      	mov	r2, r6
 8009088:	4629      	mov	r1, r5
 800908a:	4620      	mov	r0, r4
 800908c:	f001 f8c0 	bl	800a210 <xTaskCreateStatic>
 8009090:	4603      	mov	r3, r0
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e01c      	b.n	80090d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685c      	ldr	r4, [r3, #4]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090a2:	b29e      	uxth	r6, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff ffaa 	bl	8009004 <makeFreeRtosPriority>
 80090b0:	4602      	mov	r2, r0
 80090b2:	f107 030c 	add.w	r3, r7, #12
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	9200      	str	r2, [sp, #0]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	4632      	mov	r2, r6
 80090be:	4629      	mov	r1, r5
 80090c0:	4620      	mov	r0, r4
 80090c2:	f001 f902 	bl	800a2ca <xTaskCreate>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d001      	beq.n	80090d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80090cc:	2300      	movs	r3, #0
 80090ce:	e000      	b.n	80090d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80090d0:	68fb      	ldr	r3, [r7, #12]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <osDelay+0x16>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	e000      	b.n	80090f2 <osDelay+0x18>
 80090f0:	2301      	movs	r3, #1
 80090f2:	4618      	mov	r0, r3
 80090f4:	f001 fa20 	bl	800a538 <vTaskDelay>
  
  return osOK;
 80090f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009108:	201c      	movs	r0, #28
 800910a:	f002 ff45 	bl	800bf98 <pvPortMalloc>
 800910e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3304      	adds	r3, #4
 8009120:	4618      	mov	r0, r3
 8009122:	f000 f9bc 	bl	800949e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800912c:	687b      	ldr	r3, [r7, #4]
	}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b090      	sub	sp, #64	; 0x40
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800914e:	2300      	movs	r3, #0
 8009150:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10a      	bne.n	800916e <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800916a:	bf00      	nop
 800916c:	e7fe      	b.n	800916c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00a      	beq.n	800918e <xEventGroupWaitBits+0x56>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	61fb      	str	r3, [r7, #28]
}
 800918a:	bf00      	nop
 800918c:	e7fe      	b.n	800918c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10a      	bne.n	80091aa <xEventGroupWaitBits+0x72>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	61bb      	str	r3, [r7, #24]
}
 80091a6:	bf00      	nop
 80091a8:	e7fe      	b.n	80091a8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091aa:	f001 fed9 	bl	800af60 <xTaskGetSchedulerState>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d102      	bne.n	80091ba <xEventGroupWaitBits+0x82>
 80091b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <xEventGroupWaitBits+0x86>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e000      	b.n	80091c0 <xEventGroupWaitBits+0x88>
 80091be:	2300      	movs	r3, #0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <xEventGroupWaitBits+0xa2>
	__asm volatile
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	617b      	str	r3, [r7, #20]
}
 80091d6:	bf00      	nop
 80091d8:	e7fe      	b.n	80091d8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80091da:	f001 fa47 	bl	800a66c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091ea:	f000 f936 	bl	800945a <prvTestWaitCondition>
 80091ee:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00e      	beq.n	8009214 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d028      	beq.n	8009256 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	43db      	mvns	r3, r3
 800920c:	401a      	ands	r2, r3
 800920e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	e020      	b.n	8009256 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009216:	2b00      	cmp	r3, #0
 8009218:	d104      	bne.n	8009224 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800921e:	2301      	movs	r3, #1
 8009220:	633b      	str	r3, [r7, #48]	; 0x30
 8009222:	e018      	b.n	8009256 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009230:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d003      	beq.n	8009240 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800923e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009242:	1d18      	adds	r0, r3, #4
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	4313      	orrs	r3, r2
 800924a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800924c:	4619      	mov	r1, r3
 800924e:	f001 fbff 	bl	800aa50 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009256:	f001 fa17 	bl	800a688 <xTaskResumeAll>
 800925a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800925c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800925e:	2b00      	cmp	r3, #0
 8009260:	d031      	beq.n	80092c6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	2b00      	cmp	r3, #0
 8009266:	d107      	bne.n	8009278 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009268:	4b19      	ldr	r3, [pc, #100]	; (80092d0 <xEventGroupWaitBits+0x198>)
 800926a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009278:	f001 ff16 	bl	800b0a8 <uxTaskResetEventItemValue>
 800927c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800927e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d11a      	bne.n	80092be <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8009288:	f002 fd64 	bl	800bd54 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800928c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	68b9      	ldr	r1, [r7, #8]
 8009296:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009298:	f000 f8df 	bl	800945a <prvTestWaitCondition>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d009      	beq.n	80092b6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d006      	beq.n	80092b6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80092a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	43db      	mvns	r3, r3
 80092b0:	401a      	ands	r2, r3
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80092b6:	2301      	movs	r3, #1
 80092b8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80092ba:	f002 fd7b 	bl	800bdb4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80092be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80092c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3740      	adds	r7, #64	; 0x40
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	e000ed04 	.word	0xe000ed04

080092d4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <xEventGroupClearBits+0x2a>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	60fb      	str	r3, [r7, #12]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <xEventGroupClearBits+0x4a>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	60bb      	str	r3, [r7, #8]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800931e:	f002 fd19 	bl	800bd54 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	43db      	mvns	r3, r3
 8009330:	401a      	ands	r2, r3
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8009336:	f002 fd3d 	bl	800bdb4 <vPortExitCritical>

	return uxReturn;
 800933a:	693b      	ldr	r3, [r7, #16]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08e      	sub	sp, #56	; 0x38
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800934e:	2300      	movs	r3, #0
 8009350:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8009356:	2300      	movs	r3, #0
 8009358:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10a      	bne.n	8009376 <xEventGroupSetBits+0x32>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	613b      	str	r3, [r7, #16]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00a      	beq.n	8009396 <xEventGroupSetBits+0x52>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	60fb      	str	r3, [r7, #12]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	3304      	adds	r3, #4
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	3308      	adds	r3, #8
 80093a0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80093a2:	f001 f963 	bl	800a66c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	431a      	orrs	r2, r3
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80093b8:	e03c      	b.n	8009434 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80093ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80093c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80093d0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80093d8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d108      	bne.n	80093f6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	4013      	ands	r3, r2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80093f0:	2301      	movs	r3, #1
 80093f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093f4:	e008      	b.n	8009408 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	4013      	ands	r3, r2
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	429a      	cmp	r2, r3
 8009402:	d101      	bne.n	8009408 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009404:	2301      	movs	r3, #1
 8009406:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	4313      	orrs	r3, r2
 800941e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009428:	4619      	mov	r1, r3
 800942a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800942c:	f001 fbda 	bl	800abe4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8009434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	429a      	cmp	r2, r3
 800943a:	d1be      	bne.n	80093ba <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	43db      	mvns	r3, r3
 8009444:	401a      	ands	r2, r3
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800944a:	f001 f91d 	bl	800a688 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	681b      	ldr	r3, [r3, #0]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3738      	adds	r7, #56	; 0x38
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800945a:	b480      	push	{r7}
 800945c:	b087      	sub	sp, #28
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8009466:	2300      	movs	r3, #0
 8009468:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d107      	bne.n	8009480 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	4013      	ands	r3, r2
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800947a:	2301      	movs	r3, #1
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	e007      	b.n	8009490 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	4013      	ands	r3, r2
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	429a      	cmp	r2, r3
 800948a:	d101      	bne.n	8009490 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800948c:	2301      	movs	r3, #1
 800948e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009490:	697b      	ldr	r3, [r7, #20]
}
 8009492:	4618      	mov	r0, r3
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f103 0208 	add.w	r2, r3, #8
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f04f 32ff 	mov.w	r2, #4294967295
 80094b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f103 0208 	add.w	r2, r3, #8
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f103 0208 	add.w	r2, r3, #8
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	601a      	str	r2, [r3, #0]
}
 8009534:	bf00      	nop
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009556:	d103      	bne.n	8009560 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	e00c      	b.n	800957a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3308      	adds	r3, #8
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	e002      	b.n	800956e <vListInsert+0x2e>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	429a      	cmp	r2, r3
 8009578:	d2f6      	bcs.n	8009568 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	601a      	str	r2, [r3, #0]
}
 80095a6:	bf00      	nop
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095b2:	b480      	push	{r7}
 80095b4:	b085      	sub	sp, #20
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6892      	ldr	r2, [r2, #8]
 80095c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	6852      	ldr	r2, [r2, #4]
 80095d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d103      	bne.n	80095e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	1e5a      	subs	r2, r3, #1
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
	...

08009608 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <xQueueGenericReset+0x2a>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	60bb      	str	r3, [r7, #8]
}
 800962e:	bf00      	nop
 8009630:	e7fe      	b.n	8009630 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009632:	f002 fb8f 	bl	800bd54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	68f9      	ldr	r1, [r7, #12]
 8009640:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009642:	fb01 f303 	mul.w	r3, r1, r3
 8009646:	441a      	add	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009662:	3b01      	subs	r3, #1
 8009664:	68f9      	ldr	r1, [r7, #12]
 8009666:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009668:	fb01 f303 	mul.w	r3, r1, r3
 800966c:	441a      	add	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	22ff      	movs	r2, #255	; 0xff
 8009676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	22ff      	movs	r2, #255	; 0xff
 800967e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d114      	bne.n	80096b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01a      	beq.n	80096c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3310      	adds	r3, #16
 8009694:	4618      	mov	r0, r3
 8009696:	f001 fa43 	bl	800ab20 <xTaskRemoveFromEventList>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d012      	beq.n	80096c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80096a0:	4b0c      	ldr	r3, [pc, #48]	; (80096d4 <xQueueGenericReset+0xcc>)
 80096a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	e009      	b.n	80096c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3310      	adds	r3, #16
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff fef1 	bl	800949e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3324      	adds	r3, #36	; 0x24
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff feec 	bl	800949e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096c6:	f002 fb75 	bl	800bdb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096ca:	2301      	movs	r3, #1
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	e000ed04 	.word	0xe000ed04

080096d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b08e      	sub	sp, #56	; 0x38
 80096dc:	af02      	add	r7, sp, #8
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10a      	bne.n	8009702 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096fe:	bf00      	nop
 8009700:	e7fe      	b.n	8009700 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10a      	bne.n	800971e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	627b      	str	r3, [r7, #36]	; 0x24
}
 800971a:	bf00      	nop
 800971c:	e7fe      	b.n	800971c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <xQueueGenericCreateStatic+0x52>
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <xQueueGenericCreateStatic+0x56>
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <xQueueGenericCreateStatic+0x58>
 800972e:	2300      	movs	r3, #0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	623b      	str	r3, [r7, #32]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d102      	bne.n	8009756 <xQueueGenericCreateStatic+0x7e>
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <xQueueGenericCreateStatic+0x82>
 8009756:	2301      	movs	r3, #1
 8009758:	e000      	b.n	800975c <xQueueGenericCreateStatic+0x84>
 800975a:	2300      	movs	r3, #0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	61fb      	str	r3, [r7, #28]
}
 8009772:	bf00      	nop
 8009774:	e7fe      	b.n	8009774 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009776:	2348      	movs	r3, #72	; 0x48
 8009778:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2b48      	cmp	r3, #72	; 0x48
 800977e:	d00a      	beq.n	8009796 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	61bb      	str	r3, [r7, #24]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009796:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00d      	beq.n	80097be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80097a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	4613      	mov	r3, r2
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	68b9      	ldr	r1, [r7, #8]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 f83f 	bl	800983c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3730      	adds	r7, #48	; 0x30
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08a      	sub	sp, #40	; 0x28
 80097cc:	af02      	add	r7, sp, #8
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	4613      	mov	r3, r2
 80097d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	613b      	str	r3, [r7, #16]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	fb02 f303 	mul.w	r3, r2, r3
 80097fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	3348      	adds	r3, #72	; 0x48
 8009800:	4618      	mov	r0, r3
 8009802:	f002 fbc9 	bl	800bf98 <pvPortMalloc>
 8009806:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d011      	beq.n	8009832 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	3348      	adds	r3, #72	; 0x48
 8009816:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009820:	79fa      	ldrb	r2, [r7, #7]
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	4613      	mov	r3, r2
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	68b9      	ldr	r1, [r7, #8]
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 f805 	bl	800983c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009832:	69bb      	ldr	r3, [r7, #24]
	}
 8009834:	4618      	mov	r0, r3
 8009836:	3720      	adds	r7, #32
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
 8009848:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d103      	bne.n	8009858 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	e002      	b.n	800985e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800986a:	2101      	movs	r1, #1
 800986c:	69b8      	ldr	r0, [r7, #24]
 800986e:	f7ff fecb 	bl	8009608 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
	...

0800987c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08e      	sub	sp, #56	; 0x38
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800988a:	2300      	movs	r3, #0
 800988c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10a      	bne.n	80098ae <xQueueGenericSend+0x32>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d103      	bne.n	80098bc <xQueueGenericSend+0x40>
 80098b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <xQueueGenericSend+0x44>
 80098bc:	2301      	movs	r3, #1
 80098be:	e000      	b.n	80098c2 <xQueueGenericSend+0x46>
 80098c0:	2300      	movs	r3, #0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <xQueueGenericSend+0x60>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098d8:	bf00      	nop
 80098da:	e7fe      	b.n	80098da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d103      	bne.n	80098ea <xQueueGenericSend+0x6e>
 80098e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d101      	bne.n	80098ee <xQueueGenericSend+0x72>
 80098ea:	2301      	movs	r3, #1
 80098ec:	e000      	b.n	80098f0 <xQueueGenericSend+0x74>
 80098ee:	2300      	movs	r3, #0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10a      	bne.n	800990a <xQueueGenericSend+0x8e>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	623b      	str	r3, [r7, #32]
}
 8009906:	bf00      	nop
 8009908:	e7fe      	b.n	8009908 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800990a:	f001 fb29 	bl	800af60 <xTaskGetSchedulerState>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d102      	bne.n	800991a <xQueueGenericSend+0x9e>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <xQueueGenericSend+0xa2>
 800991a:	2301      	movs	r3, #1
 800991c:	e000      	b.n	8009920 <xQueueGenericSend+0xa4>
 800991e:	2300      	movs	r3, #0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10a      	bne.n	800993a <xQueueGenericSend+0xbe>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	61fb      	str	r3, [r7, #28]
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800993a:	f002 fa0b 	bl	800bd54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009946:	429a      	cmp	r2, r3
 8009948:	d302      	bcc.n	8009950 <xQueueGenericSend+0xd4>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b02      	cmp	r3, #2
 800994e:	d129      	bne.n	80099a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	68b9      	ldr	r1, [r7, #8]
 8009954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009956:	f000 faed 	bl	8009f34 <prvCopyDataToQueue>
 800995a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	d010      	beq.n	8009986 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	3324      	adds	r3, #36	; 0x24
 8009968:	4618      	mov	r0, r3
 800996a:	f001 f8d9 	bl	800ab20 <xTaskRemoveFromEventList>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d013      	beq.n	800999c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009974:	4b3f      	ldr	r3, [pc, #252]	; (8009a74 <xQueueGenericSend+0x1f8>)
 8009976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	e00a      	b.n	800999c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d007      	beq.n	800999c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800998c:	4b39      	ldr	r3, [pc, #228]	; (8009a74 <xQueueGenericSend+0x1f8>)
 800998e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800999c:	f002 fa0a 	bl	800bdb4 <vPortExitCritical>
				return pdPASS;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e063      	b.n	8009a6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d103      	bne.n	80099b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099aa:	f002 fa03 	bl	800bdb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	e05c      	b.n	8009a6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099b8:	f107 0314 	add.w	r3, r7, #20
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 f973 	bl	800aca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099c2:	2301      	movs	r3, #1
 80099c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099c6:	f002 f9f5 	bl	800bdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099ca:	f000 fe4f 	bl	800a66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099ce:	f002 f9c1 	bl	800bd54 <vPortEnterCritical>
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099d8:	b25b      	sxtb	r3, r3
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099de:	d103      	bne.n	80099e8 <xQueueGenericSend+0x16c>
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099ee:	b25b      	sxtb	r3, r3
 80099f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f4:	d103      	bne.n	80099fe <xQueueGenericSend+0x182>
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099fe:	f002 f9d9 	bl	800bdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a02:	1d3a      	adds	r2, r7, #4
 8009a04:	f107 0314 	add.w	r3, r7, #20
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f001 f962 	bl	800acd4 <xTaskCheckForTimeOut>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d124      	bne.n	8009a60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a18:	f000 fb84 	bl	800a124 <prvIsQueueFull>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d018      	beq.n	8009a54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a24:	3310      	adds	r3, #16
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 ffec 	bl	800aa08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a32:	f000 fb0f 	bl	800a054 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a36:	f000 fe27 	bl	800a688 <xTaskResumeAll>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f47f af7c 	bne.w	800993a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009a42:	4b0c      	ldr	r3, [pc, #48]	; (8009a74 <xQueueGenericSend+0x1f8>)
 8009a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a48:	601a      	str	r2, [r3, #0]
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	e772      	b.n	800993a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a56:	f000 fafd 	bl	800a054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a5a:	f000 fe15 	bl	800a688 <xTaskResumeAll>
 8009a5e:	e76c      	b.n	800993a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a62:	f000 faf7 	bl	800a054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a66:	f000 fe0f 	bl	800a688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3738      	adds	r7, #56	; 0x38
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	e000ed04 	.word	0xe000ed04

08009a78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b090      	sub	sp, #64	; 0x40
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
 8009a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009aa2:	bf00      	nop
 8009aa4:	e7fe      	b.n	8009aa4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d103      	bne.n	8009ab4 <xQueueGenericSendFromISR+0x3c>
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <xQueueGenericSendFromISR+0x40>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e000      	b.n	8009aba <xQueueGenericSendFromISR+0x42>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10a      	bne.n	8009ad4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d103      	bne.n	8009ae2 <xQueueGenericSendFromISR+0x6a>
 8009ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d101      	bne.n	8009ae6 <xQueueGenericSendFromISR+0x6e>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e000      	b.n	8009ae8 <xQueueGenericSendFromISR+0x70>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10a      	bne.n	8009b02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	623b      	str	r3, [r7, #32]
}
 8009afe:	bf00      	nop
 8009b00:	e7fe      	b.n	8009b00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b02:	f002 fa09 	bl	800bf18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b06:	f3ef 8211 	mrs	r2, BASEPRI
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	61fa      	str	r2, [r7, #28]
 8009b1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d302      	bcc.n	8009b34 <xQueueGenericSendFromISR+0xbc>
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d12f      	bne.n	8009b94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b4a:	f000 f9f3 	bl	8009f34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b56:	d112      	bne.n	8009b7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d016      	beq.n	8009b8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	3324      	adds	r3, #36	; 0x24
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 ffdb 	bl	800ab20 <xTaskRemoveFromEventList>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00e      	beq.n	8009b8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00b      	beq.n	8009b8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e007      	b.n	8009b8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b82:	3301      	adds	r3, #1
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	b25a      	sxtb	r2, r3
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009b92:	e001      	b.n	8009b98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b94:	2300      	movs	r3, #0
 8009b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ba2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3740      	adds	r7, #64	; 0x40
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08c      	sub	sp, #48	; 0x30
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10a      	bne.n	8009be0 <xQueueReceive+0x30>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	623b      	str	r3, [r7, #32]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d103      	bne.n	8009bee <xQueueReceive+0x3e>
 8009be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <xQueueReceive+0x42>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e000      	b.n	8009bf4 <xQueueReceive+0x44>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <xQueueReceive+0x5e>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	61fb      	str	r3, [r7, #28]
}
 8009c0a:	bf00      	nop
 8009c0c:	e7fe      	b.n	8009c0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c0e:	f001 f9a7 	bl	800af60 <xTaskGetSchedulerState>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d102      	bne.n	8009c1e <xQueueReceive+0x6e>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <xQueueReceive+0x72>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e000      	b.n	8009c24 <xQueueReceive+0x74>
 8009c22:	2300      	movs	r3, #0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <xQueueReceive+0x8e>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	61bb      	str	r3, [r7, #24]
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c3e:	f002 f889 	bl	800bd54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d01f      	beq.n	8009c8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c52:	f000 f9d9 	bl	800a008 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	1e5a      	subs	r2, r3, #1
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00f      	beq.n	8009c86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	3310      	adds	r3, #16
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 ff58 	bl	800ab20 <xTaskRemoveFromEventList>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d007      	beq.n	8009c86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c76:	4b3d      	ldr	r3, [pc, #244]	; (8009d6c <xQueueReceive+0x1bc>)
 8009c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c86:	f002 f895 	bl	800bdb4 <vPortExitCritical>
				return pdPASS;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e069      	b.n	8009d62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d103      	bne.n	8009c9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c94:	f002 f88e 	bl	800bdb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	e062      	b.n	8009d62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d106      	bne.n	8009cb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ca2:	f107 0310 	add.w	r3, r7, #16
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 fffe 	bl	800aca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cac:	2301      	movs	r3, #1
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cb0:	f002 f880 	bl	800bdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cb4:	f000 fcda 	bl	800a66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cb8:	f002 f84c 	bl	800bd54 <vPortEnterCritical>
 8009cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cc2:	b25b      	sxtb	r3, r3
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc8:	d103      	bne.n	8009cd2 <xQueueReceive+0x122>
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cd8:	b25b      	sxtb	r3, r3
 8009cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cde:	d103      	bne.n	8009ce8 <xQueueReceive+0x138>
 8009ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ce8:	f002 f864 	bl	800bdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cec:	1d3a      	adds	r2, r7, #4
 8009cee:	f107 0310 	add.w	r3, r7, #16
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 ffed 	bl	800acd4 <xTaskCheckForTimeOut>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d123      	bne.n	8009d48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d02:	f000 f9f9 	bl	800a0f8 <prvIsQueueEmpty>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d017      	beq.n	8009d3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	3324      	adds	r3, #36	; 0x24
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	4611      	mov	r1, r2
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 fe77 	bl	800aa08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d1c:	f000 f99a 	bl	800a054 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d20:	f000 fcb2 	bl	800a688 <xTaskResumeAll>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d189      	bne.n	8009c3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009d2a:	4b10      	ldr	r3, [pc, #64]	; (8009d6c <xQueueReceive+0x1bc>)
 8009d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	e780      	b.n	8009c3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d3e:	f000 f989 	bl	800a054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d42:	f000 fca1 	bl	800a688 <xTaskResumeAll>
 8009d46:	e77a      	b.n	8009c3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d4a:	f000 f983 	bl	800a054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d4e:	f000 fc9b 	bl	800a688 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d54:	f000 f9d0 	bl	800a0f8 <prvIsQueueEmpty>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f43f af6f 	beq.w	8009c3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3730      	adds	r7, #48	; 0x30
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	e000ed04 	.word	0xe000ed04

08009d70 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08e      	sub	sp, #56	; 0x38
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <xQueuePeek+0x30>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d103      	bne.n	8009dae <xQueuePeek+0x3e>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <xQueuePeek+0x42>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <xQueuePeek+0x44>
 8009db2:	2300      	movs	r3, #0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10a      	bne.n	8009dce <xQueuePeek+0x5e>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	623b      	str	r3, [r7, #32]
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dce:	f001 f8c7 	bl	800af60 <xTaskGetSchedulerState>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <xQueuePeek+0x6e>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <xQueuePeek+0x72>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e000      	b.n	8009de4 <xQueuePeek+0x74>
 8009de2:	2300      	movs	r3, #0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <xQueuePeek+0x8e>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	61fb      	str	r3, [r7, #28]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dfe:	f001 ffa9 	bl	800bd54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e06:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d021      	beq.n	8009e52 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e14:	68b9      	ldr	r1, [r7, #8]
 8009e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e18:	f000 f8f6 	bl	800a008 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e20:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00f      	beq.n	8009e4a <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	3324      	adds	r3, #36	; 0x24
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 fe76 	bl	800ab20 <xTaskRemoveFromEventList>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e3a:	4b3d      	ldr	r3, [pc, #244]	; (8009f30 <xQueuePeek+0x1c0>)
 8009e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e4a:	f001 ffb3 	bl	800bdb4 <vPortExitCritical>
				return pdPASS;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e069      	b.n	8009f26 <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d103      	bne.n	8009e60 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e58:	f001 ffac 	bl	800bdb4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e062      	b.n	8009f26 <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d106      	bne.n	8009e74 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e66:	f107 0314 	add.w	r3, r7, #20
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 ff1c 	bl	800aca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e70:	2301      	movs	r3, #1
 8009e72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e74:	f001 ff9e 	bl	800bdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e78:	f000 fbf8 	bl	800a66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e7c:	f001 ff6a 	bl	800bd54 <vPortEnterCritical>
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e86:	b25b      	sxtb	r3, r3
 8009e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8c:	d103      	bne.n	8009e96 <xQueuePeek+0x126>
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e9c:	b25b      	sxtb	r3, r3
 8009e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea2:	d103      	bne.n	8009eac <xQueuePeek+0x13c>
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009eac:	f001 ff82 	bl	800bdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009eb0:	1d3a      	adds	r2, r7, #4
 8009eb2:	f107 0314 	add.w	r3, r7, #20
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 ff0b 	bl	800acd4 <xTaskCheckForTimeOut>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d123      	bne.n	8009f0c <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ec6:	f000 f917 	bl	800a0f8 <prvIsQueueEmpty>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d017      	beq.n	8009f00 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	3324      	adds	r3, #36	; 0x24
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fd95 	bl	800aa08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ede:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ee0:	f000 f8b8 	bl	800a054 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ee4:	f000 fbd0 	bl	800a688 <xTaskResumeAll>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d187      	bne.n	8009dfe <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 8009eee:	4b10      	ldr	r3, [pc, #64]	; (8009f30 <xQueuePeek+0x1c0>)
 8009ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	e77e      	b.n	8009dfe <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8009f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f02:	f000 f8a7 	bl	800a054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f06:	f000 fbbf 	bl	800a688 <xTaskResumeAll>
 8009f0a:	e778      	b.n	8009dfe <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8009f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f0e:	f000 f8a1 	bl	800a054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f12:	f000 fbb9 	bl	800a688 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f18:	f000 f8ee 	bl	800a0f8 <prvIsQueueEmpty>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f43f af6d 	beq.w	8009dfe <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3738      	adds	r7, #56	; 0x38
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f40:	2300      	movs	r3, #0
 8009f42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10d      	bne.n	8009f6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d14d      	bne.n	8009ff6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f001 f81c 	bl	800af9c <xTaskPriorityDisinherit>
 8009f64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	609a      	str	r2, [r3, #8]
 8009f6c:	e043      	b.n	8009ff6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d119      	bne.n	8009fa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6858      	ldr	r0, [r3, #4]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	68b9      	ldr	r1, [r7, #8]
 8009f80:	f002 fa1e 	bl	800c3c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8c:	441a      	add	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d32b      	bcc.n	8009ff6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	605a      	str	r2, [r3, #4]
 8009fa6:	e026      	b.n	8009ff6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	68d8      	ldr	r0, [r3, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	f002 fa04 	bl	800c3c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	68da      	ldr	r2, [r3, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc0:	425b      	negs	r3, r3
 8009fc2:	441a      	add	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	68da      	ldr	r2, [r3, #12]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d207      	bcs.n	8009fe4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	689a      	ldr	r2, [r3, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fdc:	425b      	negs	r3, r3
 8009fde:	441a      	add	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d105      	bne.n	8009ff6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ffe:	697b      	ldr	r3, [r7, #20]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	2b00      	cmp	r3, #0
 800a018:	d018      	beq.n	800a04c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	441a      	add	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	429a      	cmp	r2, r3
 800a032:	d303      	bcc.n	800a03c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68d9      	ldr	r1, [r3, #12]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a044:	461a      	mov	r2, r3
 800a046:	6838      	ldr	r0, [r7, #0]
 800a048:	f002 f9ba 	bl	800c3c0 <memcpy>
	}
}
 800a04c:	bf00      	nop
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a05c:	f001 fe7a 	bl	800bd54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a066:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a068:	e011      	b.n	800a08e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d012      	beq.n	800a098 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3324      	adds	r3, #36	; 0x24
 800a076:	4618      	mov	r0, r3
 800a078:	f000 fd52 	bl	800ab20 <xTaskRemoveFromEventList>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a082:	f000 fe89 	bl	800ad98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a086:	7bfb      	ldrb	r3, [r7, #15]
 800a088:	3b01      	subs	r3, #1
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a092:	2b00      	cmp	r3, #0
 800a094:	dce9      	bgt.n	800a06a <prvUnlockQueue+0x16>
 800a096:	e000      	b.n	800a09a <prvUnlockQueue+0x46>
					break;
 800a098:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	22ff      	movs	r2, #255	; 0xff
 800a09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a0a2:	f001 fe87 	bl	800bdb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0a6:	f001 fe55 	bl	800bd54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0b2:	e011      	b.n	800a0d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d012      	beq.n	800a0e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3310      	adds	r3, #16
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fd2d 	bl	800ab20 <xTaskRemoveFromEventList>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0cc:	f000 fe64 	bl	800ad98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dce9      	bgt.n	800a0b4 <prvUnlockQueue+0x60>
 800a0e0:	e000      	b.n	800a0e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a0e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	22ff      	movs	r2, #255	; 0xff
 800a0e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a0ec:	f001 fe62 	bl	800bdb4 <vPortExitCritical>
}
 800a0f0:	bf00      	nop
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a100:	f001 fe28 	bl	800bd54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d102      	bne.n	800a112 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a10c:	2301      	movs	r3, #1
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	e001      	b.n	800a116 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a116:	f001 fe4d 	bl	800bdb4 <vPortExitCritical>

	return xReturn;
 800a11a:	68fb      	ldr	r3, [r7, #12]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a12c:	f001 fe12 	bl	800bd54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a138:	429a      	cmp	r2, r3
 800a13a:	d102      	bne.n	800a142 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a13c:	2301      	movs	r3, #1
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	e001      	b.n	800a146 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a142:	2300      	movs	r3, #0
 800a144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a146:	f001 fe35 	bl	800bdb4 <vPortExitCritical>

	return xReturn;
 800a14a:	68fb      	ldr	r3, [r7, #12]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a15e:	2300      	movs	r3, #0
 800a160:	60fb      	str	r3, [r7, #12]
 800a162:	e014      	b.n	800a18e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a164:	4a0f      	ldr	r2, [pc, #60]	; (800a1a4 <vQueueAddToRegistry+0x50>)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10b      	bne.n	800a188 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a170:	490c      	ldr	r1, [pc, #48]	; (800a1a4 <vQueueAddToRegistry+0x50>)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a17a:	4a0a      	ldr	r2, [pc, #40]	; (800a1a4 <vQueueAddToRegistry+0x50>)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	4413      	add	r3, r2
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a186:	e006      	b.n	800a196 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3301      	adds	r3, #1
 800a18c:	60fb      	str	r3, [r7, #12]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b07      	cmp	r3, #7
 800a192:	d9e7      	bls.n	800a164 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000938 	.word	0x20000938

0800a1a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a1b8:	f001 fdcc 	bl	800bd54 <vPortEnterCritical>
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1c2:	b25b      	sxtb	r3, r3
 800a1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c8:	d103      	bne.n	800a1d2 <vQueueWaitForMessageRestricted+0x2a>
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1d8:	b25b      	sxtb	r3, r3
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d103      	bne.n	800a1e8 <vQueueWaitForMessageRestricted+0x40>
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1e8:	f001 fde4 	bl	800bdb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d106      	bne.n	800a202 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	3324      	adds	r3, #36	; 0x24
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 fc63 	bl	800aac8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a202:	6978      	ldr	r0, [r7, #20]
 800a204:	f7ff ff26 	bl	800a054 <prvUnlockQueue>
	}
 800a208:	bf00      	nop
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08e      	sub	sp, #56	; 0x38
 800a214:	af04      	add	r7, sp, #16
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	623b      	str	r3, [r7, #32]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10a      	bne.n	800a256 <xTaskCreateStatic+0x46>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	61fb      	str	r3, [r7, #28]
}
 800a252:	bf00      	nop
 800a254:	e7fe      	b.n	800a254 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a256:	235c      	movs	r3, #92	; 0x5c
 800a258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	2b5c      	cmp	r3, #92	; 0x5c
 800a25e:	d00a      	beq.n	800a276 <xTaskCreateStatic+0x66>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	61bb      	str	r3, [r7, #24]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a276:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d01e      	beq.n	800a2bc <xTaskCreateStatic+0xac>
 800a27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01b      	beq.n	800a2bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a28c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	2202      	movs	r2, #2
 800a292:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a296:	2300      	movs	r3, #0
 800a298:	9303      	str	r3, [sp, #12]
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	9302      	str	r3, [sp, #8]
 800a29e:	f107 0314 	add.w	r3, r7, #20
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 f850 	bl	800a354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2b6:	f000 f8d5 	bl	800a464 <prvAddNewTaskToReadyList>
 800a2ba:	e001      	b.n	800a2c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2c0:	697b      	ldr	r3, [r7, #20]
	}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3728      	adds	r7, #40	; 0x28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b08c      	sub	sp, #48	; 0x30
 800a2ce:	af04      	add	r7, sp, #16
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	603b      	str	r3, [r7, #0]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2da:	88fb      	ldrh	r3, [r7, #6]
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f001 fe5a 	bl	800bf98 <pvPortMalloc>
 800a2e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00e      	beq.n	800a30a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2ec:	205c      	movs	r0, #92	; 0x5c
 800a2ee:	f001 fe53 	bl	800bf98 <pvPortMalloc>
 800a2f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	631a      	str	r2, [r3, #48]	; 0x30
 800a300:	e005      	b.n	800a30e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a302:	6978      	ldr	r0, [r7, #20]
 800a304:	f001 ff14 	bl	800c130 <vPortFree>
 800a308:	e001      	b.n	800a30e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d017      	beq.n	800a344 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a31c:	88fa      	ldrh	r2, [r7, #6]
 800a31e:	2300      	movs	r3, #0
 800a320:	9303      	str	r3, [sp, #12]
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	9302      	str	r3, [sp, #8]
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	68b9      	ldr	r1, [r7, #8]
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 f80e 	bl	800a354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a338:	69f8      	ldr	r0, [r7, #28]
 800a33a:	f000 f893 	bl	800a464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a33e:	2301      	movs	r3, #1
 800a340:	61bb      	str	r3, [r7, #24]
 800a342:	e002      	b.n	800a34a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a344:	f04f 33ff 	mov.w	r3, #4294967295
 800a348:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a34a:	69bb      	ldr	r3, [r7, #24]
	}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3720      	adds	r7, #32
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a36c:	3b01      	subs	r3, #1
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	f023 0307 	bic.w	r3, r3, #7
 800a37a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <prvInitialiseNewTask+0x48>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	617b      	str	r3, [r7, #20]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d01f      	beq.n	800a3e2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	61fb      	str	r3, [r7, #28]
 800a3a6:	e012      	b.n	800a3ce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	7819      	ldrb	r1, [r3, #0]
 800a3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	3334      	adds	r3, #52	; 0x34
 800a3b8:	460a      	mov	r2, r1
 800a3ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d006      	beq.n	800a3d6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	61fb      	str	r3, [r7, #28]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	2b17      	cmp	r3, #23
 800a3d2:	d9e9      	bls.n	800a3a8 <prvInitialiseNewTask+0x54>
 800a3d4:	e000      	b.n	800a3d8 <prvInitialiseNewTask+0x84>
			{
				break;
 800a3d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800a3e0:	e003      	b.n	800a3ea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	2b06      	cmp	r3, #6
 800a3ee:	d901      	bls.n	800a3f4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3f0:	2306      	movs	r3, #6
 800a3f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	2200      	movs	r2, #0
 800a404:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	3304      	adds	r3, #4
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff f867 	bl	80094de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	3318      	adds	r3, #24
 800a414:	4618      	mov	r0, r3
 800a416:	f7ff f862 	bl	80094de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a41e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	f1c3 0207 	rsb	r2, r3, #7
 800a426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a428:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a42e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a432:	2200      	movs	r2, #0
 800a434:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	68f9      	ldr	r1, [r7, #12]
 800a442:	69b8      	ldr	r0, [r7, #24]
 800a444:	f001 fb56 	bl	800baf4 <pxPortInitialiseStack>
 800a448:	4602      	mov	r2, r0
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a45a:	bf00      	nop
 800a45c:	3720      	adds	r7, #32
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a46c:	f001 fc72 	bl	800bd54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a470:	4b2a      	ldr	r3, [pc, #168]	; (800a51c <prvAddNewTaskToReadyList+0xb8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3301      	adds	r3, #1
 800a476:	4a29      	ldr	r2, [pc, #164]	; (800a51c <prvAddNewTaskToReadyList+0xb8>)
 800a478:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a47a:	4b29      	ldr	r3, [pc, #164]	; (800a520 <prvAddNewTaskToReadyList+0xbc>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d109      	bne.n	800a496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a482:	4a27      	ldr	r2, [pc, #156]	; (800a520 <prvAddNewTaskToReadyList+0xbc>)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a488:	4b24      	ldr	r3, [pc, #144]	; (800a51c <prvAddNewTaskToReadyList+0xb8>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d110      	bne.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a490:	f000 fca8 	bl	800ade4 <prvInitialiseTaskLists>
 800a494:	e00d      	b.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a496:	4b23      	ldr	r3, [pc, #140]	; (800a524 <prvAddNewTaskToReadyList+0xc0>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d109      	bne.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a49e:	4b20      	ldr	r3, [pc, #128]	; (800a520 <prvAddNewTaskToReadyList+0xbc>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d802      	bhi.n	800a4b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4ac:	4a1c      	ldr	r2, [pc, #112]	; (800a520 <prvAddNewTaskToReadyList+0xbc>)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4b2:	4b1d      	ldr	r3, [pc, #116]	; (800a528 <prvAddNewTaskToReadyList+0xc4>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	4a1b      	ldr	r2, [pc, #108]	; (800a528 <prvAddNewTaskToReadyList+0xc4>)
 800a4ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	409a      	lsls	r2, r3
 800a4c4:	4b19      	ldr	r3, [pc, #100]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	4a18      	ldr	r2, [pc, #96]	; (800a52c <prvAddNewTaskToReadyList+0xc8>)
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4a15      	ldr	r2, [pc, #84]	; (800a530 <prvAddNewTaskToReadyList+0xcc>)
 800a4dc:	441a      	add	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	f7ff f807 	bl	80094f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4ea:	f001 fc63 	bl	800bdb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4ee:	4b0d      	ldr	r3, [pc, #52]	; (800a524 <prvAddNewTaskToReadyList+0xc0>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00e      	beq.n	800a514 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <prvAddNewTaskToReadyList+0xbc>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	429a      	cmp	r2, r3
 800a502:	d207      	bcs.n	800a514 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a504:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <prvAddNewTaskToReadyList+0xd0>)
 800a506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a514:	bf00      	nop
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20000a78 	.word	0x20000a78
 800a520:	20000978 	.word	0x20000978
 800a524:	20000a84 	.word	0x20000a84
 800a528:	20000a94 	.word	0x20000a94
 800a52c:	20000a80 	.word	0x20000a80
 800a530:	2000097c 	.word	0x2000097c
 800a534:	e000ed04 	.word	0xe000ed04

0800a538 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a540:	2300      	movs	r3, #0
 800a542:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d017      	beq.n	800a57a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a54a:	4b13      	ldr	r3, [pc, #76]	; (800a598 <vTaskDelay+0x60>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <vTaskDelay+0x30>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	60bb      	str	r3, [r7, #8]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a568:	f000 f880 	bl	800a66c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a56c:	2100      	movs	r1, #0
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 feb0 	bl	800b2d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a574:	f000 f888 	bl	800a688 <xTaskResumeAll>
 800a578:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d107      	bne.n	800a590 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a580:	4b06      	ldr	r3, [pc, #24]	; (800a59c <vTaskDelay+0x64>)
 800a582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a590:	bf00      	nop
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	20000aa0 	.word	0x20000aa0
 800a59c:	e000ed04 	.word	0xe000ed04

0800a5a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	; 0x28
 800a5a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5ae:	463a      	mov	r2, r7
 800a5b0:	1d39      	adds	r1, r7, #4
 800a5b2:	f107 0308 	add.w	r3, r7, #8
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7f6 fca0 	bl	8000efc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5bc:	6839      	ldr	r1, [r7, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	9202      	str	r2, [sp, #8]
 800a5c4:	9301      	str	r3, [sp, #4]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	460a      	mov	r2, r1
 800a5ce:	4921      	ldr	r1, [pc, #132]	; (800a654 <vTaskStartScheduler+0xb4>)
 800a5d0:	4821      	ldr	r0, [pc, #132]	; (800a658 <vTaskStartScheduler+0xb8>)
 800a5d2:	f7ff fe1d 	bl	800a210 <xTaskCreateStatic>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	4a20      	ldr	r2, [pc, #128]	; (800a65c <vTaskStartScheduler+0xbc>)
 800a5da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a5dc:	4b1f      	ldr	r3, [pc, #124]	; (800a65c <vTaskStartScheduler+0xbc>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	617b      	str	r3, [r7, #20]
 800a5e8:	e001      	b.n	800a5ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d102      	bne.n	800a5fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a5f4:	f000 fed4 	bl	800b3a0 <xTimerCreateTimerTask>
 800a5f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d116      	bne.n	800a62e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	613b      	str	r3, [r7, #16]
}
 800a612:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a614:	4b12      	ldr	r3, [pc, #72]	; (800a660 <vTaskStartScheduler+0xc0>)
 800a616:	f04f 32ff 	mov.w	r2, #4294967295
 800a61a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a61c:	4b11      	ldr	r3, [pc, #68]	; (800a664 <vTaskStartScheduler+0xc4>)
 800a61e:	2201      	movs	r2, #1
 800a620:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a622:	4b11      	ldr	r3, [pc, #68]	; (800a668 <vTaskStartScheduler+0xc8>)
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a628:	f001 faf2 	bl	800bc10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a62c:	e00e      	b.n	800a64c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a634:	d10a      	bne.n	800a64c <vTaskStartScheduler+0xac>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	60fb      	str	r3, [r7, #12]
}
 800a648:	bf00      	nop
 800a64a:	e7fe      	b.n	800a64a <vTaskStartScheduler+0xaa>
}
 800a64c:	bf00      	nop
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	0800e69c 	.word	0x0800e69c
 800a658:	0800adb1 	.word	0x0800adb1
 800a65c:	20000a9c 	.word	0x20000a9c
 800a660:	20000a98 	.word	0x20000a98
 800a664:	20000a84 	.word	0x20000a84
 800a668:	20000a7c 	.word	0x20000a7c

0800a66c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a66c:	b480      	push	{r7}
 800a66e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a670:	4b04      	ldr	r3, [pc, #16]	; (800a684 <vTaskSuspendAll+0x18>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3301      	adds	r3, #1
 800a676:	4a03      	ldr	r2, [pc, #12]	; (800a684 <vTaskSuspendAll+0x18>)
 800a678:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a67a:	bf00      	nop
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr
 800a684:	20000aa0 	.word	0x20000aa0

0800a688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a692:	2300      	movs	r3, #0
 800a694:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a696:	4b41      	ldr	r3, [pc, #260]	; (800a79c <xTaskResumeAll+0x114>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	603b      	str	r3, [r7, #0]
}
 800a6b0:	bf00      	nop
 800a6b2:	e7fe      	b.n	800a6b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6b4:	f001 fb4e 	bl	800bd54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6b8:	4b38      	ldr	r3, [pc, #224]	; (800a79c <xTaskResumeAll+0x114>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	4a37      	ldr	r2, [pc, #220]	; (800a79c <xTaskResumeAll+0x114>)
 800a6c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6c2:	4b36      	ldr	r3, [pc, #216]	; (800a79c <xTaskResumeAll+0x114>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d161      	bne.n	800a78e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6ca:	4b35      	ldr	r3, [pc, #212]	; (800a7a0 <xTaskResumeAll+0x118>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d05d      	beq.n	800a78e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6d2:	e02e      	b.n	800a732 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6d4:	4b33      	ldr	r3, [pc, #204]	; (800a7a4 <xTaskResumeAll+0x11c>)
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3318      	adds	r3, #24
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe ff66 	bl	80095b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fe ff61 	bl	80095b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	409a      	lsls	r2, r3
 800a6f8:	4b2b      	ldr	r3, [pc, #172]	; (800a7a8 <xTaskResumeAll+0x120>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	4a2a      	ldr	r2, [pc, #168]	; (800a7a8 <xTaskResumeAll+0x120>)
 800a700:	6013      	str	r3, [r2, #0]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4a27      	ldr	r2, [pc, #156]	; (800a7ac <xTaskResumeAll+0x124>)
 800a710:	441a      	add	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3304      	adds	r3, #4
 800a716:	4619      	mov	r1, r3
 800a718:	4610      	mov	r0, r2
 800a71a:	f7fe feed 	bl	80094f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a722:	4b23      	ldr	r3, [pc, #140]	; (800a7b0 <xTaskResumeAll+0x128>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	429a      	cmp	r2, r3
 800a72a:	d302      	bcc.n	800a732 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a72c:	4b21      	ldr	r3, [pc, #132]	; (800a7b4 <xTaskResumeAll+0x12c>)
 800a72e:	2201      	movs	r2, #1
 800a730:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a732:	4b1c      	ldr	r3, [pc, #112]	; (800a7a4 <xTaskResumeAll+0x11c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1cc      	bne.n	800a6d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a740:	f000 fbee 	bl	800af20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a744:	4b1c      	ldr	r3, [pc, #112]	; (800a7b8 <xTaskResumeAll+0x130>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d010      	beq.n	800a772 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a750:	f000 f846 	bl	800a7e0 <xTaskIncrementTick>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a75a:	4b16      	ldr	r3, [pc, #88]	; (800a7b4 <xTaskResumeAll+0x12c>)
 800a75c:	2201      	movs	r2, #1
 800a75e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3b01      	subs	r3, #1
 800a764:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1f1      	bne.n	800a750 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a76c:	4b12      	ldr	r3, [pc, #72]	; (800a7b8 <xTaskResumeAll+0x130>)
 800a76e:	2200      	movs	r2, #0
 800a770:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a772:	4b10      	ldr	r3, [pc, #64]	; (800a7b4 <xTaskResumeAll+0x12c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d009      	beq.n	800a78e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a77a:	2301      	movs	r3, #1
 800a77c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a77e:	4b0f      	ldr	r3, [pc, #60]	; (800a7bc <xTaskResumeAll+0x134>)
 800a780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a78e:	f001 fb11 	bl	800bdb4 <vPortExitCritical>

	return xAlreadyYielded;
 800a792:	68bb      	ldr	r3, [r7, #8]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	20000aa0 	.word	0x20000aa0
 800a7a0:	20000a78 	.word	0x20000a78
 800a7a4:	20000a38 	.word	0x20000a38
 800a7a8:	20000a80 	.word	0x20000a80
 800a7ac:	2000097c 	.word	0x2000097c
 800a7b0:	20000978 	.word	0x20000978
 800a7b4:	20000a8c 	.word	0x20000a8c
 800a7b8:	20000a88 	.word	0x20000a88
 800a7bc:	e000ed04 	.word	0xe000ed04

0800a7c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <xTaskGetTickCount+0x1c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7cc:	687b      	ldr	r3, [r7, #4]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20000a7c 	.word	0x20000a7c

0800a7e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7ea:	4b4e      	ldr	r3, [pc, #312]	; (800a924 <xTaskIncrementTick+0x144>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f040 808e 	bne.w	800a910 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7f4:	4b4c      	ldr	r3, [pc, #304]	; (800a928 <xTaskIncrementTick+0x148>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7fc:	4a4a      	ldr	r2, [pc, #296]	; (800a928 <xTaskIncrementTick+0x148>)
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d120      	bne.n	800a84a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a808:	4b48      	ldr	r3, [pc, #288]	; (800a92c <xTaskIncrementTick+0x14c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <xTaskIncrementTick+0x48>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	603b      	str	r3, [r7, #0]
}
 800a824:	bf00      	nop
 800a826:	e7fe      	b.n	800a826 <xTaskIncrementTick+0x46>
 800a828:	4b40      	ldr	r3, [pc, #256]	; (800a92c <xTaskIncrementTick+0x14c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	60fb      	str	r3, [r7, #12]
 800a82e:	4b40      	ldr	r3, [pc, #256]	; (800a930 <xTaskIncrementTick+0x150>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a3e      	ldr	r2, [pc, #248]	; (800a92c <xTaskIncrementTick+0x14c>)
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	4a3e      	ldr	r2, [pc, #248]	; (800a930 <xTaskIncrementTick+0x150>)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	4b3d      	ldr	r3, [pc, #244]	; (800a934 <xTaskIncrementTick+0x154>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3301      	adds	r3, #1
 800a842:	4a3c      	ldr	r2, [pc, #240]	; (800a934 <xTaskIncrementTick+0x154>)
 800a844:	6013      	str	r3, [r2, #0]
 800a846:	f000 fb6b 	bl	800af20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a84a:	4b3b      	ldr	r3, [pc, #236]	; (800a938 <xTaskIncrementTick+0x158>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	429a      	cmp	r2, r3
 800a852:	d348      	bcc.n	800a8e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a854:	4b35      	ldr	r3, [pc, #212]	; (800a92c <xTaskIncrementTick+0x14c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d104      	bne.n	800a868 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85e:	4b36      	ldr	r3, [pc, #216]	; (800a938 <xTaskIncrementTick+0x158>)
 800a860:	f04f 32ff 	mov.w	r2, #4294967295
 800a864:	601a      	str	r2, [r3, #0]
					break;
 800a866:	e03e      	b.n	800a8e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a868:	4b30      	ldr	r3, [pc, #192]	; (800a92c <xTaskIncrementTick+0x14c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d203      	bcs.n	800a888 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a880:	4a2d      	ldr	r2, [pc, #180]	; (800a938 <xTaskIncrementTick+0x158>)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a886:	e02e      	b.n	800a8e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	3304      	adds	r3, #4
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fe fe90 	bl	80095b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a896:	2b00      	cmp	r3, #0
 800a898:	d004      	beq.n	800a8a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	3318      	adds	r3, #24
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fe fe87 	bl	80095b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	409a      	lsls	r2, r3
 800a8ac:	4b23      	ldr	r3, [pc, #140]	; (800a93c <xTaskIncrementTick+0x15c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	4a22      	ldr	r2, [pc, #136]	; (800a93c <xTaskIncrementTick+0x15c>)
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4a1f      	ldr	r2, [pc, #124]	; (800a940 <xTaskIncrementTick+0x160>)
 800a8c4:	441a      	add	r2, r3
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	f7fe fe13 	bl	80094f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d6:	4b1b      	ldr	r3, [pc, #108]	; (800a944 <xTaskIncrementTick+0x164>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d3b9      	bcc.n	800a854 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8e4:	e7b6      	b.n	800a854 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8e6:	4b17      	ldr	r3, [pc, #92]	; (800a944 <xTaskIncrementTick+0x164>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ec:	4914      	ldr	r1, [pc, #80]	; (800a940 <xTaskIncrementTick+0x160>)
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	440b      	add	r3, r1
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d901      	bls.n	800a902 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a8fe:	2301      	movs	r3, #1
 800a900:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a902:	4b11      	ldr	r3, [pc, #68]	; (800a948 <xTaskIncrementTick+0x168>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d007      	beq.n	800a91a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a90a:	2301      	movs	r3, #1
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	e004      	b.n	800a91a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a910:	4b0e      	ldr	r3, [pc, #56]	; (800a94c <xTaskIncrementTick+0x16c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3301      	adds	r3, #1
 800a916:	4a0d      	ldr	r2, [pc, #52]	; (800a94c <xTaskIncrementTick+0x16c>)
 800a918:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a91a:	697b      	ldr	r3, [r7, #20]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20000aa0 	.word	0x20000aa0
 800a928:	20000a7c 	.word	0x20000a7c
 800a92c:	20000a30 	.word	0x20000a30
 800a930:	20000a34 	.word	0x20000a34
 800a934:	20000a90 	.word	0x20000a90
 800a938:	20000a98 	.word	0x20000a98
 800a93c:	20000a80 	.word	0x20000a80
 800a940:	2000097c 	.word	0x2000097c
 800a944:	20000978 	.word	0x20000978
 800a948:	20000a8c 	.word	0x20000a8c
 800a94c:	20000a88 	.word	0x20000a88

0800a950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a956:	4b27      	ldr	r3, [pc, #156]	; (800a9f4 <vTaskSwitchContext+0xa4>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a95e:	4b26      	ldr	r3, [pc, #152]	; (800a9f8 <vTaskSwitchContext+0xa8>)
 800a960:	2201      	movs	r2, #1
 800a962:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a964:	e03f      	b.n	800a9e6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a966:	4b24      	ldr	r3, [pc, #144]	; (800a9f8 <vTaskSwitchContext+0xa8>)
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a96c:	4b23      	ldr	r3, [pc, #140]	; (800a9fc <vTaskSwitchContext+0xac>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	fab3 f383 	clz	r3, r3
 800a978:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a97a:	7afb      	ldrb	r3, [r7, #11]
 800a97c:	f1c3 031f 	rsb	r3, r3, #31
 800a980:	617b      	str	r3, [r7, #20]
 800a982:	491f      	ldr	r1, [pc, #124]	; (800aa00 <vTaskSwitchContext+0xb0>)
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	4613      	mov	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	440b      	add	r3, r1
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10a      	bne.n	800a9ac <vTaskSwitchContext+0x5c>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	607b      	str	r3, [r7, #4]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <vTaskSwitchContext+0x5a>
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4a12      	ldr	r2, [pc, #72]	; (800aa00 <vTaskSwitchContext+0xb0>)
 800a9b8:	4413      	add	r3, r2
 800a9ba:	613b      	str	r3, [r7, #16]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	605a      	str	r2, [r3, #4]
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	3308      	adds	r3, #8
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d104      	bne.n	800a9dc <vTaskSwitchContext+0x8c>
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	605a      	str	r2, [r3, #4]
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	4a08      	ldr	r2, [pc, #32]	; (800aa04 <vTaskSwitchContext+0xb4>)
 800a9e4:	6013      	str	r3, [r2, #0]
}
 800a9e6:	bf00      	nop
 800a9e8:	371c      	adds	r7, #28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20000aa0 	.word	0x20000aa0
 800a9f8:	20000a8c 	.word	0x20000a8c
 800a9fc:	20000a80 	.word	0x20000a80
 800aa00:	2000097c 	.word	0x2000097c
 800aa04:	20000978 	.word	0x20000978

0800aa08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10a      	bne.n	800aa2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	60fb      	str	r3, [r7, #12]
}
 800aa2a:	bf00      	nop
 800aa2c:	e7fe      	b.n	800aa2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa2e:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <vTaskPlaceOnEventList+0x44>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3318      	adds	r3, #24
 800aa34:	4619      	mov	r1, r3
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7fe fd82 	bl	8009540 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	6838      	ldr	r0, [r7, #0]
 800aa40:	f000 fc48 	bl	800b2d4 <prvAddCurrentTaskToDelayedList>
}
 800aa44:	bf00      	nop
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20000978 	.word	0x20000978

0800aa50 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10a      	bne.n	800aa78 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	617b      	str	r3, [r7, #20]
}
 800aa74:	bf00      	nop
 800aa76:	e7fe      	b.n	800aa76 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800aa78:	4b11      	ldr	r3, [pc, #68]	; (800aac0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10a      	bne.n	800aa96 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	613b      	str	r3, [r7, #16]
}
 800aa92:	bf00      	nop
 800aa94:	e7fe      	b.n	800aa94 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800aa96:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800aaa0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aaa2:	4b08      	ldr	r3, [pc, #32]	; (800aac4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3318      	adds	r3, #24
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7fe fd24 	bl	80094f8 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aab0:	2101      	movs	r1, #1
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fc0e 	bl	800b2d4 <prvAddCurrentTaskToDelayedList>
}
 800aab8:	bf00      	nop
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000aa0 	.word	0x20000aa0
 800aac4:	20000978 	.word	0x20000978

0800aac8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10a      	bne.n	800aaf0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	617b      	str	r3, [r7, #20]
}
 800aaec:	bf00      	nop
 800aaee:	e7fe      	b.n	800aaee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aaf0:	4b0a      	ldr	r3, [pc, #40]	; (800ab1c <vTaskPlaceOnEventListRestricted+0x54>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3318      	adds	r3, #24
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f7fe fcfd 	bl	80094f8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ab04:	f04f 33ff 	mov.w	r3, #4294967295
 800ab08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	68b8      	ldr	r0, [r7, #8]
 800ab0e:	f000 fbe1 	bl	800b2d4 <prvAddCurrentTaskToDelayedList>
	}
 800ab12:	bf00      	nop
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000978 	.word	0x20000978

0800ab20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10a      	bne.n	800ab4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	60fb      	str	r3, [r7, #12]
}
 800ab48:	bf00      	nop
 800ab4a:	e7fe      	b.n	800ab4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	3318      	adds	r3, #24
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fd2e 	bl	80095b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab56:	4b1d      	ldr	r3, [pc, #116]	; (800abcc <xTaskRemoveFromEventList+0xac>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d11c      	bne.n	800ab98 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe fd25 	bl	80095b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	409a      	lsls	r2, r3
 800ab70:	4b17      	ldr	r3, [pc, #92]	; (800abd0 <xTaskRemoveFromEventList+0xb0>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	4a16      	ldr	r2, [pc, #88]	; (800abd0 <xTaskRemoveFromEventList+0xb0>)
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4a13      	ldr	r2, [pc, #76]	; (800abd4 <xTaskRemoveFromEventList+0xb4>)
 800ab88:	441a      	add	r2, r3
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4610      	mov	r0, r2
 800ab92:	f7fe fcb1 	bl	80094f8 <vListInsertEnd>
 800ab96:	e005      	b.n	800aba4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	3318      	adds	r3, #24
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	480e      	ldr	r0, [pc, #56]	; (800abd8 <xTaskRemoveFromEventList+0xb8>)
 800aba0:	f7fe fcaa 	bl	80094f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba8:	4b0c      	ldr	r3, [pc, #48]	; (800abdc <xTaskRemoveFromEventList+0xbc>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abae:	429a      	cmp	r2, r3
 800abb0:	d905      	bls.n	800abbe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800abb2:	2301      	movs	r3, #1
 800abb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800abb6:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <xTaskRemoveFromEventList+0xc0>)
 800abb8:	2201      	movs	r2, #1
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	e001      	b.n	800abc2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800abbe:	2300      	movs	r3, #0
 800abc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800abc2:	697b      	ldr	r3, [r7, #20]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	20000aa0 	.word	0x20000aa0
 800abd0:	20000a80 	.word	0x20000a80
 800abd4:	2000097c 	.word	0x2000097c
 800abd8:	20000a38 	.word	0x20000a38
 800abdc:	20000978 	.word	0x20000978
 800abe0:	20000a8c 	.word	0x20000a8c

0800abe4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800abee:	4b29      	ldr	r3, [pc, #164]	; (800ac94 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10a      	bne.n	800ac0c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	613b      	str	r3, [r7, #16]
}
 800ac08:	bf00      	nop
 800ac0a:	e7fe      	b.n	800ac0a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10a      	bne.n	800ac38 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	60fb      	str	r3, [r7, #12]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7fe fcba 	bl	80095b2 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	3304      	adds	r3, #4
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe fcb5 	bl	80095b2 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	409a      	lsls	r2, r3
 800ac50:	4b11      	ldr	r3, [pc, #68]	; (800ac98 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4313      	orrs	r3, r2
 800ac56:	4a10      	ldr	r2, [pc, #64]	; (800ac98 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ac58:	6013      	str	r3, [r2, #0]
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5e:	4613      	mov	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4a0d      	ldr	r2, [pc, #52]	; (800ac9c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800ac68:	441a      	add	r2, r3
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f7fe fc41 	bl	80094f8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7a:	4b09      	ldr	r3, [pc, #36]	; (800aca0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d902      	bls.n	800ac8a <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800ac84:	4b07      	ldr	r3, [pc, #28]	; (800aca4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ac86:	2201      	movs	r2, #1
 800ac88:	601a      	str	r2, [r3, #0]
	}
}
 800ac8a:	bf00      	nop
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	20000aa0 	.word	0x20000aa0
 800ac98:	20000a80 	.word	0x20000a80
 800ac9c:	2000097c 	.word	0x2000097c
 800aca0:	20000978 	.word	0x20000978
 800aca4:	20000a8c 	.word	0x20000a8c

0800aca8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acb0:	4b06      	ldr	r3, [pc, #24]	; (800accc <vTaskInternalSetTimeOutState+0x24>)
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800acb8:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <vTaskInternalSetTimeOutState+0x28>)
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	605a      	str	r2, [r3, #4]
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	20000a90 	.word	0x20000a90
 800acd0:	20000a7c 	.word	0x20000a7c

0800acd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10a      	bne.n	800acfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	613b      	str	r3, [r7, #16]
}
 800acf6:	bf00      	nop
 800acf8:	e7fe      	b.n	800acf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	60fb      	str	r3, [r7, #12]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ad16:	f001 f81d 	bl	800bd54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad1a:	4b1d      	ldr	r3, [pc, #116]	; (800ad90 <xTaskCheckForTimeOut+0xbc>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d102      	bne.n	800ad3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad34:	2300      	movs	r3, #0
 800ad36:	61fb      	str	r3, [r7, #28]
 800ad38:	e023      	b.n	800ad82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	4b15      	ldr	r3, [pc, #84]	; (800ad94 <xTaskCheckForTimeOut+0xc0>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d007      	beq.n	800ad56 <xTaskCheckForTimeOut+0x82>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d302      	bcc.n	800ad56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad50:	2301      	movs	r3, #1
 800ad52:	61fb      	str	r3, [r7, #28]
 800ad54:	e015      	b.n	800ad82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d20b      	bcs.n	800ad78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	1ad2      	subs	r2, r2, r3
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7ff ff9b 	bl	800aca8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad72:	2300      	movs	r3, #0
 800ad74:	61fb      	str	r3, [r7, #28]
 800ad76:	e004      	b.n	800ad82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad82:	f001 f817 	bl	800bdb4 <vPortExitCritical>

	return xReturn;
 800ad86:	69fb      	ldr	r3, [r7, #28]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3720      	adds	r7, #32
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	20000a7c 	.word	0x20000a7c
 800ad94:	20000a90 	.word	0x20000a90

0800ad98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad98:	b480      	push	{r7}
 800ad9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad9c:	4b03      	ldr	r3, [pc, #12]	; (800adac <vTaskMissedYield+0x14>)
 800ad9e:	2201      	movs	r2, #1
 800ada0:	601a      	str	r2, [r3, #0]
}
 800ada2:	bf00      	nop
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	20000a8c 	.word	0x20000a8c

0800adb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800adb8:	f000 f854 	bl	800ae64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800adbc:	4b07      	ldr	r3, [pc, #28]	; (800addc <prvIdleTask+0x2c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d907      	bls.n	800add4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800adc4:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <prvIdleTask+0x30>)
 800adc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800add4:	f7f6 fe68 	bl	8001aa8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800add8:	e7ee      	b.n	800adb8 <prvIdleTask+0x8>
 800adda:	bf00      	nop
 800addc:	2000097c 	.word	0x2000097c
 800ade0:	e000ed04 	.word	0xe000ed04

0800ade4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adea:	2300      	movs	r3, #0
 800adec:	607b      	str	r3, [r7, #4]
 800adee:	e00c      	b.n	800ae0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	4613      	mov	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4a12      	ldr	r2, [pc, #72]	; (800ae44 <prvInitialiseTaskLists+0x60>)
 800adfc:	4413      	add	r3, r2
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fe fb4d 	bl	800949e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3301      	adds	r3, #1
 800ae08:	607b      	str	r3, [r7, #4]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b06      	cmp	r3, #6
 800ae0e:	d9ef      	bls.n	800adf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae10:	480d      	ldr	r0, [pc, #52]	; (800ae48 <prvInitialiseTaskLists+0x64>)
 800ae12:	f7fe fb44 	bl	800949e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae16:	480d      	ldr	r0, [pc, #52]	; (800ae4c <prvInitialiseTaskLists+0x68>)
 800ae18:	f7fe fb41 	bl	800949e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae1c:	480c      	ldr	r0, [pc, #48]	; (800ae50 <prvInitialiseTaskLists+0x6c>)
 800ae1e:	f7fe fb3e 	bl	800949e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae22:	480c      	ldr	r0, [pc, #48]	; (800ae54 <prvInitialiseTaskLists+0x70>)
 800ae24:	f7fe fb3b 	bl	800949e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae28:	480b      	ldr	r0, [pc, #44]	; (800ae58 <prvInitialiseTaskLists+0x74>)
 800ae2a:	f7fe fb38 	bl	800949e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae2e:	4b0b      	ldr	r3, [pc, #44]	; (800ae5c <prvInitialiseTaskLists+0x78>)
 800ae30:	4a05      	ldr	r2, [pc, #20]	; (800ae48 <prvInitialiseTaskLists+0x64>)
 800ae32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae34:	4b0a      	ldr	r3, [pc, #40]	; (800ae60 <prvInitialiseTaskLists+0x7c>)
 800ae36:	4a05      	ldr	r2, [pc, #20]	; (800ae4c <prvInitialiseTaskLists+0x68>)
 800ae38:	601a      	str	r2, [r3, #0]
}
 800ae3a:	bf00      	nop
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	2000097c 	.word	0x2000097c
 800ae48:	20000a08 	.word	0x20000a08
 800ae4c:	20000a1c 	.word	0x20000a1c
 800ae50:	20000a38 	.word	0x20000a38
 800ae54:	20000a4c 	.word	0x20000a4c
 800ae58:	20000a64 	.word	0x20000a64
 800ae5c:	20000a30 	.word	0x20000a30
 800ae60:	20000a34 	.word	0x20000a34

0800ae64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae6a:	e019      	b.n	800aea0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae6c:	f000 ff72 	bl	800bd54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae70:	4b10      	ldr	r3, [pc, #64]	; (800aeb4 <prvCheckTasksWaitingTermination+0x50>)
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fe fb98 	bl	80095b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae82:	4b0d      	ldr	r3, [pc, #52]	; (800aeb8 <prvCheckTasksWaitingTermination+0x54>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	4a0b      	ldr	r2, [pc, #44]	; (800aeb8 <prvCheckTasksWaitingTermination+0x54>)
 800ae8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae8c:	4b0b      	ldr	r3, [pc, #44]	; (800aebc <prvCheckTasksWaitingTermination+0x58>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3b01      	subs	r3, #1
 800ae92:	4a0a      	ldr	r2, [pc, #40]	; (800aebc <prvCheckTasksWaitingTermination+0x58>)
 800ae94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae96:	f000 ff8d 	bl	800bdb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f810 	bl	800aec0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aea0:	4b06      	ldr	r3, [pc, #24]	; (800aebc <prvCheckTasksWaitingTermination+0x58>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1e1      	bne.n	800ae6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aea8:	bf00      	nop
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20000a4c 	.word	0x20000a4c
 800aeb8:	20000a78 	.word	0x20000a78
 800aebc:	20000a60 	.word	0x20000a60

0800aec0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d108      	bne.n	800aee4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed6:	4618      	mov	r0, r3
 800aed8:	f001 f92a 	bl	800c130 <vPortFree>
				vPortFree( pxTCB );
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f001 f927 	bl	800c130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aee2:	e018      	b.n	800af16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d103      	bne.n	800aef6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f001 f91e 	bl	800c130 <vPortFree>
	}
 800aef4:	e00f      	b.n	800af16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d00a      	beq.n	800af16 <prvDeleteTCB+0x56>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	60fb      	str	r3, [r7, #12]
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <prvDeleteTCB+0x54>
	}
 800af16:	bf00      	nop
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af26:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <prvResetNextTaskUnblockTime+0x38>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d104      	bne.n	800af3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af30:	4b0a      	ldr	r3, [pc, #40]	; (800af5c <prvResetNextTaskUnblockTime+0x3c>)
 800af32:	f04f 32ff 	mov.w	r2, #4294967295
 800af36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af38:	e008      	b.n	800af4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af3a:	4b07      	ldr	r3, [pc, #28]	; (800af58 <prvResetNextTaskUnblockTime+0x38>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	4a04      	ldr	r2, [pc, #16]	; (800af5c <prvResetNextTaskUnblockTime+0x3c>)
 800af4a:	6013      	str	r3, [r2, #0]
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	20000a30 	.word	0x20000a30
 800af5c:	20000a98 	.word	0x20000a98

0800af60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af66:	4b0b      	ldr	r3, [pc, #44]	; (800af94 <xTaskGetSchedulerState+0x34>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d102      	bne.n	800af74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af6e:	2301      	movs	r3, #1
 800af70:	607b      	str	r3, [r7, #4]
 800af72:	e008      	b.n	800af86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af74:	4b08      	ldr	r3, [pc, #32]	; (800af98 <xTaskGetSchedulerState+0x38>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d102      	bne.n	800af82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af7c:	2302      	movs	r3, #2
 800af7e:	607b      	str	r3, [r7, #4]
 800af80:	e001      	b.n	800af86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af82:	2300      	movs	r3, #0
 800af84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af86:	687b      	ldr	r3, [r7, #4]
	}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr
 800af94:	20000a84 	.word	0x20000a84
 800af98:	20000aa0 	.word	0x20000aa0

0800af9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800afa8:	2300      	movs	r3, #0
 800afaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d06e      	beq.n	800b090 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800afb2:	4b3a      	ldr	r3, [pc, #232]	; (800b09c <xTaskPriorityDisinherit+0x100>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d00a      	beq.n	800afd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	60fb      	str	r3, [r7, #12]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10a      	bne.n	800aff0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	60bb      	str	r3, [r7, #8]
}
 800afec:	bf00      	nop
 800afee:	e7fe      	b.n	800afee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aff4:	1e5a      	subs	r2, r3, #1
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b002:	429a      	cmp	r2, r3
 800b004:	d044      	beq.n	800b090 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d140      	bne.n	800b090 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	3304      	adds	r3, #4
 800b012:	4618      	mov	r0, r3
 800b014:	f7fe facd 	bl	80095b2 <uxListRemove>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d115      	bne.n	800b04a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b022:	491f      	ldr	r1, [pc, #124]	; (800b0a0 <xTaskPriorityDisinherit+0x104>)
 800b024:	4613      	mov	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	440b      	add	r3, r1
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10a      	bne.n	800b04a <xTaskPriorityDisinherit+0xae>
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b038:	2201      	movs	r2, #1
 800b03a:	fa02 f303 	lsl.w	r3, r2, r3
 800b03e:	43da      	mvns	r2, r3
 800b040:	4b18      	ldr	r3, [pc, #96]	; (800b0a4 <xTaskPriorityDisinherit+0x108>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4013      	ands	r3, r2
 800b046:	4a17      	ldr	r2, [pc, #92]	; (800b0a4 <xTaskPriorityDisinherit+0x108>)
 800b048:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b056:	f1c3 0207 	rsb	r2, r3, #7
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b062:	2201      	movs	r2, #1
 800b064:	409a      	lsls	r2, r3
 800b066:	4b0f      	ldr	r3, [pc, #60]	; (800b0a4 <xTaskPriorityDisinherit+0x108>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	4a0d      	ldr	r2, [pc, #52]	; (800b0a4 <xTaskPriorityDisinherit+0x108>)
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b074:	4613      	mov	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4a08      	ldr	r2, [pc, #32]	; (800b0a0 <xTaskPriorityDisinherit+0x104>)
 800b07e:	441a      	add	r2, r3
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	3304      	adds	r3, #4
 800b084:	4619      	mov	r1, r3
 800b086:	4610      	mov	r0, r2
 800b088:	f7fe fa36 	bl	80094f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b08c:	2301      	movs	r3, #1
 800b08e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b090:	697b      	ldr	r3, [r7, #20]
	}
 800b092:	4618      	mov	r0, r3
 800b094:	3718      	adds	r7, #24
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20000978 	.word	0x20000978
 800b0a0:	2000097c 	.word	0x2000097c
 800b0a4:	20000a80 	.word	0x20000a80

0800b0a8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800b0ae:	4b09      	ldr	r3, [pc, #36]	; (800b0d4 <uxTaskResetEventItemValue+0x2c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0b6:	4b07      	ldr	r3, [pc, #28]	; (800b0d4 <uxTaskResetEventItemValue+0x2c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0bc:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <uxTaskResetEventItemValue+0x2c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f1c2 0207 	rsb	r2, r2, #7
 800b0c4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800b0c6:	687b      	ldr	r3, [r7, #4]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	20000978 	.word	0x20000978

0800b0d8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b0e2:	f000 fe37 	bl	800bd54 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b0e6:	4b1e      	ldr	r3, [pc, #120]	; (800b160 <ulTaskNotifyTake+0x88>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d113      	bne.n	800b118 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b0f0:	4b1b      	ldr	r3, [pc, #108]	; (800b160 <ulTaskNotifyTake+0x88>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00b      	beq.n	800b118 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b100:	2101      	movs	r1, #1
 800b102:	6838      	ldr	r0, [r7, #0]
 800b104:	f000 f8e6 	bl	800b2d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b108:	4b16      	ldr	r3, [pc, #88]	; (800b164 <ulTaskNotifyTake+0x8c>)
 800b10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b118:	f000 fe4c 	bl	800bdb4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b11c:	f000 fe1a 	bl	800bd54 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b120:	4b0f      	ldr	r3, [pc, #60]	; (800b160 <ulTaskNotifyTake+0x88>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b126:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00c      	beq.n	800b148 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d004      	beq.n	800b13e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b134:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <ulTaskNotifyTake+0x88>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2200      	movs	r2, #0
 800b13a:	655a      	str	r2, [r3, #84]	; 0x54
 800b13c:	e004      	b.n	800b148 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b13e:	4b08      	ldr	r3, [pc, #32]	; (800b160 <ulTaskNotifyTake+0x88>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	3a01      	subs	r2, #1
 800b146:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b148:	4b05      	ldr	r3, [pc, #20]	; (800b160 <ulTaskNotifyTake+0x88>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b152:	f000 fe2f 	bl	800bdb4 <vPortExitCritical>

		return ulReturn;
 800b156:	68fb      	ldr	r3, [r7, #12]
	}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	20000978 	.word	0x20000978
 800b164:	e000ed04 	.word	0xe000ed04

0800b168 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b08a      	sub	sp, #40	; 0x28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	4613      	mov	r3, r2
 800b176:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b178:	2301      	movs	r3, #1
 800b17a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <xTaskGenericNotify+0x30>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b186:	f383 8811 	msr	BASEPRI, r3
 800b18a:	f3bf 8f6f 	isb	sy
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	61bb      	str	r3, [r7, #24]
}
 800b194:	bf00      	nop
 800b196:	e7fe      	b.n	800b196 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b19c:	f000 fdda 	bl	800bd54 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b1b4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	2202      	movs	r2, #2
 800b1ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b1be:	79fb      	ldrb	r3, [r7, #7]
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d828      	bhi.n	800b216 <xTaskGenericNotify+0xae>
 800b1c4:	a201      	add	r2, pc, #4	; (adr r2, 800b1cc <xTaskGenericNotify+0x64>)
 800b1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ca:	bf00      	nop
 800b1cc:	0800b237 	.word	0x0800b237
 800b1d0:	0800b1e1 	.word	0x0800b1e1
 800b1d4:	0800b1ef 	.word	0x0800b1ef
 800b1d8:	0800b1fb 	.word	0x0800b1fb
 800b1dc:	0800b203 	.word	0x0800b203
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	431a      	orrs	r2, r3
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b1ec:	e026      	b.n	800b23c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b1ee:	6a3b      	ldr	r3, [r7, #32]
 800b1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b1f8:	e020      	b.n	800b23c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b200:	e01c      	b.n	800b23c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b202:	7ffb      	ldrb	r3, [r7, #31]
 800b204:	2b02      	cmp	r3, #2
 800b206:	d003      	beq.n	800b210 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b20e:	e015      	b.n	800b23c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800b210:	2300      	movs	r3, #0
 800b212:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b214:	e012      	b.n	800b23c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21e:	d00c      	beq.n	800b23a <xTaskGenericNotify+0xd2>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	617b      	str	r3, [r7, #20]
}
 800b232:	bf00      	nop
 800b234:	e7fe      	b.n	800b234 <xTaskGenericNotify+0xcc>
					break;
 800b236:	bf00      	nop
 800b238:	e000      	b.n	800b23c <xTaskGenericNotify+0xd4>

					break;
 800b23a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b23c:	7ffb      	ldrb	r3, [r7, #31]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d139      	bne.n	800b2b6 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	3304      	adds	r3, #4
 800b246:	4618      	mov	r0, r3
 800b248:	f7fe f9b3 	bl	80095b2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b250:	2201      	movs	r2, #1
 800b252:	409a      	lsls	r2, r3
 800b254:	4b1b      	ldr	r3, [pc, #108]	; (800b2c4 <xTaskGenericNotify+0x15c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4313      	orrs	r3, r2
 800b25a:	4a1a      	ldr	r2, [pc, #104]	; (800b2c4 <xTaskGenericNotify+0x15c>)
 800b25c:	6013      	str	r3, [r2, #0]
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b262:	4613      	mov	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	4a17      	ldr	r2, [pc, #92]	; (800b2c8 <xTaskGenericNotify+0x160>)
 800b26c:	441a      	add	r2, r3
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	3304      	adds	r3, #4
 800b272:	4619      	mov	r1, r3
 800b274:	4610      	mov	r0, r2
 800b276:	f7fe f93f 	bl	80094f8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b27a:	6a3b      	ldr	r3, [r7, #32]
 800b27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00a      	beq.n	800b298 <xTaskGenericNotify+0x130>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	613b      	str	r3, [r7, #16]
}
 800b294:	bf00      	nop
 800b296:	e7fe      	b.n	800b296 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b29c:	4b0b      	ldr	r3, [pc, #44]	; (800b2cc <xTaskGenericNotify+0x164>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d907      	bls.n	800b2b6 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b2a6:	4b0a      	ldr	r3, [pc, #40]	; (800b2d0 <xTaskGenericNotify+0x168>)
 800b2a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b2b6:	f000 fd7d 	bl	800bdb4 <vPortExitCritical>

		return xReturn;
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3728      	adds	r7, #40	; 0x28
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	20000a80 	.word	0x20000a80
 800b2c8:	2000097c 	.word	0x2000097c
 800b2cc:	20000978 	.word	0x20000978
 800b2d0:	e000ed04 	.word	0xe000ed04

0800b2d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2de:	4b29      	ldr	r3, [pc, #164]	; (800b384 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2e4:	4b28      	ldr	r3, [pc, #160]	; (800b388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fe f961 	bl	80095b2 <uxListRemove>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10b      	bne.n	800b30e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b2f6:	4b24      	ldr	r3, [pc, #144]	; (800b388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b302:	43da      	mvns	r2, r3
 800b304:	4b21      	ldr	r3, [pc, #132]	; (800b38c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4013      	ands	r3, r2
 800b30a:	4a20      	ldr	r2, [pc, #128]	; (800b38c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b30c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b314:	d10a      	bne.n	800b32c <prvAddCurrentTaskToDelayedList+0x58>
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d007      	beq.n	800b32c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b31c:	4b1a      	ldr	r3, [pc, #104]	; (800b388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	3304      	adds	r3, #4
 800b322:	4619      	mov	r1, r3
 800b324:	481a      	ldr	r0, [pc, #104]	; (800b390 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b326:	f7fe f8e7 	bl	80094f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b32a:	e026      	b.n	800b37a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4413      	add	r3, r2
 800b332:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b334:	4b14      	ldr	r3, [pc, #80]	; (800b388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	429a      	cmp	r2, r3
 800b342:	d209      	bcs.n	800b358 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b344:	4b13      	ldr	r3, [pc, #76]	; (800b394 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3304      	adds	r3, #4
 800b34e:	4619      	mov	r1, r3
 800b350:	4610      	mov	r0, r2
 800b352:	f7fe f8f5 	bl	8009540 <vListInsert>
}
 800b356:	e010      	b.n	800b37a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b358:	4b0f      	ldr	r3, [pc, #60]	; (800b398 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	4b0a      	ldr	r3, [pc, #40]	; (800b388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3304      	adds	r3, #4
 800b362:	4619      	mov	r1, r3
 800b364:	4610      	mov	r0, r2
 800b366:	f7fe f8eb 	bl	8009540 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b36a:	4b0c      	ldr	r3, [pc, #48]	; (800b39c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	429a      	cmp	r2, r3
 800b372:	d202      	bcs.n	800b37a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b374:	4a09      	ldr	r2, [pc, #36]	; (800b39c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	6013      	str	r3, [r2, #0]
}
 800b37a:	bf00      	nop
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	20000a7c 	.word	0x20000a7c
 800b388:	20000978 	.word	0x20000978
 800b38c:	20000a80 	.word	0x20000a80
 800b390:	20000a64 	.word	0x20000a64
 800b394:	20000a34 	.word	0x20000a34
 800b398:	20000a30 	.word	0x20000a30
 800b39c:	20000a98 	.word	0x20000a98

0800b3a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08a      	sub	sp, #40	; 0x28
 800b3a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b3aa:	f000 fb63 	bl	800ba74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b3ae:	4b1c      	ldr	r3, [pc, #112]	; (800b420 <xTimerCreateTimerTask+0x80>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d021      	beq.n	800b3fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3be:	1d3a      	adds	r2, r7, #4
 800b3c0:	f107 0108 	add.w	r1, r7, #8
 800b3c4:	f107 030c 	add.w	r3, r7, #12
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7f5 fdb1 	bl	8000f30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3ce:	6879      	ldr	r1, [r7, #4]
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	9202      	str	r2, [sp, #8]
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	2303      	movs	r3, #3
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	460a      	mov	r2, r1
 800b3e0:	4910      	ldr	r1, [pc, #64]	; (800b424 <xTimerCreateTimerTask+0x84>)
 800b3e2:	4811      	ldr	r0, [pc, #68]	; (800b428 <xTimerCreateTimerTask+0x88>)
 800b3e4:	f7fe ff14 	bl	800a210 <xTaskCreateStatic>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	4a10      	ldr	r2, [pc, #64]	; (800b42c <xTimerCreateTimerTask+0x8c>)
 800b3ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <xTimerCreateTimerTask+0x8c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10a      	bne.n	800b416 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	613b      	str	r3, [r7, #16]
}
 800b412:	bf00      	nop
 800b414:	e7fe      	b.n	800b414 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b416:	697b      	ldr	r3, [r7, #20]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	20000ad4 	.word	0x20000ad4
 800b424:	0800e6a4 	.word	0x0800e6a4
 800b428:	0800b61d 	.word	0x0800b61d
 800b42c:	20000ad8 	.word	0x20000ad8

0800b430 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b430:	b580      	push	{r7, lr}
 800b432:	b088      	sub	sp, #32
 800b434:	af02      	add	r7, sp, #8
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b43e:	2028      	movs	r0, #40	; 0x28
 800b440:	f000 fdaa 	bl	800bf98 <pvPortMalloc>
 800b444:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00d      	beq.n	800b468 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	9301      	str	r3, [sp, #4]
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	68b9      	ldr	r1, [r7, #8]
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 f805 	bl	800b472 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b468:	697b      	ldr	r3, [r7, #20]
	}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3718      	adds	r7, #24
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b086      	sub	sp, #24
 800b476:	af00      	add	r7, sp, #0
 800b478:	60f8      	str	r0, [r7, #12]
 800b47a:	60b9      	str	r1, [r7, #8]
 800b47c:	607a      	str	r2, [r7, #4]
 800b47e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10a      	bne.n	800b49c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	617b      	str	r3, [r7, #20]
}
 800b498:	bf00      	nop
 800b49a:	e7fe      	b.n	800b49a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d01e      	beq.n	800b4e0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b4a2:	f000 fae7 	bl	800ba74 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	6a3a      	ldr	r2, [r7, #32]
 800b4bc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fe f80b 	bl	80094de <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d008      	beq.n	800b4e0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4d4:	f043 0304 	orr.w	r3, r3, #4
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b4e0:	bf00      	nop
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b08a      	sub	sp, #40	; 0x28
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10a      	bne.n	800b516 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	623b      	str	r3, [r7, #32]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b516:	4b1a      	ldr	r3, [pc, #104]	; (800b580 <xTimerGenericCommand+0x98>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d02a      	beq.n	800b574 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	2b05      	cmp	r3, #5
 800b52e:	dc18      	bgt.n	800b562 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b530:	f7ff fd16 	bl	800af60 <xTaskGetSchedulerState>
 800b534:	4603      	mov	r3, r0
 800b536:	2b02      	cmp	r3, #2
 800b538:	d109      	bne.n	800b54e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b53a:	4b11      	ldr	r3, [pc, #68]	; (800b580 <xTimerGenericCommand+0x98>)
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	f107 0110 	add.w	r1, r7, #16
 800b542:	2300      	movs	r3, #0
 800b544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b546:	f7fe f999 	bl	800987c <xQueueGenericSend>
 800b54a:	6278      	str	r0, [r7, #36]	; 0x24
 800b54c:	e012      	b.n	800b574 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b54e:	4b0c      	ldr	r3, [pc, #48]	; (800b580 <xTimerGenericCommand+0x98>)
 800b550:	6818      	ldr	r0, [r3, #0]
 800b552:	f107 0110 	add.w	r1, r7, #16
 800b556:	2300      	movs	r3, #0
 800b558:	2200      	movs	r2, #0
 800b55a:	f7fe f98f 	bl	800987c <xQueueGenericSend>
 800b55e:	6278      	str	r0, [r7, #36]	; 0x24
 800b560:	e008      	b.n	800b574 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b562:	4b07      	ldr	r3, [pc, #28]	; (800b580 <xTimerGenericCommand+0x98>)
 800b564:	6818      	ldr	r0, [r3, #0]
 800b566:	f107 0110 	add.w	r1, r7, #16
 800b56a:	2300      	movs	r3, #0
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	f7fe fa83 	bl	8009a78 <xQueueGenericSendFromISR>
 800b572:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b576:	4618      	mov	r0, r3
 800b578:	3728      	adds	r7, #40	; 0x28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	20000ad4 	.word	0x20000ad4

0800b584 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af02      	add	r7, sp, #8
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b58e:	4b22      	ldr	r3, [pc, #136]	; (800b618 <prvProcessExpiredTimer+0x94>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	3304      	adds	r3, #4
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fe f808 	bl	80095b2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d022      	beq.n	800b5f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	699a      	ldr	r2, [r3, #24]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	18d1      	adds	r1, r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	6978      	ldr	r0, [r7, #20]
 800b5be:	f000 f8d1 	bl	800b764 <prvInsertTimerInActiveList>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d01f      	beq.n	800b608 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	6978      	ldr	r0, [r7, #20]
 800b5d4:	f7ff ff88 	bl	800b4e8 <xTimerGenericCommand>
 800b5d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d113      	bne.n	800b608 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e4:	f383 8811 	msr	BASEPRI, r3
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	60fb      	str	r3, [r7, #12]
}
 800b5f2:	bf00      	nop
 800b5f4:	e7fe      	b.n	800b5f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b5fc:	f023 0301 	bic.w	r3, r3, #1
 800b600:	b2da      	uxtb	r2, r3
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	6a1b      	ldr	r3, [r3, #32]
 800b60c:	6978      	ldr	r0, [r7, #20]
 800b60e:	4798      	blx	r3
}
 800b610:	bf00      	nop
 800b612:	3718      	adds	r7, #24
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20000acc 	.word	0x20000acc

0800b61c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b624:	f107 0308 	add.w	r3, r7, #8
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 f857 	bl	800b6dc <prvGetNextExpireTime>
 800b62e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	4619      	mov	r1, r3
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 f803 	bl	800b640 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b63a:	f000 f8d5 	bl	800b7e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b63e:	e7f1      	b.n	800b624 <prvTimerTask+0x8>

0800b640 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b64a:	f7ff f80f 	bl	800a66c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b64e:	f107 0308 	add.w	r3, r7, #8
 800b652:	4618      	mov	r0, r3
 800b654:	f000 f866 	bl	800b724 <prvSampleTimeNow>
 800b658:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d130      	bne.n	800b6c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10a      	bne.n	800b67c <prvProcessTimerOrBlockTask+0x3c>
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d806      	bhi.n	800b67c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b66e:	f7ff f80b 	bl	800a688 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b672:	68f9      	ldr	r1, [r7, #12]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff ff85 	bl	800b584 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b67a:	e024      	b.n	800b6c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d008      	beq.n	800b694 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b682:	4b13      	ldr	r3, [pc, #76]	; (800b6d0 <prvProcessTimerOrBlockTask+0x90>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d101      	bne.n	800b690 <prvProcessTimerOrBlockTask+0x50>
 800b68c:	2301      	movs	r3, #1
 800b68e:	e000      	b.n	800b692 <prvProcessTimerOrBlockTask+0x52>
 800b690:	2300      	movs	r3, #0
 800b692:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b694:	4b0f      	ldr	r3, [pc, #60]	; (800b6d4 <prvProcessTimerOrBlockTask+0x94>)
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	f7fe fd81 	bl	800a1a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b6a6:	f7fe ffef 	bl	800a688 <xTaskResumeAll>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10a      	bne.n	800b6c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b6b0:	4b09      	ldr	r3, [pc, #36]	; (800b6d8 <prvProcessTimerOrBlockTask+0x98>)
 800b6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	f3bf 8f6f 	isb	sy
}
 800b6c0:	e001      	b.n	800b6c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6c2:	f7fe ffe1 	bl	800a688 <xTaskResumeAll>
}
 800b6c6:	bf00      	nop
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20000ad0 	.word	0x20000ad0
 800b6d4:	20000ad4 	.word	0x20000ad4
 800b6d8:	e000ed04 	.word	0xe000ed04

0800b6dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6e4:	4b0e      	ldr	r3, [pc, #56]	; (800b720 <prvGetNextExpireTime+0x44>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d101      	bne.n	800b6f2 <prvGetNextExpireTime+0x16>
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	e000      	b.n	800b6f4 <prvGetNextExpireTime+0x18>
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d105      	bne.n	800b70c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b700:	4b07      	ldr	r3, [pc, #28]	; (800b720 <prvGetNextExpireTime+0x44>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	60fb      	str	r3, [r7, #12]
 800b70a:	e001      	b.n	800b710 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b710:	68fb      	ldr	r3, [r7, #12]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3714      	adds	r7, #20
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	20000acc 	.word	0x20000acc

0800b724 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b72c:	f7ff f848 	bl	800a7c0 <xTaskGetTickCount>
 800b730:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b732:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <prvSampleTimeNow+0x3c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d205      	bcs.n	800b748 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b73c:	f000 f936 	bl	800b9ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	601a      	str	r2, [r3, #0]
 800b746:	e002      	b.n	800b74e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b74e:	4a04      	ldr	r2, [pc, #16]	; (800b760 <prvSampleTimeNow+0x3c>)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b754:	68fb      	ldr	r3, [r7, #12]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20000adc 	.word	0x20000adc

0800b764 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b772:	2300      	movs	r3, #0
 800b774:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	429a      	cmp	r2, r3
 800b788:	d812      	bhi.n	800b7b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	1ad2      	subs	r2, r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	429a      	cmp	r2, r3
 800b796:	d302      	bcc.n	800b79e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b798:	2301      	movs	r3, #1
 800b79a:	617b      	str	r3, [r7, #20]
 800b79c:	e01b      	b.n	800b7d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b79e:	4b10      	ldr	r3, [pc, #64]	; (800b7e0 <prvInsertTimerInActiveList+0x7c>)
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	f7fd fec9 	bl	8009540 <vListInsert>
 800b7ae:	e012      	b.n	800b7d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d206      	bcs.n	800b7c6 <prvInsertTimerInActiveList+0x62>
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d302      	bcc.n	800b7c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	e007      	b.n	800b7d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7c6:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <prvInsertTimerInActiveList+0x80>)
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	4610      	mov	r0, r2
 800b7d2:	f7fd feb5 	bl	8009540 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7d6:	697b      	ldr	r3, [r7, #20]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	20000ad0 	.word	0x20000ad0
 800b7e4:	20000acc 	.word	0x20000acc

0800b7e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08e      	sub	sp, #56	; 0x38
 800b7ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7ee:	e0ca      	b.n	800b986 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	da18      	bge.n	800b828 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b7f6:	1d3b      	adds	r3, r7, #4
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10a      	bne.n	800b818 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	61fb      	str	r3, [r7, #28]
}
 800b814:	bf00      	nop
 800b816:	e7fe      	b.n	800b816 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b81e:	6850      	ldr	r0, [r2, #4]
 800b820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b822:	6892      	ldr	r2, [r2, #8]
 800b824:	4611      	mov	r1, r2
 800b826:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f2c0 80aa 	blt.w	800b984 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d004      	beq.n	800b846 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	3304      	adds	r3, #4
 800b840:	4618      	mov	r0, r3
 800b842:	f7fd feb6 	bl	80095b2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b846:	463b      	mov	r3, r7
 800b848:	4618      	mov	r0, r3
 800b84a:	f7ff ff6b 	bl	800b724 <prvSampleTimeNow>
 800b84e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2b09      	cmp	r3, #9
 800b854:	f200 8097 	bhi.w	800b986 <prvProcessReceivedCommands+0x19e>
 800b858:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <prvProcessReceivedCommands+0x78>)
 800b85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85e:	bf00      	nop
 800b860:	0800b889 	.word	0x0800b889
 800b864:	0800b889 	.word	0x0800b889
 800b868:	0800b889 	.word	0x0800b889
 800b86c:	0800b8fd 	.word	0x0800b8fd
 800b870:	0800b911 	.word	0x0800b911
 800b874:	0800b95b 	.word	0x0800b95b
 800b878:	0800b889 	.word	0x0800b889
 800b87c:	0800b889 	.word	0x0800b889
 800b880:	0800b8fd 	.word	0x0800b8fd
 800b884:	0800b911 	.word	0x0800b911
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b88e:	f043 0301 	orr.w	r3, r3, #1
 800b892:	b2da      	uxtb	r2, r3
 800b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	699b      	ldr	r3, [r3, #24]
 800b8a0:	18d1      	adds	r1, r2, r3
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8a8:	f7ff ff5c 	bl	800b764 <prvInsertTimerInActiveList>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d069      	beq.n	800b986 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b8c0:	f003 0304 	and.w	r3, r3, #4
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d05e      	beq.n	800b986 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	699b      	ldr	r3, [r3, #24]
 800b8ce:	441a      	add	r2, r3
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8da:	f7ff fe05 	bl	800b4e8 <xTimerGenericCommand>
 800b8de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b8e0:	6a3b      	ldr	r3, [r7, #32]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d14f      	bne.n	800b986 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	61bb      	str	r3, [r7, #24]
}
 800b8f8:	bf00      	nop
 800b8fa:	e7fe      	b.n	800b8fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b902:	f023 0301 	bic.w	r3, r3, #1
 800b906:	b2da      	uxtb	r2, r3
 800b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800b90e:	e03a      	b.n	800b986 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b912:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b916:	f043 0301 	orr.w	r3, r3, #1
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b926:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	699b      	ldr	r3, [r3, #24]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	617b      	str	r3, [r7, #20]
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	699a      	ldr	r2, [r3, #24]
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	18d1      	adds	r1, r2, r3
 800b94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b954:	f7ff ff06 	bl	800b764 <prvInsertTimerInActiveList>
					break;
 800b958:	e015      	b.n	800b986 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b960:	f003 0302 	and.w	r3, r3, #2
 800b964:	2b00      	cmp	r3, #0
 800b966:	d103      	bne.n	800b970 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b96a:	f000 fbe1 	bl	800c130 <vPortFree>
 800b96e:	e00a      	b.n	800b986 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b976:	f023 0301 	bic.w	r3, r3, #1
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b982:	e000      	b.n	800b986 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b984:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b986:	4b08      	ldr	r3, [pc, #32]	; (800b9a8 <prvProcessReceivedCommands+0x1c0>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	1d39      	adds	r1, r7, #4
 800b98c:	2200      	movs	r2, #0
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fe f90e 	bl	8009bb0 <xQueueReceive>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	f47f af2a 	bne.w	800b7f0 <prvProcessReceivedCommands+0x8>
	}
}
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	3730      	adds	r7, #48	; 0x30
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20000ad4 	.word	0x20000ad4

0800b9ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b088      	sub	sp, #32
 800b9b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9b2:	e048      	b.n	800ba46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9b4:	4b2d      	ldr	r3, [pc, #180]	; (800ba6c <prvSwitchTimerLists+0xc0>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9be:	4b2b      	ldr	r3, [pc, #172]	; (800ba6c <prvSwitchTimerLists+0xc0>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fd fdf0 	bl	80095b2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6a1b      	ldr	r3, [r3, #32]
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9e0:	f003 0304 	and.w	r3, r3, #4
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d02e      	beq.n	800ba46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	699b      	ldr	r3, [r3, #24]
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d90e      	bls.n	800ba18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba06:	4b19      	ldr	r3, [pc, #100]	; (800ba6c <prvSwitchTimerLists+0xc0>)
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	4619      	mov	r1, r3
 800ba10:	4610      	mov	r0, r2
 800ba12:	f7fd fd95 	bl	8009540 <vListInsert>
 800ba16:	e016      	b.n	800ba46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba18:	2300      	movs	r3, #0
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	2100      	movs	r1, #0
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff fd60 	bl	800b4e8 <xTimerGenericCommand>
 800ba28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10a      	bne.n	800ba46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	603b      	str	r3, [r7, #0]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba46:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <prvSwitchTimerLists+0xc0>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1b1      	bne.n	800b9b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba50:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <prvSwitchTimerLists+0xc0>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba56:	4b06      	ldr	r3, [pc, #24]	; (800ba70 <prvSwitchTimerLists+0xc4>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a04      	ldr	r2, [pc, #16]	; (800ba6c <prvSwitchTimerLists+0xc0>)
 800ba5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba5e:	4a04      	ldr	r2, [pc, #16]	; (800ba70 <prvSwitchTimerLists+0xc4>)
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	6013      	str	r3, [r2, #0]
}
 800ba64:	bf00      	nop
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	20000acc 	.word	0x20000acc
 800ba70:	20000ad0 	.word	0x20000ad0

0800ba74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba7a:	f000 f96b 	bl	800bd54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba7e:	4b15      	ldr	r3, [pc, #84]	; (800bad4 <prvCheckForValidListAndQueue+0x60>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d120      	bne.n	800bac8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba86:	4814      	ldr	r0, [pc, #80]	; (800bad8 <prvCheckForValidListAndQueue+0x64>)
 800ba88:	f7fd fd09 	bl	800949e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba8c:	4813      	ldr	r0, [pc, #76]	; (800badc <prvCheckForValidListAndQueue+0x68>)
 800ba8e:	f7fd fd06 	bl	800949e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba92:	4b13      	ldr	r3, [pc, #76]	; (800bae0 <prvCheckForValidListAndQueue+0x6c>)
 800ba94:	4a10      	ldr	r2, [pc, #64]	; (800bad8 <prvCheckForValidListAndQueue+0x64>)
 800ba96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba98:	4b12      	ldr	r3, [pc, #72]	; (800bae4 <prvCheckForValidListAndQueue+0x70>)
 800ba9a:	4a10      	ldr	r2, [pc, #64]	; (800badc <prvCheckForValidListAndQueue+0x68>)
 800ba9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba9e:	2300      	movs	r3, #0
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	4b11      	ldr	r3, [pc, #68]	; (800bae8 <prvCheckForValidListAndQueue+0x74>)
 800baa4:	4a11      	ldr	r2, [pc, #68]	; (800baec <prvCheckForValidListAndQueue+0x78>)
 800baa6:	2110      	movs	r1, #16
 800baa8:	200a      	movs	r0, #10
 800baaa:	f7fd fe15 	bl	80096d8 <xQueueGenericCreateStatic>
 800baae:	4603      	mov	r3, r0
 800bab0:	4a08      	ldr	r2, [pc, #32]	; (800bad4 <prvCheckForValidListAndQueue+0x60>)
 800bab2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bab4:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <prvCheckForValidListAndQueue+0x60>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d005      	beq.n	800bac8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800babc:	4b05      	ldr	r3, [pc, #20]	; (800bad4 <prvCheckForValidListAndQueue+0x60>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	490b      	ldr	r1, [pc, #44]	; (800baf0 <prvCheckForValidListAndQueue+0x7c>)
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe fb46 	bl	800a154 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bac8:	f000 f974 	bl	800bdb4 <vPortExitCritical>
}
 800bacc:	bf00      	nop
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20000ad4 	.word	0x20000ad4
 800bad8:	20000aa4 	.word	0x20000aa4
 800badc:	20000ab8 	.word	0x20000ab8
 800bae0:	20000acc 	.word	0x20000acc
 800bae4:	20000ad0 	.word	0x20000ad0
 800bae8:	20000b80 	.word	0x20000b80
 800baec:	20000ae0 	.word	0x20000ae0
 800baf0:	0800e6ac 	.word	0x0800e6ac

0800baf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3b04      	subs	r3, #4
 800bb04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3b04      	subs	r3, #4
 800bb12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	f023 0201 	bic.w	r2, r3, #1
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3b04      	subs	r3, #4
 800bb22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb24:	4a0c      	ldr	r2, [pc, #48]	; (800bb58 <pxPortInitialiseStack+0x64>)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	3b14      	subs	r3, #20
 800bb2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	3b04      	subs	r3, #4
 800bb3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f06f 0202 	mvn.w	r2, #2
 800bb42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	3b20      	subs	r3, #32
 800bb48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr
 800bb58:	0800bb5d 	.word	0x0800bb5d

0800bb5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb66:	4b12      	ldr	r3, [pc, #72]	; (800bbb0 <prvTaskExitError+0x54>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6e:	d00a      	beq.n	800bb86 <prvTaskExitError+0x2a>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	60fb      	str	r3, [r7, #12]
}
 800bb82:	bf00      	nop
 800bb84:	e7fe      	b.n	800bb84 <prvTaskExitError+0x28>
	__asm volatile
 800bb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	60bb      	str	r3, [r7, #8]
}
 800bb98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb9a:	bf00      	nop
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d0fc      	beq.n	800bb9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bba2:	bf00      	nop
 800bba4:	bf00      	nop
 800bba6:	3714      	adds	r7, #20
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	2000000c 	.word	0x2000000c
	...

0800bbc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbc0:	4b07      	ldr	r3, [pc, #28]	; (800bbe0 <pxCurrentTCBConst2>)
 800bbc2:	6819      	ldr	r1, [r3, #0]
 800bbc4:	6808      	ldr	r0, [r1, #0]
 800bbc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbca:	f380 8809 	msr	PSP, r0
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f04f 0000 	mov.w	r0, #0
 800bbd6:	f380 8811 	msr	BASEPRI, r0
 800bbda:	4770      	bx	lr
 800bbdc:	f3af 8000 	nop.w

0800bbe0 <pxCurrentTCBConst2>:
 800bbe0:	20000978 	.word	0x20000978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bbe4:	bf00      	nop
 800bbe6:	bf00      	nop

0800bbe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bbe8:	4808      	ldr	r0, [pc, #32]	; (800bc0c <prvPortStartFirstTask+0x24>)
 800bbea:	6800      	ldr	r0, [r0, #0]
 800bbec:	6800      	ldr	r0, [r0, #0]
 800bbee:	f380 8808 	msr	MSP, r0
 800bbf2:	f04f 0000 	mov.w	r0, #0
 800bbf6:	f380 8814 	msr	CONTROL, r0
 800bbfa:	b662      	cpsie	i
 800bbfc:	b661      	cpsie	f
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	df00      	svc	0
 800bc08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc0a:	bf00      	nop
 800bc0c:	e000ed08 	.word	0xe000ed08

0800bc10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc16:	4b46      	ldr	r3, [pc, #280]	; (800bd30 <xPortStartScheduler+0x120>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a46      	ldr	r2, [pc, #280]	; (800bd34 <xPortStartScheduler+0x124>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d10a      	bne.n	800bc36 <xPortStartScheduler+0x26>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	613b      	str	r3, [r7, #16]
}
 800bc32:	bf00      	nop
 800bc34:	e7fe      	b.n	800bc34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc36:	4b3e      	ldr	r3, [pc, #248]	; (800bd30 <xPortStartScheduler+0x120>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a3f      	ldr	r2, [pc, #252]	; (800bd38 <xPortStartScheduler+0x128>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d10a      	bne.n	800bc56 <xPortStartScheduler+0x46>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	60fb      	str	r3, [r7, #12]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc56:	4b39      	ldr	r3, [pc, #228]	; (800bd3c <xPortStartScheduler+0x12c>)
 800bc58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	22ff      	movs	r2, #255	; 0xff
 800bc66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc70:	78fb      	ldrb	r3, [r7, #3]
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc78:	b2da      	uxtb	r2, r3
 800bc7a:	4b31      	ldr	r3, [pc, #196]	; (800bd40 <xPortStartScheduler+0x130>)
 800bc7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc7e:	4b31      	ldr	r3, [pc, #196]	; (800bd44 <xPortStartScheduler+0x134>)
 800bc80:	2207      	movs	r2, #7
 800bc82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc84:	e009      	b.n	800bc9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc86:	4b2f      	ldr	r3, [pc, #188]	; (800bd44 <xPortStartScheduler+0x134>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	4a2d      	ldr	r2, [pc, #180]	; (800bd44 <xPortStartScheduler+0x134>)
 800bc8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc90:	78fb      	ldrb	r3, [r7, #3]
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc9a:	78fb      	ldrb	r3, [r7, #3]
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bca2:	2b80      	cmp	r3, #128	; 0x80
 800bca4:	d0ef      	beq.n	800bc86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bca6:	4b27      	ldr	r3, [pc, #156]	; (800bd44 <xPortStartScheduler+0x134>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f1c3 0307 	rsb	r3, r3, #7
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d00a      	beq.n	800bcc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	60bb      	str	r3, [r7, #8]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bcc8:	4b1e      	ldr	r3, [pc, #120]	; (800bd44 <xPortStartScheduler+0x134>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	021b      	lsls	r3, r3, #8
 800bcce:	4a1d      	ldr	r2, [pc, #116]	; (800bd44 <xPortStartScheduler+0x134>)
 800bcd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcd2:	4b1c      	ldr	r3, [pc, #112]	; (800bd44 <xPortStartScheduler+0x134>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcda:	4a1a      	ldr	r2, [pc, #104]	; (800bd44 <xPortStartScheduler+0x134>)
 800bcdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bce6:	4b18      	ldr	r3, [pc, #96]	; (800bd48 <xPortStartScheduler+0x138>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a17      	ldr	r2, [pc, #92]	; (800bd48 <xPortStartScheduler+0x138>)
 800bcec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bcf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bcf2:	4b15      	ldr	r3, [pc, #84]	; (800bd48 <xPortStartScheduler+0x138>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a14      	ldr	r2, [pc, #80]	; (800bd48 <xPortStartScheduler+0x138>)
 800bcf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bcfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcfe:	f000 f8dd 	bl	800bebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd02:	4b12      	ldr	r3, [pc, #72]	; (800bd4c <xPortStartScheduler+0x13c>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd08:	f000 f8fc 	bl	800bf04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd0c:	4b10      	ldr	r3, [pc, #64]	; (800bd50 <xPortStartScheduler+0x140>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a0f      	ldr	r2, [pc, #60]	; (800bd50 <xPortStartScheduler+0x140>)
 800bd12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd18:	f7ff ff66 	bl	800bbe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd1c:	f7fe fe18 	bl	800a950 <vTaskSwitchContext>
	prvTaskExitError();
 800bd20:	f7ff ff1c 	bl	800bb5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3718      	adds	r7, #24
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	e000ed00 	.word	0xe000ed00
 800bd34:	410fc271 	.word	0x410fc271
 800bd38:	410fc270 	.word	0x410fc270
 800bd3c:	e000e400 	.word	0xe000e400
 800bd40:	20000bc8 	.word	0x20000bc8
 800bd44:	20000bcc 	.word	0x20000bcc
 800bd48:	e000ed20 	.word	0xe000ed20
 800bd4c:	2000000c 	.word	0x2000000c
 800bd50:	e000ef34 	.word	0xe000ef34

0800bd54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
	__asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	607b      	str	r3, [r7, #4]
}
 800bd6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd6e:	4b0f      	ldr	r3, [pc, #60]	; (800bdac <vPortEnterCritical+0x58>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3301      	adds	r3, #1
 800bd74:	4a0d      	ldr	r2, [pc, #52]	; (800bdac <vPortEnterCritical+0x58>)
 800bd76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd78:	4b0c      	ldr	r3, [pc, #48]	; (800bdac <vPortEnterCritical+0x58>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d10f      	bne.n	800bda0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd80:	4b0b      	ldr	r3, [pc, #44]	; (800bdb0 <vPortEnterCritical+0x5c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00a      	beq.n	800bda0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	603b      	str	r3, [r7, #0]
}
 800bd9c:	bf00      	nop
 800bd9e:	e7fe      	b.n	800bd9e <vPortEnterCritical+0x4a>
	}
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	2000000c 	.word	0x2000000c
 800bdb0:	e000ed04 	.word	0xe000ed04

0800bdb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdba:	4b12      	ldr	r3, [pc, #72]	; (800be04 <vPortExitCritical+0x50>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10a      	bne.n	800bdd8 <vPortExitCritical+0x24>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	607b      	str	r3, [r7, #4]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bdd8:	4b0a      	ldr	r3, [pc, #40]	; (800be04 <vPortExitCritical+0x50>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	4a09      	ldr	r2, [pc, #36]	; (800be04 <vPortExitCritical+0x50>)
 800bde0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bde2:	4b08      	ldr	r3, [pc, #32]	; (800be04 <vPortExitCritical+0x50>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d105      	bne.n	800bdf6 <vPortExitCritical+0x42>
 800bdea:	2300      	movs	r3, #0
 800bdec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	f383 8811 	msr	BASEPRI, r3
}
 800bdf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdf6:	bf00      	nop
 800bdf8:	370c      	adds	r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	2000000c 	.word	0x2000000c
	...

0800be10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be10:	f3ef 8009 	mrs	r0, PSP
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	4b15      	ldr	r3, [pc, #84]	; (800be70 <pxCurrentTCBConst>)
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	f01e 0f10 	tst.w	lr, #16
 800be20:	bf08      	it	eq
 800be22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2a:	6010      	str	r0, [r2, #0]
 800be2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be34:	f380 8811 	msr	BASEPRI, r0
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f7fe fd86 	bl	800a950 <vTaskSwitchContext>
 800be44:	f04f 0000 	mov.w	r0, #0
 800be48:	f380 8811 	msr	BASEPRI, r0
 800be4c:	bc09      	pop	{r0, r3}
 800be4e:	6819      	ldr	r1, [r3, #0]
 800be50:	6808      	ldr	r0, [r1, #0]
 800be52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be56:	f01e 0f10 	tst.w	lr, #16
 800be5a:	bf08      	it	eq
 800be5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be60:	f380 8809 	msr	PSP, r0
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	f3af 8000 	nop.w

0800be70 <pxCurrentTCBConst>:
 800be70:	20000978 	.word	0x20000978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop

0800be78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	607b      	str	r3, [r7, #4]
}
 800be90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be92:	f7fe fca5 	bl	800a7e0 <xTaskIncrementTick>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d003      	beq.n	800bea4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be9c:	4b06      	ldr	r3, [pc, #24]	; (800beb8 <SysTick_Handler+0x40>)
 800be9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	2300      	movs	r3, #0
 800bea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	f383 8811 	msr	BASEPRI, r3
}
 800beae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	e000ed04 	.word	0xe000ed04

0800bebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bebc:	b480      	push	{r7}
 800bebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bec0:	4b0b      	ldr	r3, [pc, #44]	; (800bef0 <vPortSetupTimerInterrupt+0x34>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bec6:	4b0b      	ldr	r3, [pc, #44]	; (800bef4 <vPortSetupTimerInterrupt+0x38>)
 800bec8:	2200      	movs	r2, #0
 800beca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800becc:	4b0a      	ldr	r3, [pc, #40]	; (800bef8 <vPortSetupTimerInterrupt+0x3c>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a0a      	ldr	r2, [pc, #40]	; (800befc <vPortSetupTimerInterrupt+0x40>)
 800bed2:	fba2 2303 	umull	r2, r3, r2, r3
 800bed6:	099b      	lsrs	r3, r3, #6
 800bed8:	4a09      	ldr	r2, [pc, #36]	; (800bf00 <vPortSetupTimerInterrupt+0x44>)
 800beda:	3b01      	subs	r3, #1
 800bedc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bede:	4b04      	ldr	r3, [pc, #16]	; (800bef0 <vPortSetupTimerInterrupt+0x34>)
 800bee0:	2207      	movs	r2, #7
 800bee2:	601a      	str	r2, [r3, #0]
}
 800bee4:	bf00      	nop
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	e000e010 	.word	0xe000e010
 800bef4:	e000e018 	.word	0xe000e018
 800bef8:	20000000 	.word	0x20000000
 800befc:	10624dd3 	.word	0x10624dd3
 800bf00:	e000e014 	.word	0xe000e014

0800bf04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf14 <vPortEnableVFP+0x10>
 800bf08:	6801      	ldr	r1, [r0, #0]
 800bf0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf0e:	6001      	str	r1, [r0, #0]
 800bf10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf12:	bf00      	nop
 800bf14:	e000ed88 	.word	0xe000ed88

0800bf18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf1e:	f3ef 8305 	mrs	r3, IPSR
 800bf22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b0f      	cmp	r3, #15
 800bf28:	d914      	bls.n	800bf54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf2a:	4a17      	ldr	r2, [pc, #92]	; (800bf88 <vPortValidateInterruptPriority+0x70>)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4413      	add	r3, r2
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf34:	4b15      	ldr	r3, [pc, #84]	; (800bf8c <vPortValidateInterruptPriority+0x74>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	7afa      	ldrb	r2, [r7, #11]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d20a      	bcs.n	800bf54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	607b      	str	r3, [r7, #4]
}
 800bf50:	bf00      	nop
 800bf52:	e7fe      	b.n	800bf52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf54:	4b0e      	ldr	r3, [pc, #56]	; (800bf90 <vPortValidateInterruptPriority+0x78>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf5c:	4b0d      	ldr	r3, [pc, #52]	; (800bf94 <vPortValidateInterruptPriority+0x7c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d90a      	bls.n	800bf7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	603b      	str	r3, [r7, #0]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <vPortValidateInterruptPriority+0x60>
	}
 800bf7a:	bf00      	nop
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	e000e3f0 	.word	0xe000e3f0
 800bf8c:	20000bc8 	.word	0x20000bc8
 800bf90:	e000ed0c 	.word	0xe000ed0c
 800bf94:	20000bcc 	.word	0x20000bcc

0800bf98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b08a      	sub	sp, #40	; 0x28
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfa4:	f7fe fb62 	bl	800a66c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfa8:	4b5b      	ldr	r3, [pc, #364]	; (800c118 <pvPortMalloc+0x180>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bfb0:	f000 f920 	bl	800c1f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bfb4:	4b59      	ldr	r3, [pc, #356]	; (800c11c <pvPortMalloc+0x184>)
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4013      	ands	r3, r2
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f040 8093 	bne.w	800c0e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d01d      	beq.n	800c004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bfc8:	2208      	movs	r2, #8
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4413      	add	r3, r2
 800bfce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f003 0307 	and.w	r3, r3, #7
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d014      	beq.n	800c004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f023 0307 	bic.w	r3, r3, #7
 800bfe0:	3308      	adds	r3, #8
 800bfe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f003 0307 	and.w	r3, r3, #7
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00a      	beq.n	800c004 <pvPortMalloc+0x6c>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	617b      	str	r3, [r7, #20]
}
 800c000:	bf00      	nop
 800c002:	e7fe      	b.n	800c002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d06e      	beq.n	800c0e8 <pvPortMalloc+0x150>
 800c00a:	4b45      	ldr	r3, [pc, #276]	; (800c120 <pvPortMalloc+0x188>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	429a      	cmp	r2, r3
 800c012:	d869      	bhi.n	800c0e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c014:	4b43      	ldr	r3, [pc, #268]	; (800c124 <pvPortMalloc+0x18c>)
 800c016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c018:	4b42      	ldr	r3, [pc, #264]	; (800c124 <pvPortMalloc+0x18c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c01e:	e004      	b.n	800c02a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d903      	bls.n	800c03c <pvPortMalloc+0xa4>
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1f1      	bne.n	800c020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c03c:	4b36      	ldr	r3, [pc, #216]	; (800c118 <pvPortMalloc+0x180>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c042:	429a      	cmp	r2, r3
 800c044:	d050      	beq.n	800c0e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c046:	6a3b      	ldr	r3, [r7, #32]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2208      	movs	r2, #8
 800c04c:	4413      	add	r3, r2
 800c04e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	1ad2      	subs	r2, r2, r3
 800c060:	2308      	movs	r3, #8
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	429a      	cmp	r2, r3
 800c066:	d91f      	bls.n	800c0a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4413      	add	r3, r2
 800c06e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	f003 0307 	and.w	r3, r3, #7
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00a      	beq.n	800c090 <pvPortMalloc+0xf8>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	613b      	str	r3, [r7, #16]
}
 800c08c:	bf00      	nop
 800c08e:	e7fe      	b.n	800c08e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	685a      	ldr	r2, [r3, #4]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	1ad2      	subs	r2, r2, r3
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0a2:	69b8      	ldr	r0, [r7, #24]
 800c0a4:	f000 f908 	bl	800c2b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0a8:	4b1d      	ldr	r3, [pc, #116]	; (800c120 <pvPortMalloc+0x188>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	4a1b      	ldr	r2, [pc, #108]	; (800c120 <pvPortMalloc+0x188>)
 800c0b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <pvPortMalloc+0x188>)
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	4b1b      	ldr	r3, [pc, #108]	; (800c128 <pvPortMalloc+0x190>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d203      	bcs.n	800c0ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0c2:	4b17      	ldr	r3, [pc, #92]	; (800c120 <pvPortMalloc+0x188>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a18      	ldr	r2, [pc, #96]	; (800c128 <pvPortMalloc+0x190>)
 800c0c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0cc:	685a      	ldr	r2, [r3, #4]
 800c0ce:	4b13      	ldr	r3, [pc, #76]	; (800c11c <pvPortMalloc+0x184>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	431a      	orrs	r2, r3
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c0de:	4b13      	ldr	r3, [pc, #76]	; (800c12c <pvPortMalloc+0x194>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	4a11      	ldr	r2, [pc, #68]	; (800c12c <pvPortMalloc+0x194>)
 800c0e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0e8:	f7fe face 	bl	800a688 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	f003 0307 	and.w	r3, r3, #7
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00a      	beq.n	800c10c <pvPortMalloc+0x174>
	__asm volatile
 800c0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	60fb      	str	r3, [r7, #12]
}
 800c108:	bf00      	nop
 800c10a:	e7fe      	b.n	800c10a <pvPortMalloc+0x172>
	return pvReturn;
 800c10c:	69fb      	ldr	r3, [r7, #28]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3728      	adds	r7, #40	; 0x28
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20003ab8 	.word	0x20003ab8
 800c11c:	20003acc 	.word	0x20003acc
 800c120:	20003abc 	.word	0x20003abc
 800c124:	20003ab0 	.word	0x20003ab0
 800c128:	20003ac0 	.word	0x20003ac0
 800c12c:	20003ac4 	.word	0x20003ac4

0800c130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d04d      	beq.n	800c1de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c142:	2308      	movs	r3, #8
 800c144:	425b      	negs	r3, r3
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	4413      	add	r3, r2
 800c14a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	4b24      	ldr	r3, [pc, #144]	; (800c1e8 <vPortFree+0xb8>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4013      	ands	r3, r2
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10a      	bne.n	800c174 <vPortFree+0x44>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	60fb      	str	r3, [r7, #12]
}
 800c170:	bf00      	nop
 800c172:	e7fe      	b.n	800c172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00a      	beq.n	800c192 <vPortFree+0x62>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	60bb      	str	r3, [r7, #8]
}
 800c18e:	bf00      	nop
 800c190:	e7fe      	b.n	800c190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	685a      	ldr	r2, [r3, #4]
 800c196:	4b14      	ldr	r3, [pc, #80]	; (800c1e8 <vPortFree+0xb8>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4013      	ands	r3, r2
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d01e      	beq.n	800c1de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d11a      	bne.n	800c1de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	685a      	ldr	r2, [r3, #4]
 800c1ac:	4b0e      	ldr	r3, [pc, #56]	; (800c1e8 <vPortFree+0xb8>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	43db      	mvns	r3, r3
 800c1b2:	401a      	ands	r2, r3
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1b8:	f7fe fa58 	bl	800a66c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	685a      	ldr	r2, [r3, #4]
 800c1c0:	4b0a      	ldr	r3, [pc, #40]	; (800c1ec <vPortFree+0xbc>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	4a09      	ldr	r2, [pc, #36]	; (800c1ec <vPortFree+0xbc>)
 800c1c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c1ca:	6938      	ldr	r0, [r7, #16]
 800c1cc:	f000 f874 	bl	800c2b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c1d0:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <vPortFree+0xc0>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	4a06      	ldr	r2, [pc, #24]	; (800c1f0 <vPortFree+0xc0>)
 800c1d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c1da:	f7fe fa55 	bl	800a688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1de:	bf00      	nop
 800c1e0:	3718      	adds	r7, #24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20003acc 	.word	0x20003acc
 800c1ec:	20003abc 	.word	0x20003abc
 800c1f0:	20003ac8 	.word	0x20003ac8

0800c1f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1fa:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800c1fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c200:	4b27      	ldr	r3, [pc, #156]	; (800c2a0 <prvHeapInit+0xac>)
 800c202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f003 0307 	and.w	r3, r3, #7
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00c      	beq.n	800c228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3307      	adds	r3, #7
 800c212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f023 0307 	bic.w	r3, r3, #7
 800c21a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c21c:	68ba      	ldr	r2, [r7, #8]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	4a1f      	ldr	r2, [pc, #124]	; (800c2a0 <prvHeapInit+0xac>)
 800c224:	4413      	add	r3, r2
 800c226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c22c:	4a1d      	ldr	r2, [pc, #116]	; (800c2a4 <prvHeapInit+0xb0>)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c232:	4b1c      	ldr	r3, [pc, #112]	; (800c2a4 <prvHeapInit+0xb0>)
 800c234:	2200      	movs	r2, #0
 800c236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	4413      	add	r3, r2
 800c23e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c240:	2208      	movs	r2, #8
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	1a9b      	subs	r3, r3, r2
 800c246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f023 0307 	bic.w	r3, r3, #7
 800c24e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	4a15      	ldr	r2, [pc, #84]	; (800c2a8 <prvHeapInit+0xb4>)
 800c254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c256:	4b14      	ldr	r3, [pc, #80]	; (800c2a8 <prvHeapInit+0xb4>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2200      	movs	r2, #0
 800c25c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c25e:	4b12      	ldr	r3, [pc, #72]	; (800c2a8 <prvHeapInit+0xb4>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2200      	movs	r2, #0
 800c264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	1ad2      	subs	r2, r2, r3
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c274:	4b0c      	ldr	r3, [pc, #48]	; (800c2a8 <prvHeapInit+0xb4>)
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	4a0a      	ldr	r2, [pc, #40]	; (800c2ac <prvHeapInit+0xb8>)
 800c282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	4a09      	ldr	r2, [pc, #36]	; (800c2b0 <prvHeapInit+0xbc>)
 800c28a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c28c:	4b09      	ldr	r3, [pc, #36]	; (800c2b4 <prvHeapInit+0xc0>)
 800c28e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c292:	601a      	str	r2, [r3, #0]
}
 800c294:	bf00      	nop
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	20000bd0 	.word	0x20000bd0
 800c2a4:	20003ab0 	.word	0x20003ab0
 800c2a8:	20003ab8 	.word	0x20003ab8
 800c2ac:	20003ac0 	.word	0x20003ac0
 800c2b0:	20003abc 	.word	0x20003abc
 800c2b4:	20003acc 	.word	0x20003acc

0800c2b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2c0:	4b28      	ldr	r3, [pc, #160]	; (800c364 <prvInsertBlockIntoFreeList+0xac>)
 800c2c2:	60fb      	str	r3, [r7, #12]
 800c2c4:	e002      	b.n	800c2cc <prvInsertBlockIntoFreeList+0x14>
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	60fb      	str	r3, [r7, #12]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d8f7      	bhi.n	800c2c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d108      	bne.n	800c2fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	441a      	add	r2, r3
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	441a      	add	r2, r3
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d118      	bne.n	800c340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	4b15      	ldr	r3, [pc, #84]	; (800c368 <prvInsertBlockIntoFreeList+0xb0>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	429a      	cmp	r2, r3
 800c318:	d00d      	beq.n	800c336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	441a      	add	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	e008      	b.n	800c348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c336:	4b0c      	ldr	r3, [pc, #48]	; (800c368 <prvInsertBlockIntoFreeList+0xb0>)
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	e003      	b.n	800c348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d002      	beq.n	800c356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c356:	bf00      	nop
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	20003ab0 	.word	0x20003ab0
 800c368:	20003ab8 	.word	0x20003ab8

0800c36c <__errno>:
 800c36c:	4b01      	ldr	r3, [pc, #4]	; (800c374 <__errno+0x8>)
 800c36e:	6818      	ldr	r0, [r3, #0]
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	20000010 	.word	0x20000010

0800c378 <__libc_init_array>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	4d0d      	ldr	r5, [pc, #52]	; (800c3b0 <__libc_init_array+0x38>)
 800c37c:	4c0d      	ldr	r4, [pc, #52]	; (800c3b4 <__libc_init_array+0x3c>)
 800c37e:	1b64      	subs	r4, r4, r5
 800c380:	10a4      	asrs	r4, r4, #2
 800c382:	2600      	movs	r6, #0
 800c384:	42a6      	cmp	r6, r4
 800c386:	d109      	bne.n	800c39c <__libc_init_array+0x24>
 800c388:	4d0b      	ldr	r5, [pc, #44]	; (800c3b8 <__libc_init_array+0x40>)
 800c38a:	4c0c      	ldr	r4, [pc, #48]	; (800c3bc <__libc_init_array+0x44>)
 800c38c:	f002 f892 	bl	800e4b4 <_init>
 800c390:	1b64      	subs	r4, r4, r5
 800c392:	10a4      	asrs	r4, r4, #2
 800c394:	2600      	movs	r6, #0
 800c396:	42a6      	cmp	r6, r4
 800c398:	d105      	bne.n	800c3a6 <__libc_init_array+0x2e>
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
 800c39c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3a0:	4798      	blx	r3
 800c3a2:	3601      	adds	r6, #1
 800c3a4:	e7ee      	b.n	800c384 <__libc_init_array+0xc>
 800c3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3aa:	4798      	blx	r3
 800c3ac:	3601      	adds	r6, #1
 800c3ae:	e7f2      	b.n	800c396 <__libc_init_array+0x1e>
 800c3b0:	0800e8c8 	.word	0x0800e8c8
 800c3b4:	0800e8c8 	.word	0x0800e8c8
 800c3b8:	0800e8c8 	.word	0x0800e8c8
 800c3bc:	0800e8cc 	.word	0x0800e8cc

0800c3c0 <memcpy>:
 800c3c0:	440a      	add	r2, r1
 800c3c2:	4291      	cmp	r1, r2
 800c3c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3c8:	d100      	bne.n	800c3cc <memcpy+0xc>
 800c3ca:	4770      	bx	lr
 800c3cc:	b510      	push	{r4, lr}
 800c3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3d6:	4291      	cmp	r1, r2
 800c3d8:	d1f9      	bne.n	800c3ce <memcpy+0xe>
 800c3da:	bd10      	pop	{r4, pc}

0800c3dc <memset>:
 800c3dc:	4402      	add	r2, r0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d100      	bne.n	800c3e6 <memset+0xa>
 800c3e4:	4770      	bx	lr
 800c3e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ea:	e7f9      	b.n	800c3e0 <memset+0x4>

0800c3ec <siprintf>:
 800c3ec:	b40e      	push	{r1, r2, r3}
 800c3ee:	b500      	push	{lr}
 800c3f0:	b09c      	sub	sp, #112	; 0x70
 800c3f2:	ab1d      	add	r3, sp, #116	; 0x74
 800c3f4:	9002      	str	r0, [sp, #8]
 800c3f6:	9006      	str	r0, [sp, #24]
 800c3f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3fc:	4809      	ldr	r0, [pc, #36]	; (800c424 <siprintf+0x38>)
 800c3fe:	9107      	str	r1, [sp, #28]
 800c400:	9104      	str	r1, [sp, #16]
 800c402:	4909      	ldr	r1, [pc, #36]	; (800c428 <siprintf+0x3c>)
 800c404:	f853 2b04 	ldr.w	r2, [r3], #4
 800c408:	9105      	str	r1, [sp, #20]
 800c40a:	6800      	ldr	r0, [r0, #0]
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	a902      	add	r1, sp, #8
 800c410:	f000 f896 	bl	800c540 <_svfiprintf_r>
 800c414:	9b02      	ldr	r3, [sp, #8]
 800c416:	2200      	movs	r2, #0
 800c418:	701a      	strb	r2, [r3, #0]
 800c41a:	b01c      	add	sp, #112	; 0x70
 800c41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c420:	b003      	add	sp, #12
 800c422:	4770      	bx	lr
 800c424:	20000010 	.word	0x20000010
 800c428:	ffff0208 	.word	0xffff0208

0800c42c <siscanf>:
 800c42c:	b40e      	push	{r1, r2, r3}
 800c42e:	b510      	push	{r4, lr}
 800c430:	b09f      	sub	sp, #124	; 0x7c
 800c432:	ac21      	add	r4, sp, #132	; 0x84
 800c434:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c438:	f854 2b04 	ldr.w	r2, [r4], #4
 800c43c:	9201      	str	r2, [sp, #4]
 800c43e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c442:	9004      	str	r0, [sp, #16]
 800c444:	9008      	str	r0, [sp, #32]
 800c446:	f7f3 fecb 	bl	80001e0 <strlen>
 800c44a:	4b0c      	ldr	r3, [pc, #48]	; (800c47c <siscanf+0x50>)
 800c44c:	9005      	str	r0, [sp, #20]
 800c44e:	9009      	str	r0, [sp, #36]	; 0x24
 800c450:	930d      	str	r3, [sp, #52]	; 0x34
 800c452:	480b      	ldr	r0, [pc, #44]	; (800c480 <siscanf+0x54>)
 800c454:	9a01      	ldr	r2, [sp, #4]
 800c456:	6800      	ldr	r0, [r0, #0]
 800c458:	9403      	str	r4, [sp, #12]
 800c45a:	2300      	movs	r3, #0
 800c45c:	9311      	str	r3, [sp, #68]	; 0x44
 800c45e:	9316      	str	r3, [sp, #88]	; 0x58
 800c460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c464:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c468:	a904      	add	r1, sp, #16
 800c46a:	4623      	mov	r3, r4
 800c46c:	f000 f9c2 	bl	800c7f4 <__ssvfiscanf_r>
 800c470:	b01f      	add	sp, #124	; 0x7c
 800c472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c476:	b003      	add	sp, #12
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	0800c485 	.word	0x0800c485
 800c480:	20000010 	.word	0x20000010

0800c484 <__seofread>:
 800c484:	2000      	movs	r0, #0
 800c486:	4770      	bx	lr

0800c488 <__ssputs_r>:
 800c488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c48c:	688e      	ldr	r6, [r1, #8]
 800c48e:	429e      	cmp	r6, r3
 800c490:	4682      	mov	sl, r0
 800c492:	460c      	mov	r4, r1
 800c494:	4690      	mov	r8, r2
 800c496:	461f      	mov	r7, r3
 800c498:	d838      	bhi.n	800c50c <__ssputs_r+0x84>
 800c49a:	898a      	ldrh	r2, [r1, #12]
 800c49c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4a0:	d032      	beq.n	800c508 <__ssputs_r+0x80>
 800c4a2:	6825      	ldr	r5, [r4, #0]
 800c4a4:	6909      	ldr	r1, [r1, #16]
 800c4a6:	eba5 0901 	sub.w	r9, r5, r1
 800c4aa:	6965      	ldr	r5, [r4, #20]
 800c4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	444b      	add	r3, r9
 800c4b8:	106d      	asrs	r5, r5, #1
 800c4ba:	429d      	cmp	r5, r3
 800c4bc:	bf38      	it	cc
 800c4be:	461d      	movcc	r5, r3
 800c4c0:	0553      	lsls	r3, r2, #21
 800c4c2:	d531      	bpl.n	800c528 <__ssputs_r+0xa0>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	f000 ffe5 	bl	800d494 <_malloc_r>
 800c4ca:	4606      	mov	r6, r0
 800c4cc:	b950      	cbnz	r0, 800c4e4 <__ssputs_r+0x5c>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	f8ca 3000 	str.w	r3, [sl]
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e4:	6921      	ldr	r1, [r4, #16]
 800c4e6:	464a      	mov	r2, r9
 800c4e8:	f7ff ff6a 	bl	800c3c0 <memcpy>
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f6:	81a3      	strh	r3, [r4, #12]
 800c4f8:	6126      	str	r6, [r4, #16]
 800c4fa:	6165      	str	r5, [r4, #20]
 800c4fc:	444e      	add	r6, r9
 800c4fe:	eba5 0509 	sub.w	r5, r5, r9
 800c502:	6026      	str	r6, [r4, #0]
 800c504:	60a5      	str	r5, [r4, #8]
 800c506:	463e      	mov	r6, r7
 800c508:	42be      	cmp	r6, r7
 800c50a:	d900      	bls.n	800c50e <__ssputs_r+0x86>
 800c50c:	463e      	mov	r6, r7
 800c50e:	6820      	ldr	r0, [r4, #0]
 800c510:	4632      	mov	r2, r6
 800c512:	4641      	mov	r1, r8
 800c514:	f000 ff38 	bl	800d388 <memmove>
 800c518:	68a3      	ldr	r3, [r4, #8]
 800c51a:	1b9b      	subs	r3, r3, r6
 800c51c:	60a3      	str	r3, [r4, #8]
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	4433      	add	r3, r6
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	2000      	movs	r0, #0
 800c526:	e7db      	b.n	800c4e0 <__ssputs_r+0x58>
 800c528:	462a      	mov	r2, r5
 800c52a:	f001 f827 	bl	800d57c <_realloc_r>
 800c52e:	4606      	mov	r6, r0
 800c530:	2800      	cmp	r0, #0
 800c532:	d1e1      	bne.n	800c4f8 <__ssputs_r+0x70>
 800c534:	6921      	ldr	r1, [r4, #16]
 800c536:	4650      	mov	r0, sl
 800c538:	f000 ff40 	bl	800d3bc <_free_r>
 800c53c:	e7c7      	b.n	800c4ce <__ssputs_r+0x46>
	...

0800c540 <_svfiprintf_r>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	4698      	mov	r8, r3
 800c546:	898b      	ldrh	r3, [r1, #12]
 800c548:	061b      	lsls	r3, r3, #24
 800c54a:	b09d      	sub	sp, #116	; 0x74
 800c54c:	4607      	mov	r7, r0
 800c54e:	460d      	mov	r5, r1
 800c550:	4614      	mov	r4, r2
 800c552:	d50e      	bpl.n	800c572 <_svfiprintf_r+0x32>
 800c554:	690b      	ldr	r3, [r1, #16]
 800c556:	b963      	cbnz	r3, 800c572 <_svfiprintf_r+0x32>
 800c558:	2140      	movs	r1, #64	; 0x40
 800c55a:	f000 ff9b 	bl	800d494 <_malloc_r>
 800c55e:	6028      	str	r0, [r5, #0]
 800c560:	6128      	str	r0, [r5, #16]
 800c562:	b920      	cbnz	r0, 800c56e <_svfiprintf_r+0x2e>
 800c564:	230c      	movs	r3, #12
 800c566:	603b      	str	r3, [r7, #0]
 800c568:	f04f 30ff 	mov.w	r0, #4294967295
 800c56c:	e0d1      	b.n	800c712 <_svfiprintf_r+0x1d2>
 800c56e:	2340      	movs	r3, #64	; 0x40
 800c570:	616b      	str	r3, [r5, #20]
 800c572:	2300      	movs	r3, #0
 800c574:	9309      	str	r3, [sp, #36]	; 0x24
 800c576:	2320      	movs	r3, #32
 800c578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c57c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c580:	2330      	movs	r3, #48	; 0x30
 800c582:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c72c <_svfiprintf_r+0x1ec>
 800c586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c58a:	f04f 0901 	mov.w	r9, #1
 800c58e:	4623      	mov	r3, r4
 800c590:	469a      	mov	sl, r3
 800c592:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c596:	b10a      	cbz	r2, 800c59c <_svfiprintf_r+0x5c>
 800c598:	2a25      	cmp	r2, #37	; 0x25
 800c59a:	d1f9      	bne.n	800c590 <_svfiprintf_r+0x50>
 800c59c:	ebba 0b04 	subs.w	fp, sl, r4
 800c5a0:	d00b      	beq.n	800c5ba <_svfiprintf_r+0x7a>
 800c5a2:	465b      	mov	r3, fp
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff ff6d 	bl	800c488 <__ssputs_r>
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	f000 80aa 	beq.w	800c708 <_svfiprintf_r+0x1c8>
 800c5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b6:	445a      	add	r2, fp
 800c5b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f000 80a2 	beq.w	800c708 <_svfiprintf_r+0x1c8>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ce:	f10a 0a01 	add.w	sl, sl, #1
 800c5d2:	9304      	str	r3, [sp, #16]
 800c5d4:	9307      	str	r3, [sp, #28]
 800c5d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5da:	931a      	str	r3, [sp, #104]	; 0x68
 800c5dc:	4654      	mov	r4, sl
 800c5de:	2205      	movs	r2, #5
 800c5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e4:	4851      	ldr	r0, [pc, #324]	; (800c72c <_svfiprintf_r+0x1ec>)
 800c5e6:	f7f3 fe03 	bl	80001f0 <memchr>
 800c5ea:	9a04      	ldr	r2, [sp, #16]
 800c5ec:	b9d8      	cbnz	r0, 800c626 <_svfiprintf_r+0xe6>
 800c5ee:	06d0      	lsls	r0, r2, #27
 800c5f0:	bf44      	itt	mi
 800c5f2:	2320      	movmi	r3, #32
 800c5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f8:	0711      	lsls	r1, r2, #28
 800c5fa:	bf44      	itt	mi
 800c5fc:	232b      	movmi	r3, #43	; 0x2b
 800c5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c602:	f89a 3000 	ldrb.w	r3, [sl]
 800c606:	2b2a      	cmp	r3, #42	; 0x2a
 800c608:	d015      	beq.n	800c636 <_svfiprintf_r+0xf6>
 800c60a:	9a07      	ldr	r2, [sp, #28]
 800c60c:	4654      	mov	r4, sl
 800c60e:	2000      	movs	r0, #0
 800c610:	f04f 0c0a 	mov.w	ip, #10
 800c614:	4621      	mov	r1, r4
 800c616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c61a:	3b30      	subs	r3, #48	; 0x30
 800c61c:	2b09      	cmp	r3, #9
 800c61e:	d94e      	bls.n	800c6be <_svfiprintf_r+0x17e>
 800c620:	b1b0      	cbz	r0, 800c650 <_svfiprintf_r+0x110>
 800c622:	9207      	str	r2, [sp, #28]
 800c624:	e014      	b.n	800c650 <_svfiprintf_r+0x110>
 800c626:	eba0 0308 	sub.w	r3, r0, r8
 800c62a:	fa09 f303 	lsl.w	r3, r9, r3
 800c62e:	4313      	orrs	r3, r2
 800c630:	9304      	str	r3, [sp, #16]
 800c632:	46a2      	mov	sl, r4
 800c634:	e7d2      	b.n	800c5dc <_svfiprintf_r+0x9c>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	1d19      	adds	r1, r3, #4
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	9103      	str	r1, [sp, #12]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bfbb      	ittet	lt
 800c642:	425b      	neglt	r3, r3
 800c644:	f042 0202 	orrlt.w	r2, r2, #2
 800c648:	9307      	strge	r3, [sp, #28]
 800c64a:	9307      	strlt	r3, [sp, #28]
 800c64c:	bfb8      	it	lt
 800c64e:	9204      	strlt	r2, [sp, #16]
 800c650:	7823      	ldrb	r3, [r4, #0]
 800c652:	2b2e      	cmp	r3, #46	; 0x2e
 800c654:	d10c      	bne.n	800c670 <_svfiprintf_r+0x130>
 800c656:	7863      	ldrb	r3, [r4, #1]
 800c658:	2b2a      	cmp	r3, #42	; 0x2a
 800c65a:	d135      	bne.n	800c6c8 <_svfiprintf_r+0x188>
 800c65c:	9b03      	ldr	r3, [sp, #12]
 800c65e:	1d1a      	adds	r2, r3, #4
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	9203      	str	r2, [sp, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	bfb8      	it	lt
 800c668:	f04f 33ff 	movlt.w	r3, #4294967295
 800c66c:	3402      	adds	r4, #2
 800c66e:	9305      	str	r3, [sp, #20]
 800c670:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c73c <_svfiprintf_r+0x1fc>
 800c674:	7821      	ldrb	r1, [r4, #0]
 800c676:	2203      	movs	r2, #3
 800c678:	4650      	mov	r0, sl
 800c67a:	f7f3 fdb9 	bl	80001f0 <memchr>
 800c67e:	b140      	cbz	r0, 800c692 <_svfiprintf_r+0x152>
 800c680:	2340      	movs	r3, #64	; 0x40
 800c682:	eba0 000a 	sub.w	r0, r0, sl
 800c686:	fa03 f000 	lsl.w	r0, r3, r0
 800c68a:	9b04      	ldr	r3, [sp, #16]
 800c68c:	4303      	orrs	r3, r0
 800c68e:	3401      	adds	r4, #1
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c696:	4826      	ldr	r0, [pc, #152]	; (800c730 <_svfiprintf_r+0x1f0>)
 800c698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c69c:	2206      	movs	r2, #6
 800c69e:	f7f3 fda7 	bl	80001f0 <memchr>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d038      	beq.n	800c718 <_svfiprintf_r+0x1d8>
 800c6a6:	4b23      	ldr	r3, [pc, #140]	; (800c734 <_svfiprintf_r+0x1f4>)
 800c6a8:	bb1b      	cbnz	r3, 800c6f2 <_svfiprintf_r+0x1b2>
 800c6aa:	9b03      	ldr	r3, [sp, #12]
 800c6ac:	3307      	adds	r3, #7
 800c6ae:	f023 0307 	bic.w	r3, r3, #7
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	9303      	str	r3, [sp, #12]
 800c6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b8:	4433      	add	r3, r6
 800c6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c6bc:	e767      	b.n	800c58e <_svfiprintf_r+0x4e>
 800c6be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	2001      	movs	r0, #1
 800c6c6:	e7a5      	b.n	800c614 <_svfiprintf_r+0xd4>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	3401      	adds	r4, #1
 800c6cc:	9305      	str	r3, [sp, #20]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	f04f 0c0a 	mov.w	ip, #10
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6da:	3a30      	subs	r2, #48	; 0x30
 800c6dc:	2a09      	cmp	r2, #9
 800c6de:	d903      	bls.n	800c6e8 <_svfiprintf_r+0x1a8>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d0c5      	beq.n	800c670 <_svfiprintf_r+0x130>
 800c6e4:	9105      	str	r1, [sp, #20]
 800c6e6:	e7c3      	b.n	800c670 <_svfiprintf_r+0x130>
 800c6e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e7f0      	b.n	800c6d4 <_svfiprintf_r+0x194>
 800c6f2:	ab03      	add	r3, sp, #12
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	462a      	mov	r2, r5
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <_svfiprintf_r+0x1f8>)
 800c6fa:	a904      	add	r1, sp, #16
 800c6fc:	4638      	mov	r0, r7
 800c6fe:	f3af 8000 	nop.w
 800c702:	1c42      	adds	r2, r0, #1
 800c704:	4606      	mov	r6, r0
 800c706:	d1d6      	bne.n	800c6b6 <_svfiprintf_r+0x176>
 800c708:	89ab      	ldrh	r3, [r5, #12]
 800c70a:	065b      	lsls	r3, r3, #25
 800c70c:	f53f af2c 	bmi.w	800c568 <_svfiprintf_r+0x28>
 800c710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c712:	b01d      	add	sp, #116	; 0x74
 800c714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c718:	ab03      	add	r3, sp, #12
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	462a      	mov	r2, r5
 800c71e:	4b06      	ldr	r3, [pc, #24]	; (800c738 <_svfiprintf_r+0x1f8>)
 800c720:	a904      	add	r1, sp, #16
 800c722:	4638      	mov	r0, r7
 800c724:	f000 fa4c 	bl	800cbc0 <_printf_i>
 800c728:	e7eb      	b.n	800c702 <_svfiprintf_r+0x1c2>
 800c72a:	bf00      	nop
 800c72c:	0800e6e0 	.word	0x0800e6e0
 800c730:	0800e6ea 	.word	0x0800e6ea
 800c734:	00000000 	.word	0x00000000
 800c738:	0800c489 	.word	0x0800c489
 800c73c:	0800e6e6 	.word	0x0800e6e6

0800c740 <_sungetc_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	1c4b      	adds	r3, r1, #1
 800c744:	4614      	mov	r4, r2
 800c746:	d103      	bne.n	800c750 <_sungetc_r+0x10>
 800c748:	f04f 35ff 	mov.w	r5, #4294967295
 800c74c:	4628      	mov	r0, r5
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	8993      	ldrh	r3, [r2, #12]
 800c752:	f023 0320 	bic.w	r3, r3, #32
 800c756:	8193      	strh	r3, [r2, #12]
 800c758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c75a:	6852      	ldr	r2, [r2, #4]
 800c75c:	b2cd      	uxtb	r5, r1
 800c75e:	b18b      	cbz	r3, 800c784 <_sungetc_r+0x44>
 800c760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c762:	4293      	cmp	r3, r2
 800c764:	dd08      	ble.n	800c778 <_sungetc_r+0x38>
 800c766:	6823      	ldr	r3, [r4, #0]
 800c768:	1e5a      	subs	r2, r3, #1
 800c76a:	6022      	str	r2, [r4, #0]
 800c76c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c770:	6863      	ldr	r3, [r4, #4]
 800c772:	3301      	adds	r3, #1
 800c774:	6063      	str	r3, [r4, #4]
 800c776:	e7e9      	b.n	800c74c <_sungetc_r+0xc>
 800c778:	4621      	mov	r1, r4
 800c77a:	f000 fdc9 	bl	800d310 <__submore>
 800c77e:	2800      	cmp	r0, #0
 800c780:	d0f1      	beq.n	800c766 <_sungetc_r+0x26>
 800c782:	e7e1      	b.n	800c748 <_sungetc_r+0x8>
 800c784:	6921      	ldr	r1, [r4, #16]
 800c786:	6823      	ldr	r3, [r4, #0]
 800c788:	b151      	cbz	r1, 800c7a0 <_sungetc_r+0x60>
 800c78a:	4299      	cmp	r1, r3
 800c78c:	d208      	bcs.n	800c7a0 <_sungetc_r+0x60>
 800c78e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c792:	42a9      	cmp	r1, r5
 800c794:	d104      	bne.n	800c7a0 <_sungetc_r+0x60>
 800c796:	3b01      	subs	r3, #1
 800c798:	3201      	adds	r2, #1
 800c79a:	6023      	str	r3, [r4, #0]
 800c79c:	6062      	str	r2, [r4, #4]
 800c79e:	e7d5      	b.n	800c74c <_sungetc_r+0xc>
 800c7a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7a8:	6363      	str	r3, [r4, #52]	; 0x34
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7ae:	4623      	mov	r3, r4
 800c7b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c7b4:	6023      	str	r3, [r4, #0]
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e7dc      	b.n	800c774 <_sungetc_r+0x34>

0800c7ba <__ssrefill_r>:
 800c7ba:	b510      	push	{r4, lr}
 800c7bc:	460c      	mov	r4, r1
 800c7be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c7c0:	b169      	cbz	r1, 800c7de <__ssrefill_r+0x24>
 800c7c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7c6:	4299      	cmp	r1, r3
 800c7c8:	d001      	beq.n	800c7ce <__ssrefill_r+0x14>
 800c7ca:	f000 fdf7 	bl	800d3bc <_free_r>
 800c7ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7d0:	6063      	str	r3, [r4, #4]
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	6360      	str	r0, [r4, #52]	; 0x34
 800c7d6:	b113      	cbz	r3, 800c7de <__ssrefill_r+0x24>
 800c7d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c7da:	6023      	str	r3, [r4, #0]
 800c7dc:	bd10      	pop	{r4, pc}
 800c7de:	6923      	ldr	r3, [r4, #16]
 800c7e0:	6023      	str	r3, [r4, #0]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	6063      	str	r3, [r4, #4]
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	f043 0320 	orr.w	r3, r3, #32
 800c7ec:	81a3      	strh	r3, [r4, #12]
 800c7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f2:	e7f3      	b.n	800c7dc <__ssrefill_r+0x22>

0800c7f4 <__ssvfiscanf_r>:
 800c7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c7fe:	2100      	movs	r1, #0
 800c800:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c804:	49a6      	ldr	r1, [pc, #664]	; (800caa0 <__ssvfiscanf_r+0x2ac>)
 800c806:	91a0      	str	r1, [sp, #640]	; 0x280
 800c808:	f10d 0804 	add.w	r8, sp, #4
 800c80c:	49a5      	ldr	r1, [pc, #660]	; (800caa4 <__ssvfiscanf_r+0x2b0>)
 800c80e:	4fa6      	ldr	r7, [pc, #664]	; (800caa8 <__ssvfiscanf_r+0x2b4>)
 800c810:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800caac <__ssvfiscanf_r+0x2b8>
 800c814:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c818:	4606      	mov	r6, r0
 800c81a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	7813      	ldrb	r3, [r2, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 815a 	beq.w	800cada <__ssvfiscanf_r+0x2e6>
 800c826:	5dd9      	ldrb	r1, [r3, r7]
 800c828:	f011 0108 	ands.w	r1, r1, #8
 800c82c:	f102 0501 	add.w	r5, r2, #1
 800c830:	d019      	beq.n	800c866 <__ssvfiscanf_r+0x72>
 800c832:	6863      	ldr	r3, [r4, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	dd0f      	ble.n	800c858 <__ssvfiscanf_r+0x64>
 800c838:	6823      	ldr	r3, [r4, #0]
 800c83a:	781a      	ldrb	r2, [r3, #0]
 800c83c:	5cba      	ldrb	r2, [r7, r2]
 800c83e:	0712      	lsls	r2, r2, #28
 800c840:	d401      	bmi.n	800c846 <__ssvfiscanf_r+0x52>
 800c842:	462a      	mov	r2, r5
 800c844:	e7eb      	b.n	800c81e <__ssvfiscanf_r+0x2a>
 800c846:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c848:	3201      	adds	r2, #1
 800c84a:	9245      	str	r2, [sp, #276]	; 0x114
 800c84c:	6862      	ldr	r2, [r4, #4]
 800c84e:	3301      	adds	r3, #1
 800c850:	3a01      	subs	r2, #1
 800c852:	6062      	str	r2, [r4, #4]
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	e7ec      	b.n	800c832 <__ssvfiscanf_r+0x3e>
 800c858:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c85a:	4621      	mov	r1, r4
 800c85c:	4630      	mov	r0, r6
 800c85e:	4798      	blx	r3
 800c860:	2800      	cmp	r0, #0
 800c862:	d0e9      	beq.n	800c838 <__ssvfiscanf_r+0x44>
 800c864:	e7ed      	b.n	800c842 <__ssvfiscanf_r+0x4e>
 800c866:	2b25      	cmp	r3, #37	; 0x25
 800c868:	d012      	beq.n	800c890 <__ssvfiscanf_r+0x9c>
 800c86a:	469a      	mov	sl, r3
 800c86c:	6863      	ldr	r3, [r4, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f340 8091 	ble.w	800c996 <__ssvfiscanf_r+0x1a2>
 800c874:	6822      	ldr	r2, [r4, #0]
 800c876:	7813      	ldrb	r3, [r2, #0]
 800c878:	4553      	cmp	r3, sl
 800c87a:	f040 812e 	bne.w	800cada <__ssvfiscanf_r+0x2e6>
 800c87e:	6863      	ldr	r3, [r4, #4]
 800c880:	3b01      	subs	r3, #1
 800c882:	6063      	str	r3, [r4, #4]
 800c884:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c886:	3201      	adds	r2, #1
 800c888:	3301      	adds	r3, #1
 800c88a:	6022      	str	r2, [r4, #0]
 800c88c:	9345      	str	r3, [sp, #276]	; 0x114
 800c88e:	e7d8      	b.n	800c842 <__ssvfiscanf_r+0x4e>
 800c890:	9141      	str	r1, [sp, #260]	; 0x104
 800c892:	9143      	str	r1, [sp, #268]	; 0x10c
 800c894:	7853      	ldrb	r3, [r2, #1]
 800c896:	2b2a      	cmp	r3, #42	; 0x2a
 800c898:	bf02      	ittt	eq
 800c89a:	2310      	moveq	r3, #16
 800c89c:	1c95      	addeq	r5, r2, #2
 800c89e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c8a0:	220a      	movs	r2, #10
 800c8a2:	46aa      	mov	sl, r5
 800c8a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c8a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c8ac:	2b09      	cmp	r3, #9
 800c8ae:	d91d      	bls.n	800c8ec <__ssvfiscanf_r+0xf8>
 800c8b0:	487e      	ldr	r0, [pc, #504]	; (800caac <__ssvfiscanf_r+0x2b8>)
 800c8b2:	2203      	movs	r2, #3
 800c8b4:	f7f3 fc9c 	bl	80001f0 <memchr>
 800c8b8:	b140      	cbz	r0, 800c8cc <__ssvfiscanf_r+0xd8>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	eba0 0009 	sub.w	r0, r0, r9
 800c8c0:	fa03 f000 	lsl.w	r0, r3, r0
 800c8c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c8c6:	4318      	orrs	r0, r3
 800c8c8:	9041      	str	r0, [sp, #260]	; 0x104
 800c8ca:	4655      	mov	r5, sl
 800c8cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c8d0:	2b78      	cmp	r3, #120	; 0x78
 800c8d2:	d806      	bhi.n	800c8e2 <__ssvfiscanf_r+0xee>
 800c8d4:	2b57      	cmp	r3, #87	; 0x57
 800c8d6:	d810      	bhi.n	800c8fa <__ssvfiscanf_r+0x106>
 800c8d8:	2b25      	cmp	r3, #37	; 0x25
 800c8da:	d0c6      	beq.n	800c86a <__ssvfiscanf_r+0x76>
 800c8dc:	d856      	bhi.n	800c98c <__ssvfiscanf_r+0x198>
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d064      	beq.n	800c9ac <__ssvfiscanf_r+0x1b8>
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	9347      	str	r3, [sp, #284]	; 0x11c
 800c8e6:	230a      	movs	r3, #10
 800c8e8:	9342      	str	r3, [sp, #264]	; 0x108
 800c8ea:	e071      	b.n	800c9d0 <__ssvfiscanf_r+0x1dc>
 800c8ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c8ee:	fb02 1103 	mla	r1, r2, r3, r1
 800c8f2:	3930      	subs	r1, #48	; 0x30
 800c8f4:	9143      	str	r1, [sp, #268]	; 0x10c
 800c8f6:	4655      	mov	r5, sl
 800c8f8:	e7d3      	b.n	800c8a2 <__ssvfiscanf_r+0xae>
 800c8fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c8fe:	2a20      	cmp	r2, #32
 800c900:	d8ef      	bhi.n	800c8e2 <__ssvfiscanf_r+0xee>
 800c902:	a101      	add	r1, pc, #4	; (adr r1, 800c908 <__ssvfiscanf_r+0x114>)
 800c904:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c908:	0800c9bb 	.word	0x0800c9bb
 800c90c:	0800c8e3 	.word	0x0800c8e3
 800c910:	0800c8e3 	.word	0x0800c8e3
 800c914:	0800ca19 	.word	0x0800ca19
 800c918:	0800c8e3 	.word	0x0800c8e3
 800c91c:	0800c8e3 	.word	0x0800c8e3
 800c920:	0800c8e3 	.word	0x0800c8e3
 800c924:	0800c8e3 	.word	0x0800c8e3
 800c928:	0800c8e3 	.word	0x0800c8e3
 800c92c:	0800c8e3 	.word	0x0800c8e3
 800c930:	0800c8e3 	.word	0x0800c8e3
 800c934:	0800ca2f 	.word	0x0800ca2f
 800c938:	0800ca05 	.word	0x0800ca05
 800c93c:	0800c993 	.word	0x0800c993
 800c940:	0800c993 	.word	0x0800c993
 800c944:	0800c993 	.word	0x0800c993
 800c948:	0800c8e3 	.word	0x0800c8e3
 800c94c:	0800ca09 	.word	0x0800ca09
 800c950:	0800c8e3 	.word	0x0800c8e3
 800c954:	0800c8e3 	.word	0x0800c8e3
 800c958:	0800c8e3 	.word	0x0800c8e3
 800c95c:	0800c8e3 	.word	0x0800c8e3
 800c960:	0800ca3f 	.word	0x0800ca3f
 800c964:	0800ca11 	.word	0x0800ca11
 800c968:	0800c9b3 	.word	0x0800c9b3
 800c96c:	0800c8e3 	.word	0x0800c8e3
 800c970:	0800c8e3 	.word	0x0800c8e3
 800c974:	0800ca3b 	.word	0x0800ca3b
 800c978:	0800c8e3 	.word	0x0800c8e3
 800c97c:	0800ca05 	.word	0x0800ca05
 800c980:	0800c8e3 	.word	0x0800c8e3
 800c984:	0800c8e3 	.word	0x0800c8e3
 800c988:	0800c9bb 	.word	0x0800c9bb
 800c98c:	3b45      	subs	r3, #69	; 0x45
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d8a7      	bhi.n	800c8e2 <__ssvfiscanf_r+0xee>
 800c992:	2305      	movs	r3, #5
 800c994:	e01b      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800c996:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c998:	4621      	mov	r1, r4
 800c99a:	4630      	mov	r0, r6
 800c99c:	4798      	blx	r3
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f43f af68 	beq.w	800c874 <__ssvfiscanf_r+0x80>
 800c9a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	f040 808d 	bne.w	800cac6 <__ssvfiscanf_r+0x2d2>
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b0:	e08f      	b.n	800cad2 <__ssvfiscanf_r+0x2de>
 800c9b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c9b4:	f042 0220 	orr.w	r2, r2, #32
 800c9b8:	9241      	str	r2, [sp, #260]	; 0x104
 800c9ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c9bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9c0:	9241      	str	r2, [sp, #260]	; 0x104
 800c9c2:	2210      	movs	r2, #16
 800c9c4:	2b6f      	cmp	r3, #111	; 0x6f
 800c9c6:	9242      	str	r2, [sp, #264]	; 0x108
 800c9c8:	bf34      	ite	cc
 800c9ca:	2303      	movcc	r3, #3
 800c9cc:	2304      	movcs	r3, #4
 800c9ce:	9347      	str	r3, [sp, #284]	; 0x11c
 800c9d0:	6863      	ldr	r3, [r4, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dd42      	ble.n	800ca5c <__ssvfiscanf_r+0x268>
 800c9d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c9d8:	0659      	lsls	r1, r3, #25
 800c9da:	d404      	bmi.n	800c9e6 <__ssvfiscanf_r+0x1f2>
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	781a      	ldrb	r2, [r3, #0]
 800c9e0:	5cba      	ldrb	r2, [r7, r2]
 800c9e2:	0712      	lsls	r2, r2, #28
 800c9e4:	d441      	bmi.n	800ca6a <__ssvfiscanf_r+0x276>
 800c9e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	dc50      	bgt.n	800ca8e <__ssvfiscanf_r+0x29a>
 800c9ec:	466b      	mov	r3, sp
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	a941      	add	r1, sp, #260	; 0x104
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f000 fa0a 	bl	800ce0c <_scanf_chars>
 800c9f8:	2801      	cmp	r0, #1
 800c9fa:	d06e      	beq.n	800cada <__ssvfiscanf_r+0x2e6>
 800c9fc:	2802      	cmp	r0, #2
 800c9fe:	f47f af20 	bne.w	800c842 <__ssvfiscanf_r+0x4e>
 800ca02:	e7cf      	b.n	800c9a4 <__ssvfiscanf_r+0x1b0>
 800ca04:	220a      	movs	r2, #10
 800ca06:	e7dd      	b.n	800c9c4 <__ssvfiscanf_r+0x1d0>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	9342      	str	r3, [sp, #264]	; 0x108
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	e7de      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800ca10:	2308      	movs	r3, #8
 800ca12:	9342      	str	r3, [sp, #264]	; 0x108
 800ca14:	2304      	movs	r3, #4
 800ca16:	e7da      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800ca18:	4629      	mov	r1, r5
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	f000 fb48 	bl	800d0b0 <__sccl>
 800ca20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca26:	9341      	str	r3, [sp, #260]	; 0x104
 800ca28:	4605      	mov	r5, r0
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e7cf      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800ca2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca34:	9341      	str	r3, [sp, #260]	; 0x104
 800ca36:	2300      	movs	r3, #0
 800ca38:	e7c9      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800ca3a:	2302      	movs	r3, #2
 800ca3c:	e7c7      	b.n	800c9ce <__ssvfiscanf_r+0x1da>
 800ca3e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ca40:	06c3      	lsls	r3, r0, #27
 800ca42:	f53f aefe 	bmi.w	800c842 <__ssvfiscanf_r+0x4e>
 800ca46:	9b00      	ldr	r3, [sp, #0]
 800ca48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca4a:	1d19      	adds	r1, r3, #4
 800ca4c:	9100      	str	r1, [sp, #0]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f010 0f01 	tst.w	r0, #1
 800ca54:	bf14      	ite	ne
 800ca56:	801a      	strhne	r2, [r3, #0]
 800ca58:	601a      	streq	r2, [r3, #0]
 800ca5a:	e6f2      	b.n	800c842 <__ssvfiscanf_r+0x4e>
 800ca5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca5e:	4621      	mov	r1, r4
 800ca60:	4630      	mov	r0, r6
 800ca62:	4798      	blx	r3
 800ca64:	2800      	cmp	r0, #0
 800ca66:	d0b6      	beq.n	800c9d6 <__ssvfiscanf_r+0x1e2>
 800ca68:	e79c      	b.n	800c9a4 <__ssvfiscanf_r+0x1b0>
 800ca6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca6c:	3201      	adds	r2, #1
 800ca6e:	9245      	str	r2, [sp, #276]	; 0x114
 800ca70:	6862      	ldr	r2, [r4, #4]
 800ca72:	3a01      	subs	r2, #1
 800ca74:	2a00      	cmp	r2, #0
 800ca76:	6062      	str	r2, [r4, #4]
 800ca78:	dd02      	ble.n	800ca80 <__ssvfiscanf_r+0x28c>
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	e7ad      	b.n	800c9dc <__ssvfiscanf_r+0x1e8>
 800ca80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca82:	4621      	mov	r1, r4
 800ca84:	4630      	mov	r0, r6
 800ca86:	4798      	blx	r3
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d0a7      	beq.n	800c9dc <__ssvfiscanf_r+0x1e8>
 800ca8c:	e78a      	b.n	800c9a4 <__ssvfiscanf_r+0x1b0>
 800ca8e:	2b04      	cmp	r3, #4
 800ca90:	dc0e      	bgt.n	800cab0 <__ssvfiscanf_r+0x2bc>
 800ca92:	466b      	mov	r3, sp
 800ca94:	4622      	mov	r2, r4
 800ca96:	a941      	add	r1, sp, #260	; 0x104
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f000 fa11 	bl	800cec0 <_scanf_i>
 800ca9e:	e7ab      	b.n	800c9f8 <__ssvfiscanf_r+0x204>
 800caa0:	0800c741 	.word	0x0800c741
 800caa4:	0800c7bb 	.word	0x0800c7bb
 800caa8:	0800e72f 	.word	0x0800e72f
 800caac:	0800e6e6 	.word	0x0800e6e6
 800cab0:	4b0b      	ldr	r3, [pc, #44]	; (800cae0 <__ssvfiscanf_r+0x2ec>)
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f43f aec5 	beq.w	800c842 <__ssvfiscanf_r+0x4e>
 800cab8:	466b      	mov	r3, sp
 800caba:	4622      	mov	r2, r4
 800cabc:	a941      	add	r1, sp, #260	; 0x104
 800cabe:	4630      	mov	r0, r6
 800cac0:	f3af 8000 	nop.w
 800cac4:	e798      	b.n	800c9f8 <__ssvfiscanf_r+0x204>
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cacc:	bf18      	it	ne
 800cace:	f04f 30ff 	movne.w	r0, #4294967295
 800cad2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cada:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cadc:	e7f9      	b.n	800cad2 <__ssvfiscanf_r+0x2de>
 800cade:	bf00      	nop
 800cae0:	00000000 	.word	0x00000000

0800cae4 <_printf_common>:
 800cae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cae8:	4616      	mov	r6, r2
 800caea:	4699      	mov	r9, r3
 800caec:	688a      	ldr	r2, [r1, #8]
 800caee:	690b      	ldr	r3, [r1, #16]
 800caf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800caf4:	4293      	cmp	r3, r2
 800caf6:	bfb8      	it	lt
 800caf8:	4613      	movlt	r3, r2
 800cafa:	6033      	str	r3, [r6, #0]
 800cafc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb00:	4607      	mov	r7, r0
 800cb02:	460c      	mov	r4, r1
 800cb04:	b10a      	cbz	r2, 800cb0a <_printf_common+0x26>
 800cb06:	3301      	adds	r3, #1
 800cb08:	6033      	str	r3, [r6, #0]
 800cb0a:	6823      	ldr	r3, [r4, #0]
 800cb0c:	0699      	lsls	r1, r3, #26
 800cb0e:	bf42      	ittt	mi
 800cb10:	6833      	ldrmi	r3, [r6, #0]
 800cb12:	3302      	addmi	r3, #2
 800cb14:	6033      	strmi	r3, [r6, #0]
 800cb16:	6825      	ldr	r5, [r4, #0]
 800cb18:	f015 0506 	ands.w	r5, r5, #6
 800cb1c:	d106      	bne.n	800cb2c <_printf_common+0x48>
 800cb1e:	f104 0a19 	add.w	sl, r4, #25
 800cb22:	68e3      	ldr	r3, [r4, #12]
 800cb24:	6832      	ldr	r2, [r6, #0]
 800cb26:	1a9b      	subs	r3, r3, r2
 800cb28:	42ab      	cmp	r3, r5
 800cb2a:	dc26      	bgt.n	800cb7a <_printf_common+0x96>
 800cb2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb30:	1e13      	subs	r3, r2, #0
 800cb32:	6822      	ldr	r2, [r4, #0]
 800cb34:	bf18      	it	ne
 800cb36:	2301      	movne	r3, #1
 800cb38:	0692      	lsls	r2, r2, #26
 800cb3a:	d42b      	bmi.n	800cb94 <_printf_common+0xb0>
 800cb3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb40:	4649      	mov	r1, r9
 800cb42:	4638      	mov	r0, r7
 800cb44:	47c0      	blx	r8
 800cb46:	3001      	adds	r0, #1
 800cb48:	d01e      	beq.n	800cb88 <_printf_common+0xa4>
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	68e5      	ldr	r5, [r4, #12]
 800cb4e:	6832      	ldr	r2, [r6, #0]
 800cb50:	f003 0306 	and.w	r3, r3, #6
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	bf08      	it	eq
 800cb58:	1aad      	subeq	r5, r5, r2
 800cb5a:	68a3      	ldr	r3, [r4, #8]
 800cb5c:	6922      	ldr	r2, [r4, #16]
 800cb5e:	bf0c      	ite	eq
 800cb60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb64:	2500      	movne	r5, #0
 800cb66:	4293      	cmp	r3, r2
 800cb68:	bfc4      	itt	gt
 800cb6a:	1a9b      	subgt	r3, r3, r2
 800cb6c:	18ed      	addgt	r5, r5, r3
 800cb6e:	2600      	movs	r6, #0
 800cb70:	341a      	adds	r4, #26
 800cb72:	42b5      	cmp	r5, r6
 800cb74:	d11a      	bne.n	800cbac <_printf_common+0xc8>
 800cb76:	2000      	movs	r0, #0
 800cb78:	e008      	b.n	800cb8c <_printf_common+0xa8>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	4652      	mov	r2, sl
 800cb7e:	4649      	mov	r1, r9
 800cb80:	4638      	mov	r0, r7
 800cb82:	47c0      	blx	r8
 800cb84:	3001      	adds	r0, #1
 800cb86:	d103      	bne.n	800cb90 <_printf_common+0xac>
 800cb88:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb90:	3501      	adds	r5, #1
 800cb92:	e7c6      	b.n	800cb22 <_printf_common+0x3e>
 800cb94:	18e1      	adds	r1, r4, r3
 800cb96:	1c5a      	adds	r2, r3, #1
 800cb98:	2030      	movs	r0, #48	; 0x30
 800cb9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb9e:	4422      	add	r2, r4
 800cba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cba8:	3302      	adds	r3, #2
 800cbaa:	e7c7      	b.n	800cb3c <_printf_common+0x58>
 800cbac:	2301      	movs	r3, #1
 800cbae:	4622      	mov	r2, r4
 800cbb0:	4649      	mov	r1, r9
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	47c0      	blx	r8
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	d0e6      	beq.n	800cb88 <_printf_common+0xa4>
 800cbba:	3601      	adds	r6, #1
 800cbbc:	e7d9      	b.n	800cb72 <_printf_common+0x8e>
	...

0800cbc0 <_printf_i>:
 800cbc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc4:	7e0f      	ldrb	r7, [r1, #24]
 800cbc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cbc8:	2f78      	cmp	r7, #120	; 0x78
 800cbca:	4691      	mov	r9, r2
 800cbcc:	4680      	mov	r8, r0
 800cbce:	460c      	mov	r4, r1
 800cbd0:	469a      	mov	sl, r3
 800cbd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cbd6:	d807      	bhi.n	800cbe8 <_printf_i+0x28>
 800cbd8:	2f62      	cmp	r7, #98	; 0x62
 800cbda:	d80a      	bhi.n	800cbf2 <_printf_i+0x32>
 800cbdc:	2f00      	cmp	r7, #0
 800cbde:	f000 80d8 	beq.w	800cd92 <_printf_i+0x1d2>
 800cbe2:	2f58      	cmp	r7, #88	; 0x58
 800cbe4:	f000 80a3 	beq.w	800cd2e <_printf_i+0x16e>
 800cbe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cbf0:	e03a      	b.n	800cc68 <_printf_i+0xa8>
 800cbf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbf6:	2b15      	cmp	r3, #21
 800cbf8:	d8f6      	bhi.n	800cbe8 <_printf_i+0x28>
 800cbfa:	a101      	add	r1, pc, #4	; (adr r1, 800cc00 <_printf_i+0x40>)
 800cbfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc00:	0800cc59 	.word	0x0800cc59
 800cc04:	0800cc6d 	.word	0x0800cc6d
 800cc08:	0800cbe9 	.word	0x0800cbe9
 800cc0c:	0800cbe9 	.word	0x0800cbe9
 800cc10:	0800cbe9 	.word	0x0800cbe9
 800cc14:	0800cbe9 	.word	0x0800cbe9
 800cc18:	0800cc6d 	.word	0x0800cc6d
 800cc1c:	0800cbe9 	.word	0x0800cbe9
 800cc20:	0800cbe9 	.word	0x0800cbe9
 800cc24:	0800cbe9 	.word	0x0800cbe9
 800cc28:	0800cbe9 	.word	0x0800cbe9
 800cc2c:	0800cd79 	.word	0x0800cd79
 800cc30:	0800cc9d 	.word	0x0800cc9d
 800cc34:	0800cd5b 	.word	0x0800cd5b
 800cc38:	0800cbe9 	.word	0x0800cbe9
 800cc3c:	0800cbe9 	.word	0x0800cbe9
 800cc40:	0800cd9b 	.word	0x0800cd9b
 800cc44:	0800cbe9 	.word	0x0800cbe9
 800cc48:	0800cc9d 	.word	0x0800cc9d
 800cc4c:	0800cbe9 	.word	0x0800cbe9
 800cc50:	0800cbe9 	.word	0x0800cbe9
 800cc54:	0800cd63 	.word	0x0800cd63
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	1d1a      	adds	r2, r3, #4
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	602a      	str	r2, [r5, #0]
 800cc60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e0a3      	b.n	800cdb4 <_printf_i+0x1f4>
 800cc6c:	6820      	ldr	r0, [r4, #0]
 800cc6e:	6829      	ldr	r1, [r5, #0]
 800cc70:	0606      	lsls	r6, r0, #24
 800cc72:	f101 0304 	add.w	r3, r1, #4
 800cc76:	d50a      	bpl.n	800cc8e <_printf_i+0xce>
 800cc78:	680e      	ldr	r6, [r1, #0]
 800cc7a:	602b      	str	r3, [r5, #0]
 800cc7c:	2e00      	cmp	r6, #0
 800cc7e:	da03      	bge.n	800cc88 <_printf_i+0xc8>
 800cc80:	232d      	movs	r3, #45	; 0x2d
 800cc82:	4276      	negs	r6, r6
 800cc84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc88:	485e      	ldr	r0, [pc, #376]	; (800ce04 <_printf_i+0x244>)
 800cc8a:	230a      	movs	r3, #10
 800cc8c:	e019      	b.n	800ccc2 <_printf_i+0x102>
 800cc8e:	680e      	ldr	r6, [r1, #0]
 800cc90:	602b      	str	r3, [r5, #0]
 800cc92:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc96:	bf18      	it	ne
 800cc98:	b236      	sxthne	r6, r6
 800cc9a:	e7ef      	b.n	800cc7c <_printf_i+0xbc>
 800cc9c:	682b      	ldr	r3, [r5, #0]
 800cc9e:	6820      	ldr	r0, [r4, #0]
 800cca0:	1d19      	adds	r1, r3, #4
 800cca2:	6029      	str	r1, [r5, #0]
 800cca4:	0601      	lsls	r1, r0, #24
 800cca6:	d501      	bpl.n	800ccac <_printf_i+0xec>
 800cca8:	681e      	ldr	r6, [r3, #0]
 800ccaa:	e002      	b.n	800ccb2 <_printf_i+0xf2>
 800ccac:	0646      	lsls	r6, r0, #25
 800ccae:	d5fb      	bpl.n	800cca8 <_printf_i+0xe8>
 800ccb0:	881e      	ldrh	r6, [r3, #0]
 800ccb2:	4854      	ldr	r0, [pc, #336]	; (800ce04 <_printf_i+0x244>)
 800ccb4:	2f6f      	cmp	r7, #111	; 0x6f
 800ccb6:	bf0c      	ite	eq
 800ccb8:	2308      	moveq	r3, #8
 800ccba:	230a      	movne	r3, #10
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccc2:	6865      	ldr	r5, [r4, #4]
 800ccc4:	60a5      	str	r5, [r4, #8]
 800ccc6:	2d00      	cmp	r5, #0
 800ccc8:	bfa2      	ittt	ge
 800ccca:	6821      	ldrge	r1, [r4, #0]
 800cccc:	f021 0104 	bicge.w	r1, r1, #4
 800ccd0:	6021      	strge	r1, [r4, #0]
 800ccd2:	b90e      	cbnz	r6, 800ccd8 <_printf_i+0x118>
 800ccd4:	2d00      	cmp	r5, #0
 800ccd6:	d04d      	beq.n	800cd74 <_printf_i+0x1b4>
 800ccd8:	4615      	mov	r5, r2
 800ccda:	fbb6 f1f3 	udiv	r1, r6, r3
 800ccde:	fb03 6711 	mls	r7, r3, r1, r6
 800cce2:	5dc7      	ldrb	r7, [r0, r7]
 800cce4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cce8:	4637      	mov	r7, r6
 800ccea:	42bb      	cmp	r3, r7
 800ccec:	460e      	mov	r6, r1
 800ccee:	d9f4      	bls.n	800ccda <_printf_i+0x11a>
 800ccf0:	2b08      	cmp	r3, #8
 800ccf2:	d10b      	bne.n	800cd0c <_printf_i+0x14c>
 800ccf4:	6823      	ldr	r3, [r4, #0]
 800ccf6:	07de      	lsls	r6, r3, #31
 800ccf8:	d508      	bpl.n	800cd0c <_printf_i+0x14c>
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	6861      	ldr	r1, [r4, #4]
 800ccfe:	4299      	cmp	r1, r3
 800cd00:	bfde      	ittt	le
 800cd02:	2330      	movle	r3, #48	; 0x30
 800cd04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd08:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd0c:	1b52      	subs	r2, r2, r5
 800cd0e:	6122      	str	r2, [r4, #16]
 800cd10:	f8cd a000 	str.w	sl, [sp]
 800cd14:	464b      	mov	r3, r9
 800cd16:	aa03      	add	r2, sp, #12
 800cd18:	4621      	mov	r1, r4
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	f7ff fee2 	bl	800cae4 <_printf_common>
 800cd20:	3001      	adds	r0, #1
 800cd22:	d14c      	bne.n	800cdbe <_printf_i+0x1fe>
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	b004      	add	sp, #16
 800cd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd2e:	4835      	ldr	r0, [pc, #212]	; (800ce04 <_printf_i+0x244>)
 800cd30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cd34:	6829      	ldr	r1, [r5, #0]
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd3c:	6029      	str	r1, [r5, #0]
 800cd3e:	061d      	lsls	r5, r3, #24
 800cd40:	d514      	bpl.n	800cd6c <_printf_i+0x1ac>
 800cd42:	07df      	lsls	r7, r3, #31
 800cd44:	bf44      	itt	mi
 800cd46:	f043 0320 	orrmi.w	r3, r3, #32
 800cd4a:	6023      	strmi	r3, [r4, #0]
 800cd4c:	b91e      	cbnz	r6, 800cd56 <_printf_i+0x196>
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	f023 0320 	bic.w	r3, r3, #32
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	2310      	movs	r3, #16
 800cd58:	e7b0      	b.n	800ccbc <_printf_i+0xfc>
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	f043 0320 	orr.w	r3, r3, #32
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	2378      	movs	r3, #120	; 0x78
 800cd64:	4828      	ldr	r0, [pc, #160]	; (800ce08 <_printf_i+0x248>)
 800cd66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd6a:	e7e3      	b.n	800cd34 <_printf_i+0x174>
 800cd6c:	0659      	lsls	r1, r3, #25
 800cd6e:	bf48      	it	mi
 800cd70:	b2b6      	uxthmi	r6, r6
 800cd72:	e7e6      	b.n	800cd42 <_printf_i+0x182>
 800cd74:	4615      	mov	r5, r2
 800cd76:	e7bb      	b.n	800ccf0 <_printf_i+0x130>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	6826      	ldr	r6, [r4, #0]
 800cd7c:	6961      	ldr	r1, [r4, #20]
 800cd7e:	1d18      	adds	r0, r3, #4
 800cd80:	6028      	str	r0, [r5, #0]
 800cd82:	0635      	lsls	r5, r6, #24
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	d501      	bpl.n	800cd8c <_printf_i+0x1cc>
 800cd88:	6019      	str	r1, [r3, #0]
 800cd8a:	e002      	b.n	800cd92 <_printf_i+0x1d2>
 800cd8c:	0670      	lsls	r0, r6, #25
 800cd8e:	d5fb      	bpl.n	800cd88 <_printf_i+0x1c8>
 800cd90:	8019      	strh	r1, [r3, #0]
 800cd92:	2300      	movs	r3, #0
 800cd94:	6123      	str	r3, [r4, #16]
 800cd96:	4615      	mov	r5, r2
 800cd98:	e7ba      	b.n	800cd10 <_printf_i+0x150>
 800cd9a:	682b      	ldr	r3, [r5, #0]
 800cd9c:	1d1a      	adds	r2, r3, #4
 800cd9e:	602a      	str	r2, [r5, #0]
 800cda0:	681d      	ldr	r5, [r3, #0]
 800cda2:	6862      	ldr	r2, [r4, #4]
 800cda4:	2100      	movs	r1, #0
 800cda6:	4628      	mov	r0, r5
 800cda8:	f7f3 fa22 	bl	80001f0 <memchr>
 800cdac:	b108      	cbz	r0, 800cdb2 <_printf_i+0x1f2>
 800cdae:	1b40      	subs	r0, r0, r5
 800cdb0:	6060      	str	r0, [r4, #4]
 800cdb2:	6863      	ldr	r3, [r4, #4]
 800cdb4:	6123      	str	r3, [r4, #16]
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdbc:	e7a8      	b.n	800cd10 <_printf_i+0x150>
 800cdbe:	6923      	ldr	r3, [r4, #16]
 800cdc0:	462a      	mov	r2, r5
 800cdc2:	4649      	mov	r1, r9
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	47d0      	blx	sl
 800cdc8:	3001      	adds	r0, #1
 800cdca:	d0ab      	beq.n	800cd24 <_printf_i+0x164>
 800cdcc:	6823      	ldr	r3, [r4, #0]
 800cdce:	079b      	lsls	r3, r3, #30
 800cdd0:	d413      	bmi.n	800cdfa <_printf_i+0x23a>
 800cdd2:	68e0      	ldr	r0, [r4, #12]
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	4298      	cmp	r0, r3
 800cdd8:	bfb8      	it	lt
 800cdda:	4618      	movlt	r0, r3
 800cddc:	e7a4      	b.n	800cd28 <_printf_i+0x168>
 800cdde:	2301      	movs	r3, #1
 800cde0:	4632      	mov	r2, r6
 800cde2:	4649      	mov	r1, r9
 800cde4:	4640      	mov	r0, r8
 800cde6:	47d0      	blx	sl
 800cde8:	3001      	adds	r0, #1
 800cdea:	d09b      	beq.n	800cd24 <_printf_i+0x164>
 800cdec:	3501      	adds	r5, #1
 800cdee:	68e3      	ldr	r3, [r4, #12]
 800cdf0:	9903      	ldr	r1, [sp, #12]
 800cdf2:	1a5b      	subs	r3, r3, r1
 800cdf4:	42ab      	cmp	r3, r5
 800cdf6:	dcf2      	bgt.n	800cdde <_printf_i+0x21e>
 800cdf8:	e7eb      	b.n	800cdd2 <_printf_i+0x212>
 800cdfa:	2500      	movs	r5, #0
 800cdfc:	f104 0619 	add.w	r6, r4, #25
 800ce00:	e7f5      	b.n	800cdee <_printf_i+0x22e>
 800ce02:	bf00      	nop
 800ce04:	0800e6f1 	.word	0x0800e6f1
 800ce08:	0800e702 	.word	0x0800e702

0800ce0c <_scanf_chars>:
 800ce0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce10:	4615      	mov	r5, r2
 800ce12:	688a      	ldr	r2, [r1, #8]
 800ce14:	4680      	mov	r8, r0
 800ce16:	460c      	mov	r4, r1
 800ce18:	b932      	cbnz	r2, 800ce28 <_scanf_chars+0x1c>
 800ce1a:	698a      	ldr	r2, [r1, #24]
 800ce1c:	2a00      	cmp	r2, #0
 800ce1e:	bf0c      	ite	eq
 800ce20:	2201      	moveq	r2, #1
 800ce22:	f04f 32ff 	movne.w	r2, #4294967295
 800ce26:	608a      	str	r2, [r1, #8]
 800ce28:	6822      	ldr	r2, [r4, #0]
 800ce2a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cebc <_scanf_chars+0xb0>
 800ce2e:	06d1      	lsls	r1, r2, #27
 800ce30:	bf5f      	itttt	pl
 800ce32:	681a      	ldrpl	r2, [r3, #0]
 800ce34:	1d11      	addpl	r1, r2, #4
 800ce36:	6019      	strpl	r1, [r3, #0]
 800ce38:	6816      	ldrpl	r6, [r2, #0]
 800ce3a:	2700      	movs	r7, #0
 800ce3c:	69a0      	ldr	r0, [r4, #24]
 800ce3e:	b188      	cbz	r0, 800ce64 <_scanf_chars+0x58>
 800ce40:	2801      	cmp	r0, #1
 800ce42:	d107      	bne.n	800ce54 <_scanf_chars+0x48>
 800ce44:	682a      	ldr	r2, [r5, #0]
 800ce46:	7811      	ldrb	r1, [r2, #0]
 800ce48:	6962      	ldr	r2, [r4, #20]
 800ce4a:	5c52      	ldrb	r2, [r2, r1]
 800ce4c:	b952      	cbnz	r2, 800ce64 <_scanf_chars+0x58>
 800ce4e:	2f00      	cmp	r7, #0
 800ce50:	d031      	beq.n	800ceb6 <_scanf_chars+0xaa>
 800ce52:	e022      	b.n	800ce9a <_scanf_chars+0x8e>
 800ce54:	2802      	cmp	r0, #2
 800ce56:	d120      	bne.n	800ce9a <_scanf_chars+0x8e>
 800ce58:	682b      	ldr	r3, [r5, #0]
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ce60:	071b      	lsls	r3, r3, #28
 800ce62:	d41a      	bmi.n	800ce9a <_scanf_chars+0x8e>
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	06da      	lsls	r2, r3, #27
 800ce68:	bf5e      	ittt	pl
 800ce6a:	682b      	ldrpl	r3, [r5, #0]
 800ce6c:	781b      	ldrbpl	r3, [r3, #0]
 800ce6e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ce72:	682a      	ldr	r2, [r5, #0]
 800ce74:	686b      	ldr	r3, [r5, #4]
 800ce76:	3201      	adds	r2, #1
 800ce78:	602a      	str	r2, [r5, #0]
 800ce7a:	68a2      	ldr	r2, [r4, #8]
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	3a01      	subs	r2, #1
 800ce80:	606b      	str	r3, [r5, #4]
 800ce82:	3701      	adds	r7, #1
 800ce84:	60a2      	str	r2, [r4, #8]
 800ce86:	b142      	cbz	r2, 800ce9a <_scanf_chars+0x8e>
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	dcd7      	bgt.n	800ce3c <_scanf_chars+0x30>
 800ce8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce90:	4629      	mov	r1, r5
 800ce92:	4640      	mov	r0, r8
 800ce94:	4798      	blx	r3
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d0d0      	beq.n	800ce3c <_scanf_chars+0x30>
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	f013 0310 	ands.w	r3, r3, #16
 800cea0:	d105      	bne.n	800ceae <_scanf_chars+0xa2>
 800cea2:	68e2      	ldr	r2, [r4, #12]
 800cea4:	3201      	adds	r2, #1
 800cea6:	60e2      	str	r2, [r4, #12]
 800cea8:	69a2      	ldr	r2, [r4, #24]
 800ceaa:	b102      	cbz	r2, 800ceae <_scanf_chars+0xa2>
 800ceac:	7033      	strb	r3, [r6, #0]
 800ceae:	6923      	ldr	r3, [r4, #16]
 800ceb0:	443b      	add	r3, r7
 800ceb2:	6123      	str	r3, [r4, #16]
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceba:	bf00      	nop
 800cebc:	0800e72f 	.word	0x0800e72f

0800cec0 <_scanf_i>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	4698      	mov	r8, r3
 800cec6:	4b76      	ldr	r3, [pc, #472]	; (800d0a0 <_scanf_i+0x1e0>)
 800cec8:	460c      	mov	r4, r1
 800ceca:	4682      	mov	sl, r0
 800cecc:	4616      	mov	r6, r2
 800cece:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ced2:	b087      	sub	sp, #28
 800ced4:	ab03      	add	r3, sp, #12
 800ced6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ceda:	4b72      	ldr	r3, [pc, #456]	; (800d0a4 <_scanf_i+0x1e4>)
 800cedc:	69a1      	ldr	r1, [r4, #24]
 800cede:	4a72      	ldr	r2, [pc, #456]	; (800d0a8 <_scanf_i+0x1e8>)
 800cee0:	2903      	cmp	r1, #3
 800cee2:	bf18      	it	ne
 800cee4:	461a      	movne	r2, r3
 800cee6:	68a3      	ldr	r3, [r4, #8]
 800cee8:	9201      	str	r2, [sp, #4]
 800ceea:	1e5a      	subs	r2, r3, #1
 800ceec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cef0:	bf88      	it	hi
 800cef2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cef6:	4627      	mov	r7, r4
 800cef8:	bf82      	ittt	hi
 800cefa:	eb03 0905 	addhi.w	r9, r3, r5
 800cefe:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf02:	60a3      	strhi	r3, [r4, #8]
 800cf04:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cf08:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cf0c:	bf98      	it	ls
 800cf0e:	f04f 0900 	movls.w	r9, #0
 800cf12:	6023      	str	r3, [r4, #0]
 800cf14:	463d      	mov	r5, r7
 800cf16:	f04f 0b00 	mov.w	fp, #0
 800cf1a:	6831      	ldr	r1, [r6, #0]
 800cf1c:	ab03      	add	r3, sp, #12
 800cf1e:	7809      	ldrb	r1, [r1, #0]
 800cf20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cf24:	2202      	movs	r2, #2
 800cf26:	f7f3 f963 	bl	80001f0 <memchr>
 800cf2a:	b328      	cbz	r0, 800cf78 <_scanf_i+0xb8>
 800cf2c:	f1bb 0f01 	cmp.w	fp, #1
 800cf30:	d159      	bne.n	800cfe6 <_scanf_i+0x126>
 800cf32:	6862      	ldr	r2, [r4, #4]
 800cf34:	b92a      	cbnz	r2, 800cf42 <_scanf_i+0x82>
 800cf36:	6822      	ldr	r2, [r4, #0]
 800cf38:	2308      	movs	r3, #8
 800cf3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf3e:	6063      	str	r3, [r4, #4]
 800cf40:	6022      	str	r2, [r4, #0]
 800cf42:	6822      	ldr	r2, [r4, #0]
 800cf44:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cf48:	6022      	str	r2, [r4, #0]
 800cf4a:	68a2      	ldr	r2, [r4, #8]
 800cf4c:	1e51      	subs	r1, r2, #1
 800cf4e:	60a1      	str	r1, [r4, #8]
 800cf50:	b192      	cbz	r2, 800cf78 <_scanf_i+0xb8>
 800cf52:	6832      	ldr	r2, [r6, #0]
 800cf54:	1c51      	adds	r1, r2, #1
 800cf56:	6031      	str	r1, [r6, #0]
 800cf58:	7812      	ldrb	r2, [r2, #0]
 800cf5a:	f805 2b01 	strb.w	r2, [r5], #1
 800cf5e:	6872      	ldr	r2, [r6, #4]
 800cf60:	3a01      	subs	r2, #1
 800cf62:	2a00      	cmp	r2, #0
 800cf64:	6072      	str	r2, [r6, #4]
 800cf66:	dc07      	bgt.n	800cf78 <_scanf_i+0xb8>
 800cf68:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cf6c:	4631      	mov	r1, r6
 800cf6e:	4650      	mov	r0, sl
 800cf70:	4790      	blx	r2
 800cf72:	2800      	cmp	r0, #0
 800cf74:	f040 8085 	bne.w	800d082 <_scanf_i+0x1c2>
 800cf78:	f10b 0b01 	add.w	fp, fp, #1
 800cf7c:	f1bb 0f03 	cmp.w	fp, #3
 800cf80:	d1cb      	bne.n	800cf1a <_scanf_i+0x5a>
 800cf82:	6863      	ldr	r3, [r4, #4]
 800cf84:	b90b      	cbnz	r3, 800cf8a <_scanf_i+0xca>
 800cf86:	230a      	movs	r3, #10
 800cf88:	6063      	str	r3, [r4, #4]
 800cf8a:	6863      	ldr	r3, [r4, #4]
 800cf8c:	4947      	ldr	r1, [pc, #284]	; (800d0ac <_scanf_i+0x1ec>)
 800cf8e:	6960      	ldr	r0, [r4, #20]
 800cf90:	1ac9      	subs	r1, r1, r3
 800cf92:	f000 f88d 	bl	800d0b0 <__sccl>
 800cf96:	f04f 0b00 	mov.w	fp, #0
 800cf9a:	68a3      	ldr	r3, [r4, #8]
 800cf9c:	6822      	ldr	r2, [r4, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d03d      	beq.n	800d01e <_scanf_i+0x15e>
 800cfa2:	6831      	ldr	r1, [r6, #0]
 800cfa4:	6960      	ldr	r0, [r4, #20]
 800cfa6:	f891 c000 	ldrb.w	ip, [r1]
 800cfaa:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d035      	beq.n	800d01e <_scanf_i+0x15e>
 800cfb2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cfb6:	d124      	bne.n	800d002 <_scanf_i+0x142>
 800cfb8:	0510      	lsls	r0, r2, #20
 800cfba:	d522      	bpl.n	800d002 <_scanf_i+0x142>
 800cfbc:	f10b 0b01 	add.w	fp, fp, #1
 800cfc0:	f1b9 0f00 	cmp.w	r9, #0
 800cfc4:	d003      	beq.n	800cfce <_scanf_i+0x10e>
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	f109 39ff 	add.w	r9, r9, #4294967295
 800cfcc:	60a3      	str	r3, [r4, #8]
 800cfce:	6873      	ldr	r3, [r6, #4]
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	6073      	str	r3, [r6, #4]
 800cfd6:	dd1b      	ble.n	800d010 <_scanf_i+0x150>
 800cfd8:	6833      	ldr	r3, [r6, #0]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	6033      	str	r3, [r6, #0]
 800cfde:	68a3      	ldr	r3, [r4, #8]
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	60a3      	str	r3, [r4, #8]
 800cfe4:	e7d9      	b.n	800cf9a <_scanf_i+0xda>
 800cfe6:	f1bb 0f02 	cmp.w	fp, #2
 800cfea:	d1ae      	bne.n	800cf4a <_scanf_i+0x8a>
 800cfec:	6822      	ldr	r2, [r4, #0]
 800cfee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cff2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cff6:	d1bf      	bne.n	800cf78 <_scanf_i+0xb8>
 800cff8:	2310      	movs	r3, #16
 800cffa:	6063      	str	r3, [r4, #4]
 800cffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d000:	e7a2      	b.n	800cf48 <_scanf_i+0x88>
 800d002:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d006:	6022      	str	r2, [r4, #0]
 800d008:	780b      	ldrb	r3, [r1, #0]
 800d00a:	f805 3b01 	strb.w	r3, [r5], #1
 800d00e:	e7de      	b.n	800cfce <_scanf_i+0x10e>
 800d010:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d014:	4631      	mov	r1, r6
 800d016:	4650      	mov	r0, sl
 800d018:	4798      	blx	r3
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d0df      	beq.n	800cfde <_scanf_i+0x11e>
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	05db      	lsls	r3, r3, #23
 800d022:	d50d      	bpl.n	800d040 <_scanf_i+0x180>
 800d024:	42bd      	cmp	r5, r7
 800d026:	d909      	bls.n	800d03c <_scanf_i+0x17c>
 800d028:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d02c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d030:	4632      	mov	r2, r6
 800d032:	4650      	mov	r0, sl
 800d034:	4798      	blx	r3
 800d036:	f105 39ff 	add.w	r9, r5, #4294967295
 800d03a:	464d      	mov	r5, r9
 800d03c:	42bd      	cmp	r5, r7
 800d03e:	d02d      	beq.n	800d09c <_scanf_i+0x1dc>
 800d040:	6822      	ldr	r2, [r4, #0]
 800d042:	f012 0210 	ands.w	r2, r2, #16
 800d046:	d113      	bne.n	800d070 <_scanf_i+0x1b0>
 800d048:	702a      	strb	r2, [r5, #0]
 800d04a:	6863      	ldr	r3, [r4, #4]
 800d04c:	9e01      	ldr	r6, [sp, #4]
 800d04e:	4639      	mov	r1, r7
 800d050:	4650      	mov	r0, sl
 800d052:	47b0      	blx	r6
 800d054:	6821      	ldr	r1, [r4, #0]
 800d056:	f8d8 3000 	ldr.w	r3, [r8]
 800d05a:	f011 0f20 	tst.w	r1, #32
 800d05e:	d013      	beq.n	800d088 <_scanf_i+0x1c8>
 800d060:	1d1a      	adds	r2, r3, #4
 800d062:	f8c8 2000 	str.w	r2, [r8]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	6018      	str	r0, [r3, #0]
 800d06a:	68e3      	ldr	r3, [r4, #12]
 800d06c:	3301      	adds	r3, #1
 800d06e:	60e3      	str	r3, [r4, #12]
 800d070:	1bed      	subs	r5, r5, r7
 800d072:	44ab      	add	fp, r5
 800d074:	6925      	ldr	r5, [r4, #16]
 800d076:	445d      	add	r5, fp
 800d078:	6125      	str	r5, [r4, #16]
 800d07a:	2000      	movs	r0, #0
 800d07c:	b007      	add	sp, #28
 800d07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d082:	f04f 0b00 	mov.w	fp, #0
 800d086:	e7ca      	b.n	800d01e <_scanf_i+0x15e>
 800d088:	1d1a      	adds	r2, r3, #4
 800d08a:	f8c8 2000 	str.w	r2, [r8]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f011 0f01 	tst.w	r1, #1
 800d094:	bf14      	ite	ne
 800d096:	8018      	strhne	r0, [r3, #0]
 800d098:	6018      	streq	r0, [r3, #0]
 800d09a:	e7e6      	b.n	800d06a <_scanf_i+0x1aa>
 800d09c:	2001      	movs	r0, #1
 800d09e:	e7ed      	b.n	800d07c <_scanf_i+0x1bc>
 800d0a0:	0800e6b4 	.word	0x0800e6b4
 800d0a4:	0800d30d 	.word	0x0800d30d
 800d0a8:	0800d225 	.word	0x0800d225
 800d0ac:	0800e72c 	.word	0x0800e72c

0800d0b0 <__sccl>:
 800d0b0:	b570      	push	{r4, r5, r6, lr}
 800d0b2:	780b      	ldrb	r3, [r1, #0]
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	2b5e      	cmp	r3, #94	; 0x5e
 800d0b8:	bf0b      	itete	eq
 800d0ba:	784b      	ldrbeq	r3, [r1, #1]
 800d0bc:	1c48      	addne	r0, r1, #1
 800d0be:	1c88      	addeq	r0, r1, #2
 800d0c0:	2200      	movne	r2, #0
 800d0c2:	bf08      	it	eq
 800d0c4:	2201      	moveq	r2, #1
 800d0c6:	1e61      	subs	r1, r4, #1
 800d0c8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d0cc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d0d0:	42a9      	cmp	r1, r5
 800d0d2:	d1fb      	bne.n	800d0cc <__sccl+0x1c>
 800d0d4:	b90b      	cbnz	r3, 800d0da <__sccl+0x2a>
 800d0d6:	3801      	subs	r0, #1
 800d0d8:	bd70      	pop	{r4, r5, r6, pc}
 800d0da:	f082 0201 	eor.w	r2, r2, #1
 800d0de:	54e2      	strb	r2, [r4, r3]
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d0e8:	292d      	cmp	r1, #45	; 0x2d
 800d0ea:	d006      	beq.n	800d0fa <__sccl+0x4a>
 800d0ec:	295d      	cmp	r1, #93	; 0x5d
 800d0ee:	d0f3      	beq.n	800d0d8 <__sccl+0x28>
 800d0f0:	b909      	cbnz	r1, 800d0f6 <__sccl+0x46>
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	e7f0      	b.n	800d0d8 <__sccl+0x28>
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	e7f1      	b.n	800d0de <__sccl+0x2e>
 800d0fa:	786e      	ldrb	r6, [r5, #1]
 800d0fc:	2e5d      	cmp	r6, #93	; 0x5d
 800d0fe:	d0fa      	beq.n	800d0f6 <__sccl+0x46>
 800d100:	42b3      	cmp	r3, r6
 800d102:	dcf8      	bgt.n	800d0f6 <__sccl+0x46>
 800d104:	3502      	adds	r5, #2
 800d106:	4619      	mov	r1, r3
 800d108:	3101      	adds	r1, #1
 800d10a:	428e      	cmp	r6, r1
 800d10c:	5462      	strb	r2, [r4, r1]
 800d10e:	dcfb      	bgt.n	800d108 <__sccl+0x58>
 800d110:	1af1      	subs	r1, r6, r3
 800d112:	3901      	subs	r1, #1
 800d114:	1c58      	adds	r0, r3, #1
 800d116:	42b3      	cmp	r3, r6
 800d118:	bfa8      	it	ge
 800d11a:	2100      	movge	r1, #0
 800d11c:	1843      	adds	r3, r0, r1
 800d11e:	e7e0      	b.n	800d0e2 <__sccl+0x32>

0800d120 <_strtol_l.constprop.0>:
 800d120:	2b01      	cmp	r3, #1
 800d122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d126:	d001      	beq.n	800d12c <_strtol_l.constprop.0+0xc>
 800d128:	2b24      	cmp	r3, #36	; 0x24
 800d12a:	d906      	bls.n	800d13a <_strtol_l.constprop.0+0x1a>
 800d12c:	f7ff f91e 	bl	800c36c <__errno>
 800d130:	2316      	movs	r3, #22
 800d132:	6003      	str	r3, [r0, #0]
 800d134:	2000      	movs	r0, #0
 800d136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d220 <_strtol_l.constprop.0+0x100>
 800d13e:	460d      	mov	r5, r1
 800d140:	462e      	mov	r6, r5
 800d142:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d146:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d14a:	f017 0708 	ands.w	r7, r7, #8
 800d14e:	d1f7      	bne.n	800d140 <_strtol_l.constprop.0+0x20>
 800d150:	2c2d      	cmp	r4, #45	; 0x2d
 800d152:	d132      	bne.n	800d1ba <_strtol_l.constprop.0+0x9a>
 800d154:	782c      	ldrb	r4, [r5, #0]
 800d156:	2701      	movs	r7, #1
 800d158:	1cb5      	adds	r5, r6, #2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d05b      	beq.n	800d216 <_strtol_l.constprop.0+0xf6>
 800d15e:	2b10      	cmp	r3, #16
 800d160:	d109      	bne.n	800d176 <_strtol_l.constprop.0+0x56>
 800d162:	2c30      	cmp	r4, #48	; 0x30
 800d164:	d107      	bne.n	800d176 <_strtol_l.constprop.0+0x56>
 800d166:	782c      	ldrb	r4, [r5, #0]
 800d168:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d16c:	2c58      	cmp	r4, #88	; 0x58
 800d16e:	d14d      	bne.n	800d20c <_strtol_l.constprop.0+0xec>
 800d170:	786c      	ldrb	r4, [r5, #1]
 800d172:	2310      	movs	r3, #16
 800d174:	3502      	adds	r5, #2
 800d176:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d17a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d17e:	f04f 0c00 	mov.w	ip, #0
 800d182:	fbb8 f9f3 	udiv	r9, r8, r3
 800d186:	4666      	mov	r6, ip
 800d188:	fb03 8a19 	mls	sl, r3, r9, r8
 800d18c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d190:	f1be 0f09 	cmp.w	lr, #9
 800d194:	d816      	bhi.n	800d1c4 <_strtol_l.constprop.0+0xa4>
 800d196:	4674      	mov	r4, lr
 800d198:	42a3      	cmp	r3, r4
 800d19a:	dd24      	ble.n	800d1e6 <_strtol_l.constprop.0+0xc6>
 800d19c:	f1bc 0f00 	cmp.w	ip, #0
 800d1a0:	db1e      	blt.n	800d1e0 <_strtol_l.constprop.0+0xc0>
 800d1a2:	45b1      	cmp	r9, r6
 800d1a4:	d31c      	bcc.n	800d1e0 <_strtol_l.constprop.0+0xc0>
 800d1a6:	d101      	bne.n	800d1ac <_strtol_l.constprop.0+0x8c>
 800d1a8:	45a2      	cmp	sl, r4
 800d1aa:	db19      	blt.n	800d1e0 <_strtol_l.constprop.0+0xc0>
 800d1ac:	fb06 4603 	mla	r6, r6, r3, r4
 800d1b0:	f04f 0c01 	mov.w	ip, #1
 800d1b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1b8:	e7e8      	b.n	800d18c <_strtol_l.constprop.0+0x6c>
 800d1ba:	2c2b      	cmp	r4, #43	; 0x2b
 800d1bc:	bf04      	itt	eq
 800d1be:	782c      	ldrbeq	r4, [r5, #0]
 800d1c0:	1cb5      	addeq	r5, r6, #2
 800d1c2:	e7ca      	b.n	800d15a <_strtol_l.constprop.0+0x3a>
 800d1c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d1c8:	f1be 0f19 	cmp.w	lr, #25
 800d1cc:	d801      	bhi.n	800d1d2 <_strtol_l.constprop.0+0xb2>
 800d1ce:	3c37      	subs	r4, #55	; 0x37
 800d1d0:	e7e2      	b.n	800d198 <_strtol_l.constprop.0+0x78>
 800d1d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d1d6:	f1be 0f19 	cmp.w	lr, #25
 800d1da:	d804      	bhi.n	800d1e6 <_strtol_l.constprop.0+0xc6>
 800d1dc:	3c57      	subs	r4, #87	; 0x57
 800d1de:	e7db      	b.n	800d198 <_strtol_l.constprop.0+0x78>
 800d1e0:	f04f 3cff 	mov.w	ip, #4294967295
 800d1e4:	e7e6      	b.n	800d1b4 <_strtol_l.constprop.0+0x94>
 800d1e6:	f1bc 0f00 	cmp.w	ip, #0
 800d1ea:	da05      	bge.n	800d1f8 <_strtol_l.constprop.0+0xd8>
 800d1ec:	2322      	movs	r3, #34	; 0x22
 800d1ee:	6003      	str	r3, [r0, #0]
 800d1f0:	4646      	mov	r6, r8
 800d1f2:	b942      	cbnz	r2, 800d206 <_strtol_l.constprop.0+0xe6>
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	e79e      	b.n	800d136 <_strtol_l.constprop.0+0x16>
 800d1f8:	b107      	cbz	r7, 800d1fc <_strtol_l.constprop.0+0xdc>
 800d1fa:	4276      	negs	r6, r6
 800d1fc:	2a00      	cmp	r2, #0
 800d1fe:	d0f9      	beq.n	800d1f4 <_strtol_l.constprop.0+0xd4>
 800d200:	f1bc 0f00 	cmp.w	ip, #0
 800d204:	d000      	beq.n	800d208 <_strtol_l.constprop.0+0xe8>
 800d206:	1e69      	subs	r1, r5, #1
 800d208:	6011      	str	r1, [r2, #0]
 800d20a:	e7f3      	b.n	800d1f4 <_strtol_l.constprop.0+0xd4>
 800d20c:	2430      	movs	r4, #48	; 0x30
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1b1      	bne.n	800d176 <_strtol_l.constprop.0+0x56>
 800d212:	2308      	movs	r3, #8
 800d214:	e7af      	b.n	800d176 <_strtol_l.constprop.0+0x56>
 800d216:	2c30      	cmp	r4, #48	; 0x30
 800d218:	d0a5      	beq.n	800d166 <_strtol_l.constprop.0+0x46>
 800d21a:	230a      	movs	r3, #10
 800d21c:	e7ab      	b.n	800d176 <_strtol_l.constprop.0+0x56>
 800d21e:	bf00      	nop
 800d220:	0800e72f 	.word	0x0800e72f

0800d224 <_strtol_r>:
 800d224:	f7ff bf7c 	b.w	800d120 <_strtol_l.constprop.0>

0800d228 <_strtoul_l.constprop.0>:
 800d228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d22c:	4f36      	ldr	r7, [pc, #216]	; (800d308 <_strtoul_l.constprop.0+0xe0>)
 800d22e:	4686      	mov	lr, r0
 800d230:	460d      	mov	r5, r1
 800d232:	4628      	mov	r0, r5
 800d234:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d238:	5de6      	ldrb	r6, [r4, r7]
 800d23a:	f016 0608 	ands.w	r6, r6, #8
 800d23e:	d1f8      	bne.n	800d232 <_strtoul_l.constprop.0+0xa>
 800d240:	2c2d      	cmp	r4, #45	; 0x2d
 800d242:	d12f      	bne.n	800d2a4 <_strtoul_l.constprop.0+0x7c>
 800d244:	782c      	ldrb	r4, [r5, #0]
 800d246:	2601      	movs	r6, #1
 800d248:	1c85      	adds	r5, r0, #2
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d057      	beq.n	800d2fe <_strtoul_l.constprop.0+0xd6>
 800d24e:	2b10      	cmp	r3, #16
 800d250:	d109      	bne.n	800d266 <_strtoul_l.constprop.0+0x3e>
 800d252:	2c30      	cmp	r4, #48	; 0x30
 800d254:	d107      	bne.n	800d266 <_strtoul_l.constprop.0+0x3e>
 800d256:	7828      	ldrb	r0, [r5, #0]
 800d258:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d25c:	2858      	cmp	r0, #88	; 0x58
 800d25e:	d149      	bne.n	800d2f4 <_strtoul_l.constprop.0+0xcc>
 800d260:	786c      	ldrb	r4, [r5, #1]
 800d262:	2310      	movs	r3, #16
 800d264:	3502      	adds	r5, #2
 800d266:	f04f 38ff 	mov.w	r8, #4294967295
 800d26a:	2700      	movs	r7, #0
 800d26c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d270:	fb03 f908 	mul.w	r9, r3, r8
 800d274:	ea6f 0909 	mvn.w	r9, r9
 800d278:	4638      	mov	r0, r7
 800d27a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d27e:	f1bc 0f09 	cmp.w	ip, #9
 800d282:	d814      	bhi.n	800d2ae <_strtoul_l.constprop.0+0x86>
 800d284:	4664      	mov	r4, ip
 800d286:	42a3      	cmp	r3, r4
 800d288:	dd22      	ble.n	800d2d0 <_strtoul_l.constprop.0+0xa8>
 800d28a:	2f00      	cmp	r7, #0
 800d28c:	db1d      	blt.n	800d2ca <_strtoul_l.constprop.0+0xa2>
 800d28e:	4580      	cmp	r8, r0
 800d290:	d31b      	bcc.n	800d2ca <_strtoul_l.constprop.0+0xa2>
 800d292:	d101      	bne.n	800d298 <_strtoul_l.constprop.0+0x70>
 800d294:	45a1      	cmp	r9, r4
 800d296:	db18      	blt.n	800d2ca <_strtoul_l.constprop.0+0xa2>
 800d298:	fb00 4003 	mla	r0, r0, r3, r4
 800d29c:	2701      	movs	r7, #1
 800d29e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2a2:	e7ea      	b.n	800d27a <_strtoul_l.constprop.0+0x52>
 800d2a4:	2c2b      	cmp	r4, #43	; 0x2b
 800d2a6:	bf04      	itt	eq
 800d2a8:	782c      	ldrbeq	r4, [r5, #0]
 800d2aa:	1c85      	addeq	r5, r0, #2
 800d2ac:	e7cd      	b.n	800d24a <_strtoul_l.constprop.0+0x22>
 800d2ae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d2b2:	f1bc 0f19 	cmp.w	ip, #25
 800d2b6:	d801      	bhi.n	800d2bc <_strtoul_l.constprop.0+0x94>
 800d2b8:	3c37      	subs	r4, #55	; 0x37
 800d2ba:	e7e4      	b.n	800d286 <_strtoul_l.constprop.0+0x5e>
 800d2bc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d2c0:	f1bc 0f19 	cmp.w	ip, #25
 800d2c4:	d804      	bhi.n	800d2d0 <_strtoul_l.constprop.0+0xa8>
 800d2c6:	3c57      	subs	r4, #87	; 0x57
 800d2c8:	e7dd      	b.n	800d286 <_strtoul_l.constprop.0+0x5e>
 800d2ca:	f04f 37ff 	mov.w	r7, #4294967295
 800d2ce:	e7e6      	b.n	800d29e <_strtoul_l.constprop.0+0x76>
 800d2d0:	2f00      	cmp	r7, #0
 800d2d2:	da07      	bge.n	800d2e4 <_strtoul_l.constprop.0+0xbc>
 800d2d4:	2322      	movs	r3, #34	; 0x22
 800d2d6:	f8ce 3000 	str.w	r3, [lr]
 800d2da:	f04f 30ff 	mov.w	r0, #4294967295
 800d2de:	b932      	cbnz	r2, 800d2ee <_strtoul_l.constprop.0+0xc6>
 800d2e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2e4:	b106      	cbz	r6, 800d2e8 <_strtoul_l.constprop.0+0xc0>
 800d2e6:	4240      	negs	r0, r0
 800d2e8:	2a00      	cmp	r2, #0
 800d2ea:	d0f9      	beq.n	800d2e0 <_strtoul_l.constprop.0+0xb8>
 800d2ec:	b107      	cbz	r7, 800d2f0 <_strtoul_l.constprop.0+0xc8>
 800d2ee:	1e69      	subs	r1, r5, #1
 800d2f0:	6011      	str	r1, [r2, #0]
 800d2f2:	e7f5      	b.n	800d2e0 <_strtoul_l.constprop.0+0xb8>
 800d2f4:	2430      	movs	r4, #48	; 0x30
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1b5      	bne.n	800d266 <_strtoul_l.constprop.0+0x3e>
 800d2fa:	2308      	movs	r3, #8
 800d2fc:	e7b3      	b.n	800d266 <_strtoul_l.constprop.0+0x3e>
 800d2fe:	2c30      	cmp	r4, #48	; 0x30
 800d300:	d0a9      	beq.n	800d256 <_strtoul_l.constprop.0+0x2e>
 800d302:	230a      	movs	r3, #10
 800d304:	e7af      	b.n	800d266 <_strtoul_l.constprop.0+0x3e>
 800d306:	bf00      	nop
 800d308:	0800e72f 	.word	0x0800e72f

0800d30c <_strtoul_r>:
 800d30c:	f7ff bf8c 	b.w	800d228 <_strtoul_l.constprop.0>

0800d310 <__submore>:
 800d310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d314:	460c      	mov	r4, r1
 800d316:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d31c:	4299      	cmp	r1, r3
 800d31e:	d11d      	bne.n	800d35c <__submore+0x4c>
 800d320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d324:	f000 f8b6 	bl	800d494 <_malloc_r>
 800d328:	b918      	cbnz	r0, 800d332 <__submore+0x22>
 800d32a:	f04f 30ff 	mov.w	r0, #4294967295
 800d32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d336:	63a3      	str	r3, [r4, #56]	; 0x38
 800d338:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d33c:	6360      	str	r0, [r4, #52]	; 0x34
 800d33e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d342:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d346:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d34a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d34e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d352:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d356:	6020      	str	r0, [r4, #0]
 800d358:	2000      	movs	r0, #0
 800d35a:	e7e8      	b.n	800d32e <__submore+0x1e>
 800d35c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d35e:	0077      	lsls	r7, r6, #1
 800d360:	463a      	mov	r2, r7
 800d362:	f000 f90b 	bl	800d57c <_realloc_r>
 800d366:	4605      	mov	r5, r0
 800d368:	2800      	cmp	r0, #0
 800d36a:	d0de      	beq.n	800d32a <__submore+0x1a>
 800d36c:	eb00 0806 	add.w	r8, r0, r6
 800d370:	4601      	mov	r1, r0
 800d372:	4632      	mov	r2, r6
 800d374:	4640      	mov	r0, r8
 800d376:	f7ff f823 	bl	800c3c0 <memcpy>
 800d37a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d37e:	f8c4 8000 	str.w	r8, [r4]
 800d382:	e7e9      	b.n	800d358 <__submore+0x48>

0800d384 <__retarget_lock_acquire_recursive>:
 800d384:	4770      	bx	lr

0800d386 <__retarget_lock_release_recursive>:
 800d386:	4770      	bx	lr

0800d388 <memmove>:
 800d388:	4288      	cmp	r0, r1
 800d38a:	b510      	push	{r4, lr}
 800d38c:	eb01 0402 	add.w	r4, r1, r2
 800d390:	d902      	bls.n	800d398 <memmove+0x10>
 800d392:	4284      	cmp	r4, r0
 800d394:	4623      	mov	r3, r4
 800d396:	d807      	bhi.n	800d3a8 <memmove+0x20>
 800d398:	1e43      	subs	r3, r0, #1
 800d39a:	42a1      	cmp	r1, r4
 800d39c:	d008      	beq.n	800d3b0 <memmove+0x28>
 800d39e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3a6:	e7f8      	b.n	800d39a <memmove+0x12>
 800d3a8:	4402      	add	r2, r0
 800d3aa:	4601      	mov	r1, r0
 800d3ac:	428a      	cmp	r2, r1
 800d3ae:	d100      	bne.n	800d3b2 <memmove+0x2a>
 800d3b0:	bd10      	pop	{r4, pc}
 800d3b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3ba:	e7f7      	b.n	800d3ac <memmove+0x24>

0800d3bc <_free_r>:
 800d3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3be:	2900      	cmp	r1, #0
 800d3c0:	d044      	beq.n	800d44c <_free_r+0x90>
 800d3c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3c6:	9001      	str	r0, [sp, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f1a1 0404 	sub.w	r4, r1, #4
 800d3ce:	bfb8      	it	lt
 800d3d0:	18e4      	addlt	r4, r4, r3
 800d3d2:	f000 f913 	bl	800d5fc <__malloc_lock>
 800d3d6:	4a1e      	ldr	r2, [pc, #120]	; (800d450 <_free_r+0x94>)
 800d3d8:	9801      	ldr	r0, [sp, #4]
 800d3da:	6813      	ldr	r3, [r2, #0]
 800d3dc:	b933      	cbnz	r3, 800d3ec <_free_r+0x30>
 800d3de:	6063      	str	r3, [r4, #4]
 800d3e0:	6014      	str	r4, [r2, #0]
 800d3e2:	b003      	add	sp, #12
 800d3e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3e8:	f000 b90e 	b.w	800d608 <__malloc_unlock>
 800d3ec:	42a3      	cmp	r3, r4
 800d3ee:	d908      	bls.n	800d402 <_free_r+0x46>
 800d3f0:	6825      	ldr	r5, [r4, #0]
 800d3f2:	1961      	adds	r1, r4, r5
 800d3f4:	428b      	cmp	r3, r1
 800d3f6:	bf01      	itttt	eq
 800d3f8:	6819      	ldreq	r1, [r3, #0]
 800d3fa:	685b      	ldreq	r3, [r3, #4]
 800d3fc:	1949      	addeq	r1, r1, r5
 800d3fe:	6021      	streq	r1, [r4, #0]
 800d400:	e7ed      	b.n	800d3de <_free_r+0x22>
 800d402:	461a      	mov	r2, r3
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	b10b      	cbz	r3, 800d40c <_free_r+0x50>
 800d408:	42a3      	cmp	r3, r4
 800d40a:	d9fa      	bls.n	800d402 <_free_r+0x46>
 800d40c:	6811      	ldr	r1, [r2, #0]
 800d40e:	1855      	adds	r5, r2, r1
 800d410:	42a5      	cmp	r5, r4
 800d412:	d10b      	bne.n	800d42c <_free_r+0x70>
 800d414:	6824      	ldr	r4, [r4, #0]
 800d416:	4421      	add	r1, r4
 800d418:	1854      	adds	r4, r2, r1
 800d41a:	42a3      	cmp	r3, r4
 800d41c:	6011      	str	r1, [r2, #0]
 800d41e:	d1e0      	bne.n	800d3e2 <_free_r+0x26>
 800d420:	681c      	ldr	r4, [r3, #0]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	6053      	str	r3, [r2, #4]
 800d426:	4421      	add	r1, r4
 800d428:	6011      	str	r1, [r2, #0]
 800d42a:	e7da      	b.n	800d3e2 <_free_r+0x26>
 800d42c:	d902      	bls.n	800d434 <_free_r+0x78>
 800d42e:	230c      	movs	r3, #12
 800d430:	6003      	str	r3, [r0, #0]
 800d432:	e7d6      	b.n	800d3e2 <_free_r+0x26>
 800d434:	6825      	ldr	r5, [r4, #0]
 800d436:	1961      	adds	r1, r4, r5
 800d438:	428b      	cmp	r3, r1
 800d43a:	bf04      	itt	eq
 800d43c:	6819      	ldreq	r1, [r3, #0]
 800d43e:	685b      	ldreq	r3, [r3, #4]
 800d440:	6063      	str	r3, [r4, #4]
 800d442:	bf04      	itt	eq
 800d444:	1949      	addeq	r1, r1, r5
 800d446:	6021      	streq	r1, [r4, #0]
 800d448:	6054      	str	r4, [r2, #4]
 800d44a:	e7ca      	b.n	800d3e2 <_free_r+0x26>
 800d44c:	b003      	add	sp, #12
 800d44e:	bd30      	pop	{r4, r5, pc}
 800d450:	20003ad8 	.word	0x20003ad8

0800d454 <sbrk_aligned>:
 800d454:	b570      	push	{r4, r5, r6, lr}
 800d456:	4e0e      	ldr	r6, [pc, #56]	; (800d490 <sbrk_aligned+0x3c>)
 800d458:	460c      	mov	r4, r1
 800d45a:	6831      	ldr	r1, [r6, #0]
 800d45c:	4605      	mov	r5, r0
 800d45e:	b911      	cbnz	r1, 800d466 <sbrk_aligned+0x12>
 800d460:	f000 f8bc 	bl	800d5dc <_sbrk_r>
 800d464:	6030      	str	r0, [r6, #0]
 800d466:	4621      	mov	r1, r4
 800d468:	4628      	mov	r0, r5
 800d46a:	f000 f8b7 	bl	800d5dc <_sbrk_r>
 800d46e:	1c43      	adds	r3, r0, #1
 800d470:	d00a      	beq.n	800d488 <sbrk_aligned+0x34>
 800d472:	1cc4      	adds	r4, r0, #3
 800d474:	f024 0403 	bic.w	r4, r4, #3
 800d478:	42a0      	cmp	r0, r4
 800d47a:	d007      	beq.n	800d48c <sbrk_aligned+0x38>
 800d47c:	1a21      	subs	r1, r4, r0
 800d47e:	4628      	mov	r0, r5
 800d480:	f000 f8ac 	bl	800d5dc <_sbrk_r>
 800d484:	3001      	adds	r0, #1
 800d486:	d101      	bne.n	800d48c <sbrk_aligned+0x38>
 800d488:	f04f 34ff 	mov.w	r4, #4294967295
 800d48c:	4620      	mov	r0, r4
 800d48e:	bd70      	pop	{r4, r5, r6, pc}
 800d490:	20003adc 	.word	0x20003adc

0800d494 <_malloc_r>:
 800d494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d498:	1ccd      	adds	r5, r1, #3
 800d49a:	f025 0503 	bic.w	r5, r5, #3
 800d49e:	3508      	adds	r5, #8
 800d4a0:	2d0c      	cmp	r5, #12
 800d4a2:	bf38      	it	cc
 800d4a4:	250c      	movcc	r5, #12
 800d4a6:	2d00      	cmp	r5, #0
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	db01      	blt.n	800d4b0 <_malloc_r+0x1c>
 800d4ac:	42a9      	cmp	r1, r5
 800d4ae:	d905      	bls.n	800d4bc <_malloc_r+0x28>
 800d4b0:	230c      	movs	r3, #12
 800d4b2:	603b      	str	r3, [r7, #0]
 800d4b4:	2600      	movs	r6, #0
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4bc:	4e2e      	ldr	r6, [pc, #184]	; (800d578 <_malloc_r+0xe4>)
 800d4be:	f000 f89d 	bl	800d5fc <__malloc_lock>
 800d4c2:	6833      	ldr	r3, [r6, #0]
 800d4c4:	461c      	mov	r4, r3
 800d4c6:	bb34      	cbnz	r4, 800d516 <_malloc_r+0x82>
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	4638      	mov	r0, r7
 800d4cc:	f7ff ffc2 	bl	800d454 <sbrk_aligned>
 800d4d0:	1c43      	adds	r3, r0, #1
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	d14d      	bne.n	800d572 <_malloc_r+0xde>
 800d4d6:	6834      	ldr	r4, [r6, #0]
 800d4d8:	4626      	mov	r6, r4
 800d4da:	2e00      	cmp	r6, #0
 800d4dc:	d140      	bne.n	800d560 <_malloc_r+0xcc>
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	4638      	mov	r0, r7
 800d4e4:	eb04 0803 	add.w	r8, r4, r3
 800d4e8:	f000 f878 	bl	800d5dc <_sbrk_r>
 800d4ec:	4580      	cmp	r8, r0
 800d4ee:	d13a      	bne.n	800d566 <_malloc_r+0xd2>
 800d4f0:	6821      	ldr	r1, [r4, #0]
 800d4f2:	3503      	adds	r5, #3
 800d4f4:	1a6d      	subs	r5, r5, r1
 800d4f6:	f025 0503 	bic.w	r5, r5, #3
 800d4fa:	3508      	adds	r5, #8
 800d4fc:	2d0c      	cmp	r5, #12
 800d4fe:	bf38      	it	cc
 800d500:	250c      	movcc	r5, #12
 800d502:	4629      	mov	r1, r5
 800d504:	4638      	mov	r0, r7
 800d506:	f7ff ffa5 	bl	800d454 <sbrk_aligned>
 800d50a:	3001      	adds	r0, #1
 800d50c:	d02b      	beq.n	800d566 <_malloc_r+0xd2>
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	442b      	add	r3, r5
 800d512:	6023      	str	r3, [r4, #0]
 800d514:	e00e      	b.n	800d534 <_malloc_r+0xa0>
 800d516:	6822      	ldr	r2, [r4, #0]
 800d518:	1b52      	subs	r2, r2, r5
 800d51a:	d41e      	bmi.n	800d55a <_malloc_r+0xc6>
 800d51c:	2a0b      	cmp	r2, #11
 800d51e:	d916      	bls.n	800d54e <_malloc_r+0xba>
 800d520:	1961      	adds	r1, r4, r5
 800d522:	42a3      	cmp	r3, r4
 800d524:	6025      	str	r5, [r4, #0]
 800d526:	bf18      	it	ne
 800d528:	6059      	strne	r1, [r3, #4]
 800d52a:	6863      	ldr	r3, [r4, #4]
 800d52c:	bf08      	it	eq
 800d52e:	6031      	streq	r1, [r6, #0]
 800d530:	5162      	str	r2, [r4, r5]
 800d532:	604b      	str	r3, [r1, #4]
 800d534:	4638      	mov	r0, r7
 800d536:	f104 060b 	add.w	r6, r4, #11
 800d53a:	f000 f865 	bl	800d608 <__malloc_unlock>
 800d53e:	f026 0607 	bic.w	r6, r6, #7
 800d542:	1d23      	adds	r3, r4, #4
 800d544:	1af2      	subs	r2, r6, r3
 800d546:	d0b6      	beq.n	800d4b6 <_malloc_r+0x22>
 800d548:	1b9b      	subs	r3, r3, r6
 800d54a:	50a3      	str	r3, [r4, r2]
 800d54c:	e7b3      	b.n	800d4b6 <_malloc_r+0x22>
 800d54e:	6862      	ldr	r2, [r4, #4]
 800d550:	42a3      	cmp	r3, r4
 800d552:	bf0c      	ite	eq
 800d554:	6032      	streq	r2, [r6, #0]
 800d556:	605a      	strne	r2, [r3, #4]
 800d558:	e7ec      	b.n	800d534 <_malloc_r+0xa0>
 800d55a:	4623      	mov	r3, r4
 800d55c:	6864      	ldr	r4, [r4, #4]
 800d55e:	e7b2      	b.n	800d4c6 <_malloc_r+0x32>
 800d560:	4634      	mov	r4, r6
 800d562:	6876      	ldr	r6, [r6, #4]
 800d564:	e7b9      	b.n	800d4da <_malloc_r+0x46>
 800d566:	230c      	movs	r3, #12
 800d568:	603b      	str	r3, [r7, #0]
 800d56a:	4638      	mov	r0, r7
 800d56c:	f000 f84c 	bl	800d608 <__malloc_unlock>
 800d570:	e7a1      	b.n	800d4b6 <_malloc_r+0x22>
 800d572:	6025      	str	r5, [r4, #0]
 800d574:	e7de      	b.n	800d534 <_malloc_r+0xa0>
 800d576:	bf00      	nop
 800d578:	20003ad8 	.word	0x20003ad8

0800d57c <_realloc_r>:
 800d57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d580:	4680      	mov	r8, r0
 800d582:	4614      	mov	r4, r2
 800d584:	460e      	mov	r6, r1
 800d586:	b921      	cbnz	r1, 800d592 <_realloc_r+0x16>
 800d588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d58c:	4611      	mov	r1, r2
 800d58e:	f7ff bf81 	b.w	800d494 <_malloc_r>
 800d592:	b92a      	cbnz	r2, 800d5a0 <_realloc_r+0x24>
 800d594:	f7ff ff12 	bl	800d3bc <_free_r>
 800d598:	4625      	mov	r5, r4
 800d59a:	4628      	mov	r0, r5
 800d59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a0:	f000 f838 	bl	800d614 <_malloc_usable_size_r>
 800d5a4:	4284      	cmp	r4, r0
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	d802      	bhi.n	800d5b0 <_realloc_r+0x34>
 800d5aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5ae:	d812      	bhi.n	800d5d6 <_realloc_r+0x5a>
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	f7ff ff6e 	bl	800d494 <_malloc_r>
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	d0ed      	beq.n	800d59a <_realloc_r+0x1e>
 800d5be:	42bc      	cmp	r4, r7
 800d5c0:	4622      	mov	r2, r4
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	bf28      	it	cs
 800d5c6:	463a      	movcs	r2, r7
 800d5c8:	f7fe fefa 	bl	800c3c0 <memcpy>
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	f7ff fef4 	bl	800d3bc <_free_r>
 800d5d4:	e7e1      	b.n	800d59a <_realloc_r+0x1e>
 800d5d6:	4635      	mov	r5, r6
 800d5d8:	e7df      	b.n	800d59a <_realloc_r+0x1e>
	...

0800d5dc <_sbrk_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	4d06      	ldr	r5, [pc, #24]	; (800d5f8 <_sbrk_r+0x1c>)
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	4608      	mov	r0, r1
 800d5e6:	602b      	str	r3, [r5, #0]
 800d5e8:	f7f5 fce2 	bl	8002fb0 <_sbrk>
 800d5ec:	1c43      	adds	r3, r0, #1
 800d5ee:	d102      	bne.n	800d5f6 <_sbrk_r+0x1a>
 800d5f0:	682b      	ldr	r3, [r5, #0]
 800d5f2:	b103      	cbz	r3, 800d5f6 <_sbrk_r+0x1a>
 800d5f4:	6023      	str	r3, [r4, #0]
 800d5f6:	bd38      	pop	{r3, r4, r5, pc}
 800d5f8:	20003ad0 	.word	0x20003ad0

0800d5fc <__malloc_lock>:
 800d5fc:	4801      	ldr	r0, [pc, #4]	; (800d604 <__malloc_lock+0x8>)
 800d5fe:	f7ff bec1 	b.w	800d384 <__retarget_lock_acquire_recursive>
 800d602:	bf00      	nop
 800d604:	20003ad4 	.word	0x20003ad4

0800d608 <__malloc_unlock>:
 800d608:	4801      	ldr	r0, [pc, #4]	; (800d610 <__malloc_unlock+0x8>)
 800d60a:	f7ff bebc 	b.w	800d386 <__retarget_lock_release_recursive>
 800d60e:	bf00      	nop
 800d610:	20003ad4 	.word	0x20003ad4

0800d614 <_malloc_usable_size_r>:
 800d614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d618:	1f18      	subs	r0, r3, #4
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	bfbc      	itt	lt
 800d61e:	580b      	ldrlt	r3, [r1, r0]
 800d620:	18c0      	addlt	r0, r0, r3
 800d622:	4770      	bx	lr

0800d624 <pow>:
 800d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d626:	ed2d 8b02 	vpush	{d8}
 800d62a:	eeb0 8a40 	vmov.f32	s16, s0
 800d62e:	eef0 8a60 	vmov.f32	s17, s1
 800d632:	ec55 4b11 	vmov	r4, r5, d1
 800d636:	f000 f893 	bl	800d760 <__ieee754_pow>
 800d63a:	4622      	mov	r2, r4
 800d63c:	462b      	mov	r3, r5
 800d63e:	4620      	mov	r0, r4
 800d640:	4629      	mov	r1, r5
 800d642:	ec57 6b10 	vmov	r6, r7, d0
 800d646:	f7f3 fa79 	bl	8000b3c <__aeabi_dcmpun>
 800d64a:	2800      	cmp	r0, #0
 800d64c:	d13b      	bne.n	800d6c6 <pow+0xa2>
 800d64e:	ec51 0b18 	vmov	r0, r1, d8
 800d652:	2200      	movs	r2, #0
 800d654:	2300      	movs	r3, #0
 800d656:	f7f3 fa3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d65a:	b1b8      	cbz	r0, 800d68c <pow+0x68>
 800d65c:	2200      	movs	r2, #0
 800d65e:	2300      	movs	r3, #0
 800d660:	4620      	mov	r0, r4
 800d662:	4629      	mov	r1, r5
 800d664:	f7f3 fa38 	bl	8000ad8 <__aeabi_dcmpeq>
 800d668:	2800      	cmp	r0, #0
 800d66a:	d146      	bne.n	800d6fa <pow+0xd6>
 800d66c:	ec45 4b10 	vmov	d0, r4, r5
 800d670:	f000 fe8f 	bl	800e392 <finite>
 800d674:	b338      	cbz	r0, 800d6c6 <pow+0xa2>
 800d676:	2200      	movs	r2, #0
 800d678:	2300      	movs	r3, #0
 800d67a:	4620      	mov	r0, r4
 800d67c:	4629      	mov	r1, r5
 800d67e:	f7f3 fa35 	bl	8000aec <__aeabi_dcmplt>
 800d682:	b300      	cbz	r0, 800d6c6 <pow+0xa2>
 800d684:	f7fe fe72 	bl	800c36c <__errno>
 800d688:	2322      	movs	r3, #34	; 0x22
 800d68a:	e01b      	b.n	800d6c4 <pow+0xa0>
 800d68c:	ec47 6b10 	vmov	d0, r6, r7
 800d690:	f000 fe7f 	bl	800e392 <finite>
 800d694:	b9e0      	cbnz	r0, 800d6d0 <pow+0xac>
 800d696:	eeb0 0a48 	vmov.f32	s0, s16
 800d69a:	eef0 0a68 	vmov.f32	s1, s17
 800d69e:	f000 fe78 	bl	800e392 <finite>
 800d6a2:	b1a8      	cbz	r0, 800d6d0 <pow+0xac>
 800d6a4:	ec45 4b10 	vmov	d0, r4, r5
 800d6a8:	f000 fe73 	bl	800e392 <finite>
 800d6ac:	b180      	cbz	r0, 800d6d0 <pow+0xac>
 800d6ae:	4632      	mov	r2, r6
 800d6b0:	463b      	mov	r3, r7
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	4639      	mov	r1, r7
 800d6b6:	f7f3 fa41 	bl	8000b3c <__aeabi_dcmpun>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d0e2      	beq.n	800d684 <pow+0x60>
 800d6be:	f7fe fe55 	bl	800c36c <__errno>
 800d6c2:	2321      	movs	r3, #33	; 0x21
 800d6c4:	6003      	str	r3, [r0, #0]
 800d6c6:	ecbd 8b02 	vpop	{d8}
 800d6ca:	ec47 6b10 	vmov	d0, r6, r7
 800d6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	4639      	mov	r1, r7
 800d6d8:	f7f3 f9fe 	bl	8000ad8 <__aeabi_dcmpeq>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d0f2      	beq.n	800d6c6 <pow+0xa2>
 800d6e0:	eeb0 0a48 	vmov.f32	s0, s16
 800d6e4:	eef0 0a68 	vmov.f32	s1, s17
 800d6e8:	f000 fe53 	bl	800e392 <finite>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d0ea      	beq.n	800d6c6 <pow+0xa2>
 800d6f0:	ec45 4b10 	vmov	d0, r4, r5
 800d6f4:	f000 fe4d 	bl	800e392 <finite>
 800d6f8:	e7c3      	b.n	800d682 <pow+0x5e>
 800d6fa:	4f01      	ldr	r7, [pc, #4]	; (800d700 <pow+0xdc>)
 800d6fc:	2600      	movs	r6, #0
 800d6fe:	e7e2      	b.n	800d6c6 <pow+0xa2>
 800d700:	3ff00000 	.word	0x3ff00000

0800d704 <sqrt>:
 800d704:	b538      	push	{r3, r4, r5, lr}
 800d706:	ed2d 8b02 	vpush	{d8}
 800d70a:	ec55 4b10 	vmov	r4, r5, d0
 800d70e:	f000 fd55 	bl	800e1bc <__ieee754_sqrt>
 800d712:	4622      	mov	r2, r4
 800d714:	462b      	mov	r3, r5
 800d716:	4620      	mov	r0, r4
 800d718:	4629      	mov	r1, r5
 800d71a:	eeb0 8a40 	vmov.f32	s16, s0
 800d71e:	eef0 8a60 	vmov.f32	s17, s1
 800d722:	f7f3 fa0b 	bl	8000b3c <__aeabi_dcmpun>
 800d726:	b990      	cbnz	r0, 800d74e <sqrt+0x4a>
 800d728:	2200      	movs	r2, #0
 800d72a:	2300      	movs	r3, #0
 800d72c:	4620      	mov	r0, r4
 800d72e:	4629      	mov	r1, r5
 800d730:	f7f3 f9dc 	bl	8000aec <__aeabi_dcmplt>
 800d734:	b158      	cbz	r0, 800d74e <sqrt+0x4a>
 800d736:	f7fe fe19 	bl	800c36c <__errno>
 800d73a:	2321      	movs	r3, #33	; 0x21
 800d73c:	6003      	str	r3, [r0, #0]
 800d73e:	2200      	movs	r2, #0
 800d740:	2300      	movs	r3, #0
 800d742:	4610      	mov	r0, r2
 800d744:	4619      	mov	r1, r3
 800d746:	f7f3 f889 	bl	800085c <__aeabi_ddiv>
 800d74a:	ec41 0b18 	vmov	d8, r0, r1
 800d74e:	eeb0 0a48 	vmov.f32	s0, s16
 800d752:	eef0 0a68 	vmov.f32	s1, s17
 800d756:	ecbd 8b02 	vpop	{d8}
 800d75a:	bd38      	pop	{r3, r4, r5, pc}
 800d75c:	0000      	movs	r0, r0
	...

0800d760 <__ieee754_pow>:
 800d760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d764:	ed2d 8b06 	vpush	{d8-d10}
 800d768:	b089      	sub	sp, #36	; 0x24
 800d76a:	ed8d 1b00 	vstr	d1, [sp]
 800d76e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d772:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d776:	ea58 0102 	orrs.w	r1, r8, r2
 800d77a:	ec57 6b10 	vmov	r6, r7, d0
 800d77e:	d115      	bne.n	800d7ac <__ieee754_pow+0x4c>
 800d780:	19b3      	adds	r3, r6, r6
 800d782:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d786:	4152      	adcs	r2, r2
 800d788:	4299      	cmp	r1, r3
 800d78a:	4b89      	ldr	r3, [pc, #548]	; (800d9b0 <__ieee754_pow+0x250>)
 800d78c:	4193      	sbcs	r3, r2
 800d78e:	f080 84d2 	bcs.w	800e136 <__ieee754_pow+0x9d6>
 800d792:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d796:	4630      	mov	r0, r6
 800d798:	4639      	mov	r1, r7
 800d79a:	f7f2 fd7f 	bl	800029c <__adddf3>
 800d79e:	ec41 0b10 	vmov	d0, r0, r1
 800d7a2:	b009      	add	sp, #36	; 0x24
 800d7a4:	ecbd 8b06 	vpop	{d8-d10}
 800d7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ac:	4b81      	ldr	r3, [pc, #516]	; (800d9b4 <__ieee754_pow+0x254>)
 800d7ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d7b2:	429c      	cmp	r4, r3
 800d7b4:	ee10 aa10 	vmov	sl, s0
 800d7b8:	463d      	mov	r5, r7
 800d7ba:	dc06      	bgt.n	800d7ca <__ieee754_pow+0x6a>
 800d7bc:	d101      	bne.n	800d7c2 <__ieee754_pow+0x62>
 800d7be:	2e00      	cmp	r6, #0
 800d7c0:	d1e7      	bne.n	800d792 <__ieee754_pow+0x32>
 800d7c2:	4598      	cmp	r8, r3
 800d7c4:	dc01      	bgt.n	800d7ca <__ieee754_pow+0x6a>
 800d7c6:	d10f      	bne.n	800d7e8 <__ieee754_pow+0x88>
 800d7c8:	b172      	cbz	r2, 800d7e8 <__ieee754_pow+0x88>
 800d7ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d7ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d7d2:	ea55 050a 	orrs.w	r5, r5, sl
 800d7d6:	d1dc      	bne.n	800d792 <__ieee754_pow+0x32>
 800d7d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d7dc:	18db      	adds	r3, r3, r3
 800d7de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d7e2:	4152      	adcs	r2, r2
 800d7e4:	429d      	cmp	r5, r3
 800d7e6:	e7d0      	b.n	800d78a <__ieee754_pow+0x2a>
 800d7e8:	2d00      	cmp	r5, #0
 800d7ea:	da3b      	bge.n	800d864 <__ieee754_pow+0x104>
 800d7ec:	4b72      	ldr	r3, [pc, #456]	; (800d9b8 <__ieee754_pow+0x258>)
 800d7ee:	4598      	cmp	r8, r3
 800d7f0:	dc51      	bgt.n	800d896 <__ieee754_pow+0x136>
 800d7f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d7f6:	4598      	cmp	r8, r3
 800d7f8:	f340 84ac 	ble.w	800e154 <__ieee754_pow+0x9f4>
 800d7fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d800:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d804:	2b14      	cmp	r3, #20
 800d806:	dd0f      	ble.n	800d828 <__ieee754_pow+0xc8>
 800d808:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d80c:	fa22 f103 	lsr.w	r1, r2, r3
 800d810:	fa01 f303 	lsl.w	r3, r1, r3
 800d814:	4293      	cmp	r3, r2
 800d816:	f040 849d 	bne.w	800e154 <__ieee754_pow+0x9f4>
 800d81a:	f001 0101 	and.w	r1, r1, #1
 800d81e:	f1c1 0302 	rsb	r3, r1, #2
 800d822:	9304      	str	r3, [sp, #16]
 800d824:	b182      	cbz	r2, 800d848 <__ieee754_pow+0xe8>
 800d826:	e05f      	b.n	800d8e8 <__ieee754_pow+0x188>
 800d828:	2a00      	cmp	r2, #0
 800d82a:	d15b      	bne.n	800d8e4 <__ieee754_pow+0x184>
 800d82c:	f1c3 0314 	rsb	r3, r3, #20
 800d830:	fa48 f103 	asr.w	r1, r8, r3
 800d834:	fa01 f303 	lsl.w	r3, r1, r3
 800d838:	4543      	cmp	r3, r8
 800d83a:	f040 8488 	bne.w	800e14e <__ieee754_pow+0x9ee>
 800d83e:	f001 0101 	and.w	r1, r1, #1
 800d842:	f1c1 0302 	rsb	r3, r1, #2
 800d846:	9304      	str	r3, [sp, #16]
 800d848:	4b5c      	ldr	r3, [pc, #368]	; (800d9bc <__ieee754_pow+0x25c>)
 800d84a:	4598      	cmp	r8, r3
 800d84c:	d132      	bne.n	800d8b4 <__ieee754_pow+0x154>
 800d84e:	f1b9 0f00 	cmp.w	r9, #0
 800d852:	f280 8478 	bge.w	800e146 <__ieee754_pow+0x9e6>
 800d856:	4959      	ldr	r1, [pc, #356]	; (800d9bc <__ieee754_pow+0x25c>)
 800d858:	4632      	mov	r2, r6
 800d85a:	463b      	mov	r3, r7
 800d85c:	2000      	movs	r0, #0
 800d85e:	f7f2 fffd 	bl	800085c <__aeabi_ddiv>
 800d862:	e79c      	b.n	800d79e <__ieee754_pow+0x3e>
 800d864:	2300      	movs	r3, #0
 800d866:	9304      	str	r3, [sp, #16]
 800d868:	2a00      	cmp	r2, #0
 800d86a:	d13d      	bne.n	800d8e8 <__ieee754_pow+0x188>
 800d86c:	4b51      	ldr	r3, [pc, #324]	; (800d9b4 <__ieee754_pow+0x254>)
 800d86e:	4598      	cmp	r8, r3
 800d870:	d1ea      	bne.n	800d848 <__ieee754_pow+0xe8>
 800d872:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d876:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d87a:	ea53 030a 	orrs.w	r3, r3, sl
 800d87e:	f000 845a 	beq.w	800e136 <__ieee754_pow+0x9d6>
 800d882:	4b4f      	ldr	r3, [pc, #316]	; (800d9c0 <__ieee754_pow+0x260>)
 800d884:	429c      	cmp	r4, r3
 800d886:	dd08      	ble.n	800d89a <__ieee754_pow+0x13a>
 800d888:	f1b9 0f00 	cmp.w	r9, #0
 800d88c:	f2c0 8457 	blt.w	800e13e <__ieee754_pow+0x9de>
 800d890:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d894:	e783      	b.n	800d79e <__ieee754_pow+0x3e>
 800d896:	2302      	movs	r3, #2
 800d898:	e7e5      	b.n	800d866 <__ieee754_pow+0x106>
 800d89a:	f1b9 0f00 	cmp.w	r9, #0
 800d89e:	f04f 0000 	mov.w	r0, #0
 800d8a2:	f04f 0100 	mov.w	r1, #0
 800d8a6:	f6bf af7a 	bge.w	800d79e <__ieee754_pow+0x3e>
 800d8aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d8ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d8b2:	e774      	b.n	800d79e <__ieee754_pow+0x3e>
 800d8b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d8b8:	d106      	bne.n	800d8c8 <__ieee754_pow+0x168>
 800d8ba:	4632      	mov	r2, r6
 800d8bc:	463b      	mov	r3, r7
 800d8be:	4630      	mov	r0, r6
 800d8c0:	4639      	mov	r1, r7
 800d8c2:	f7f2 fea1 	bl	8000608 <__aeabi_dmul>
 800d8c6:	e76a      	b.n	800d79e <__ieee754_pow+0x3e>
 800d8c8:	4b3e      	ldr	r3, [pc, #248]	; (800d9c4 <__ieee754_pow+0x264>)
 800d8ca:	4599      	cmp	r9, r3
 800d8cc:	d10c      	bne.n	800d8e8 <__ieee754_pow+0x188>
 800d8ce:	2d00      	cmp	r5, #0
 800d8d0:	db0a      	blt.n	800d8e8 <__ieee754_pow+0x188>
 800d8d2:	ec47 6b10 	vmov	d0, r6, r7
 800d8d6:	b009      	add	sp, #36	; 0x24
 800d8d8:	ecbd 8b06 	vpop	{d8-d10}
 800d8dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e0:	f000 bc6c 	b.w	800e1bc <__ieee754_sqrt>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	9304      	str	r3, [sp, #16]
 800d8e8:	ec47 6b10 	vmov	d0, r6, r7
 800d8ec:	f000 fd48 	bl	800e380 <fabs>
 800d8f0:	ec51 0b10 	vmov	r0, r1, d0
 800d8f4:	f1ba 0f00 	cmp.w	sl, #0
 800d8f8:	d129      	bne.n	800d94e <__ieee754_pow+0x1ee>
 800d8fa:	b124      	cbz	r4, 800d906 <__ieee754_pow+0x1a6>
 800d8fc:	4b2f      	ldr	r3, [pc, #188]	; (800d9bc <__ieee754_pow+0x25c>)
 800d8fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d902:	429a      	cmp	r2, r3
 800d904:	d123      	bne.n	800d94e <__ieee754_pow+0x1ee>
 800d906:	f1b9 0f00 	cmp.w	r9, #0
 800d90a:	da05      	bge.n	800d918 <__ieee754_pow+0x1b8>
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	2000      	movs	r0, #0
 800d912:	492a      	ldr	r1, [pc, #168]	; (800d9bc <__ieee754_pow+0x25c>)
 800d914:	f7f2 ffa2 	bl	800085c <__aeabi_ddiv>
 800d918:	2d00      	cmp	r5, #0
 800d91a:	f6bf af40 	bge.w	800d79e <__ieee754_pow+0x3e>
 800d91e:	9b04      	ldr	r3, [sp, #16]
 800d920:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d924:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d928:	4323      	orrs	r3, r4
 800d92a:	d108      	bne.n	800d93e <__ieee754_pow+0x1de>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	4610      	mov	r0, r2
 800d932:	4619      	mov	r1, r3
 800d934:	f7f2 fcb0 	bl	8000298 <__aeabi_dsub>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	e78f      	b.n	800d85e <__ieee754_pow+0xfe>
 800d93e:	9b04      	ldr	r3, [sp, #16]
 800d940:	2b01      	cmp	r3, #1
 800d942:	f47f af2c 	bne.w	800d79e <__ieee754_pow+0x3e>
 800d946:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d94a:	4619      	mov	r1, r3
 800d94c:	e727      	b.n	800d79e <__ieee754_pow+0x3e>
 800d94e:	0feb      	lsrs	r3, r5, #31
 800d950:	3b01      	subs	r3, #1
 800d952:	9306      	str	r3, [sp, #24]
 800d954:	9a06      	ldr	r2, [sp, #24]
 800d956:	9b04      	ldr	r3, [sp, #16]
 800d958:	4313      	orrs	r3, r2
 800d95a:	d102      	bne.n	800d962 <__ieee754_pow+0x202>
 800d95c:	4632      	mov	r2, r6
 800d95e:	463b      	mov	r3, r7
 800d960:	e7e6      	b.n	800d930 <__ieee754_pow+0x1d0>
 800d962:	4b19      	ldr	r3, [pc, #100]	; (800d9c8 <__ieee754_pow+0x268>)
 800d964:	4598      	cmp	r8, r3
 800d966:	f340 80fb 	ble.w	800db60 <__ieee754_pow+0x400>
 800d96a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d96e:	4598      	cmp	r8, r3
 800d970:	4b13      	ldr	r3, [pc, #76]	; (800d9c0 <__ieee754_pow+0x260>)
 800d972:	dd0c      	ble.n	800d98e <__ieee754_pow+0x22e>
 800d974:	429c      	cmp	r4, r3
 800d976:	dc0f      	bgt.n	800d998 <__ieee754_pow+0x238>
 800d978:	f1b9 0f00 	cmp.w	r9, #0
 800d97c:	da0f      	bge.n	800d99e <__ieee754_pow+0x23e>
 800d97e:	2000      	movs	r0, #0
 800d980:	b009      	add	sp, #36	; 0x24
 800d982:	ecbd 8b06 	vpop	{d8-d10}
 800d986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98a:	f000 bcf0 	b.w	800e36e <__math_oflow>
 800d98e:	429c      	cmp	r4, r3
 800d990:	dbf2      	blt.n	800d978 <__ieee754_pow+0x218>
 800d992:	4b0a      	ldr	r3, [pc, #40]	; (800d9bc <__ieee754_pow+0x25c>)
 800d994:	429c      	cmp	r4, r3
 800d996:	dd19      	ble.n	800d9cc <__ieee754_pow+0x26c>
 800d998:	f1b9 0f00 	cmp.w	r9, #0
 800d99c:	dcef      	bgt.n	800d97e <__ieee754_pow+0x21e>
 800d99e:	2000      	movs	r0, #0
 800d9a0:	b009      	add	sp, #36	; 0x24
 800d9a2:	ecbd 8b06 	vpop	{d8-d10}
 800d9a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9aa:	f000 bcd7 	b.w	800e35c <__math_uflow>
 800d9ae:	bf00      	nop
 800d9b0:	fff00000 	.word	0xfff00000
 800d9b4:	7ff00000 	.word	0x7ff00000
 800d9b8:	433fffff 	.word	0x433fffff
 800d9bc:	3ff00000 	.word	0x3ff00000
 800d9c0:	3fefffff 	.word	0x3fefffff
 800d9c4:	3fe00000 	.word	0x3fe00000
 800d9c8:	41e00000 	.word	0x41e00000
 800d9cc:	4b60      	ldr	r3, [pc, #384]	; (800db50 <__ieee754_pow+0x3f0>)
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f7f2 fc62 	bl	8000298 <__aeabi_dsub>
 800d9d4:	a354      	add	r3, pc, #336	; (adr r3, 800db28 <__ieee754_pow+0x3c8>)
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	4604      	mov	r4, r0
 800d9dc:	460d      	mov	r5, r1
 800d9de:	f7f2 fe13 	bl	8000608 <__aeabi_dmul>
 800d9e2:	a353      	add	r3, pc, #332	; (adr r3, 800db30 <__ieee754_pow+0x3d0>)
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	460f      	mov	r7, r1
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	4629      	mov	r1, r5
 800d9f0:	f7f2 fe0a 	bl	8000608 <__aeabi_dmul>
 800d9f4:	4b57      	ldr	r3, [pc, #348]	; (800db54 <__ieee754_pow+0x3f4>)
 800d9f6:	4682      	mov	sl, r0
 800d9f8:	468b      	mov	fp, r1
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	4629      	mov	r1, r5
 800da00:	f7f2 fe02 	bl	8000608 <__aeabi_dmul>
 800da04:	4602      	mov	r2, r0
 800da06:	460b      	mov	r3, r1
 800da08:	a14b      	add	r1, pc, #300	; (adr r1, 800db38 <__ieee754_pow+0x3d8>)
 800da0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da0e:	f7f2 fc43 	bl	8000298 <__aeabi_dsub>
 800da12:	4622      	mov	r2, r4
 800da14:	462b      	mov	r3, r5
 800da16:	f7f2 fdf7 	bl	8000608 <__aeabi_dmul>
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	2000      	movs	r0, #0
 800da20:	494d      	ldr	r1, [pc, #308]	; (800db58 <__ieee754_pow+0x3f8>)
 800da22:	f7f2 fc39 	bl	8000298 <__aeabi_dsub>
 800da26:	4622      	mov	r2, r4
 800da28:	4680      	mov	r8, r0
 800da2a:	4689      	mov	r9, r1
 800da2c:	462b      	mov	r3, r5
 800da2e:	4620      	mov	r0, r4
 800da30:	4629      	mov	r1, r5
 800da32:	f7f2 fde9 	bl	8000608 <__aeabi_dmul>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	4640      	mov	r0, r8
 800da3c:	4649      	mov	r1, r9
 800da3e:	f7f2 fde3 	bl	8000608 <__aeabi_dmul>
 800da42:	a33f      	add	r3, pc, #252	; (adr r3, 800db40 <__ieee754_pow+0x3e0>)
 800da44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da48:	f7f2 fdde 	bl	8000608 <__aeabi_dmul>
 800da4c:	4602      	mov	r2, r0
 800da4e:	460b      	mov	r3, r1
 800da50:	4650      	mov	r0, sl
 800da52:	4659      	mov	r1, fp
 800da54:	f7f2 fc20 	bl	8000298 <__aeabi_dsub>
 800da58:	4602      	mov	r2, r0
 800da5a:	460b      	mov	r3, r1
 800da5c:	4680      	mov	r8, r0
 800da5e:	4689      	mov	r9, r1
 800da60:	4630      	mov	r0, r6
 800da62:	4639      	mov	r1, r7
 800da64:	f7f2 fc1a 	bl	800029c <__adddf3>
 800da68:	2000      	movs	r0, #0
 800da6a:	4632      	mov	r2, r6
 800da6c:	463b      	mov	r3, r7
 800da6e:	4604      	mov	r4, r0
 800da70:	460d      	mov	r5, r1
 800da72:	f7f2 fc11 	bl	8000298 <__aeabi_dsub>
 800da76:	4602      	mov	r2, r0
 800da78:	460b      	mov	r3, r1
 800da7a:	4640      	mov	r0, r8
 800da7c:	4649      	mov	r1, r9
 800da7e:	f7f2 fc0b 	bl	8000298 <__aeabi_dsub>
 800da82:	9b04      	ldr	r3, [sp, #16]
 800da84:	9a06      	ldr	r2, [sp, #24]
 800da86:	3b01      	subs	r3, #1
 800da88:	4313      	orrs	r3, r2
 800da8a:	4682      	mov	sl, r0
 800da8c:	468b      	mov	fp, r1
 800da8e:	f040 81e7 	bne.w	800de60 <__ieee754_pow+0x700>
 800da92:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800db48 <__ieee754_pow+0x3e8>
 800da96:	eeb0 8a47 	vmov.f32	s16, s14
 800da9a:	eef0 8a67 	vmov.f32	s17, s15
 800da9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800daa2:	2600      	movs	r6, #0
 800daa4:	4632      	mov	r2, r6
 800daa6:	463b      	mov	r3, r7
 800daa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daac:	f7f2 fbf4 	bl	8000298 <__aeabi_dsub>
 800dab0:	4622      	mov	r2, r4
 800dab2:	462b      	mov	r3, r5
 800dab4:	f7f2 fda8 	bl	8000608 <__aeabi_dmul>
 800dab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dabc:	4680      	mov	r8, r0
 800dabe:	4689      	mov	r9, r1
 800dac0:	4650      	mov	r0, sl
 800dac2:	4659      	mov	r1, fp
 800dac4:	f7f2 fda0 	bl	8000608 <__aeabi_dmul>
 800dac8:	4602      	mov	r2, r0
 800daca:	460b      	mov	r3, r1
 800dacc:	4640      	mov	r0, r8
 800dace:	4649      	mov	r1, r9
 800dad0:	f7f2 fbe4 	bl	800029c <__adddf3>
 800dad4:	4632      	mov	r2, r6
 800dad6:	463b      	mov	r3, r7
 800dad8:	4680      	mov	r8, r0
 800dada:	4689      	mov	r9, r1
 800dadc:	4620      	mov	r0, r4
 800dade:	4629      	mov	r1, r5
 800dae0:	f7f2 fd92 	bl	8000608 <__aeabi_dmul>
 800dae4:	460b      	mov	r3, r1
 800dae6:	4604      	mov	r4, r0
 800dae8:	460d      	mov	r5, r1
 800daea:	4602      	mov	r2, r0
 800daec:	4649      	mov	r1, r9
 800daee:	4640      	mov	r0, r8
 800daf0:	f7f2 fbd4 	bl	800029c <__adddf3>
 800daf4:	4b19      	ldr	r3, [pc, #100]	; (800db5c <__ieee754_pow+0x3fc>)
 800daf6:	4299      	cmp	r1, r3
 800daf8:	ec45 4b19 	vmov	d9, r4, r5
 800dafc:	4606      	mov	r6, r0
 800dafe:	460f      	mov	r7, r1
 800db00:	468b      	mov	fp, r1
 800db02:	f340 82f1 	ble.w	800e0e8 <__ieee754_pow+0x988>
 800db06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800db0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800db0e:	4303      	orrs	r3, r0
 800db10:	f000 81e4 	beq.w	800dedc <__ieee754_pow+0x77c>
 800db14:	ec51 0b18 	vmov	r0, r1, d8
 800db18:	2200      	movs	r2, #0
 800db1a:	2300      	movs	r3, #0
 800db1c:	f7f2 ffe6 	bl	8000aec <__aeabi_dcmplt>
 800db20:	3800      	subs	r0, #0
 800db22:	bf18      	it	ne
 800db24:	2001      	movne	r0, #1
 800db26:	e72b      	b.n	800d980 <__ieee754_pow+0x220>
 800db28:	60000000 	.word	0x60000000
 800db2c:	3ff71547 	.word	0x3ff71547
 800db30:	f85ddf44 	.word	0xf85ddf44
 800db34:	3e54ae0b 	.word	0x3e54ae0b
 800db38:	55555555 	.word	0x55555555
 800db3c:	3fd55555 	.word	0x3fd55555
 800db40:	652b82fe 	.word	0x652b82fe
 800db44:	3ff71547 	.word	0x3ff71547
 800db48:	00000000 	.word	0x00000000
 800db4c:	bff00000 	.word	0xbff00000
 800db50:	3ff00000 	.word	0x3ff00000
 800db54:	3fd00000 	.word	0x3fd00000
 800db58:	3fe00000 	.word	0x3fe00000
 800db5c:	408fffff 	.word	0x408fffff
 800db60:	4bd5      	ldr	r3, [pc, #852]	; (800deb8 <__ieee754_pow+0x758>)
 800db62:	402b      	ands	r3, r5
 800db64:	2200      	movs	r2, #0
 800db66:	b92b      	cbnz	r3, 800db74 <__ieee754_pow+0x414>
 800db68:	4bd4      	ldr	r3, [pc, #848]	; (800debc <__ieee754_pow+0x75c>)
 800db6a:	f7f2 fd4d 	bl	8000608 <__aeabi_dmul>
 800db6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800db72:	460c      	mov	r4, r1
 800db74:	1523      	asrs	r3, r4, #20
 800db76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800db7a:	4413      	add	r3, r2
 800db7c:	9305      	str	r3, [sp, #20]
 800db7e:	4bd0      	ldr	r3, [pc, #832]	; (800dec0 <__ieee754_pow+0x760>)
 800db80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800db84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800db88:	429c      	cmp	r4, r3
 800db8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800db8e:	dd08      	ble.n	800dba2 <__ieee754_pow+0x442>
 800db90:	4bcc      	ldr	r3, [pc, #816]	; (800dec4 <__ieee754_pow+0x764>)
 800db92:	429c      	cmp	r4, r3
 800db94:	f340 8162 	ble.w	800de5c <__ieee754_pow+0x6fc>
 800db98:	9b05      	ldr	r3, [sp, #20]
 800db9a:	3301      	adds	r3, #1
 800db9c:	9305      	str	r3, [sp, #20]
 800db9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dba2:	2400      	movs	r4, #0
 800dba4:	00e3      	lsls	r3, r4, #3
 800dba6:	9307      	str	r3, [sp, #28]
 800dba8:	4bc7      	ldr	r3, [pc, #796]	; (800dec8 <__ieee754_pow+0x768>)
 800dbaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dbae:	ed93 7b00 	vldr	d7, [r3]
 800dbb2:	4629      	mov	r1, r5
 800dbb4:	ec53 2b17 	vmov	r2, r3, d7
 800dbb8:	eeb0 9a47 	vmov.f32	s18, s14
 800dbbc:	eef0 9a67 	vmov.f32	s19, s15
 800dbc0:	4682      	mov	sl, r0
 800dbc2:	f7f2 fb69 	bl	8000298 <__aeabi_dsub>
 800dbc6:	4652      	mov	r2, sl
 800dbc8:	4606      	mov	r6, r0
 800dbca:	460f      	mov	r7, r1
 800dbcc:	462b      	mov	r3, r5
 800dbce:	ec51 0b19 	vmov	r0, r1, d9
 800dbd2:	f7f2 fb63 	bl	800029c <__adddf3>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	2000      	movs	r0, #0
 800dbdc:	49bb      	ldr	r1, [pc, #748]	; (800decc <__ieee754_pow+0x76c>)
 800dbde:	f7f2 fe3d 	bl	800085c <__aeabi_ddiv>
 800dbe2:	ec41 0b1a 	vmov	d10, r0, r1
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4630      	mov	r0, r6
 800dbec:	4639      	mov	r1, r7
 800dbee:	f7f2 fd0b 	bl	8000608 <__aeabi_dmul>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbf8:	9302      	str	r3, [sp, #8]
 800dbfa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dbfe:	46ab      	mov	fp, r5
 800dc00:	106d      	asrs	r5, r5, #1
 800dc02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dc06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dc0a:	ec41 0b18 	vmov	d8, r0, r1
 800dc0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dc12:	2200      	movs	r2, #0
 800dc14:	4640      	mov	r0, r8
 800dc16:	4649      	mov	r1, r9
 800dc18:	4614      	mov	r4, r2
 800dc1a:	461d      	mov	r5, r3
 800dc1c:	f7f2 fcf4 	bl	8000608 <__aeabi_dmul>
 800dc20:	4602      	mov	r2, r0
 800dc22:	460b      	mov	r3, r1
 800dc24:	4630      	mov	r0, r6
 800dc26:	4639      	mov	r1, r7
 800dc28:	f7f2 fb36 	bl	8000298 <__aeabi_dsub>
 800dc2c:	ec53 2b19 	vmov	r2, r3, d9
 800dc30:	4606      	mov	r6, r0
 800dc32:	460f      	mov	r7, r1
 800dc34:	4620      	mov	r0, r4
 800dc36:	4629      	mov	r1, r5
 800dc38:	f7f2 fb2e 	bl	8000298 <__aeabi_dsub>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	4650      	mov	r0, sl
 800dc42:	4659      	mov	r1, fp
 800dc44:	f7f2 fb28 	bl	8000298 <__aeabi_dsub>
 800dc48:	4642      	mov	r2, r8
 800dc4a:	464b      	mov	r3, r9
 800dc4c:	f7f2 fcdc 	bl	8000608 <__aeabi_dmul>
 800dc50:	4602      	mov	r2, r0
 800dc52:	460b      	mov	r3, r1
 800dc54:	4630      	mov	r0, r6
 800dc56:	4639      	mov	r1, r7
 800dc58:	f7f2 fb1e 	bl	8000298 <__aeabi_dsub>
 800dc5c:	ec53 2b1a 	vmov	r2, r3, d10
 800dc60:	f7f2 fcd2 	bl	8000608 <__aeabi_dmul>
 800dc64:	ec53 2b18 	vmov	r2, r3, d8
 800dc68:	ec41 0b19 	vmov	d9, r0, r1
 800dc6c:	ec51 0b18 	vmov	r0, r1, d8
 800dc70:	f7f2 fcca 	bl	8000608 <__aeabi_dmul>
 800dc74:	a37c      	add	r3, pc, #496	; (adr r3, 800de68 <__ieee754_pow+0x708>)
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	460d      	mov	r5, r1
 800dc7e:	f7f2 fcc3 	bl	8000608 <__aeabi_dmul>
 800dc82:	a37b      	add	r3, pc, #492	; (adr r3, 800de70 <__ieee754_pow+0x710>)
 800dc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc88:	f7f2 fb08 	bl	800029c <__adddf3>
 800dc8c:	4622      	mov	r2, r4
 800dc8e:	462b      	mov	r3, r5
 800dc90:	f7f2 fcba 	bl	8000608 <__aeabi_dmul>
 800dc94:	a378      	add	r3, pc, #480	; (adr r3, 800de78 <__ieee754_pow+0x718>)
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	f7f2 faff 	bl	800029c <__adddf3>
 800dc9e:	4622      	mov	r2, r4
 800dca0:	462b      	mov	r3, r5
 800dca2:	f7f2 fcb1 	bl	8000608 <__aeabi_dmul>
 800dca6:	a376      	add	r3, pc, #472	; (adr r3, 800de80 <__ieee754_pow+0x720>)
 800dca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcac:	f7f2 faf6 	bl	800029c <__adddf3>
 800dcb0:	4622      	mov	r2, r4
 800dcb2:	462b      	mov	r3, r5
 800dcb4:	f7f2 fca8 	bl	8000608 <__aeabi_dmul>
 800dcb8:	a373      	add	r3, pc, #460	; (adr r3, 800de88 <__ieee754_pow+0x728>)
 800dcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbe:	f7f2 faed 	bl	800029c <__adddf3>
 800dcc2:	4622      	mov	r2, r4
 800dcc4:	462b      	mov	r3, r5
 800dcc6:	f7f2 fc9f 	bl	8000608 <__aeabi_dmul>
 800dcca:	a371      	add	r3, pc, #452	; (adr r3, 800de90 <__ieee754_pow+0x730>)
 800dccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd0:	f7f2 fae4 	bl	800029c <__adddf3>
 800dcd4:	4622      	mov	r2, r4
 800dcd6:	4606      	mov	r6, r0
 800dcd8:	460f      	mov	r7, r1
 800dcda:	462b      	mov	r3, r5
 800dcdc:	4620      	mov	r0, r4
 800dcde:	4629      	mov	r1, r5
 800dce0:	f7f2 fc92 	bl	8000608 <__aeabi_dmul>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	4630      	mov	r0, r6
 800dcea:	4639      	mov	r1, r7
 800dcec:	f7f2 fc8c 	bl	8000608 <__aeabi_dmul>
 800dcf0:	4642      	mov	r2, r8
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	460d      	mov	r5, r1
 800dcf6:	464b      	mov	r3, r9
 800dcf8:	ec51 0b18 	vmov	r0, r1, d8
 800dcfc:	f7f2 face 	bl	800029c <__adddf3>
 800dd00:	ec53 2b19 	vmov	r2, r3, d9
 800dd04:	f7f2 fc80 	bl	8000608 <__aeabi_dmul>
 800dd08:	4622      	mov	r2, r4
 800dd0a:	462b      	mov	r3, r5
 800dd0c:	f7f2 fac6 	bl	800029c <__adddf3>
 800dd10:	4642      	mov	r2, r8
 800dd12:	4682      	mov	sl, r0
 800dd14:	468b      	mov	fp, r1
 800dd16:	464b      	mov	r3, r9
 800dd18:	4640      	mov	r0, r8
 800dd1a:	4649      	mov	r1, r9
 800dd1c:	f7f2 fc74 	bl	8000608 <__aeabi_dmul>
 800dd20:	4b6b      	ldr	r3, [pc, #428]	; (800ded0 <__ieee754_pow+0x770>)
 800dd22:	2200      	movs	r2, #0
 800dd24:	4606      	mov	r6, r0
 800dd26:	460f      	mov	r7, r1
 800dd28:	f7f2 fab8 	bl	800029c <__adddf3>
 800dd2c:	4652      	mov	r2, sl
 800dd2e:	465b      	mov	r3, fp
 800dd30:	f7f2 fab4 	bl	800029c <__adddf3>
 800dd34:	2000      	movs	r0, #0
 800dd36:	4604      	mov	r4, r0
 800dd38:	460d      	mov	r5, r1
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	4640      	mov	r0, r8
 800dd40:	4649      	mov	r1, r9
 800dd42:	f7f2 fc61 	bl	8000608 <__aeabi_dmul>
 800dd46:	4b62      	ldr	r3, [pc, #392]	; (800ded0 <__ieee754_pow+0x770>)
 800dd48:	4680      	mov	r8, r0
 800dd4a:	4689      	mov	r9, r1
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	4620      	mov	r0, r4
 800dd50:	4629      	mov	r1, r5
 800dd52:	f7f2 faa1 	bl	8000298 <__aeabi_dsub>
 800dd56:	4632      	mov	r2, r6
 800dd58:	463b      	mov	r3, r7
 800dd5a:	f7f2 fa9d 	bl	8000298 <__aeabi_dsub>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	460b      	mov	r3, r1
 800dd62:	4650      	mov	r0, sl
 800dd64:	4659      	mov	r1, fp
 800dd66:	f7f2 fa97 	bl	8000298 <__aeabi_dsub>
 800dd6a:	ec53 2b18 	vmov	r2, r3, d8
 800dd6e:	f7f2 fc4b 	bl	8000608 <__aeabi_dmul>
 800dd72:	4622      	mov	r2, r4
 800dd74:	4606      	mov	r6, r0
 800dd76:	460f      	mov	r7, r1
 800dd78:	462b      	mov	r3, r5
 800dd7a:	ec51 0b19 	vmov	r0, r1, d9
 800dd7e:	f7f2 fc43 	bl	8000608 <__aeabi_dmul>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	4630      	mov	r0, r6
 800dd88:	4639      	mov	r1, r7
 800dd8a:	f7f2 fa87 	bl	800029c <__adddf3>
 800dd8e:	4606      	mov	r6, r0
 800dd90:	460f      	mov	r7, r1
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	4640      	mov	r0, r8
 800dd98:	4649      	mov	r1, r9
 800dd9a:	f7f2 fa7f 	bl	800029c <__adddf3>
 800dd9e:	a33e      	add	r3, pc, #248	; (adr r3, 800de98 <__ieee754_pow+0x738>)
 800dda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda4:	2000      	movs	r0, #0
 800dda6:	4604      	mov	r4, r0
 800dda8:	460d      	mov	r5, r1
 800ddaa:	f7f2 fc2d 	bl	8000608 <__aeabi_dmul>
 800ddae:	4642      	mov	r2, r8
 800ddb0:	ec41 0b18 	vmov	d8, r0, r1
 800ddb4:	464b      	mov	r3, r9
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	4629      	mov	r1, r5
 800ddba:	f7f2 fa6d 	bl	8000298 <__aeabi_dsub>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	4639      	mov	r1, r7
 800ddc6:	f7f2 fa67 	bl	8000298 <__aeabi_dsub>
 800ddca:	a335      	add	r3, pc, #212	; (adr r3, 800dea0 <__ieee754_pow+0x740>)
 800ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd0:	f7f2 fc1a 	bl	8000608 <__aeabi_dmul>
 800ddd4:	a334      	add	r3, pc, #208	; (adr r3, 800dea8 <__ieee754_pow+0x748>)
 800ddd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddda:	4606      	mov	r6, r0
 800dddc:	460f      	mov	r7, r1
 800ddde:	4620      	mov	r0, r4
 800dde0:	4629      	mov	r1, r5
 800dde2:	f7f2 fc11 	bl	8000608 <__aeabi_dmul>
 800dde6:	4602      	mov	r2, r0
 800dde8:	460b      	mov	r3, r1
 800ddea:	4630      	mov	r0, r6
 800ddec:	4639      	mov	r1, r7
 800ddee:	f7f2 fa55 	bl	800029c <__adddf3>
 800ddf2:	9a07      	ldr	r2, [sp, #28]
 800ddf4:	4b37      	ldr	r3, [pc, #220]	; (800ded4 <__ieee754_pow+0x774>)
 800ddf6:	4413      	add	r3, r2
 800ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfc:	f7f2 fa4e 	bl	800029c <__adddf3>
 800de00:	4682      	mov	sl, r0
 800de02:	9805      	ldr	r0, [sp, #20]
 800de04:	468b      	mov	fp, r1
 800de06:	f7f2 fb95 	bl	8000534 <__aeabi_i2d>
 800de0a:	9a07      	ldr	r2, [sp, #28]
 800de0c:	4b32      	ldr	r3, [pc, #200]	; (800ded8 <__ieee754_pow+0x778>)
 800de0e:	4413      	add	r3, r2
 800de10:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de14:	4606      	mov	r6, r0
 800de16:	460f      	mov	r7, r1
 800de18:	4652      	mov	r2, sl
 800de1a:	465b      	mov	r3, fp
 800de1c:	ec51 0b18 	vmov	r0, r1, d8
 800de20:	f7f2 fa3c 	bl	800029c <__adddf3>
 800de24:	4642      	mov	r2, r8
 800de26:	464b      	mov	r3, r9
 800de28:	f7f2 fa38 	bl	800029c <__adddf3>
 800de2c:	4632      	mov	r2, r6
 800de2e:	463b      	mov	r3, r7
 800de30:	f7f2 fa34 	bl	800029c <__adddf3>
 800de34:	2000      	movs	r0, #0
 800de36:	4632      	mov	r2, r6
 800de38:	463b      	mov	r3, r7
 800de3a:	4604      	mov	r4, r0
 800de3c:	460d      	mov	r5, r1
 800de3e:	f7f2 fa2b 	bl	8000298 <__aeabi_dsub>
 800de42:	4642      	mov	r2, r8
 800de44:	464b      	mov	r3, r9
 800de46:	f7f2 fa27 	bl	8000298 <__aeabi_dsub>
 800de4a:	ec53 2b18 	vmov	r2, r3, d8
 800de4e:	f7f2 fa23 	bl	8000298 <__aeabi_dsub>
 800de52:	4602      	mov	r2, r0
 800de54:	460b      	mov	r3, r1
 800de56:	4650      	mov	r0, sl
 800de58:	4659      	mov	r1, fp
 800de5a:	e610      	b.n	800da7e <__ieee754_pow+0x31e>
 800de5c:	2401      	movs	r4, #1
 800de5e:	e6a1      	b.n	800dba4 <__ieee754_pow+0x444>
 800de60:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800deb0 <__ieee754_pow+0x750>
 800de64:	e617      	b.n	800da96 <__ieee754_pow+0x336>
 800de66:	bf00      	nop
 800de68:	4a454eef 	.word	0x4a454eef
 800de6c:	3fca7e28 	.word	0x3fca7e28
 800de70:	93c9db65 	.word	0x93c9db65
 800de74:	3fcd864a 	.word	0x3fcd864a
 800de78:	a91d4101 	.word	0xa91d4101
 800de7c:	3fd17460 	.word	0x3fd17460
 800de80:	518f264d 	.word	0x518f264d
 800de84:	3fd55555 	.word	0x3fd55555
 800de88:	db6fabff 	.word	0xdb6fabff
 800de8c:	3fdb6db6 	.word	0x3fdb6db6
 800de90:	33333303 	.word	0x33333303
 800de94:	3fe33333 	.word	0x3fe33333
 800de98:	e0000000 	.word	0xe0000000
 800de9c:	3feec709 	.word	0x3feec709
 800dea0:	dc3a03fd 	.word	0xdc3a03fd
 800dea4:	3feec709 	.word	0x3feec709
 800dea8:	145b01f5 	.word	0x145b01f5
 800deac:	be3e2fe0 	.word	0xbe3e2fe0
 800deb0:	00000000 	.word	0x00000000
 800deb4:	3ff00000 	.word	0x3ff00000
 800deb8:	7ff00000 	.word	0x7ff00000
 800debc:	43400000 	.word	0x43400000
 800dec0:	0003988e 	.word	0x0003988e
 800dec4:	000bb679 	.word	0x000bb679
 800dec8:	0800e890 	.word	0x0800e890
 800decc:	3ff00000 	.word	0x3ff00000
 800ded0:	40080000 	.word	0x40080000
 800ded4:	0800e8b0 	.word	0x0800e8b0
 800ded8:	0800e8a0 	.word	0x0800e8a0
 800dedc:	a3b5      	add	r3, pc, #724	; (adr r3, 800e1b4 <__ieee754_pow+0xa54>)
 800dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee2:	4640      	mov	r0, r8
 800dee4:	4649      	mov	r1, r9
 800dee6:	f7f2 f9d9 	bl	800029c <__adddf3>
 800deea:	4622      	mov	r2, r4
 800deec:	ec41 0b1a 	vmov	d10, r0, r1
 800def0:	462b      	mov	r3, r5
 800def2:	4630      	mov	r0, r6
 800def4:	4639      	mov	r1, r7
 800def6:	f7f2 f9cf 	bl	8000298 <__aeabi_dsub>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	ec51 0b1a 	vmov	r0, r1, d10
 800df02:	f7f2 fe11 	bl	8000b28 <__aeabi_dcmpgt>
 800df06:	2800      	cmp	r0, #0
 800df08:	f47f ae04 	bne.w	800db14 <__ieee754_pow+0x3b4>
 800df0c:	4aa4      	ldr	r2, [pc, #656]	; (800e1a0 <__ieee754_pow+0xa40>)
 800df0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df12:	4293      	cmp	r3, r2
 800df14:	f340 8108 	ble.w	800e128 <__ieee754_pow+0x9c8>
 800df18:	151b      	asrs	r3, r3, #20
 800df1a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800df1e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800df22:	fa4a f303 	asr.w	r3, sl, r3
 800df26:	445b      	add	r3, fp
 800df28:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800df2c:	4e9d      	ldr	r6, [pc, #628]	; (800e1a4 <__ieee754_pow+0xa44>)
 800df2e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800df32:	4116      	asrs	r6, r2
 800df34:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800df38:	2000      	movs	r0, #0
 800df3a:	ea23 0106 	bic.w	r1, r3, r6
 800df3e:	f1c2 0214 	rsb	r2, r2, #20
 800df42:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800df46:	fa4a fa02 	asr.w	sl, sl, r2
 800df4a:	f1bb 0f00 	cmp.w	fp, #0
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4620      	mov	r0, r4
 800df54:	4629      	mov	r1, r5
 800df56:	bfb8      	it	lt
 800df58:	f1ca 0a00 	rsblt	sl, sl, #0
 800df5c:	f7f2 f99c 	bl	8000298 <__aeabi_dsub>
 800df60:	ec41 0b19 	vmov	d9, r0, r1
 800df64:	4642      	mov	r2, r8
 800df66:	464b      	mov	r3, r9
 800df68:	ec51 0b19 	vmov	r0, r1, d9
 800df6c:	f7f2 f996 	bl	800029c <__adddf3>
 800df70:	a37b      	add	r3, pc, #492	; (adr r3, 800e160 <__ieee754_pow+0xa00>)
 800df72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df76:	2000      	movs	r0, #0
 800df78:	4604      	mov	r4, r0
 800df7a:	460d      	mov	r5, r1
 800df7c:	f7f2 fb44 	bl	8000608 <__aeabi_dmul>
 800df80:	ec53 2b19 	vmov	r2, r3, d9
 800df84:	4606      	mov	r6, r0
 800df86:	460f      	mov	r7, r1
 800df88:	4620      	mov	r0, r4
 800df8a:	4629      	mov	r1, r5
 800df8c:	f7f2 f984 	bl	8000298 <__aeabi_dsub>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4640      	mov	r0, r8
 800df96:	4649      	mov	r1, r9
 800df98:	f7f2 f97e 	bl	8000298 <__aeabi_dsub>
 800df9c:	a372      	add	r3, pc, #456	; (adr r3, 800e168 <__ieee754_pow+0xa08>)
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	f7f2 fb31 	bl	8000608 <__aeabi_dmul>
 800dfa6:	a372      	add	r3, pc, #456	; (adr r3, 800e170 <__ieee754_pow+0xa10>)
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	4680      	mov	r8, r0
 800dfae:	4689      	mov	r9, r1
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	f7f2 fb28 	bl	8000608 <__aeabi_dmul>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	460b      	mov	r3, r1
 800dfbc:	4640      	mov	r0, r8
 800dfbe:	4649      	mov	r1, r9
 800dfc0:	f7f2 f96c 	bl	800029c <__adddf3>
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	460d      	mov	r5, r1
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	4630      	mov	r0, r6
 800dfce:	4639      	mov	r1, r7
 800dfd0:	f7f2 f964 	bl	800029c <__adddf3>
 800dfd4:	4632      	mov	r2, r6
 800dfd6:	463b      	mov	r3, r7
 800dfd8:	4680      	mov	r8, r0
 800dfda:	4689      	mov	r9, r1
 800dfdc:	f7f2 f95c 	bl	8000298 <__aeabi_dsub>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	f7f2 f956 	bl	8000298 <__aeabi_dsub>
 800dfec:	4642      	mov	r2, r8
 800dfee:	4606      	mov	r6, r0
 800dff0:	460f      	mov	r7, r1
 800dff2:	464b      	mov	r3, r9
 800dff4:	4640      	mov	r0, r8
 800dff6:	4649      	mov	r1, r9
 800dff8:	f7f2 fb06 	bl	8000608 <__aeabi_dmul>
 800dffc:	a35e      	add	r3, pc, #376	; (adr r3, 800e178 <__ieee754_pow+0xa18>)
 800dffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e002:	4604      	mov	r4, r0
 800e004:	460d      	mov	r5, r1
 800e006:	f7f2 faff 	bl	8000608 <__aeabi_dmul>
 800e00a:	a35d      	add	r3, pc, #372	; (adr r3, 800e180 <__ieee754_pow+0xa20>)
 800e00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e010:	f7f2 f942 	bl	8000298 <__aeabi_dsub>
 800e014:	4622      	mov	r2, r4
 800e016:	462b      	mov	r3, r5
 800e018:	f7f2 faf6 	bl	8000608 <__aeabi_dmul>
 800e01c:	a35a      	add	r3, pc, #360	; (adr r3, 800e188 <__ieee754_pow+0xa28>)
 800e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e022:	f7f2 f93b 	bl	800029c <__adddf3>
 800e026:	4622      	mov	r2, r4
 800e028:	462b      	mov	r3, r5
 800e02a:	f7f2 faed 	bl	8000608 <__aeabi_dmul>
 800e02e:	a358      	add	r3, pc, #352	; (adr r3, 800e190 <__ieee754_pow+0xa30>)
 800e030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e034:	f7f2 f930 	bl	8000298 <__aeabi_dsub>
 800e038:	4622      	mov	r2, r4
 800e03a:	462b      	mov	r3, r5
 800e03c:	f7f2 fae4 	bl	8000608 <__aeabi_dmul>
 800e040:	a355      	add	r3, pc, #340	; (adr r3, 800e198 <__ieee754_pow+0xa38>)
 800e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e046:	f7f2 f929 	bl	800029c <__adddf3>
 800e04a:	4622      	mov	r2, r4
 800e04c:	462b      	mov	r3, r5
 800e04e:	f7f2 fadb 	bl	8000608 <__aeabi_dmul>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4640      	mov	r0, r8
 800e058:	4649      	mov	r1, r9
 800e05a:	f7f2 f91d 	bl	8000298 <__aeabi_dsub>
 800e05e:	4604      	mov	r4, r0
 800e060:	460d      	mov	r5, r1
 800e062:	4602      	mov	r2, r0
 800e064:	460b      	mov	r3, r1
 800e066:	4640      	mov	r0, r8
 800e068:	4649      	mov	r1, r9
 800e06a:	f7f2 facd 	bl	8000608 <__aeabi_dmul>
 800e06e:	2200      	movs	r2, #0
 800e070:	ec41 0b19 	vmov	d9, r0, r1
 800e074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e078:	4620      	mov	r0, r4
 800e07a:	4629      	mov	r1, r5
 800e07c:	f7f2 f90c 	bl	8000298 <__aeabi_dsub>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	ec51 0b19 	vmov	r0, r1, d9
 800e088:	f7f2 fbe8 	bl	800085c <__aeabi_ddiv>
 800e08c:	4632      	mov	r2, r6
 800e08e:	4604      	mov	r4, r0
 800e090:	460d      	mov	r5, r1
 800e092:	463b      	mov	r3, r7
 800e094:	4640      	mov	r0, r8
 800e096:	4649      	mov	r1, r9
 800e098:	f7f2 fab6 	bl	8000608 <__aeabi_dmul>
 800e09c:	4632      	mov	r2, r6
 800e09e:	463b      	mov	r3, r7
 800e0a0:	f7f2 f8fc 	bl	800029c <__adddf3>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	4629      	mov	r1, r5
 800e0ac:	f7f2 f8f4 	bl	8000298 <__aeabi_dsub>
 800e0b0:	4642      	mov	r2, r8
 800e0b2:	464b      	mov	r3, r9
 800e0b4:	f7f2 f8f0 	bl	8000298 <__aeabi_dsub>
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	493a      	ldr	r1, [pc, #232]	; (800e1a8 <__ieee754_pow+0xa48>)
 800e0be:	2000      	movs	r0, #0
 800e0c0:	f7f2 f8ea 	bl	8000298 <__aeabi_dsub>
 800e0c4:	ec41 0b10 	vmov	d0, r0, r1
 800e0c8:	ee10 3a90 	vmov	r3, s1
 800e0cc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e0d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0d4:	da2b      	bge.n	800e12e <__ieee754_pow+0x9ce>
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	f000 f966 	bl	800e3a8 <scalbn>
 800e0dc:	ec51 0b10 	vmov	r0, r1, d0
 800e0e0:	ec53 2b18 	vmov	r2, r3, d8
 800e0e4:	f7ff bbed 	b.w	800d8c2 <__ieee754_pow+0x162>
 800e0e8:	4b30      	ldr	r3, [pc, #192]	; (800e1ac <__ieee754_pow+0xa4c>)
 800e0ea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e0ee:	429e      	cmp	r6, r3
 800e0f0:	f77f af0c 	ble.w	800df0c <__ieee754_pow+0x7ac>
 800e0f4:	4b2e      	ldr	r3, [pc, #184]	; (800e1b0 <__ieee754_pow+0xa50>)
 800e0f6:	440b      	add	r3, r1
 800e0f8:	4303      	orrs	r3, r0
 800e0fa:	d009      	beq.n	800e110 <__ieee754_pow+0x9b0>
 800e0fc:	ec51 0b18 	vmov	r0, r1, d8
 800e100:	2200      	movs	r2, #0
 800e102:	2300      	movs	r3, #0
 800e104:	f7f2 fcf2 	bl	8000aec <__aeabi_dcmplt>
 800e108:	3800      	subs	r0, #0
 800e10a:	bf18      	it	ne
 800e10c:	2001      	movne	r0, #1
 800e10e:	e447      	b.n	800d9a0 <__ieee754_pow+0x240>
 800e110:	4622      	mov	r2, r4
 800e112:	462b      	mov	r3, r5
 800e114:	f7f2 f8c0 	bl	8000298 <__aeabi_dsub>
 800e118:	4642      	mov	r2, r8
 800e11a:	464b      	mov	r3, r9
 800e11c:	f7f2 fcfa 	bl	8000b14 <__aeabi_dcmpge>
 800e120:	2800      	cmp	r0, #0
 800e122:	f43f aef3 	beq.w	800df0c <__ieee754_pow+0x7ac>
 800e126:	e7e9      	b.n	800e0fc <__ieee754_pow+0x99c>
 800e128:	f04f 0a00 	mov.w	sl, #0
 800e12c:	e71a      	b.n	800df64 <__ieee754_pow+0x804>
 800e12e:	ec51 0b10 	vmov	r0, r1, d0
 800e132:	4619      	mov	r1, r3
 800e134:	e7d4      	b.n	800e0e0 <__ieee754_pow+0x980>
 800e136:	491c      	ldr	r1, [pc, #112]	; (800e1a8 <__ieee754_pow+0xa48>)
 800e138:	2000      	movs	r0, #0
 800e13a:	f7ff bb30 	b.w	800d79e <__ieee754_pow+0x3e>
 800e13e:	2000      	movs	r0, #0
 800e140:	2100      	movs	r1, #0
 800e142:	f7ff bb2c 	b.w	800d79e <__ieee754_pow+0x3e>
 800e146:	4630      	mov	r0, r6
 800e148:	4639      	mov	r1, r7
 800e14a:	f7ff bb28 	b.w	800d79e <__ieee754_pow+0x3e>
 800e14e:	9204      	str	r2, [sp, #16]
 800e150:	f7ff bb7a 	b.w	800d848 <__ieee754_pow+0xe8>
 800e154:	2300      	movs	r3, #0
 800e156:	f7ff bb64 	b.w	800d822 <__ieee754_pow+0xc2>
 800e15a:	bf00      	nop
 800e15c:	f3af 8000 	nop.w
 800e160:	00000000 	.word	0x00000000
 800e164:	3fe62e43 	.word	0x3fe62e43
 800e168:	fefa39ef 	.word	0xfefa39ef
 800e16c:	3fe62e42 	.word	0x3fe62e42
 800e170:	0ca86c39 	.word	0x0ca86c39
 800e174:	be205c61 	.word	0xbe205c61
 800e178:	72bea4d0 	.word	0x72bea4d0
 800e17c:	3e663769 	.word	0x3e663769
 800e180:	c5d26bf1 	.word	0xc5d26bf1
 800e184:	3ebbbd41 	.word	0x3ebbbd41
 800e188:	af25de2c 	.word	0xaf25de2c
 800e18c:	3f11566a 	.word	0x3f11566a
 800e190:	16bebd93 	.word	0x16bebd93
 800e194:	3f66c16c 	.word	0x3f66c16c
 800e198:	5555553e 	.word	0x5555553e
 800e19c:	3fc55555 	.word	0x3fc55555
 800e1a0:	3fe00000 	.word	0x3fe00000
 800e1a4:	000fffff 	.word	0x000fffff
 800e1a8:	3ff00000 	.word	0x3ff00000
 800e1ac:	4090cbff 	.word	0x4090cbff
 800e1b0:	3f6f3400 	.word	0x3f6f3400
 800e1b4:	652b82fe 	.word	0x652b82fe
 800e1b8:	3c971547 	.word	0x3c971547

0800e1bc <__ieee754_sqrt>:
 800e1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c0:	ec55 4b10 	vmov	r4, r5, d0
 800e1c4:	4e55      	ldr	r6, [pc, #340]	; (800e31c <__ieee754_sqrt+0x160>)
 800e1c6:	43ae      	bics	r6, r5
 800e1c8:	ee10 0a10 	vmov	r0, s0
 800e1cc:	ee10 3a10 	vmov	r3, s0
 800e1d0:	462a      	mov	r2, r5
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	d110      	bne.n	800e1f8 <__ieee754_sqrt+0x3c>
 800e1d6:	ee10 2a10 	vmov	r2, s0
 800e1da:	462b      	mov	r3, r5
 800e1dc:	f7f2 fa14 	bl	8000608 <__aeabi_dmul>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	4629      	mov	r1, r5
 800e1e8:	f7f2 f858 	bl	800029c <__adddf3>
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	460d      	mov	r5, r1
 800e1f0:	ec45 4b10 	vmov	d0, r4, r5
 800e1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f8:	2d00      	cmp	r5, #0
 800e1fa:	dc10      	bgt.n	800e21e <__ieee754_sqrt+0x62>
 800e1fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e200:	4330      	orrs	r0, r6
 800e202:	d0f5      	beq.n	800e1f0 <__ieee754_sqrt+0x34>
 800e204:	b15d      	cbz	r5, 800e21e <__ieee754_sqrt+0x62>
 800e206:	ee10 2a10 	vmov	r2, s0
 800e20a:	462b      	mov	r3, r5
 800e20c:	ee10 0a10 	vmov	r0, s0
 800e210:	f7f2 f842 	bl	8000298 <__aeabi_dsub>
 800e214:	4602      	mov	r2, r0
 800e216:	460b      	mov	r3, r1
 800e218:	f7f2 fb20 	bl	800085c <__aeabi_ddiv>
 800e21c:	e7e6      	b.n	800e1ec <__ieee754_sqrt+0x30>
 800e21e:	1512      	asrs	r2, r2, #20
 800e220:	d074      	beq.n	800e30c <__ieee754_sqrt+0x150>
 800e222:	07d4      	lsls	r4, r2, #31
 800e224:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e228:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e22c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e230:	bf5e      	ittt	pl
 800e232:	0fda      	lsrpl	r2, r3, #31
 800e234:	005b      	lslpl	r3, r3, #1
 800e236:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e23a:	2400      	movs	r4, #0
 800e23c:	0fda      	lsrs	r2, r3, #31
 800e23e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e242:	107f      	asrs	r7, r7, #1
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	2516      	movs	r5, #22
 800e248:	4620      	mov	r0, r4
 800e24a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e24e:	1886      	adds	r6, r0, r2
 800e250:	428e      	cmp	r6, r1
 800e252:	bfde      	ittt	le
 800e254:	1b89      	suble	r1, r1, r6
 800e256:	18b0      	addle	r0, r6, r2
 800e258:	18a4      	addle	r4, r4, r2
 800e25a:	0049      	lsls	r1, r1, #1
 800e25c:	3d01      	subs	r5, #1
 800e25e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e262:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e266:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e26a:	d1f0      	bne.n	800e24e <__ieee754_sqrt+0x92>
 800e26c:	462a      	mov	r2, r5
 800e26e:	f04f 0e20 	mov.w	lr, #32
 800e272:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e276:	4281      	cmp	r1, r0
 800e278:	eb06 0c05 	add.w	ip, r6, r5
 800e27c:	dc02      	bgt.n	800e284 <__ieee754_sqrt+0xc8>
 800e27e:	d113      	bne.n	800e2a8 <__ieee754_sqrt+0xec>
 800e280:	459c      	cmp	ip, r3
 800e282:	d811      	bhi.n	800e2a8 <__ieee754_sqrt+0xec>
 800e284:	f1bc 0f00 	cmp.w	ip, #0
 800e288:	eb0c 0506 	add.w	r5, ip, r6
 800e28c:	da43      	bge.n	800e316 <__ieee754_sqrt+0x15a>
 800e28e:	2d00      	cmp	r5, #0
 800e290:	db41      	blt.n	800e316 <__ieee754_sqrt+0x15a>
 800e292:	f100 0801 	add.w	r8, r0, #1
 800e296:	1a09      	subs	r1, r1, r0
 800e298:	459c      	cmp	ip, r3
 800e29a:	bf88      	it	hi
 800e29c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e2a0:	eba3 030c 	sub.w	r3, r3, ip
 800e2a4:	4432      	add	r2, r6
 800e2a6:	4640      	mov	r0, r8
 800e2a8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e2ac:	f1be 0e01 	subs.w	lr, lr, #1
 800e2b0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e2b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e2b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e2bc:	d1db      	bne.n	800e276 <__ieee754_sqrt+0xba>
 800e2be:	430b      	orrs	r3, r1
 800e2c0:	d006      	beq.n	800e2d0 <__ieee754_sqrt+0x114>
 800e2c2:	1c50      	adds	r0, r2, #1
 800e2c4:	bf13      	iteet	ne
 800e2c6:	3201      	addne	r2, #1
 800e2c8:	3401      	addeq	r4, #1
 800e2ca:	4672      	moveq	r2, lr
 800e2cc:	f022 0201 	bicne.w	r2, r2, #1
 800e2d0:	1063      	asrs	r3, r4, #1
 800e2d2:	0852      	lsrs	r2, r2, #1
 800e2d4:	07e1      	lsls	r1, r4, #31
 800e2d6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e2da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e2de:	bf48      	it	mi
 800e2e0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e2e4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e2e8:	4614      	mov	r4, r2
 800e2ea:	e781      	b.n	800e1f0 <__ieee754_sqrt+0x34>
 800e2ec:	0ad9      	lsrs	r1, r3, #11
 800e2ee:	3815      	subs	r0, #21
 800e2f0:	055b      	lsls	r3, r3, #21
 800e2f2:	2900      	cmp	r1, #0
 800e2f4:	d0fa      	beq.n	800e2ec <__ieee754_sqrt+0x130>
 800e2f6:	02cd      	lsls	r5, r1, #11
 800e2f8:	d50a      	bpl.n	800e310 <__ieee754_sqrt+0x154>
 800e2fa:	f1c2 0420 	rsb	r4, r2, #32
 800e2fe:	fa23 f404 	lsr.w	r4, r3, r4
 800e302:	1e55      	subs	r5, r2, #1
 800e304:	4093      	lsls	r3, r2
 800e306:	4321      	orrs	r1, r4
 800e308:	1b42      	subs	r2, r0, r5
 800e30a:	e78a      	b.n	800e222 <__ieee754_sqrt+0x66>
 800e30c:	4610      	mov	r0, r2
 800e30e:	e7f0      	b.n	800e2f2 <__ieee754_sqrt+0x136>
 800e310:	0049      	lsls	r1, r1, #1
 800e312:	3201      	adds	r2, #1
 800e314:	e7ef      	b.n	800e2f6 <__ieee754_sqrt+0x13a>
 800e316:	4680      	mov	r8, r0
 800e318:	e7bd      	b.n	800e296 <__ieee754_sqrt+0xda>
 800e31a:	bf00      	nop
 800e31c:	7ff00000 	.word	0x7ff00000

0800e320 <with_errno>:
 800e320:	b570      	push	{r4, r5, r6, lr}
 800e322:	4604      	mov	r4, r0
 800e324:	460d      	mov	r5, r1
 800e326:	4616      	mov	r6, r2
 800e328:	f7fe f820 	bl	800c36c <__errno>
 800e32c:	4629      	mov	r1, r5
 800e32e:	6006      	str	r6, [r0, #0]
 800e330:	4620      	mov	r0, r4
 800e332:	bd70      	pop	{r4, r5, r6, pc}

0800e334 <xflow>:
 800e334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e336:	4614      	mov	r4, r2
 800e338:	461d      	mov	r5, r3
 800e33a:	b108      	cbz	r0, 800e340 <xflow+0xc>
 800e33c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e340:	e9cd 2300 	strd	r2, r3, [sp]
 800e344:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e348:	4620      	mov	r0, r4
 800e34a:	4629      	mov	r1, r5
 800e34c:	f7f2 f95c 	bl	8000608 <__aeabi_dmul>
 800e350:	2222      	movs	r2, #34	; 0x22
 800e352:	b003      	add	sp, #12
 800e354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e358:	f7ff bfe2 	b.w	800e320 <with_errno>

0800e35c <__math_uflow>:
 800e35c:	b508      	push	{r3, lr}
 800e35e:	2200      	movs	r2, #0
 800e360:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e364:	f7ff ffe6 	bl	800e334 <xflow>
 800e368:	ec41 0b10 	vmov	d0, r0, r1
 800e36c:	bd08      	pop	{r3, pc}

0800e36e <__math_oflow>:
 800e36e:	b508      	push	{r3, lr}
 800e370:	2200      	movs	r2, #0
 800e372:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e376:	f7ff ffdd 	bl	800e334 <xflow>
 800e37a:	ec41 0b10 	vmov	d0, r0, r1
 800e37e:	bd08      	pop	{r3, pc}

0800e380 <fabs>:
 800e380:	ec51 0b10 	vmov	r0, r1, d0
 800e384:	ee10 2a10 	vmov	r2, s0
 800e388:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e38c:	ec43 2b10 	vmov	d0, r2, r3
 800e390:	4770      	bx	lr

0800e392 <finite>:
 800e392:	b082      	sub	sp, #8
 800e394:	ed8d 0b00 	vstr	d0, [sp]
 800e398:	9801      	ldr	r0, [sp, #4]
 800e39a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e39e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e3a2:	0fc0      	lsrs	r0, r0, #31
 800e3a4:	b002      	add	sp, #8
 800e3a6:	4770      	bx	lr

0800e3a8 <scalbn>:
 800e3a8:	b570      	push	{r4, r5, r6, lr}
 800e3aa:	ec55 4b10 	vmov	r4, r5, d0
 800e3ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e3b2:	4606      	mov	r6, r0
 800e3b4:	462b      	mov	r3, r5
 800e3b6:	b99a      	cbnz	r2, 800e3e0 <scalbn+0x38>
 800e3b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e3bc:	4323      	orrs	r3, r4
 800e3be:	d036      	beq.n	800e42e <scalbn+0x86>
 800e3c0:	4b39      	ldr	r3, [pc, #228]	; (800e4a8 <scalbn+0x100>)
 800e3c2:	4629      	mov	r1, r5
 800e3c4:	ee10 0a10 	vmov	r0, s0
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f7f2 f91d 	bl	8000608 <__aeabi_dmul>
 800e3ce:	4b37      	ldr	r3, [pc, #220]	; (800e4ac <scalbn+0x104>)
 800e3d0:	429e      	cmp	r6, r3
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	460d      	mov	r5, r1
 800e3d6:	da10      	bge.n	800e3fa <scalbn+0x52>
 800e3d8:	a32b      	add	r3, pc, #172	; (adr r3, 800e488 <scalbn+0xe0>)
 800e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3de:	e03a      	b.n	800e456 <scalbn+0xae>
 800e3e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e3e4:	428a      	cmp	r2, r1
 800e3e6:	d10c      	bne.n	800e402 <scalbn+0x5a>
 800e3e8:	ee10 2a10 	vmov	r2, s0
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	f7f1 ff54 	bl	800029c <__adddf3>
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	460d      	mov	r5, r1
 800e3f8:	e019      	b.n	800e42e <scalbn+0x86>
 800e3fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e3fe:	460b      	mov	r3, r1
 800e400:	3a36      	subs	r2, #54	; 0x36
 800e402:	4432      	add	r2, r6
 800e404:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e408:	428a      	cmp	r2, r1
 800e40a:	dd08      	ble.n	800e41e <scalbn+0x76>
 800e40c:	2d00      	cmp	r5, #0
 800e40e:	a120      	add	r1, pc, #128	; (adr r1, 800e490 <scalbn+0xe8>)
 800e410:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e414:	da1c      	bge.n	800e450 <scalbn+0xa8>
 800e416:	a120      	add	r1, pc, #128	; (adr r1, 800e498 <scalbn+0xf0>)
 800e418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e41c:	e018      	b.n	800e450 <scalbn+0xa8>
 800e41e:	2a00      	cmp	r2, #0
 800e420:	dd08      	ble.n	800e434 <scalbn+0x8c>
 800e422:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e426:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e42a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e42e:	ec45 4b10 	vmov	d0, r4, r5
 800e432:	bd70      	pop	{r4, r5, r6, pc}
 800e434:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e438:	da19      	bge.n	800e46e <scalbn+0xc6>
 800e43a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e43e:	429e      	cmp	r6, r3
 800e440:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e444:	dd0a      	ble.n	800e45c <scalbn+0xb4>
 800e446:	a112      	add	r1, pc, #72	; (adr r1, 800e490 <scalbn+0xe8>)
 800e448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d1e2      	bne.n	800e416 <scalbn+0x6e>
 800e450:	a30f      	add	r3, pc, #60	; (adr r3, 800e490 <scalbn+0xe8>)
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	f7f2 f8d7 	bl	8000608 <__aeabi_dmul>
 800e45a:	e7cb      	b.n	800e3f4 <scalbn+0x4c>
 800e45c:	a10a      	add	r1, pc, #40	; (adr r1, 800e488 <scalbn+0xe0>)
 800e45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d0b8      	beq.n	800e3d8 <scalbn+0x30>
 800e466:	a10e      	add	r1, pc, #56	; (adr r1, 800e4a0 <scalbn+0xf8>)
 800e468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e46c:	e7b4      	b.n	800e3d8 <scalbn+0x30>
 800e46e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e472:	3236      	adds	r2, #54	; 0x36
 800e474:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e478:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e47c:	4620      	mov	r0, r4
 800e47e:	4b0c      	ldr	r3, [pc, #48]	; (800e4b0 <scalbn+0x108>)
 800e480:	2200      	movs	r2, #0
 800e482:	e7e8      	b.n	800e456 <scalbn+0xae>
 800e484:	f3af 8000 	nop.w
 800e488:	c2f8f359 	.word	0xc2f8f359
 800e48c:	01a56e1f 	.word	0x01a56e1f
 800e490:	8800759c 	.word	0x8800759c
 800e494:	7e37e43c 	.word	0x7e37e43c
 800e498:	8800759c 	.word	0x8800759c
 800e49c:	fe37e43c 	.word	0xfe37e43c
 800e4a0:	c2f8f359 	.word	0xc2f8f359
 800e4a4:	81a56e1f 	.word	0x81a56e1f
 800e4a8:	43500000 	.word	0x43500000
 800e4ac:	ffff3cb0 	.word	0xffff3cb0
 800e4b0:	3c900000 	.word	0x3c900000

0800e4b4 <_init>:
 800e4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b6:	bf00      	nop
 800e4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ba:	bc08      	pop	{r3}
 800e4bc:	469e      	mov	lr, r3
 800e4be:	4770      	bx	lr

0800e4c0 <_fini>:
 800e4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4c2:	bf00      	nop
 800e4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4c6:	bc08      	pop	{r3}
 800e4c8:	469e      	mov	lr, r3
 800e4ca:	4770      	bx	lr
