
Robot_Vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f54  08006f54  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f5c  08006f5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f5c  08006f5c  00016f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f60  08006f60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037c4  20000074  08006fd8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003838  08006fd8  00023838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001573a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003044  00000000  00000000  000357de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00038828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00039b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178e8  00000000  00000000  0003ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015243  00000000  00000000  000525c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e4a  00000000  00000000  0006780b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d0  00000000  00000000  000fd6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006dbc 	.word	0x08006dbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006dbc 	.word	0x08006dbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000090 	.word	0x20000090
 80005b4:	200000ec 	.word	0x200000ec

080005b8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetTimerTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200002ec 	.word	0x200002ec
 80005e8:	20000348 	.word	0x20000348

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b0ac      	sub	sp, #176	; 0xb0
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fcf5 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f8bf 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f9e7 	bl	80009cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005fe:	f000 f9bb 	bl	8000978 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000602:	f000 f923 	bl	800084c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000606:	f000 f969 	bl	80008dc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	484a      	ldr	r0, [pc, #296]	; (8000738 <main+0x14c>)
 800060e:	f001 ff2f 	bl	8002470 <HAL_TIM_IC_Start_IT>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  buffer.xTimer1_ultrs = xTimerCreate("Timer ultrs trigger", pdMS_TO_TICKS( 30 ), pdTRUE, 101, vCallbackFunctionTimer1);
 8000612:	4b4a      	ldr	r3, [pc, #296]	; (800073c <main+0x150>)
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2365      	movs	r3, #101	; 0x65
 8000618:	2201      	movs	r2, #1
 800061a:	211e      	movs	r1, #30
 800061c:	4848      	ldr	r0, [pc, #288]	; (8000740 <main+0x154>)
 800061e:	f004 ff91 	bl	8005544 <xTimerCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a47      	ldr	r2, [pc, #284]	; (8000744 <main+0x158>)
 8000626:	6093      	str	r3, [r2, #8]
  xTimerStart(buffer.xTimer1_ultrs, portMAX_DELAY);
 8000628:	4b46      	ldr	r3, [pc, #280]	; (8000744 <main+0x158>)
 800062a:	689c      	ldr	r4, [r3, #8]
 800062c:	f004 fb06 	bl	8004c3c <xTaskGetTickCount>
 8000630:	4602      	mov	r2, r0
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	2101      	movs	r1, #1
 800063c:	4620      	mov	r0, r4
 800063e:	f004 ffdd 	bl	80055fc <xTimerGenericCommand>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  buffer.xQueue1_ultrs = xQueueCreate(10, sizeof(uint16_t));
 8000642:	2200      	movs	r2, #0
 8000644:	2102      	movs	r1, #2
 8000646:	200a      	movs	r0, #10
 8000648:	f003 fbde 	bl	8003e08 <xQueueGenericCreate>
 800064c:	4603      	mov	r3, r0
 800064e:	4a3d      	ldr	r2, [pc, #244]	; (8000744 <main+0x158>)
 8000650:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UltrasonicDistance */
  osThreadDef(UltrasonicDistance, ultrasonic_dis, osPriorityNormal, 0, 128);
 8000652:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <main+0x15c>)
 8000654:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000658:	461d      	mov	r5, r3
 800065a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UltrasonicDistanceHandle = osThreadCreate(osThread(UltrasonicDistance), NULL);
 8000666:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f003 f9d6 	bl	8003a1e <osThreadCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a35      	ldr	r2, [pc, #212]	; (800074c <main+0x160>)
 8000676:	6013      	str	r3, [r2, #0]

  /* definition and creation of LineTracking */
  osThreadDef(LineTracking, line_tracking, osPriorityNormal, 0, 128);
 8000678:	4b35      	ldr	r3, [pc, #212]	; (8000750 <main+0x164>)
 800067a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LineTrackingHandle = osThreadCreate(osThread(LineTracking), NULL);
 800068c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 f9c3 	bl	8003a1e <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <main+0x168>)
 800069c:	6013      	str	r3, [r2, #0]

  /* definition and creation of LimitSwitch */
  osThreadDef(LimitSwitch, limit_switch, osPriorityNormal, 0, 128);
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <main+0x16c>)
 80006a0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LimitSwitchHandle = osThreadCreate(osThread(LimitSwitch), NULL);
 80006b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 f9b0 	bl	8003a1e <osThreadCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a26      	ldr	r2, [pc, #152]	; (800075c <main+0x170>)
 80006c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of InfraredMotion */
  osThreadDef(InfraredMotion, infrared_motion, osPriorityNormal, 0, 128);
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <main+0x174>)
 80006c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InfraredMotionHandle = osThreadCreate(osThread(InfraredMotion), NULL);
 80006d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 f99d 	bl	8003a1e <osThreadCreate>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <main+0x178>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Accelerometer */
  osThreadDef(Accelerometer, accelerometer, osPriorityNormal, 0, 128);
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <main+0x17c>)
 80006ec:	f107 041c 	add.w	r4, r7, #28
 80006f0:	461d      	mov	r5, r3
 80006f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelerometerHandle = osThreadCreate(osThread(Accelerometer), NULL);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f003 f98a 	bl	8003a1e <osThreadCreate>
 800070a:	4603      	mov	r3, r0
 800070c:	4a17      	ldr	r2, [pc, #92]	; (800076c <main+0x180>)
 800070e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motors */
  osThreadDef(Motors, motors, osPriorityNormal, 0, 160);
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <main+0x184>)
 8000712:	463c      	mov	r4, r7
 8000714:	461d      	mov	r5, r3
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800071e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorsHandle = osThreadCreate(osThread(Motors), NULL);
 8000722:	463b      	mov	r3, r7
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 f979 	bl	8003a1e <osThreadCreate>
 800072c:	4603      	mov	r3, r0
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <main+0x188>)
 8000730:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000732:	f003 f96d 	bl	8003a10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x14a>
 8000738:	20000548 	.word	0x20000548
 800073c:	08000a75 	.word	0x08000a75
 8000740:	08006e2c 	.word	0x08006e2c
 8000744:	20000634 	.word	0x20000634
 8000748:	08006e40 	.word	0x08006e40
 800074c:	2000061c 	.word	0x2000061c
 8000750:	08006e5c 	.word	0x08006e5c
 8000754:	20000620 	.word	0x20000620
 8000758:	08006e78 	.word	0x08006e78
 800075c:	20000624 	.word	0x20000624
 8000760:	08006e94 	.word	0x08006e94
 8000764:	20000628 	.word	0x20000628
 8000768:	08006eb0 	.word	0x08006eb0
 800076c:	2000062c 	.word	0x2000062c
 8000770:	08006ecc 	.word	0x08006ecc
 8000774:	20000630 	.word	0x20000630

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 feb0 	bl	80064ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a27      	ldr	r2, [pc, #156]	; (8000844 <SystemClock_Config+0xcc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c4:	4a20      	ldr	r2, [pc, #128]	; (8000848 <SystemClock_Config+0xd0>)
 80007c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ec:	2308      	movs	r3, #8
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80007f0:	2340      	movs	r3, #64	; 0x40
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fe95 	bl	8001530 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800080c:	f000 f9c7 	bl	8000b9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2102      	movs	r1, #2
 800082c:	4618      	mov	r0, r3
 800082e:	f001 f8f7 	bl	8001a20 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000838:	f000 f9b1 	bl	8000b9e <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3750      	adds	r7, #80	; 0x50
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_TIM10_Init+0x88>)
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <MX_TIM10_Init+0x8c>)
 8000862:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 194;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_TIM10_Init+0x88>)
 8000866:	22c2      	movs	r2, #194	; 0xc2
 8000868:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM10_Init+0x88>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_TIM10_Init+0x88>)
 8000872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000876:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_TIM10_Init+0x88>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_TIM10_Init+0x88>)
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_TIM10_Init+0x88>)
 8000886:	f001 fadd 	bl	8001e44 <HAL_TIM_Base_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8000890:	f000 f985 	bl	8000b9e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8000894:	480f      	ldr	r0, [pc, #60]	; (80008d4 <MX_TIM10_Init+0x88>)
 8000896:	f001 fd91 	bl	80023bc <HAL_TIM_IC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f97d 	bl	8000b9e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80008a4:	230a      	movs	r3, #10
 80008a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008a8:	2301      	movs	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_TIM10_Init+0x88>)
 80008bc:	f001 fffa 	bl	80028b4 <HAL_TIM_IC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 80008c6:	f000 f96a 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000548 	.word	0x20000548
 80008d8:	40014400 	.word	0x40014400

080008dc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_TIM11_Init+0x94>)
 80008f6:	4a1f      	ldr	r2, [pc, #124]	; (8000974 <MX_TIM11_Init+0x98>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 31;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_TIM11_Init+0x94>)
 80008fc:	221f      	movs	r2, #31
 80008fe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_TIM11_Init+0x94>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_TIM11_Init+0x94>)
 8000908:	f242 7210 	movw	r2, #10000	; 0x2710
 800090c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_TIM11_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_TIM11_Init+0x94>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800091a:	4815      	ldr	r0, [pc, #84]	; (8000970 <MX_TIM11_Init+0x94>)
 800091c:	f001 fa92 	bl	8001e44 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000926:	f000 f93a 	bl	8000b9e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_TIM11_Init+0x94>)
 800092c:	f001 fb3c 	bl	8001fa8 <HAL_TIM_PWM_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000936:	f000 f932 	bl	8000b9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	; 0x60
 800093c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 800093e:	2314      	movs	r3, #20
 8000940:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM11_Init+0x94>)
 8000952:	f002 f84b 	bl	80029ec <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800095c:	f000 f91f 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM11_Init+0x94>)
 8000962:	f000 f9bb 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000590 	.word	0x20000590
 8000974:	40014800 	.word	0x40014800

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000984:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009b0:	f002 fc55 	bl	800325e <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 f8f0 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200005d8 	.word	0x200005d8
 80009c8:	40011000 	.word	0x40011000

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_GPIO_Init+0x4c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <MX_GPIO_Init+0x4c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <MX_GPIO_Init+0x4c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_GPIO_Init+0x4c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <MX_GPIO_Init+0x4c>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_GPIO_Init+0x4c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	if(htim == &htim10 )
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d106      	bne.n	8000a3a <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		xQueueSendToBackFromISR(buffer.xQueue1_ultrs, (void*)(&(TIM10->CCR1)) ,NULL);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2200      	movs	r2, #0
 8000a34:	4905      	ldr	r1, [pc, #20]	; (8000a4c <HAL_TIM_IC_CaptureCallback+0x30>)
 8000a36:	f003 fb3f 	bl	80040b8 <xQueueGenericSendFromISR>
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000548 	.word	0x20000548
 8000a48:	20000634 	.word	0x20000634
 8000a4c:	40014434 	.word	0x40014434

08000a50 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if(htim == &htim11)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d103      	bne.n	8000a68 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
	{
		HAL_TIM_PWM_Stop_IT(&htim11, TIM_CHANNEL_1);
 8000a60:	2100      	movs	r1, #0
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000a64:	f001 fbf8 	bl	8002258 <HAL_TIM_PWM_Stop_IT>
	}
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000590 	.word	0x20000590

08000a74 <vCallbackFunctionTimer1>:

void vCallbackFunctionTimer1( TimerHandle_t xTimer )
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_IT(&htim11, TIM_CHANNEL_1);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <vCallbackFunctionTimer1+0x18>)
 8000a80:	f001 faec 	bl	800205c <HAL_TIM_PWM_Start_IT>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000590 	.word	0x20000590

08000a90 <vApplicationIdleHook>:

void vApplicationIdleHook(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8000a94:	bf00      	nop
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <ultrasonic_dis>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ultrasonic_dis */
void ultrasonic_dis(void const * argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <ultrasonic_dis+0x80>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	491c      	ldr	r1, [pc, #112]	; (8000b24 <ultrasonic_dis+0x84>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f003 fb9c 	bl	80041f0 <xQueueReceive>
	  uint16_t temp1 = buffer.distance_ultrs;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <ultrasonic_dis+0x80>)
 8000aba:	889b      	ldrh	r3, [r3, #4]
 8000abc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  xQueueReceive(buffer.xQueue1_ultrs, (void*)(&(buffer.distance_ultrs)), portMAX_DELAY);
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <ultrasonic_dis+0x80>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac6:	4917      	ldr	r1, [pc, #92]	; (8000b24 <ultrasonic_dis+0x84>)
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 fb91 	bl	80041f0 <xQueueReceive>
	  uint16_t temp2 = buffer.distance_ultrs;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <ultrasonic_dis+0x80>)
 8000ad0:	889b      	ldrh	r3, [r3, #4]
 8000ad2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  uint16_t temp3 = temp2 - temp1;
 8000ad4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000ad6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	857b      	strh	r3, [r7, #42]	; 0x2a
	  char string_buff[30] = {0};
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	831a      	strh	r2, [r3, #24]
      sprintf(string_buff, "%d \r\n", temp3);
 8000af4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	490b      	ldr	r1, [pc, #44]	; (8000b28 <ultrasonic_dis+0x88>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 fcfd 	bl	80064fc <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) string_buff, sizeof(string_buff), 100);
 8000b02:	f107 010c 	add.w	r1, r7, #12
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	221e      	movs	r2, #30
 8000b0a:	4808      	ldr	r0, [pc, #32]	; (8000b2c <ultrasonic_dis+0x8c>)
 8000b0c:	f002 fbf4 	bl	80032f8 <HAL_UART_Transmit>
	  xQueueReset(buffer.xQueue1_ultrs);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <ultrasonic_dis+0x80>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 f896 	bl	8003c48 <xQueueGenericReset>
	  __asm__ volatile("NOP");
 8000b1c:	bf00      	nop
  {
 8000b1e:	e7c3      	b.n	8000aa8 <ultrasonic_dis+0x8>
 8000b20:	20000634 	.word	0x20000634
 8000b24:	20000638 	.word	0x20000638
 8000b28:	08006ee8 	.word	0x08006ee8
 8000b2c:	200005d8 	.word	0x200005d8

08000b30 <line_tracking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_line_tracking */
void line_tracking(void const * argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN line_tracking */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f002 ffbc 	bl	8003ab6 <osDelay>
 8000b3e:	e7fb      	b.n	8000b38 <line_tracking+0x8>

08000b40 <limit_switch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_limit_switch */
void limit_switch(void const * argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN limit_switch */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f002 ffb4 	bl	8003ab6 <osDelay>
 8000b4e:	e7fb      	b.n	8000b48 <limit_switch+0x8>

08000b50 <infrared_motion>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infrared_motion */
void infrared_motion(void const * argument)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN infrared_motion */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f002 ffac 	bl	8003ab6 <osDelay>
 8000b5e:	e7fb      	b.n	8000b58 <infrared_motion+0x8>

08000b60 <accelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_accelerometer */
void accelerometer(void const * argument)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accelerometer */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f002 ffa4 	bl	8003ab6 <osDelay>
 8000b6e:	e7fb      	b.n	8000b68 <accelerometer+0x8>

08000b70 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void const * argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f002 ff9c 	bl	8003ab6 <osDelay>
 8000b7e:	e7fb      	b.n	8000b78 <motors+0x8>

08000b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b92:	f000 fa47 	bl	8001024 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba2:	b672      	cpsid	i
}
 8000ba4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <Error_Handler+0x8>

08000ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_MspInit+0x54>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_MspInit+0x54>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x54>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_MspInit+0x54>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_MspInit+0x54>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_MspInit+0x54>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	210f      	movs	r1, #15
 8000bea:	f06f 0001 	mvn.w	r0, #1
 8000bee:	f000 faf1 	bl	80011d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM10)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d135      	bne.n	8000c8e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a29      	ldr	r2, [pc, #164]	; (8000cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <HAL_TIM_Base_MspInit+0xd4>)
 8000c78:	f000 fad6 	bl	8001228 <HAL_GPIO_Init>

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2105      	movs	r1, #5
 8000c80:	2019      	movs	r0, #25
 8000c82:	f000 faa7 	bl	80011d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c86:	2019      	movs	r0, #25
 8000c88:	f000 fac0 	bl	800120c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000c8c:	e01a      	b.n	8000cc4 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM11)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <HAL_TIM_Base_MspInit+0xd8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d115      	bne.n	8000cc4 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca0:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	201a      	movs	r0, #26
 8000cba:	f000 fa8b 	bl	80011d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000cbe:	201a      	movs	r0, #26
 8000cc0:	f000 faa4 	bl	800120c <HAL_NVIC_EnableIRQ>
}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40014400 	.word	0x40014400
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40014800 	.word	0x40014800

08000cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <HAL_TIM_MspPostInit+0x68>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d11e      	bne.n	8000d3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_TIM_MspPostInit+0x6c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <HAL_TIM_MspPostInit+0x6c>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_TIM_MspPostInit+0x6c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d24:	2302      	movs	r3, #2
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_TIM_MspPostInit+0x70>)
 8000d38:	f000 fa76 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40014800 	.word	0x40014800
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020400 	.word	0x40020400

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <HAL_UART_MspInit+0x84>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d12c      	bne.n	8000dcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d7c:	f043 0310 	orr.w	r3, r3, #16
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f003 0310 	and.w	r3, r3, #16
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000daa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_UART_MspInit+0x8c>)
 8000dc8:	f000 fa2e 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	201c      	movs	r0, #28
 8000df6:	f000 f9ed 	bl	80011d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dfa:	201c      	movs	r0, #28
 8000dfc:	f000 fa06 	bl	800120c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_InitTick+0xa8>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_InitTick+0xa8>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_InitTick+0xa8>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e1c:	f107 0210 	add.w	r2, r7, #16
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 ffda 	bl	8001de0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e2c:	f000 ffb0 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8000e30:	4603      	mov	r3, r0
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <HAL_InitTick+0xac>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	0c9b      	lsrs	r3, r3, #18
 8000e40:	3b01      	subs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0xb0>)
 8000e46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_InitTick+0xb0>)
 8000e4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e52:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_InitTick+0xb0>)
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_InitTick+0xb0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_InitTick+0xb0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000e66:	480a      	ldr	r0, [pc, #40]	; (8000e90 <HAL_InitTick+0xb0>)
 8000e68:	f000 ffec 	bl	8001e44 <HAL_TIM_Base_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d104      	bne.n	8000e7c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <HAL_InitTick+0xb0>)
 8000e74:	f001 f836 	bl	8001ee4 <HAL_TIM_Base_Start_IT>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	e000      	b.n	8000e7e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3730      	adds	r7, #48	; 0x30
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	431bde83 	.word	0x431bde83
 8000e90:	20000640 	.word	0x20000640

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ec6:	f001 fbed 	bl	80026a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000548 	.word	0x20000548

08000ed4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000eda:	f001 fbe3 	bl	80026a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000590 	.word	0x20000590

08000ee8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <TIM2_IRQHandler+0x10>)
 8000eee:	f001 fbd9 	bl	80026a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000640 	.word	0x20000640

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f005 faa6 	bl	800647c <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20018000 	.word	0x20018000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	20000688 	.word	0x20000688
 8000f64:	20003838 	.word	0x20003838

08000f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f005 fa65 	bl	8006488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff fb15 	bl	80005ec <main>
  bx  lr    
 8000fc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fd0:	08006f64 	.word	0x08006f64
  ldr r2, =_sbss
 8000fd4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fd8:	20003838 	.word	0x20003838

08000fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <HAL_Init+0x40>)
 8000fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_Init+0x40>)
 8000ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x40>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f8d8 	bl	80011be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	200f      	movs	r0, #15
 8001010:	f7ff fee6 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fdc8 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023c00 	.word	0x40023c00

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	2000068c 	.word	0x2000068c

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000068c 	.word	0x2000068c

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db0b      	blt.n	80010f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 021f 	and.w	r2, r3, #31
 80010e0:	4907      	ldr	r1, [pc, #28]	; (8001100 <__NVIC_EnableIRQ+0x38>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f202 	lsl.w	r2, r0, r2
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff4c 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e6:	f7ff ff61 	bl	80010ac <__NVIC_GetPriorityGrouping>
 80011ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	68b9      	ldr	r1, [r7, #8]
 80011f0:	6978      	ldr	r0, [r7, #20]
 80011f2:	f7ff ffb1 	bl	8001158 <NVIC_EncodePriority>
 80011f6:	4602      	mov	r2, r0
 80011f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff80 	bl	8001104 <__NVIC_SetPriority>
}
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff54 	bl	80010c8 <__NVIC_EnableIRQ>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e159      	b.n	80014f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	429a      	cmp	r2, r3
 800125e:	f040 8148 	bne.w	80014f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d005      	beq.n	800127a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	2b02      	cmp	r3, #2
 8001278:	d130      	bne.n	80012dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 0201 	and.w	r2, r3, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d017      	beq.n	8001318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d123      	bne.n	800136c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	69b9      	ldr	r1, [r7, #24]
 8001368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80a2 	beq.w	80014f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HAL_GPIO_Init+0x2e8>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a56      	ldr	r2, [pc, #344]	; (8001510 <HAL_GPIO_Init+0x2e8>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b54      	ldr	r3, [pc, #336]	; (8001510 <HAL_GPIO_Init+0x2e8>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ca:	4a52      	ldr	r2, [pc, #328]	; (8001514 <HAL_GPIO_Init+0x2ec>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a49      	ldr	r2, [pc, #292]	; (8001518 <HAL_GPIO_Init+0x2f0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x202>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a48      	ldr	r2, [pc, #288]	; (800151c <HAL_GPIO_Init+0x2f4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x1fe>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a47      	ldr	r2, [pc, #284]	; (8001520 <HAL_GPIO_Init+0x2f8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x1fa>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a46      	ldr	r2, [pc, #280]	; (8001524 <HAL_GPIO_Init+0x2fc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x1f6>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a45      	ldr	r2, [pc, #276]	; (8001528 <HAL_GPIO_Init+0x300>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x1f2>
 8001416:	2304      	movs	r3, #4
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x204>
 800141a:	2307      	movs	r3, #7
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x204>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x204>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x204>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x204>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143c:	4935      	ldr	r1, [pc, #212]	; (8001514 <HAL_GPIO_Init+0x2ec>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <HAL_GPIO_Init+0x304>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146e:	4a2f      	ldr	r2, [pc, #188]	; (800152c <HAL_GPIO_Init+0x304>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <HAL_GPIO_Init+0x304>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001498:	4a24      	ldr	r2, [pc, #144]	; (800152c <HAL_GPIO_Init+0x304>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_GPIO_Init+0x304>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c2:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_GPIO_Init+0x304>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_GPIO_Init+0x304>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ec:	4a0f      	ldr	r2, [pc, #60]	; (800152c <HAL_GPIO_Init+0x304>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f aea2 	bls.w	8001244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40013800 	.word	0x40013800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e267      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d075      	beq.n	800163a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154e:	4b88      	ldr	r3, [pc, #544]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b04      	cmp	r3, #4
 8001558:	d00c      	beq.n	8001574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155a:	4b85      	ldr	r3, [pc, #532]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001562:	2b08      	cmp	r3, #8
 8001564:	d112      	bne.n	800158c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001566:	4b82      	ldr	r3, [pc, #520]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001572:	d10b      	bne.n	800158c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	4b7e      	ldr	r3, [pc, #504]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d05b      	beq.n	8001638 <HAL_RCC_OscConfig+0x108>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d157      	bne.n	8001638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e242      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d106      	bne.n	80015a4 <HAL_RCC_OscConfig+0x74>
 8001596:	4b76      	ldr	r3, [pc, #472]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a75      	ldr	r2, [pc, #468]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e01d      	b.n	80015e0 <HAL_RCC_OscConfig+0xb0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x98>
 80015ae:	4b70      	ldr	r3, [pc, #448]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6f      	ldr	r2, [pc, #444]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b6d      	ldr	r3, [pc, #436]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a6c      	ldr	r2, [pc, #432]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0xb0>
 80015c8:	4b69      	ldr	r3, [pc, #420]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a68      	ldr	r2, [pc, #416]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b66      	ldr	r3, [pc, #408]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a65      	ldr	r2, [pc, #404]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fd30 	bl	800104c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fd2c 	bl	800104c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e207      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b5b      	ldr	r3, [pc, #364]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0xc0>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fd1c 	bl	800104c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fd18 	bl	800104c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1f3      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	4b51      	ldr	r3, [pc, #324]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0xe8>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d063      	beq.n	800170e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001646:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800165a:	2b08      	cmp	r3, #8
 800165c:	d11c      	bne.n	8001698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165e:	4b44      	ldr	r3, [pc, #272]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d116      	bne.n	8001698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x152>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e1c7      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4937      	ldr	r1, [pc, #220]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	e03a      	b.n	800170e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a0:	4b34      	ldr	r3, [pc, #208]	; (8001774 <HAL_RCC_OscConfig+0x244>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a6:	f7ff fcd1 	bl	800104c <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ae:	f7ff fccd 	bl	800104c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e1a8      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4925      	ldr	r1, [pc, #148]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
 80016e0:	e015      	b.n	800170e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_RCC_OscConfig+0x244>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fcb0 	bl	800104c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff fcac 	bl	800104c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e187      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d036      	beq.n	8001788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d016      	beq.n	8001750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_RCC_OscConfig+0x248>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fc90 	bl	800104c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fc8c 	bl	800104c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e167      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_OscConfig+0x240>)
 8001744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x200>
 800174e:	e01b      	b.n	8001788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_RCC_OscConfig+0x248>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fc79 	bl	800104c <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175c:	e00e      	b.n	800177c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175e:	f7ff fc75 	bl	800104c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d907      	bls.n	800177c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e150      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
 8001770:	40023800 	.word	0x40023800
 8001774:	42470000 	.word	0x42470000
 8001778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ea      	bne.n	800175e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8097 	beq.w	80018c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179a:	4b81      	ldr	r3, [pc, #516]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10f      	bne.n	80017c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a7c      	ldr	r2, [pc, #496]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b7a      	ldr	r3, [pc, #488]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	4b77      	ldr	r3, [pc, #476]	; (80019a4 <HAL_RCC_OscConfig+0x474>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d2:	4b74      	ldr	r3, [pc, #464]	; (80019a4 <HAL_RCC_OscConfig+0x474>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a73      	ldr	r2, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x474>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017de:	f7ff fc35 	bl	800104c <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fc31 	bl	800104c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e10c      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_OscConfig+0x474>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x2ea>
 800180c:	4b64      	ldr	r3, [pc, #400]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001810:	4a63      	ldr	r2, [pc, #396]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6713      	str	r3, [r2, #112]	; 0x70
 8001818:	e01c      	b.n	8001854 <HAL_RCC_OscConfig+0x324>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x30c>
 8001822:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001826:	4a5e      	ldr	r2, [pc, #376]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6713      	str	r3, [r2, #112]	; 0x70
 800182e:	4b5c      	ldr	r3, [pc, #368]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	4a5b      	ldr	r2, [pc, #364]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6713      	str	r3, [r2, #112]	; 0x70
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0x324>
 800183c:	4b58      	ldr	r3, [pc, #352]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	4a57      	ldr	r2, [pc, #348]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	6713      	str	r3, [r2, #112]	; 0x70
 8001848:	4b55      	ldr	r3, [pc, #340]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	4a54      	ldr	r2, [pc, #336]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 800184e:	f023 0304 	bic.w	r3, r3, #4
 8001852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d015      	beq.n	8001888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff fbf6 	bl	800104c <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001862:	e00a      	b.n	800187a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001864:	f7ff fbf2 	bl	800104c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e0cb      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0ee      	beq.n	8001864 <HAL_RCC_OscConfig+0x334>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001888:	f7ff fbe0 	bl	800104c <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f7ff fbdc 	bl	800104c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e0b5      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a6:	4b3e      	ldr	r3, [pc, #248]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1ee      	bne.n	8001890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b8:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	4a38      	ldr	r2, [pc, #224]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 80018be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80a1 	beq.w	8001a10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ce:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d05c      	beq.n	8001994 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d141      	bne.n	8001966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_RCC_OscConfig+0x478>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fbb0 	bl	800104c <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff fbac 	bl	800104c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e087      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001902:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69da      	ldr	r2, [r3, #28]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	019b      	lsls	r3, r3, #6
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	3b01      	subs	r3, #1
 8001928:	041b      	lsls	r3, r3, #16
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	491b      	ldr	r1, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x478>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fb85 	bl	800104c <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff fb81 	bl	800104c <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e05c      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x416>
 8001964:	e054      	b.n	8001a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_RCC_OscConfig+0x478>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fb6e 	bl	800104c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff fb6a 	bl	800104c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e045      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_RCC_OscConfig+0x470>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x444>
 8001992:	e03d      	b.n	8001a10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d107      	bne.n	80019ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e038      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40007000 	.word	0x40007000
 80019a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x4ec>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d028      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d121      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d11a      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019dc:	4013      	ands	r3, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d111      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	085b      	lsrs	r3, r3, #1
 80019f4:	3b01      	subs	r3, #1
 80019f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0cc      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a34:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d90c      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b65      	ldr	r3, [pc, #404]	; (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0b8      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a8c:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a98:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	494d      	ldr	r1, [pc, #308]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d044      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d119      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e07f      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d003      	beq.n	8001ade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ade:	4b3f      	ldr	r3, [pc, #252]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e06f      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e067      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afe:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f023 0203 	bic.w	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4934      	ldr	r1, [pc, #208]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b10:	f7ff fa9c 	bl	800104c <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f7ff fa98 	bl	800104c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e04f      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 020c 	and.w	r2, r3, #12
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1eb      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d20c      	bcs.n	8001b68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e032      	b.n	8001bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4916      	ldr	r1, [pc, #88]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	490e      	ldr	r1, [pc, #56]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ba6:	f000 f821 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	490a      	ldr	r1, [pc, #40]	; (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	5ccb      	ldrb	r3, [r1, r3]
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f90a 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023c00 	.word	0x40023c00
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	08006f08 	.word	0x08006f08
 8001be4:	20000000 	.word	0x20000000
 8001be8:	20000004 	.word	0x20000004

08001bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf0:	b090      	sub	sp, #64	; 0x40
 8001bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d00d      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x40>
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	f200 80a1 	bhi.w	8001d58 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0x34>
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d003      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c1e:	e09b      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c20:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c24:	e09b      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c26:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c2a:	e098      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c36:	4b4d      	ldr	r3, [pc, #308]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d028      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c42:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	099b      	lsrs	r3, r3, #6
 8001c48:	2200      	movs	r2, #0
 8001c4a:	623b      	str	r3, [r7, #32]
 8001c4c:	627a      	str	r2, [r7, #36]	; 0x24
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c54:	2100      	movs	r1, #0
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c58:	fb03 f201 	mul.w	r2, r3, r1
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	fb00 f303 	mul.w	r3, r0, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	4a43      	ldr	r2, [pc, #268]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c66:	fba0 1202 	umull	r1, r2, r0, r2
 8001c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c72:	4413      	add	r3, r2
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	61fa      	str	r2, [r7, #28]
 8001c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c86:	f7fe fafb 	bl	8000280 <__aeabi_uldivmod>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4613      	mov	r3, r2
 8001c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c92:	e053      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c94:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	099b      	lsrs	r3, r3, #6
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	617a      	str	r2, [r7, #20]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ca6:	f04f 0b00 	mov.w	fp, #0
 8001caa:	4652      	mov	r2, sl
 8001cac:	465b      	mov	r3, fp
 8001cae:	f04f 0000 	mov.w	r0, #0
 8001cb2:	f04f 0100 	mov.w	r1, #0
 8001cb6:	0159      	lsls	r1, r3, #5
 8001cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cbc:	0150      	lsls	r0, r2, #5
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	ebb2 080a 	subs.w	r8, r2, sl
 8001cc6:	eb63 090b 	sbc.w	r9, r3, fp
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cde:	ebb2 0408 	subs.w	r4, r2, r8
 8001ce2:	eb63 0509 	sbc.w	r5, r3, r9
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	00eb      	lsls	r3, r5, #3
 8001cf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf4:	00e2      	lsls	r2, r4, #3
 8001cf6:	4614      	mov	r4, r2
 8001cf8:	461d      	mov	r5, r3
 8001cfa:	eb14 030a 	adds.w	r3, r4, sl
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	eb45 030b 	adc.w	r3, r5, fp
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d12:	4629      	mov	r1, r5
 8001d14:	028b      	lsls	r3, r1, #10
 8001d16:	4621      	mov	r1, r4
 8001d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	028a      	lsls	r2, r1, #10
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d26:	2200      	movs	r2, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	60fa      	str	r2, [r7, #12]
 8001d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d30:	f7fe faa6 	bl	8000280 <__aeabi_uldivmod>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d56:	e002      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3740      	adds	r7, #64	; 0x40
 8001d64:	46bd      	mov	sp, r7
 8001d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	017d7840 	.word	0x017d7840

08001d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4903      	ldr	r1, [pc, #12]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08006f18 	.word	0x08006f18

08001db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dbc:	f7ff ffdc 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	08006f18 	.word	0x08006f18

08001de0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	220f      	movs	r2, #15
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_RCC_GetClockConfig+0x60>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0207 	and.w	r2, r3, #7
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	601a      	str	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e041      	b.n	8001eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fec8 	bl	8000c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f000 fe88 	bl	8002b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d001      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e044      	b.n	8001f86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d018      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x6c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f26:	d013      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x6c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00e      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x6c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_TIM_Base_Start_IT+0xb8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x6c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x6c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d111      	bne.n	8001f74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d010      	beq.n	8001f84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f72:	e007      	b.n	8001f84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	40000c00 	.word	0x40000c00
 8001fa4:	40014000 	.word	0x40014000

08001fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e041      	b.n	800203e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f839 	bl	8002046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f000 fdd6 	bl	8002b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_TIM_PWM_Start_IT+0x28>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e022      	b.n	80020ca <HAL_TIM_PWM_Start_IT+0x6e>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b04      	cmp	r3, #4
 8002088:	d109      	bne.n	800209e <HAL_TIM_PWM_Start_IT+0x42>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b01      	cmp	r3, #1
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	e015      	b.n	80020ca <HAL_TIM_PWM_Start_IT+0x6e>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d109      	bne.n	80020b8 <HAL_TIM_PWM_Start_IT+0x5c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e008      	b.n	80020ca <HAL_TIM_PWM_Start_IT+0x6e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0b3      	b.n	800223a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <HAL_TIM_PWM_Start_IT+0x86>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e0:	e013      	b.n	800210a <HAL_TIM_PWM_Start_IT+0xae>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d104      	bne.n	80020f2 <HAL_TIM_PWM_Start_IT+0x96>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f0:	e00b      	b.n	800210a <HAL_TIM_PWM_Start_IT+0xae>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d104      	bne.n	8002102 <HAL_TIM_PWM_Start_IT+0xa6>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002100:	e003      	b.n	800210a <HAL_TIM_PWM_Start_IT+0xae>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b0c      	cmp	r3, #12
 800210e:	d841      	bhi.n	8002194 <HAL_TIM_PWM_Start_IT+0x138>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	0800214d 	.word	0x0800214d
 800211c:	08002195 	.word	0x08002195
 8002120:	08002195 	.word	0x08002195
 8002124:	08002195 	.word	0x08002195
 8002128:	0800215f 	.word	0x0800215f
 800212c:	08002195 	.word	0x08002195
 8002130:	08002195 	.word	0x08002195
 8002134:	08002195 	.word	0x08002195
 8002138:	08002171 	.word	0x08002171
 800213c:	08002195 	.word	0x08002195
 8002140:	08002195 	.word	0x08002195
 8002144:	08002195 	.word	0x08002195
 8002148:	08002183 	.word	0x08002183
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0202 	orr.w	r2, r2, #2
 800215a:	60da      	str	r2, [r3, #12]
      break;
 800215c:	e01d      	b.n	800219a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0204 	orr.w	r2, r2, #4
 800216c:	60da      	str	r2, [r3, #12]
      break;
 800216e:	e014      	b.n	800219a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0208 	orr.w	r2, r2, #8
 800217e:	60da      	str	r2, [r3, #12]
      break;
 8002180:	e00b      	b.n	800219a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0210 	orr.w	r2, r2, #16
 8002190:	60da      	str	r2, [r3, #12]
      break;
 8002192:	e002      	b.n	800219a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
      break;
 8002198:	bf00      	nop
  }

  if (status == HAL_OK)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d14b      	bne.n	8002238 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2201      	movs	r2, #1
 80021a6:	6839      	ldr	r1, [r7, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f001 f81f 	bl	80031ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a24      	ldr	r2, [pc, #144]	; (8002244 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d107      	bne.n	80021c8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d018      	beq.n	8002204 <HAL_TIM_PWM_Start_IT+0x1a8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021da:	d013      	beq.n	8002204 <HAL_TIM_PWM_Start_IT+0x1a8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00e      	beq.n	8002204 <HAL_TIM_PWM_Start_IT+0x1a8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a18      	ldr	r2, [pc, #96]	; (800224c <HAL_TIM_PWM_Start_IT+0x1f0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_TIM_PWM_Start_IT+0x1a8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a16      	ldr	r2, [pc, #88]	; (8002250 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d004      	beq.n	8002204 <HAL_TIM_PWM_Start_IT+0x1a8>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d111      	bne.n	8002228 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b06      	cmp	r3, #6
 8002214:	d010      	beq.n	8002238 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0201 	orr.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002226:	e007      	b.n	8002238 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	40000400 	.word	0x40000400
 800224c:	40000800 	.word	0x40000800
 8002250:	40000c00 	.word	0x40000c00
 8002254:	40014000 	.word	0x40014000

08002258 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d841      	bhi.n	80022f0 <HAL_TIM_PWM_Stop_IT+0x98>
 800226c:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	080022a9 	.word	0x080022a9
 8002278:	080022f1 	.word	0x080022f1
 800227c:	080022f1 	.word	0x080022f1
 8002280:	080022f1 	.word	0x080022f1
 8002284:	080022bb 	.word	0x080022bb
 8002288:	080022f1 	.word	0x080022f1
 800228c:	080022f1 	.word	0x080022f1
 8002290:	080022f1 	.word	0x080022f1
 8002294:	080022cd 	.word	0x080022cd
 8002298:	080022f1 	.word	0x080022f1
 800229c:	080022f1 	.word	0x080022f1
 80022a0:	080022f1 	.word	0x080022f1
 80022a4:	080022df 	.word	0x080022df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0202 	bic.w	r2, r2, #2
 80022b6:	60da      	str	r2, [r3, #12]
      break;
 80022b8:	e01d      	b.n	80022f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0204 	bic.w	r2, r2, #4
 80022c8:	60da      	str	r2, [r3, #12]
      break;
 80022ca:	e014      	b.n	80022f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0208 	bic.w	r2, r2, #8
 80022da:	60da      	str	r2, [r3, #12]
      break;
 80022dc:	e00b      	b.n	80022f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0210 	bic.w	r2, r2, #16
 80022ec:	60da      	str	r2, [r3, #12]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
      break;
 80022f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d157      	bne.n	80023ac <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2200      	movs	r2, #0
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 ff71 	bl	80031ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <HAL_TIM_PWM_Stop_IT+0x160>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d117      	bne.n	8002344 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	f241 1311 	movw	r3, #4369	; 0x1111
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_TIM_PWM_Stop_IT+0xec>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6a1a      	ldr	r2, [r3, #32]
 800232a:	f240 4344 	movw	r3, #1092	; 0x444
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d107      	bne.n	8002344 <HAL_TIM_PWM_Stop_IT+0xec>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6a1a      	ldr	r2, [r3, #32]
 800234a:	f241 1311 	movw	r3, #4369	; 0x1111
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10f      	bne.n	8002374 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a1a      	ldr	r2, [r3, #32]
 800235a:	f240 4344 	movw	r3, #1092	; 0x444
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d107      	bne.n	8002374 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d104      	bne.n	8002384 <HAL_TIM_PWM_Stop_IT+0x12c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002382:	e013      	b.n	80023ac <HAL_TIM_PWM_Stop_IT+0x154>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b04      	cmp	r3, #4
 8002388:	d104      	bne.n	8002394 <HAL_TIM_PWM_Stop_IT+0x13c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002392:	e00b      	b.n	80023ac <HAL_TIM_PWM_Stop_IT+0x154>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b08      	cmp	r3, #8
 8002398:	d104      	bne.n	80023a4 <HAL_TIM_PWM_Stop_IT+0x14c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a2:	e003      	b.n	80023ac <HAL_TIM_PWM_Stop_IT+0x154>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40010000 	.word	0x40010000

080023bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e041      	b.n	8002452 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f839 	bl	800245a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3304      	adds	r3, #4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f000 fbcc 	bl	8002b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d104      	bne.n	800248e <HAL_TIM_IC_Start_IT+0x1e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800248a:	b2db      	uxtb	r3, r3
 800248c:	e013      	b.n	80024b6 <HAL_TIM_IC_Start_IT+0x46>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d104      	bne.n	800249e <HAL_TIM_IC_Start_IT+0x2e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800249a:	b2db      	uxtb	r3, r3
 800249c:	e00b      	b.n	80024b6 <HAL_TIM_IC_Start_IT+0x46>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d104      	bne.n	80024ae <HAL_TIM_IC_Start_IT+0x3e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	e003      	b.n	80024b6 <HAL_TIM_IC_Start_IT+0x46>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <HAL_TIM_IC_Start_IT+0x58>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e013      	b.n	80024f0 <HAL_TIM_IC_Start_IT+0x80>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d104      	bne.n	80024d8 <HAL_TIM_IC_Start_IT+0x68>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e00b      	b.n	80024f0 <HAL_TIM_IC_Start_IT+0x80>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d104      	bne.n	80024e8 <HAL_TIM_IC_Start_IT+0x78>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	e003      	b.n	80024f0 <HAL_TIM_IC_Start_IT+0x80>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80024f2:	7bbb      	ldrb	r3, [r7, #14]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d102      	bne.n	80024fe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80024f8:	7b7b      	ldrb	r3, [r7, #13]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0c2      	b.n	8002688 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <HAL_TIM_IC_Start_IT+0xa2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002510:	e013      	b.n	800253a <HAL_TIM_IC_Start_IT+0xca>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d104      	bne.n	8002522 <HAL_TIM_IC_Start_IT+0xb2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002520:	e00b      	b.n	800253a <HAL_TIM_IC_Start_IT+0xca>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d104      	bne.n	8002532 <HAL_TIM_IC_Start_IT+0xc2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002530:	e003      	b.n	800253a <HAL_TIM_IC_Start_IT+0xca>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <HAL_TIM_IC_Start_IT+0xda>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002548:	e013      	b.n	8002572 <HAL_TIM_IC_Start_IT+0x102>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d104      	bne.n	800255a <HAL_TIM_IC_Start_IT+0xea>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002558:	e00b      	b.n	8002572 <HAL_TIM_IC_Start_IT+0x102>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d104      	bne.n	800256a <HAL_TIM_IC_Start_IT+0xfa>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	e003      	b.n	8002572 <HAL_TIM_IC_Start_IT+0x102>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b0c      	cmp	r3, #12
 8002576:	d841      	bhi.n	80025fc <HAL_TIM_IC_Start_IT+0x18c>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <HAL_TIM_IC_Start_IT+0x110>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	080025b5 	.word	0x080025b5
 8002584:	080025fd 	.word	0x080025fd
 8002588:	080025fd 	.word	0x080025fd
 800258c:	080025fd 	.word	0x080025fd
 8002590:	080025c7 	.word	0x080025c7
 8002594:	080025fd 	.word	0x080025fd
 8002598:	080025fd 	.word	0x080025fd
 800259c:	080025fd 	.word	0x080025fd
 80025a0:	080025d9 	.word	0x080025d9
 80025a4:	080025fd 	.word	0x080025fd
 80025a8:	080025fd 	.word	0x080025fd
 80025ac:	080025fd 	.word	0x080025fd
 80025b0:	080025eb 	.word	0x080025eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0202 	orr.w	r2, r2, #2
 80025c2:	60da      	str	r2, [r3, #12]
      break;
 80025c4:	e01d      	b.n	8002602 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0204 	orr.w	r2, r2, #4
 80025d4:	60da      	str	r2, [r3, #12]
      break;
 80025d6:	e014      	b.n	8002602 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0208 	orr.w	r2, r2, #8
 80025e6:	60da      	str	r2, [r3, #12]
      break;
 80025e8:	e00b      	b.n	8002602 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0210 	orr.w	r2, r2, #16
 80025f8:	60da      	str	r2, [r3, #12]
      break;
 80025fa:	e002      	b.n	8002602 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002600:	bf00      	nop
  }

  if (status == HAL_OK)
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d13e      	bne.n	8002686 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	6839      	ldr	r1, [r7, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fdeb 	bl	80031ec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_TIM_IC_Start_IT+0x220>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_TIM_IC_Start_IT+0x1e2>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d013      	beq.n	8002652 <HAL_TIM_IC_Start_IT+0x1e2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a19      	ldr	r2, [pc, #100]	; (8002694 <HAL_TIM_IC_Start_IT+0x224>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_TIM_IC_Start_IT+0x1e2>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a17      	ldr	r2, [pc, #92]	; (8002698 <HAL_TIM_IC_Start_IT+0x228>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_TIM_IC_Start_IT+0x1e2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_TIM_IC_Start_IT+0x22c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_TIM_IC_Start_IT+0x1e2>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_TIM_IC_Start_IT+0x230>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d111      	bne.n	8002676 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b06      	cmp	r3, #6
 8002662:	d010      	beq.n	8002686 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002674:	e007      	b.n	8002686 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40010000 	.word	0x40010000
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800
 800269c:	40000c00 	.word	0x40000c00
 80026a0:	40014000 	.word	0x40014000

080026a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d122      	bne.n	8002700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d11b      	bne.n	8002700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0202 	mvn.w	r2, #2
 80026d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe f998 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa3e 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7fe f9ab 	bl	8000a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b04      	cmp	r3, #4
 800270c:	d122      	bne.n	8002754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b04      	cmp	r3, #4
 800271a:	d11b      	bne.n	8002754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0204 	mvn.w	r2, #4
 8002724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe f96e 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 8002740:	e005      	b.n	800274e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fa14 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7fe f981 	bl	8000a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b08      	cmp	r3, #8
 8002760:	d122      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b08      	cmp	r3, #8
 800276e:	d11b      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0208 	mvn.w	r2, #8
 8002778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2204      	movs	r2, #4
 800277e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe f944 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f9ea 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7fe f957 	bl	8000a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b10      	cmp	r3, #16
 80027b4:	d122      	bne.n	80027fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d11b      	bne.n	80027fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0210 	mvn.w	r2, #16
 80027cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2208      	movs	r2, #8
 80027d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe f91a 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f9c0 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fe f92d 	bl	8000a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10e      	bne.n	8002828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0201 	mvn.w	r2, #1
 8002820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe f9ac 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	2b80      	cmp	r3, #128	; 0x80
 8002834:	d10e      	bne.n	8002854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	d107      	bne.n	8002854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800284c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fcfb 	bl	800324a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	2b40      	cmp	r3, #64	; 0x40
 8002860:	d10e      	bne.n	8002880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d107      	bne.n	8002880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f982 	bl	8002b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b20      	cmp	r3, #32
 800288c:	d10e      	bne.n	80028ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b20      	cmp	r3, #32
 800289a:	d107      	bne.n	80028ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0220 	mvn.w	r2, #32
 80028a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fcc5 	bl	8003236 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e088      	b.n	80029e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	6819      	ldr	r1, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f000 fb5e 	bl	8002fb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 020c 	bic.w	r2, r2, #12
 8002902:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6999      	ldr	r1, [r3, #24]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	619a      	str	r2, [r3, #24]
 8002916:	e060      	b.n	80029da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b04      	cmp	r3, #4
 800291c:	d11c      	bne.n	8002958 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	6819      	ldr	r1, [r3, #0]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f000 fba7 	bl	8003080 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699a      	ldr	r2, [r3, #24]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002940:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6999      	ldr	r1, [r3, #24]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	021a      	lsls	r2, r3, #8
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	619a      	str	r2, [r3, #24]
 8002956:	e040      	b.n	80029da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b08      	cmp	r3, #8
 800295c:	d11b      	bne.n	8002996 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f000 fbc4 	bl	80030fa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 020c 	bic.w	r2, r2, #12
 8002980:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69d9      	ldr	r1, [r3, #28]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	61da      	str	r2, [r3, #28]
 8002994:	e021      	b.n	80029da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d11c      	bne.n	80029d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f000 fbe1 	bl	8003172 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80029be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69d9      	ldr	r1, [r3, #28]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	021a      	lsls	r2, r3, #8
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	61da      	str	r2, [r3, #28]
 80029d4:	e001      	b.n	80029da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0ae      	b.n	8002b68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	f200 809f 	bhi.w	8002b58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a1a:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a55 	.word	0x08002a55
 8002a24:	08002b59 	.word	0x08002b59
 8002a28:	08002b59 	.word	0x08002b59
 8002a2c:	08002b59 	.word	0x08002b59
 8002a30:	08002a95 	.word	0x08002a95
 8002a34:	08002b59 	.word	0x08002b59
 8002a38:	08002b59 	.word	0x08002b59
 8002a3c:	08002b59 	.word	0x08002b59
 8002a40:	08002ad7 	.word	0x08002ad7
 8002a44:	08002b59 	.word	0x08002b59
 8002a48:	08002b59 	.word	0x08002b59
 8002a4c:	08002b59 	.word	0x08002b59
 8002a50:	08002b17 	.word	0x08002b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f91c 	bl	8002c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0208 	orr.w	r2, r2, #8
 8002a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0204 	bic.w	r2, r2, #4
 8002a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6999      	ldr	r1, [r3, #24]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	619a      	str	r2, [r3, #24]
      break;
 8002a92:	e064      	b.n	8002b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f962 	bl	8002d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6999      	ldr	r1, [r3, #24]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	021a      	lsls	r2, r3, #8
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	619a      	str	r2, [r3, #24]
      break;
 8002ad4:	e043      	b.n	8002b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f9ad 	bl	8002e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0208 	orr.w	r2, r2, #8
 8002af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0204 	bic.w	r2, r2, #4
 8002b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69d9      	ldr	r1, [r3, #28]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	61da      	str	r2, [r3, #28]
      break;
 8002b14:	e023      	b.n	8002b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f9f7 	bl	8002f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69da      	ldr	r2, [r3, #28]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69d9      	ldr	r1, [r3, #28]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	021a      	lsls	r2, r3, #8
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	61da      	str	r2, [r3, #28]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <TIM_Base_SetConfig+0xe4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00f      	beq.n	8002bd0 <TIM_Base_SetConfig+0x38>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d00b      	beq.n	8002bd0 <TIM_Base_SetConfig+0x38>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <TIM_Base_SetConfig+0xe8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d007      	beq.n	8002bd0 <TIM_Base_SetConfig+0x38>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a30      	ldr	r2, [pc, #192]	; (8002c84 <TIM_Base_SetConfig+0xec>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0x38>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a2f      	ldr	r2, [pc, #188]	; (8002c88 <TIM_Base_SetConfig+0xf0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d108      	bne.n	8002be2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <TIM_Base_SetConfig+0xe4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01b      	beq.n	8002c22 <TIM_Base_SetConfig+0x8a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d017      	beq.n	8002c22 <TIM_Base_SetConfig+0x8a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <TIM_Base_SetConfig+0xe8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <TIM_Base_SetConfig+0x8a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <TIM_Base_SetConfig+0xec>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00f      	beq.n	8002c22 <TIM_Base_SetConfig+0x8a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <TIM_Base_SetConfig+0xf0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00b      	beq.n	8002c22 <TIM_Base_SetConfig+0x8a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <TIM_Base_SetConfig+0xf4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <TIM_Base_SetConfig+0x8a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <TIM_Base_SetConfig+0xf8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d003      	beq.n	8002c22 <TIM_Base_SetConfig+0x8a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <TIM_Base_SetConfig+0xfc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d108      	bne.n	8002c34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <TIM_Base_SetConfig+0xe4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	615a      	str	r2, [r3, #20]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800
 8002c88:	40000c00 	.word	0x40000c00
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	40014400 	.word	0x40014400
 8002c94:	40014800 	.word	0x40014800

08002c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0201 	bic.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <TIM_OC1_SetConfig+0xc8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10c      	bne.n	8002d0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 0308 	bic.w	r3, r3, #8
 8002cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <TIM_OC1_SetConfig+0xc8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d111      	bne.n	8002d3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	621a      	str	r2, [r3, #32]
}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40010000 	.word	0x40010000

08002d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0210 	bic.w	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f023 0320 	bic.w	r3, r3, #32
 8002dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <TIM_OC2_SetConfig+0xd4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10d      	bne.n	8002de0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <TIM_OC2_SetConfig+0xd4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d113      	bne.n	8002e10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40010000 	.word	0x40010000

08002e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <TIM_OC3_SetConfig+0xd0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10d      	bne.n	8002eb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <TIM_OC3_SetConfig+0xd0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d113      	bne.n	8002ee6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	621a      	str	r2, [r3, #32]
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40010000 	.word	0x40010000

08002f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	031b      	lsls	r3, r3, #12
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a10      	ldr	r2, [pc, #64]	; (8002fac <TIM_OC4_SetConfig+0x9c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d109      	bne.n	8002f84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	019b      	lsls	r3, r3, #6
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	621a      	str	r2, [r3, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000

08002fb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f023 0201 	bic.w	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a24      	ldr	r2, [pc, #144]	; (800306c <TIM_TI1_SetConfig+0xbc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <TIM_TI1_SetConfig+0x56>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe4:	d00f      	beq.n	8003006 <TIM_TI1_SetConfig+0x56>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a21      	ldr	r2, [pc, #132]	; (8003070 <TIM_TI1_SetConfig+0xc0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00b      	beq.n	8003006 <TIM_TI1_SetConfig+0x56>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	; (8003074 <TIM_TI1_SetConfig+0xc4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <TIM_TI1_SetConfig+0x56>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4a1f      	ldr	r2, [pc, #124]	; (8003078 <TIM_TI1_SetConfig+0xc8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d003      	beq.n	8003006 <TIM_TI1_SetConfig+0x56>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a1e      	ldr	r2, [pc, #120]	; (800307c <TIM_TI1_SetConfig+0xcc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <TIM_TI1_SetConfig+0x5a>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <TIM_TI1_SetConfig+0x5c>
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f023 0303 	bic.w	r3, r3, #3
 8003016:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	e003      	b.n	800302a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	b2db      	uxtb	r3, r3
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f023 030a 	bic.w	r3, r3, #10
 8003044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 030a 	and.w	r3, r3, #10
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40010000 	.word	0x40010000
 8003070:	40000400 	.word	0x40000400
 8003074:	40000800 	.word	0x40000800
 8003078:	40000c00 	.word	0x40000c00
 800307c:	40014000 	.word	0x40014000

08003080 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f023 0210 	bic.w	r2, r3, #16
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	031b      	lsls	r3, r3, #12
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003136:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	b2db      	uxtb	r3, r3
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800314a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	621a      	str	r2, [r3, #32]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003172:	b480      	push	{r7}
 8003174:	b087      	sub	sp, #28
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	031b      	lsls	r3, r3, #12
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80031c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	031b      	lsls	r3, r3, #12
 80031ca:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	621a      	str	r2, [r3, #32]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2201      	movs	r2, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a1a      	ldr	r2, [r3, #32]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	43db      	mvns	r3, r3
 800320e:	401a      	ands	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	431a      	orrs	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e03f      	b.n	80032f0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fd fd63 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2224      	movs	r2, #36	; 0x24
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f928 	bl	80034f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b20      	cmp	r3, #32
 8003316:	d17c      	bne.n	8003412 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_UART_Transmit+0x2c>
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e075      	b.n	8003414 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_UART_Transmit+0x3e>
 8003332:	2302      	movs	r3, #2
 8003334:	e06e      	b.n	8003414 <HAL_UART_Transmit+0x11c>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2221      	movs	r2, #33	; 0x21
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334c:	f7fd fe7e 	bl	800104c <HAL_GetTick>
 8003350:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	88fa      	ldrh	r2, [r7, #6]
 800335c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003366:	d108      	bne.n	800337a <HAL_UART_Transmit+0x82>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e003      	b.n	8003382 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800338a:	e02a      	b.n	80033e2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2200      	movs	r2, #0
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f840 	bl	800341c <UART_WaitOnFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e036      	b.n	8003414 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	3302      	adds	r3, #2
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	e007      	b.n	80033d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3301      	adds	r3, #1
 80033d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1cf      	bne.n	800338c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2140      	movs	r1, #64	; 0x40
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f810 	bl	800341c <UART_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e006      	b.n	8003414 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e000      	b.n	8003414 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003412:	2302      	movs	r3, #2
  }
}
 8003414:	4618      	mov	r0, r3
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b090      	sub	sp, #64	; 0x40
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342c:	e050      	b.n	80034d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d04c      	beq.n	80034d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <UART_WaitOnFlagUntilTimeout+0x30>
 800343c:	f7fd fe06 	bl	800104c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003448:	429a      	cmp	r2, r3
 800344a:	d241      	bcs.n	80034d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800346c:	637a      	str	r2, [r7, #52]	; 0x34
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e5      	bne.n	800344c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3314      	adds	r3, #20
 8003486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	613b      	str	r3, [r7, #16]
   return(result);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	63bb      	str	r3, [r7, #56]	; 0x38
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3314      	adds	r3, #20
 800349e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a0:	623a      	str	r2, [r7, #32]
 80034a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	69f9      	ldr	r1, [r7, #28]
 80034a6:	6a3a      	ldr	r2, [r7, #32]
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e5      	bne.n	8003480 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e00f      	b.n	80034f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d09f      	beq.n	800342e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3740      	adds	r7, #64	; 0x40
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034fc:	b0c0      	sub	sp, #256	; 0x100
 80034fe:	af00      	add	r7, sp, #0
 8003500:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	68d9      	ldr	r1, [r3, #12]
 8003516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	ea40 0301 	orr.w	r3, r0, r1
 8003520:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	431a      	orrs	r2, r3
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	431a      	orrs	r2, r3
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003550:	f021 010c 	bic.w	r1, r1, #12
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800355e:	430b      	orrs	r3, r1
 8003560:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003572:	6999      	ldr	r1, [r3, #24]
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	ea40 0301 	orr.w	r3, r0, r1
 800357e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b8f      	ldr	r3, [pc, #572]	; (80037c4 <UART_SetConfig+0x2cc>)
 8003588:	429a      	cmp	r2, r3
 800358a:	d005      	beq.n	8003598 <UART_SetConfig+0xa0>
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b8d      	ldr	r3, [pc, #564]	; (80037c8 <UART_SetConfig+0x2d0>)
 8003594:	429a      	cmp	r2, r3
 8003596:	d104      	bne.n	80035a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003598:	f7fe fc0e 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 800359c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035a0:	e003      	b.n	80035aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035a2:	f7fe fbf5 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 80035a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b4:	f040 810c 	bne.w	80037d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035bc:	2200      	movs	r2, #0
 80035be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035ca:	4622      	mov	r2, r4
 80035cc:	462b      	mov	r3, r5
 80035ce:	1891      	adds	r1, r2, r2
 80035d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80035d2:	415b      	adcs	r3, r3
 80035d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035da:	4621      	mov	r1, r4
 80035dc:	eb12 0801 	adds.w	r8, r2, r1
 80035e0:	4629      	mov	r1, r5
 80035e2:	eb43 0901 	adc.w	r9, r3, r1
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035fa:	4690      	mov	r8, r2
 80035fc:	4699      	mov	r9, r3
 80035fe:	4623      	mov	r3, r4
 8003600:	eb18 0303 	adds.w	r3, r8, r3
 8003604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003608:	462b      	mov	r3, r5
 800360a:	eb49 0303 	adc.w	r3, r9, r3
 800360e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800361e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003622:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003626:	460b      	mov	r3, r1
 8003628:	18db      	adds	r3, r3, r3
 800362a:	653b      	str	r3, [r7, #80]	; 0x50
 800362c:	4613      	mov	r3, r2
 800362e:	eb42 0303 	adc.w	r3, r2, r3
 8003632:	657b      	str	r3, [r7, #84]	; 0x54
 8003634:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003638:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800363c:	f7fc fe20 	bl	8000280 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4b61      	ldr	r3, [pc, #388]	; (80037cc <UART_SetConfig+0x2d4>)
 8003646:	fba3 2302 	umull	r2, r3, r3, r2
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	011c      	lsls	r4, r3, #4
 800364e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003652:	2200      	movs	r2, #0
 8003654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003658:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800365c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003660:	4642      	mov	r2, r8
 8003662:	464b      	mov	r3, r9
 8003664:	1891      	adds	r1, r2, r2
 8003666:	64b9      	str	r1, [r7, #72]	; 0x48
 8003668:	415b      	adcs	r3, r3
 800366a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800366c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003670:	4641      	mov	r1, r8
 8003672:	eb12 0a01 	adds.w	sl, r2, r1
 8003676:	4649      	mov	r1, r9
 8003678:	eb43 0b01 	adc.w	fp, r3, r1
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003688:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800368c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003690:	4692      	mov	sl, r2
 8003692:	469b      	mov	fp, r3
 8003694:	4643      	mov	r3, r8
 8003696:	eb1a 0303 	adds.w	r3, sl, r3
 800369a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800369e:	464b      	mov	r3, r9
 80036a0:	eb4b 0303 	adc.w	r3, fp, r3
 80036a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036bc:	460b      	mov	r3, r1
 80036be:	18db      	adds	r3, r3, r3
 80036c0:	643b      	str	r3, [r7, #64]	; 0x40
 80036c2:	4613      	mov	r3, r2
 80036c4:	eb42 0303 	adc.w	r3, r2, r3
 80036c8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036d2:	f7fc fdd5 	bl	8000280 <__aeabi_uldivmod>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <UART_SetConfig+0x2d4>)
 80036de:	fba3 2301 	umull	r2, r3, r3, r1
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	2264      	movs	r2, #100	; 0x64
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	1acb      	subs	r3, r1, r3
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036f2:	4b36      	ldr	r3, [pc, #216]	; (80037cc <UART_SetConfig+0x2d4>)
 80036f4:	fba3 2302 	umull	r2, r3, r3, r2
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003700:	441c      	add	r4, r3
 8003702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003706:	2200      	movs	r2, #0
 8003708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800370c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003710:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003714:	4642      	mov	r2, r8
 8003716:	464b      	mov	r3, r9
 8003718:	1891      	adds	r1, r2, r2
 800371a:	63b9      	str	r1, [r7, #56]	; 0x38
 800371c:	415b      	adcs	r3, r3
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003724:	4641      	mov	r1, r8
 8003726:	1851      	adds	r1, r2, r1
 8003728:	6339      	str	r1, [r7, #48]	; 0x30
 800372a:	4649      	mov	r1, r9
 800372c:	414b      	adcs	r3, r1
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800373c:	4659      	mov	r1, fp
 800373e:	00cb      	lsls	r3, r1, #3
 8003740:	4651      	mov	r1, sl
 8003742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003746:	4651      	mov	r1, sl
 8003748:	00ca      	lsls	r2, r1, #3
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	4603      	mov	r3, r0
 8003750:	4642      	mov	r2, r8
 8003752:	189b      	adds	r3, r3, r2
 8003754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003758:	464b      	mov	r3, r9
 800375a:	460a      	mov	r2, r1
 800375c:	eb42 0303 	adc.w	r3, r2, r3
 8003760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003770:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003774:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003778:	460b      	mov	r3, r1
 800377a:	18db      	adds	r3, r3, r3
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
 800377e:	4613      	mov	r3, r2
 8003780:	eb42 0303 	adc.w	r3, r2, r3
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800378a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800378e:	f7fc fd77 	bl	8000280 <__aeabi_uldivmod>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <UART_SetConfig+0x2d4>)
 8003798:	fba3 1302 	umull	r1, r3, r3, r2
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	2164      	movs	r1, #100	; 0x64
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	3332      	adds	r3, #50	; 0x32
 80037aa:	4a08      	ldr	r2, [pc, #32]	; (80037cc <UART_SetConfig+0x2d4>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	f003 0207 	and.w	r2, r3, #7
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4422      	add	r2, r4
 80037be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037c0:	e105      	b.n	80039ce <UART_SetConfig+0x4d6>
 80037c2:	bf00      	nop
 80037c4:	40011000 	.word	0x40011000
 80037c8:	40011400 	.word	0x40011400
 80037cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d4:	2200      	movs	r2, #0
 80037d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037e2:	4642      	mov	r2, r8
 80037e4:	464b      	mov	r3, r9
 80037e6:	1891      	adds	r1, r2, r2
 80037e8:	6239      	str	r1, [r7, #32]
 80037ea:	415b      	adcs	r3, r3
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037f2:	4641      	mov	r1, r8
 80037f4:	1854      	adds	r4, r2, r1
 80037f6:	4649      	mov	r1, r9
 80037f8:	eb43 0501 	adc.w	r5, r3, r1
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	00eb      	lsls	r3, r5, #3
 8003806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800380a:	00e2      	lsls	r2, r4, #3
 800380c:	4614      	mov	r4, r2
 800380e:	461d      	mov	r5, r3
 8003810:	4643      	mov	r3, r8
 8003812:	18e3      	adds	r3, r4, r3
 8003814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003818:	464b      	mov	r3, r9
 800381a:	eb45 0303 	adc.w	r3, r5, r3
 800381e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800382e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800383e:	4629      	mov	r1, r5
 8003840:	008b      	lsls	r3, r1, #2
 8003842:	4621      	mov	r1, r4
 8003844:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003848:	4621      	mov	r1, r4
 800384a:	008a      	lsls	r2, r1, #2
 800384c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003850:	f7fc fd16 	bl	8000280 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4b60      	ldr	r3, [pc, #384]	; (80039dc <UART_SetConfig+0x4e4>)
 800385a:	fba3 2302 	umull	r2, r3, r3, r2
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	011c      	lsls	r4, r3, #4
 8003862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003866:	2200      	movs	r2, #0
 8003868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800386c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003870:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003874:	4642      	mov	r2, r8
 8003876:	464b      	mov	r3, r9
 8003878:	1891      	adds	r1, r2, r2
 800387a:	61b9      	str	r1, [r7, #24]
 800387c:	415b      	adcs	r3, r3
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003884:	4641      	mov	r1, r8
 8003886:	1851      	adds	r1, r2, r1
 8003888:	6139      	str	r1, [r7, #16]
 800388a:	4649      	mov	r1, r9
 800388c:	414b      	adcs	r3, r1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800389c:	4659      	mov	r1, fp
 800389e:	00cb      	lsls	r3, r1, #3
 80038a0:	4651      	mov	r1, sl
 80038a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a6:	4651      	mov	r1, sl
 80038a8:	00ca      	lsls	r2, r1, #3
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	4642      	mov	r2, r8
 80038b2:	189b      	adds	r3, r3, r2
 80038b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038b8:	464b      	mov	r3, r9
 80038ba:	460a      	mov	r2, r1
 80038bc:	eb42 0303 	adc.w	r3, r2, r3
 80038c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038dc:	4649      	mov	r1, r9
 80038de:	008b      	lsls	r3, r1, #2
 80038e0:	4641      	mov	r1, r8
 80038e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038e6:	4641      	mov	r1, r8
 80038e8:	008a      	lsls	r2, r1, #2
 80038ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038ee:	f7fc fcc7 	bl	8000280 <__aeabi_uldivmod>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4b39      	ldr	r3, [pc, #228]	; (80039dc <UART_SetConfig+0x4e4>)
 80038f8:	fba3 1302 	umull	r1, r3, r3, r2
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	2164      	movs	r1, #100	; 0x64
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	3332      	adds	r3, #50	; 0x32
 800390a:	4a34      	ldr	r2, [pc, #208]	; (80039dc <UART_SetConfig+0x4e4>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003916:	441c      	add	r4, r3
 8003918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391c:	2200      	movs	r2, #0
 800391e:	673b      	str	r3, [r7, #112]	; 0x70
 8003920:	677a      	str	r2, [r7, #116]	; 0x74
 8003922:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003926:	4642      	mov	r2, r8
 8003928:	464b      	mov	r3, r9
 800392a:	1891      	adds	r1, r2, r2
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	415b      	adcs	r3, r3
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003936:	4641      	mov	r1, r8
 8003938:	1851      	adds	r1, r2, r1
 800393a:	6039      	str	r1, [r7, #0]
 800393c:	4649      	mov	r1, r9
 800393e:	414b      	adcs	r3, r1
 8003940:	607b      	str	r3, [r7, #4]
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800394e:	4659      	mov	r1, fp
 8003950:	00cb      	lsls	r3, r1, #3
 8003952:	4651      	mov	r1, sl
 8003954:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003958:	4651      	mov	r1, sl
 800395a:	00ca      	lsls	r2, r1, #3
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	4603      	mov	r3, r0
 8003962:	4642      	mov	r2, r8
 8003964:	189b      	adds	r3, r3, r2
 8003966:	66bb      	str	r3, [r7, #104]	; 0x68
 8003968:	464b      	mov	r3, r9
 800396a:	460a      	mov	r2, r1
 800396c:	eb42 0303 	adc.w	r3, r2, r3
 8003970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	663b      	str	r3, [r7, #96]	; 0x60
 800397c:	667a      	str	r2, [r7, #100]	; 0x64
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800398a:	4649      	mov	r1, r9
 800398c:	008b      	lsls	r3, r1, #2
 800398e:	4641      	mov	r1, r8
 8003990:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003994:	4641      	mov	r1, r8
 8003996:	008a      	lsls	r2, r1, #2
 8003998:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800399c:	f7fc fc70 	bl	8000280 <__aeabi_uldivmod>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <UART_SetConfig+0x4e4>)
 80039a6:	fba3 1302 	umull	r1, r3, r3, r2
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	2164      	movs	r1, #100	; 0x64
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	3332      	adds	r3, #50	; 0x32
 80039b8:	4a08      	ldr	r2, [pc, #32]	; (80039dc <UART_SetConfig+0x4e4>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4422      	add	r2, r4
 80039cc:	609a      	str	r2, [r3, #8]
}
 80039ce:	bf00      	nop
 80039d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039da:	bf00      	nop
 80039dc:	51eb851f 	.word	0x51eb851f

080039e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80039ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f2:	2b84      	cmp	r3, #132	; 0x84
 80039f4:	d005      	beq.n	8003a02 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80039f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	3303      	adds	r3, #3
 8003a00:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a02:	68fb      	ldr	r3, [r7, #12]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a14:	f001 f802 	bl	8004a1c <vTaskStartScheduler>
  
  return osOK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a20:	b089      	sub	sp, #36	; 0x24
 8003a22:	af04      	add	r7, sp, #16
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <osThreadCreate+0x54>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01c      	beq.n	8003a72 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685c      	ldr	r4, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681d      	ldr	r5, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691e      	ldr	r6, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ffc8 	bl	80039e0 <makeFreeRtosPriority>
 8003a50:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a5a:	9202      	str	r2, [sp, #8]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	9100      	str	r1, [sp, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4632      	mov	r2, r6
 8003a64:	4629      	mov	r1, r5
 8003a66:	4620      	mov	r0, r4
 8003a68:	f000 fe10 	bl	800468c <xTaskCreateStatic>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e01c      	b.n	8003aac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685c      	ldr	r4, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a7e:	b29e      	uxth	r6, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff ffaa 	bl	80039e0 <makeFreeRtosPriority>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	9200      	str	r2, [sp, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	4632      	mov	r2, r6
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f000 fe52 	bl	8004746 <xTaskCreate>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d001      	beq.n	8003aac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003aac:	68fb      	ldr	r3, [r7, #12]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ab6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <osDelay+0x16>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	e000      	b.n	8003ace <osDelay+0x18>
 8003acc:	2301      	movs	r3, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 ff70 	bl	80049b4 <vTaskDelay>
  
  return osOK;
 8003ad4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f103 0208 	add.w	r2, r3, #8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295
 8003af6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f103 0208 	add.w	r2, r3, #8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f103 0208 	add.w	r2, r3, #8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	601a      	str	r2, [r3, #0]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d103      	bne.n	8003ba0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e00c      	b.n	8003bba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	e002      	b.n	8003bae <vListInsert+0x2e>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d2f6      	bcs.n	8003ba8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6892      	ldr	r2, [r2, #8]
 8003c08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6852      	ldr	r2, [r2, #4]
 8003c12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d103      	bne.n	8003c26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	1e5a      	subs	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c72:	f002 f8f7 	bl	8005e64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	441a      	add	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	68f9      	ldr	r1, [r7, #12]
 8003ca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	441a      	add	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	22ff      	movs	r2, #255	; 0xff
 8003cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	22ff      	movs	r2, #255	; 0xff
 8003cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d114      	bne.n	8003cf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01a      	beq.n	8003d06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3310      	adds	r3, #16
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 f925 	bl	8004f24 <xTaskRemoveFromEventList>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d012      	beq.n	8003d06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <xQueueGenericReset+0xcc>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	e009      	b.n	8003d06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3310      	adds	r3, #16
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fef1 	bl	8003ade <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3324      	adds	r3, #36	; 0x24
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff feec 	bl	8003ade <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d06:	f002 f8dd 	bl	8005ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d0a:	2301      	movs	r3, #1
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08e      	sub	sp, #56	; 0x38
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <xQueueGenericCreateStatic+0x52>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <xQueueGenericCreateStatic+0x56>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <xQueueGenericCreateStatic+0x58>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	623b      	str	r3, [r7, #32]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <xQueueGenericCreateStatic+0x7e>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <xQueueGenericCreateStatic+0x82>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <xQueueGenericCreateStatic+0x84>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	61fb      	str	r3, [r7, #28]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003db6:	2348      	movs	r3, #72	; 0x48
 8003db8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b48      	cmp	r3, #72	; 0x48
 8003dbe:	d00a      	beq.n	8003dd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	61bb      	str	r3, [r7, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003dd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f83f 	bl	8003e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3730      	adds	r7, #48	; 0x30
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	613b      	str	r3, [r7, #16]
}
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	3348      	adds	r3, #72	; 0x48
 8003e40:	4618      	mov	r0, r3
 8003e42:	f002 f931 	bl	80060a8 <pvPortMalloc>
 8003e46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d011      	beq.n	8003e72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	3348      	adds	r3, #72	; 0x48
 8003e56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e60:	79fa      	ldrb	r2, [r7, #7]
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f805 	bl	8003e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e72:	69bb      	ldr	r3, [r7, #24]
	}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e002      	b.n	8003e9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003eaa:	2101      	movs	r1, #1
 8003eac:	69b8      	ldr	r0, [r7, #24]
 8003eae:	f7ff fecb 	bl	8003c48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08e      	sub	sp, #56	; 0x38
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <xQueueGenericSend+0x32>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d103      	bne.n	8003efc <xQueueGenericSend+0x40>
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <xQueueGenericSend+0x44>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <xQueueGenericSend+0x46>
 8003f00:	2300      	movs	r3, #0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <xQueueGenericSend+0x60>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d103      	bne.n	8003f2a <xQueueGenericSend+0x6e>
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <xQueueGenericSend+0x72>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <xQueueGenericSend+0x74>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xQueueGenericSend+0x8e>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	623b      	str	r3, [r7, #32]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f4a:	f001 f9a9 	bl	80052a0 <xTaskGetSchedulerState>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <xQueueGenericSend+0x9e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <xQueueGenericSend+0xa2>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <xQueueGenericSend+0xa4>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <xQueueGenericSend+0xbe>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	61fb      	str	r3, [r7, #28]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f7a:	f001 ff73 	bl	8005e64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d302      	bcc.n	8003f90 <xQueueGenericSend+0xd4>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d129      	bne.n	8003fe4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f96:	f000 fa0b 	bl	80043b0 <prvCopyDataToQueue>
 8003f9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	3324      	adds	r3, #36	; 0x24
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 ffbb 	bl	8004f24 <xTaskRemoveFromEventList>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fb4:	4b3f      	ldr	r3, [pc, #252]	; (80040b4 <xQueueGenericSend+0x1f8>)
 8003fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	e00a      	b.n	8003fdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fcc:	4b39      	ldr	r3, [pc, #228]	; (80040b4 <xQueueGenericSend+0x1f8>)
 8003fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fdc:	f001 ff72 	bl	8005ec4 <vPortExitCritical>
				return pdPASS;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e063      	b.n	80040ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fea:	f001 ff6b 	bl	8005ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e05c      	b.n	80040ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d106      	bne.n	8004006 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ff8:	f107 0314 	add.w	r3, r7, #20
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fff3 	bl	8004fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004002:	2301      	movs	r3, #1
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004006:	f001 ff5d 	bl	8005ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800400a:	f000 fd6d 	bl	8004ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800400e:	f001 ff29 	bl	8005e64 <vPortEnterCritical>
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004018:	b25b      	sxtb	r3, r3
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d103      	bne.n	8004028 <xQueueGenericSend+0x16c>
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800402e:	b25b      	sxtb	r3, r3
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d103      	bne.n	800403e <xQueueGenericSend+0x182>
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800403e:	f001 ff41 	bl	8005ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004042:	1d3a      	adds	r2, r7, #4
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	4611      	mov	r1, r2
 800404a:	4618      	mov	r0, r3
 800404c:	f000 ffe2 	bl	8005014 <xTaskCheckForTimeOut>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d124      	bne.n	80040a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004058:	f000 faa2 	bl	80045a0 <prvIsQueueFull>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d018      	beq.n	8004094 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	3310      	adds	r3, #16
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	4611      	mov	r1, r2
 800406a:	4618      	mov	r0, r3
 800406c:	f000 ff0a 	bl	8004e84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004072:	f000 fa2d 	bl	80044d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004076:	f000 fd45 	bl	8004b04 <xTaskResumeAll>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	f47f af7c 	bne.w	8003f7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <xQueueGenericSend+0x1f8>)
 8004084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	e772      	b.n	8003f7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004096:	f000 fa1b 	bl	80044d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800409a:	f000 fd33 	bl	8004b04 <xTaskResumeAll>
 800409e:	e76c      	b.n	8003f7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040a2:	f000 fa15 	bl	80044d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040a6:	f000 fd2d 	bl	8004b04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3738      	adds	r7, #56	; 0x38
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b090      	sub	sp, #64	; 0x40
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <xQueueGenericSendFromISR+0x3c>
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <xQueueGenericSendFromISR+0x40>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <xQueueGenericSendFromISR+0x42>
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004110:	bf00      	nop
 8004112:	e7fe      	b.n	8004112 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d103      	bne.n	8004122 <xQueueGenericSendFromISR+0x6a>
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <xQueueGenericSendFromISR+0x6e>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <xQueueGenericSendFromISR+0x70>
 8004126:	2300      	movs	r3, #0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	623b      	str	r3, [r7, #32]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004142:	f001 ff71 	bl	8006028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004146:	f3ef 8211 	mrs	r2, BASEPRI
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	61fa      	str	r2, [r7, #28]
 800415c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800415e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	429a      	cmp	r2, r3
 800416c:	d302      	bcc.n	8004174 <xQueueGenericSendFromISR+0xbc>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d12f      	bne.n	80041d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800417a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800418a:	f000 f911 	bl	80043b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800418e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d112      	bne.n	80041be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	2b00      	cmp	r3, #0
 800419e:	d016      	beq.n	80041ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	3324      	adds	r3, #36	; 0x24
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 febd 	bl	8004f24 <xTaskRemoveFromEventList>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e007      	b.n	80041ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041c2:	3301      	adds	r3, #1
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	b25a      	sxtb	r2, r3
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80041ce:	2301      	movs	r3, #1
 80041d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80041d2:	e001      	b.n	80041d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3740      	adds	r7, #64	; 0x40
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08c      	sub	sp, #48	; 0x30
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041fc:	2300      	movs	r3, #0
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <xQueueReceive+0x30>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	623b      	str	r3, [r7, #32]
}
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <xQueueReceive+0x3e>
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <xQueueReceive+0x42>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <xQueueReceive+0x44>
 8004232:	2300      	movs	r3, #0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueReceive+0x5e>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	61fb      	str	r3, [r7, #28]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800424e:	f001 f827 	bl	80052a0 <xTaskGetSchedulerState>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <xQueueReceive+0x6e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <xQueueReceive+0x72>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueReceive+0x74>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueReceive+0x8e>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61bb      	str	r3, [r7, #24]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800427e:	f001 fdf1 	bl	8005e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01f      	beq.n	80042ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004292:	f000 f8f7 	bl	8004484 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	1e5a      	subs	r2, r3, #1
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00f      	beq.n	80042c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	3310      	adds	r3, #16
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fe3a 	bl	8004f24 <xTaskRemoveFromEventList>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042b6:	4b3d      	ldr	r3, [pc, #244]	; (80043ac <xQueueReceive+0x1bc>)
 80042b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042c6:	f001 fdfd 	bl	8005ec4 <vPortExitCritical>
				return pdPASS;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e069      	b.n	80043a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042d4:	f001 fdf6 	bl	8005ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042d8:	2300      	movs	r3, #0
 80042da:	e062      	b.n	80043a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042e2:	f107 0310 	add.w	r3, r7, #16
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fe7e 	bl	8004fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042f0:	f001 fde8 	bl	8005ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042f4:	f000 fbf8 	bl	8004ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042f8:	f001 fdb4 	bl	8005e64 <vPortEnterCritical>
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004302:	b25b      	sxtb	r3, r3
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d103      	bne.n	8004312 <xQueueReceive+0x122>
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004318:	b25b      	sxtb	r3, r3
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d103      	bne.n	8004328 <xQueueReceive+0x138>
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004328:	f001 fdcc 	bl	8005ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800432c:	1d3a      	adds	r2, r7, #4
 800432e:	f107 0310 	add.w	r3, r7, #16
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fe6d 	bl	8005014 <xTaskCheckForTimeOut>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d123      	bne.n	8004388 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004342:	f000 f917 	bl	8004574 <prvIsQueueEmpty>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d017      	beq.n	800437c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	3324      	adds	r3, #36	; 0x24
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fd95 	bl	8004e84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800435a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800435c:	f000 f8b8 	bl	80044d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004360:	f000 fbd0 	bl	8004b04 <xTaskResumeAll>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d189      	bne.n	800427e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800436a:	4b10      	ldr	r3, [pc, #64]	; (80043ac <xQueueReceive+0x1bc>)
 800436c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	e780      	b.n	800427e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800437c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800437e:	f000 f8a7 	bl	80044d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004382:	f000 fbbf 	bl	8004b04 <xTaskResumeAll>
 8004386:	e77a      	b.n	800427e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800438a:	f000 f8a1 	bl	80044d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800438e:	f000 fbb9 	bl	8004b04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004394:	f000 f8ee 	bl	8004574 <prvIsQueueEmpty>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	f43f af6f 	beq.w	800427e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3730      	adds	r7, #48	; 0x30
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10d      	bne.n	80043ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d14d      	bne.n	8004472 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 ff7e 	bl	80052dc <xTaskPriorityDisinherit>
 80043e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	e043      	b.n	8004472 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d119      	bne.n	8004424 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6858      	ldr	r0, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	461a      	mov	r2, r3
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	f002 f868 	bl	80064d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	441a      	add	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d32b      	bcc.n	8004472 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e026      	b.n	8004472 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68d8      	ldr	r0, [r3, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	461a      	mov	r2, r3
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	f002 f84e 	bl	80064d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	425b      	negs	r3, r3
 800443e:	441a      	add	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d207      	bcs.n	8004460 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	425b      	negs	r3, r3
 800445a:	441a      	add	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d105      	bne.n	8004472 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	3b01      	subs	r3, #1
 8004470:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800447a:	697b      	ldr	r3, [r7, #20]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d018      	beq.n	80044c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	441a      	add	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d303      	bcc.n	80044b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68d9      	ldr	r1, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	461a      	mov	r2, r3
 80044c2:	6838      	ldr	r0, [r7, #0]
 80044c4:	f002 f804 	bl	80064d0 <memcpy>
	}
}
 80044c8:	bf00      	nop
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044d8:	f001 fcc4 	bl	8005e64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044e4:	e011      	b.n	800450a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d012      	beq.n	8004514 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3324      	adds	r3, #36	; 0x24
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fd16 	bl	8004f24 <xTaskRemoveFromEventList>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044fe:	f000 fdeb 	bl	80050d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	3b01      	subs	r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800450a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	dce9      	bgt.n	80044e6 <prvUnlockQueue+0x16>
 8004512:	e000      	b.n	8004516 <prvUnlockQueue+0x46>
					break;
 8004514:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	22ff      	movs	r2, #255	; 0xff
 800451a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800451e:	f001 fcd1 	bl	8005ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004522:	f001 fc9f 	bl	8005e64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800452c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800452e:	e011      	b.n	8004554 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d012      	beq.n	800455e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3310      	adds	r3, #16
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fcf1 	bl	8004f24 <xTaskRemoveFromEventList>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004548:	f000 fdc6 	bl	80050d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800454c:	7bbb      	ldrb	r3, [r7, #14]
 800454e:	3b01      	subs	r3, #1
 8004550:	b2db      	uxtb	r3, r3
 8004552:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004558:	2b00      	cmp	r3, #0
 800455a:	dce9      	bgt.n	8004530 <prvUnlockQueue+0x60>
 800455c:	e000      	b.n	8004560 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800455e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	22ff      	movs	r2, #255	; 0xff
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004568:	f001 fcac 	bl	8005ec4 <vPortExitCritical>
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800457c:	f001 fc72 	bl	8005e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e001      	b.n	8004592 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004592:	f001 fc97 	bl	8005ec4 <vPortExitCritical>

	return xReturn;
 8004596:	68fb      	ldr	r3, [r7, #12]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045a8:	f001 fc5c 	bl	8005e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d102      	bne.n	80045be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e001      	b.n	80045c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045c2:	f001 fc7f 	bl	8005ec4 <vPortExitCritical>

	return xReturn;
 80045c6:	68fb      	ldr	r3, [r7, #12]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	e014      	b.n	800460a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045e0:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <vQueueAddToRegistry+0x50>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045ec:	490c      	ldr	r1, [pc, #48]	; (8004620 <vQueueAddToRegistry+0x50>)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <vQueueAddToRegistry+0x50>)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004602:	e006      	b.n	8004612 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b07      	cmp	r3, #7
 800460e:	d9e7      	bls.n	80045e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000690 	.word	0x20000690

08004624 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004634:	f001 fc16 	bl	8005e64 <vPortEnterCritical>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800463e:	b25b      	sxtb	r3, r3
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d103      	bne.n	800464e <vQueueWaitForMessageRestricted+0x2a>
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004654:	b25b      	sxtb	r3, r3
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	d103      	bne.n	8004664 <vQueueWaitForMessageRestricted+0x40>
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004664:	f001 fc2e 	bl	8005ec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3324      	adds	r3, #36	; 0x24
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fc27 	bl	8004ecc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800467e:	6978      	ldr	r0, [r7, #20]
 8004680:	f7ff ff26 	bl	80044d0 <prvUnlockQueue>
	}
 8004684:	bf00      	nop
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08e      	sub	sp, #56	; 0x38
 8004690:	af04      	add	r7, sp, #16
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	623b      	str	r3, [r7, #32]
}
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	61fb      	str	r3, [r7, #28]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046d2:	235c      	movs	r3, #92	; 0x5c
 80046d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b5c      	cmp	r3, #92	; 0x5c
 80046da:	d00a      	beq.n	80046f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	61bb      	str	r3, [r7, #24]
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01e      	beq.n	8004738 <xTaskCreateStatic+0xac>
 80046fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004708:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	2202      	movs	r2, #2
 800470e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004712:	2300      	movs	r3, #0
 8004714:	9303      	str	r3, [sp, #12]
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	9302      	str	r3, [sp, #8]
 800471a:	f107 0314 	add.w	r3, r7, #20
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f850 	bl	80047d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004732:	f000 f8d5 	bl	80048e0 <prvAddNewTaskToReadyList>
 8004736:	e001      	b.n	800473c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800473c:	697b      	ldr	r3, [r7, #20]
	}
 800473e:	4618      	mov	r0, r3
 8004740:	3728      	adds	r7, #40	; 0x28
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004746:	b580      	push	{r7, lr}
 8004748:	b08c      	sub	sp, #48	; 0x30
 800474a:	af04      	add	r7, sp, #16
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4618      	mov	r0, r3
 800475c:	f001 fca4 	bl	80060a8 <pvPortMalloc>
 8004760:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00e      	beq.n	8004786 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004768:	205c      	movs	r0, #92	; 0x5c
 800476a:	f001 fc9d 	bl	80060a8 <pvPortMalloc>
 800476e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
 800477c:	e005      	b.n	800478a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800477e:	6978      	ldr	r0, [r7, #20]
 8004780:	f001 fd5e 	bl	8006240 <vPortFree>
 8004784:	e001      	b.n	800478a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d017      	beq.n	80047c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004798:	88fa      	ldrh	r2, [r7, #6]
 800479a:	2300      	movs	r3, #0
 800479c:	9303      	str	r3, [sp, #12]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	9302      	str	r3, [sp, #8]
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f80e 	bl	80047d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047b4:	69f8      	ldr	r0, [r7, #28]
 80047b6:	f000 f893 	bl	80048e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	e002      	b.n	80047c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047c0:	f04f 33ff 	mov.w	r3, #4294967295
 80047c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047c6:	69bb      	ldr	r3, [r7, #24]
	}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3720      	adds	r7, #32
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047e8:	3b01      	subs	r3, #1
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	f023 0307 	bic.w	r3, r3, #7
 80047f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	617b      	str	r3, [r7, #20]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01f      	beq.n	800485e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	e012      	b.n	800484a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	7819      	ldrb	r1, [r3, #0]
 800482c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	3334      	adds	r3, #52	; 0x34
 8004834:	460a      	mov	r2, r1
 8004836:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	3301      	adds	r3, #1
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2b17      	cmp	r3, #23
 800484e:	d9e9      	bls.n	8004824 <prvInitialiseNewTask+0x54>
 8004850:	e000      	b.n	8004854 <prvInitialiseNewTask+0x84>
			{
				break;
 8004852:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	2200      	movs	r2, #0
 8004858:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800485c:	e003      	b.n	8004866 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	2b06      	cmp	r3, #6
 800486a:	d901      	bls.n	8004870 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800486c:	2306      	movs	r3, #6
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004874:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800487a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	2200      	movs	r2, #0
 8004880:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	3304      	adds	r3, #4
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff f949 	bl	8003b1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	3318      	adds	r3, #24
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff f944 	bl	8003b1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800489a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	f1c3 0207 	rsb	r2, r3, #7
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	2200      	movs	r2, #0
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	68f9      	ldr	r1, [r7, #12]
 80048be:	69b8      	ldr	r0, [r7, #24]
 80048c0:	f001 f9a2 	bl	8005c08 <pxPortInitialiseStack>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048d6:	bf00      	nop
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048e8:	f001 fabc 	bl	8005e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <prvAddNewTaskToReadyList+0xb8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3301      	adds	r3, #1
 80048f2:	4a29      	ldr	r2, [pc, #164]	; (8004998 <prvAddNewTaskToReadyList+0xb8>)
 80048f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048f6:	4b29      	ldr	r3, [pc, #164]	; (800499c <prvAddNewTaskToReadyList+0xbc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048fe:	4a27      	ldr	r2, [pc, #156]	; (800499c <prvAddNewTaskToReadyList+0xbc>)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <prvAddNewTaskToReadyList+0xb8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d110      	bne.n	800492e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800490c:	f000 fc0a 	bl	8005124 <prvInitialiseTaskLists>
 8004910:	e00d      	b.n	800492e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004912:	4b23      	ldr	r3, [pc, #140]	; (80049a0 <prvAddNewTaskToReadyList+0xc0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800491a:	4b20      	ldr	r3, [pc, #128]	; (800499c <prvAddNewTaskToReadyList+0xbc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	429a      	cmp	r2, r3
 8004926:	d802      	bhi.n	800492e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004928:	4a1c      	ldr	r2, [pc, #112]	; (800499c <prvAddNewTaskToReadyList+0xbc>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <prvAddNewTaskToReadyList+0xc4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3301      	adds	r3, #1
 8004934:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <prvAddNewTaskToReadyList+0xc4>)
 8004936:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	2201      	movs	r2, #1
 800493e:	409a      	lsls	r2, r3
 8004940:	4b19      	ldr	r3, [pc, #100]	; (80049a8 <prvAddNewTaskToReadyList+0xc8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4313      	orrs	r3, r2
 8004946:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <prvAddNewTaskToReadyList+0xc8>)
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4a15      	ldr	r2, [pc, #84]	; (80049ac <prvAddNewTaskToReadyList+0xcc>)
 8004958:	441a      	add	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3304      	adds	r3, #4
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f7ff f8e9 	bl	8003b38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004966:	f001 faad 	bl	8005ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800496a:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <prvAddNewTaskToReadyList+0xc0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00e      	beq.n	8004990 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <prvAddNewTaskToReadyList+0xbc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	429a      	cmp	r2, r3
 800497e:	d207      	bcs.n	8004990 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <prvAddNewTaskToReadyList+0xd0>)
 8004982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	200007d0 	.word	0x200007d0
 800499c:	200006d0 	.word	0x200006d0
 80049a0:	200007dc 	.word	0x200007dc
 80049a4:	200007ec 	.word	0x200007ec
 80049a8:	200007d8 	.word	0x200007d8
 80049ac:	200006d4 	.word	0x200006d4
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d017      	beq.n	80049f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <vTaskDelay+0x60>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <vTaskDelay+0x30>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60bb      	str	r3, [r7, #8]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049e4:	f000 f880 	bl	8004ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049e8:	2100      	movs	r1, #0
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fcfc 	bl	80053e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049f0:	f000 f888 	bl	8004b04 <xTaskResumeAll>
 80049f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d107      	bne.n	8004a0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <vTaskDelay+0x64>)
 80049fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	200007f8 	.word	0x200007f8
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a2a:	463a      	mov	r2, r7
 8004a2c:	1d39      	adds	r1, r7, #4
 8004a2e:	f107 0308 	add.w	r3, r7, #8
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fb fda6 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a38:	6839      	ldr	r1, [r7, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	9202      	str	r2, [sp, #8]
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	2300      	movs	r3, #0
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	2300      	movs	r3, #0
 8004a48:	460a      	mov	r2, r1
 8004a4a:	4921      	ldr	r1, [pc, #132]	; (8004ad0 <vTaskStartScheduler+0xb4>)
 8004a4c:	4821      	ldr	r0, [pc, #132]	; (8004ad4 <vTaskStartScheduler+0xb8>)
 8004a4e:	f7ff fe1d 	bl	800468c <xTaskCreateStatic>
 8004a52:	4603      	mov	r3, r0
 8004a54:	4a20      	ldr	r2, [pc, #128]	; (8004ad8 <vTaskStartScheduler+0xbc>)
 8004a56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a58:	4b1f      	ldr	r3, [pc, #124]	; (8004ad8 <vTaskStartScheduler+0xbc>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a60:	2301      	movs	r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	e001      	b.n	8004a6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d102      	bne.n	8004a76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a70:	f000 fd20 	bl	80054b4 <xTimerCreateTimerTask>
 8004a74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d116      	bne.n	8004aaa <vTaskStartScheduler+0x8e>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	613b      	str	r3, [r7, #16]
}
 8004a8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a90:	4b12      	ldr	r3, [pc, #72]	; (8004adc <vTaskStartScheduler+0xc0>)
 8004a92:	f04f 32ff 	mov.w	r2, #4294967295
 8004a96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a98:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <vTaskStartScheduler+0xc4>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a9e:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <vTaskStartScheduler+0xc8>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004aa4:	f001 f93c 	bl	8005d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004aa8:	e00e      	b.n	8004ac8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d10a      	bne.n	8004ac8 <vTaskStartScheduler+0xac>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	60fb      	str	r3, [r7, #12]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <vTaskStartScheduler+0xaa>
}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	08006ef0 	.word	0x08006ef0
 8004ad4:	080050f1 	.word	0x080050f1
 8004ad8:	200007f4 	.word	0x200007f4
 8004adc:	200007f0 	.word	0x200007f0
 8004ae0:	200007dc 	.word	0x200007dc
 8004ae4:	200007d4 	.word	0x200007d4

08004ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <vTaskSuspendAll+0x18>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3301      	adds	r3, #1
 8004af2:	4a03      	ldr	r2, [pc, #12]	; (8004b00 <vTaskSuspendAll+0x18>)
 8004af4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004af6:	bf00      	nop
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	200007f8 	.word	0x200007f8

08004b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <xTaskResumeAll+0x114>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	603b      	str	r3, [r7, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b30:	f001 f998 	bl	8005e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b34:	4b38      	ldr	r3, [pc, #224]	; (8004c18 <xTaskResumeAll+0x114>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	4a37      	ldr	r2, [pc, #220]	; (8004c18 <xTaskResumeAll+0x114>)
 8004b3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b3e:	4b36      	ldr	r3, [pc, #216]	; (8004c18 <xTaskResumeAll+0x114>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d161      	bne.n	8004c0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b46:	4b35      	ldr	r3, [pc, #212]	; (8004c1c <xTaskResumeAll+0x118>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d05d      	beq.n	8004c0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b4e:	e02e      	b.n	8004bae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b50:	4b33      	ldr	r3, [pc, #204]	; (8004c20 <xTaskResumeAll+0x11c>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3318      	adds	r3, #24
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff f848 	bl	8003bf2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff f843 	bl	8003bf2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	2201      	movs	r2, #1
 8004b72:	409a      	lsls	r2, r3
 8004b74:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <xTaskResumeAll+0x120>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	4a2a      	ldr	r2, [pc, #168]	; (8004c24 <xTaskResumeAll+0x120>)
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4a27      	ldr	r2, [pc, #156]	; (8004c28 <xTaskResumeAll+0x124>)
 8004b8c:	441a      	add	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3304      	adds	r3, #4
 8004b92:	4619      	mov	r1, r3
 8004b94:	4610      	mov	r0, r2
 8004b96:	f7fe ffcf 	bl	8003b38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9e:	4b23      	ldr	r3, [pc, #140]	; (8004c2c <xTaskResumeAll+0x128>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ba8:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <xTaskResumeAll+0x12c>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bae:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <xTaskResumeAll+0x11c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1cc      	bne.n	8004b50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bbc:	f000 fb50 	bl	8005260 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bc0:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <xTaskResumeAll+0x130>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d010      	beq.n	8004bee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bcc:	f000 f846 	bl	8004c5c <xTaskIncrementTick>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004bd6:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <xTaskResumeAll+0x12c>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f1      	bne.n	8004bcc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <xTaskResumeAll+0x130>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <xTaskResumeAll+0x12c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bfa:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <xTaskResumeAll+0x134>)
 8004bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c0a:	f001 f95b 	bl	8005ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	200007f8 	.word	0x200007f8
 8004c1c:	200007d0 	.word	0x200007d0
 8004c20:	20000790 	.word	0x20000790
 8004c24:	200007d8 	.word	0x200007d8
 8004c28:	200006d4 	.word	0x200006d4
 8004c2c:	200006d0 	.word	0x200006d0
 8004c30:	200007e4 	.word	0x200007e4
 8004c34:	200007e0 	.word	0x200007e0
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <xTaskGetTickCount+0x1c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c48:	687b      	ldr	r3, [r7, #4]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	200007d4 	.word	0x200007d4

08004c5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c66:	4b4e      	ldr	r3, [pc, #312]	; (8004da0 <xTaskIncrementTick+0x144>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 808e 	bne.w	8004d8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c70:	4b4c      	ldr	r3, [pc, #304]	; (8004da4 <xTaskIncrementTick+0x148>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c78:	4a4a      	ldr	r2, [pc, #296]	; (8004da4 <xTaskIncrementTick+0x148>)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d120      	bne.n	8004cc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c84:	4b48      	ldr	r3, [pc, #288]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	603b      	str	r3, [r7, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <xTaskIncrementTick+0x46>
 8004ca4:	4b40      	ldr	r3, [pc, #256]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	4b40      	ldr	r3, [pc, #256]	; (8004dac <xTaskIncrementTick+0x150>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a3e      	ldr	r2, [pc, #248]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	4a3e      	ldr	r2, [pc, #248]	; (8004dac <xTaskIncrementTick+0x150>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <xTaskIncrementTick+0x154>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	4a3c      	ldr	r2, [pc, #240]	; (8004db0 <xTaskIncrementTick+0x154>)
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	f000 facd 	bl	8005260 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cc6:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <xTaskIncrementTick+0x158>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d348      	bcc.n	8004d62 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cd0:	4b35      	ldr	r3, [pc, #212]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d104      	bne.n	8004ce4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cda:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <xTaskIncrementTick+0x158>)
 8004cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce0:	601a      	str	r2, [r3, #0]
					break;
 8004ce2:	e03e      	b.n	8004d62 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce4:	4b30      	ldr	r3, [pc, #192]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d203      	bcs.n	8004d04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cfc:	4a2d      	ldr	r2, [pc, #180]	; (8004db4 <xTaskIncrementTick+0x158>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d02:	e02e      	b.n	8004d62 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fe ff72 	bl	8003bf2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	3318      	adds	r3, #24
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe ff69 	bl	8003bf2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	2201      	movs	r2, #1
 8004d26:	409a      	lsls	r2, r3
 8004d28:	4b23      	ldr	r3, [pc, #140]	; (8004db8 <xTaskIncrementTick+0x15c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	4a22      	ldr	r2, [pc, #136]	; (8004db8 <xTaskIncrementTick+0x15c>)
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <xTaskIncrementTick+0x160>)
 8004d40:	441a      	add	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7fe fef5 	bl	8003b38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <xTaskIncrementTick+0x164>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d3b9      	bcc.n	8004cd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d60:	e7b6      	b.n	8004cd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d62:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <xTaskIncrementTick+0x164>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d68:	4914      	ldr	r1, [pc, #80]	; (8004dbc <xTaskIncrementTick+0x160>)
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d901      	bls.n	8004d7e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <xTaskIncrementTick+0x168>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004d86:	2301      	movs	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e004      	b.n	8004d96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <xTaskIncrementTick+0x16c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	4a0d      	ldr	r2, [pc, #52]	; (8004dc8 <xTaskIncrementTick+0x16c>)
 8004d94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d96:	697b      	ldr	r3, [r7, #20]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	200007f8 	.word	0x200007f8
 8004da4:	200007d4 	.word	0x200007d4
 8004da8:	20000788 	.word	0x20000788
 8004dac:	2000078c 	.word	0x2000078c
 8004db0:	200007e8 	.word	0x200007e8
 8004db4:	200007f0 	.word	0x200007f0
 8004db8:	200007d8 	.word	0x200007d8
 8004dbc:	200006d4 	.word	0x200006d4
 8004dc0:	200006d0 	.word	0x200006d0
 8004dc4:	200007e4 	.word	0x200007e4
 8004dc8:	200007e0 	.word	0x200007e0

08004dcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dd2:	4b27      	ldr	r3, [pc, #156]	; (8004e70 <vTaskSwitchContext+0xa4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dda:	4b26      	ldr	r3, [pc, #152]	; (8004e74 <vTaskSwitchContext+0xa8>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004de0:	e03f      	b.n	8004e62 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <vTaskSwitchContext+0xa8>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de8:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <vTaskSwitchContext+0xac>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	fab3 f383 	clz	r3, r3
 8004df4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004df6:	7afb      	ldrb	r3, [r7, #11]
 8004df8:	f1c3 031f 	rsb	r3, r3, #31
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	491f      	ldr	r1, [pc, #124]	; (8004e7c <vTaskSwitchContext+0xb0>)
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	607b      	str	r3, [r7, #4]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <vTaskSwitchContext+0x5a>
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <vTaskSwitchContext+0xb0>)
 8004e34:	4413      	add	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d104      	bne.n	8004e58 <vTaskSwitchContext+0x8c>
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <vTaskSwitchContext+0xb4>)
 8004e60:	6013      	str	r3, [r2, #0]
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	200007f8 	.word	0x200007f8
 8004e74:	200007e4 	.word	0x200007e4
 8004e78:	200007d8 	.word	0x200007d8
 8004e7c:	200006d4 	.word	0x200006d4
 8004e80:	200006d0 	.word	0x200006d0

08004e84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	60fb      	str	r3, [r7, #12]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004eaa:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <vTaskPlaceOnEventList+0x44>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3318      	adds	r3, #24
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fe fe64 	bl	8003b80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004eb8:	2101      	movs	r1, #1
 8004eba:	6838      	ldr	r0, [r7, #0]
 8004ebc:	f000 fa94 	bl	80053e8 <prvAddCurrentTaskToDelayedList>
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	200006d0 	.word	0x200006d0

08004ecc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	617b      	str	r3, [r7, #20]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3318      	adds	r3, #24
 8004efa:	4619      	mov	r1, r3
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7fe fe1b 	bl	8003b38 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004f08:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	68b8      	ldr	r0, [r7, #8]
 8004f12:	f000 fa69 	bl	80053e8 <prvAddCurrentTaskToDelayedList>
	}
 8004f16:	bf00      	nop
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200006d0 	.word	0x200006d0

08004f24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	60fb      	str	r3, [r7, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3318      	adds	r3, #24
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe fe4c 	bl	8003bf2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <xTaskRemoveFromEventList+0xac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d11c      	bne.n	8004f9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe fe43 	bl	8003bf2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	2201      	movs	r2, #1
 8004f72:	409a      	lsls	r2, r3
 8004f74:	4b17      	ldr	r3, [pc, #92]	; (8004fd4 <xTaskRemoveFromEventList+0xb0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <xTaskRemoveFromEventList+0xb0>)
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <xTaskRemoveFromEventList+0xb4>)
 8004f8c:	441a      	add	r2, r3
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f7fe fdcf 	bl	8003b38 <vListInsertEnd>
 8004f9a:	e005      	b.n	8004fa8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3318      	adds	r3, #24
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	480e      	ldr	r0, [pc, #56]	; (8004fdc <xTaskRemoveFromEventList+0xb8>)
 8004fa4:	f7fe fdc8 	bl	8003b38 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fac:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <xTaskRemoveFromEventList+0xbc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d905      	bls.n	8004fc2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <xTaskRemoveFromEventList+0xc0>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	e001      	b.n	8004fc6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004fc6:	697b      	ldr	r3, [r7, #20]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	200007f8 	.word	0x200007f8
 8004fd4:	200007d8 	.word	0x200007d8
 8004fd8:	200006d4 	.word	0x200006d4
 8004fdc:	20000790 	.word	0x20000790
 8004fe0:	200006d0 	.word	0x200006d0
 8004fe4:	200007e4 	.word	0x200007e4

08004fe8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <vTaskInternalSetTimeOutState+0x24>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <vTaskInternalSetTimeOutState+0x28>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	605a      	str	r2, [r3, #4]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	200007e8 	.word	0x200007e8
 8005010:	200007d4 	.word	0x200007d4

08005014 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	613b      	str	r3, [r7, #16]
}
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60fb      	str	r3, [r7, #12]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005056:	f000 ff05 	bl	8005e64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <xTaskCheckForTimeOut+0xbc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d102      	bne.n	800507a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	e023      	b.n	80050c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <xTaskCheckForTimeOut+0xc0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d007      	beq.n	8005096 <xTaskCheckForTimeOut+0x82>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	429a      	cmp	r2, r3
 800508e:	d302      	bcc.n	8005096 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	e015      	b.n	80050c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	d20b      	bcs.n	80050b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1ad2      	subs	r2, r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff ff9b 	bl	8004fe8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	e004      	b.n	80050c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050be:	2301      	movs	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050c2:	f000 feff 	bl	8005ec4 <vPortExitCritical>

	return xReturn;
 80050c6:	69fb      	ldr	r3, [r7, #28]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	200007d4 	.word	0x200007d4
 80050d4:	200007e8 	.word	0x200007e8

080050d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050dc:	4b03      	ldr	r3, [pc, #12]	; (80050ec <vTaskMissedYield+0x14>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	200007e4 	.word	0x200007e4

080050f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050f8:	f000 f854 	bl	80051a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050fc:	4b07      	ldr	r3, [pc, #28]	; (800511c <prvIdleTask+0x2c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d907      	bls.n	8005114 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <prvIdleTask+0x30>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005114:	f7fb fcbc 	bl	8000a90 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005118:	e7ee      	b.n	80050f8 <prvIdleTask+0x8>
 800511a:	bf00      	nop
 800511c:	200006d4 	.word	0x200006d4
 8005120:	e000ed04 	.word	0xe000ed04

08005124 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800512a:	2300      	movs	r3, #0
 800512c:	607b      	str	r3, [r7, #4]
 800512e:	e00c      	b.n	800514a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4a12      	ldr	r2, [pc, #72]	; (8005184 <prvInitialiseTaskLists+0x60>)
 800513c:	4413      	add	r3, r2
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fccd 	bl	8003ade <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3301      	adds	r3, #1
 8005148:	607b      	str	r3, [r7, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b06      	cmp	r3, #6
 800514e:	d9ef      	bls.n	8005130 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005150:	480d      	ldr	r0, [pc, #52]	; (8005188 <prvInitialiseTaskLists+0x64>)
 8005152:	f7fe fcc4 	bl	8003ade <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005156:	480d      	ldr	r0, [pc, #52]	; (800518c <prvInitialiseTaskLists+0x68>)
 8005158:	f7fe fcc1 	bl	8003ade <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800515c:	480c      	ldr	r0, [pc, #48]	; (8005190 <prvInitialiseTaskLists+0x6c>)
 800515e:	f7fe fcbe 	bl	8003ade <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005162:	480c      	ldr	r0, [pc, #48]	; (8005194 <prvInitialiseTaskLists+0x70>)
 8005164:	f7fe fcbb 	bl	8003ade <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005168:	480b      	ldr	r0, [pc, #44]	; (8005198 <prvInitialiseTaskLists+0x74>)
 800516a:	f7fe fcb8 	bl	8003ade <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800516e:	4b0b      	ldr	r3, [pc, #44]	; (800519c <prvInitialiseTaskLists+0x78>)
 8005170:	4a05      	ldr	r2, [pc, #20]	; (8005188 <prvInitialiseTaskLists+0x64>)
 8005172:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005174:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <prvInitialiseTaskLists+0x7c>)
 8005176:	4a05      	ldr	r2, [pc, #20]	; (800518c <prvInitialiseTaskLists+0x68>)
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	200006d4 	.word	0x200006d4
 8005188:	20000760 	.word	0x20000760
 800518c:	20000774 	.word	0x20000774
 8005190:	20000790 	.word	0x20000790
 8005194:	200007a4 	.word	0x200007a4
 8005198:	200007bc 	.word	0x200007bc
 800519c:	20000788 	.word	0x20000788
 80051a0:	2000078c 	.word	0x2000078c

080051a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051aa:	e019      	b.n	80051e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051ac:	f000 fe5a 	bl	8005e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b0:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <prvCheckTasksWaitingTermination+0x50>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe fd18 	bl	8003bf2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <prvCheckTasksWaitingTermination+0x54>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	4a0b      	ldr	r2, [pc, #44]	; (80051f8 <prvCheckTasksWaitingTermination+0x54>)
 80051ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <prvCheckTasksWaitingTermination+0x58>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <prvCheckTasksWaitingTermination+0x58>)
 80051d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051d6:	f000 fe75 	bl	8005ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f810 	bl	8005200 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <prvCheckTasksWaitingTermination+0x58>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e1      	bne.n	80051ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	200007a4 	.word	0x200007a4
 80051f8:	200007d0 	.word	0x200007d0
 80051fc:	200007b8 	.word	0x200007b8

08005200 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800520e:	2b00      	cmp	r3, #0
 8005210:	d108      	bne.n	8005224 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	4618      	mov	r0, r3
 8005218:	f001 f812 	bl	8006240 <vPortFree>
				vPortFree( pxTCB );
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f001 f80f 	bl	8006240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005222:	e018      	b.n	8005256 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800522a:	2b01      	cmp	r3, #1
 800522c:	d103      	bne.n	8005236 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 f806 	bl	8006240 <vPortFree>
	}
 8005234:	e00f      	b.n	8005256 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800523c:	2b02      	cmp	r3, #2
 800523e:	d00a      	beq.n	8005256 <prvDeleteTCB+0x56>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60fb      	str	r3, [r7, #12]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <prvDeleteTCB+0x54>
	}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <prvResetNextTaskUnblockTime+0x38>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <prvResetNextTaskUnblockTime+0x3c>)
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005278:	e008      	b.n	800528c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <prvResetNextTaskUnblockTime+0x38>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4a04      	ldr	r2, [pc, #16]	; (800529c <prvResetNextTaskUnblockTime+0x3c>)
 800528a:	6013      	str	r3, [r2, #0]
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20000788 	.word	0x20000788
 800529c:	200007f0 	.word	0x200007f0

080052a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <xTaskGetSchedulerState+0x34>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d102      	bne.n	80052b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052ae:	2301      	movs	r3, #1
 80052b0:	607b      	str	r3, [r7, #4]
 80052b2:	e008      	b.n	80052c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <xTaskGetSchedulerState+0x38>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052bc:	2302      	movs	r3, #2
 80052be:	607b      	str	r3, [r7, #4]
 80052c0:	e001      	b.n	80052c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052c6:	687b      	ldr	r3, [r7, #4]
	}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	200007dc 	.word	0x200007dc
 80052d8:	200007f8 	.word	0x200007f8

080052dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d06e      	beq.n	80053d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052f2:	4b3a      	ldr	r3, [pc, #232]	; (80053dc <xTaskPriorityDisinherit+0x100>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d00a      	beq.n	8005312 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	60fb      	str	r3, [r7, #12]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60bb      	str	r3, [r7, #8]
}
 800532c:	bf00      	nop
 800532e:	e7fe      	b.n	800532e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005334:	1e5a      	subs	r2, r3, #1
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005342:	429a      	cmp	r2, r3
 8005344:	d044      	beq.n	80053d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534a:	2b00      	cmp	r3, #0
 800534c:	d140      	bne.n	80053d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3304      	adds	r3, #4
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe fc4d 	bl	8003bf2 <uxListRemove>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d115      	bne.n	800538a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005362:	491f      	ldr	r1, [pc, #124]	; (80053e0 <xTaskPriorityDisinherit+0x104>)
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xTaskPriorityDisinherit+0xae>
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	2201      	movs	r2, #1
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43da      	mvns	r2, r3
 8005380:	4b18      	ldr	r3, [pc, #96]	; (80053e4 <xTaskPriorityDisinherit+0x108>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4013      	ands	r3, r2
 8005386:	4a17      	ldr	r2, [pc, #92]	; (80053e4 <xTaskPriorityDisinherit+0x108>)
 8005388:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	f1c3 0207 	rsb	r2, r3, #7
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	2201      	movs	r2, #1
 80053a4:	409a      	lsls	r2, r3
 80053a6:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <xTaskPriorityDisinherit+0x108>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <xTaskPriorityDisinherit+0x108>)
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4a08      	ldr	r2, [pc, #32]	; (80053e0 <xTaskPriorityDisinherit+0x104>)
 80053be:	441a      	add	r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4619      	mov	r1, r3
 80053c6:	4610      	mov	r0, r2
 80053c8:	f7fe fbb6 	bl	8003b38 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053d0:	697b      	ldr	r3, [r7, #20]
	}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	200006d0 	.word	0x200006d0
 80053e0:	200006d4 	.word	0x200006d4
 80053e4:	200007d8 	.word	0x200007d8

080053e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053f2:	4b29      	ldr	r3, [pc, #164]	; (8005498 <prvAddCurrentTaskToDelayedList+0xb0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f8:	4b28      	ldr	r3, [pc, #160]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe fbf7 	bl	8003bf2 <uxListRemove>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	2201      	movs	r2, #1
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43da      	mvns	r2, r3
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4013      	ands	r3, r2
 800541e:	4a20      	ldr	r2, [pc, #128]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005420:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d10a      	bne.n	8005440 <prvAddCurrentTaskToDelayedList+0x58>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005430:	4b1a      	ldr	r3, [pc, #104]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	481a      	ldr	r0, [pc, #104]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800543a:	f7fe fb7d 	bl	8003b38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800543e:	e026      	b.n	800548e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005448:	4b14      	ldr	r3, [pc, #80]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	429a      	cmp	r2, r3
 8005456:	d209      	bcs.n	800546c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005458:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b0f      	ldr	r3, [pc, #60]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f7fe fb8b 	bl	8003b80 <vListInsert>
}
 800546a:	e010      	b.n	800548e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f7fe fb81 	bl	8003b80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	429a      	cmp	r2, r3
 8005486:	d202      	bcs.n	800548e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005488:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6013      	str	r3, [r2, #0]
}
 800548e:	bf00      	nop
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	200007d4 	.word	0x200007d4
 800549c:	200006d0 	.word	0x200006d0
 80054a0:	200007d8 	.word	0x200007d8
 80054a4:	200007bc 	.word	0x200007bc
 80054a8:	2000078c 	.word	0x2000078c
 80054ac:	20000788 	.word	0x20000788
 80054b0:	200007f0 	.word	0x200007f0

080054b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08a      	sub	sp, #40	; 0x28
 80054b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054be:	f000 fb63 	bl	8005b88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054c2:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <xTimerCreateTimerTask+0x80>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d021      	beq.n	800550e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054d2:	1d3a      	adds	r2, r7, #4
 80054d4:	f107 0108 	add.w	r1, r7, #8
 80054d8:	f107 030c 	add.w	r3, r7, #12
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fb f86b 	bl	80005b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	9202      	str	r2, [sp, #8]
 80054ea:	9301      	str	r3, [sp, #4]
 80054ec:	2303      	movs	r3, #3
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	2300      	movs	r3, #0
 80054f2:	460a      	mov	r2, r1
 80054f4:	4910      	ldr	r1, [pc, #64]	; (8005538 <xTimerCreateTimerTask+0x84>)
 80054f6:	4811      	ldr	r0, [pc, #68]	; (800553c <xTimerCreateTimerTask+0x88>)
 80054f8:	f7ff f8c8 	bl	800468c <xTaskCreateStatic>
 80054fc:	4603      	mov	r3, r0
 80054fe:	4a10      	ldr	r2, [pc, #64]	; (8005540 <xTimerCreateTimerTask+0x8c>)
 8005500:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005502:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <xTimerCreateTimerTask+0x8c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800550a:	2301      	movs	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	613b      	str	r3, [r7, #16]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800552a:	697b      	ldr	r3, [r7, #20]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	2000082c 	.word	0x2000082c
 8005538:	08006ef8 	.word	0x08006ef8
 800553c:	08005731 	.word	0x08005731
 8005540:	20000830 	.word	0x20000830

08005544 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005552:	2028      	movs	r0, #40	; 0x28
 8005554:	f000 fda8 	bl	80060a8 <pvPortMalloc>
 8005558:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00d      	beq.n	800557c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f805 	bl	8005586 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800557c:	697b      	ldr	r3, [r7, #20]
	}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b086      	sub	sp, #24
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	617b      	str	r3, [r7, #20]
}
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d01e      	beq.n	80055f4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80055b6:	f000 fae7 	bl	8005b88 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	6a3a      	ldr	r2, [r7, #32]
 80055d0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	3304      	adds	r3, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe faa1 	bl	8003b1e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055e8:	f043 0304 	orr.w	r3, r3, #4
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800560a:	2300      	movs	r3, #0
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	623b      	str	r3, [r7, #32]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800562a:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <xTimerGenericCommand+0x98>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d02a      	beq.n	8005688 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b05      	cmp	r3, #5
 8005642:	dc18      	bgt.n	8005676 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005644:	f7ff fe2c 	bl	80052a0 <xTaskGetSchedulerState>
 8005648:	4603      	mov	r3, r0
 800564a:	2b02      	cmp	r3, #2
 800564c:	d109      	bne.n	8005662 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800564e:	4b11      	ldr	r3, [pc, #68]	; (8005694 <xTimerGenericCommand+0x98>)
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	f107 0110 	add.w	r1, r7, #16
 8005656:	2300      	movs	r3, #0
 8005658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565a:	f7fe fc2f 	bl	8003ebc <xQueueGenericSend>
 800565e:	6278      	str	r0, [r7, #36]	; 0x24
 8005660:	e012      	b.n	8005688 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005662:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <xTimerGenericCommand+0x98>)
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	f107 0110 	add.w	r1, r7, #16
 800566a:	2300      	movs	r3, #0
 800566c:	2200      	movs	r2, #0
 800566e:	f7fe fc25 	bl	8003ebc <xQueueGenericSend>
 8005672:	6278      	str	r0, [r7, #36]	; 0x24
 8005674:	e008      	b.n	8005688 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005676:	4b07      	ldr	r3, [pc, #28]	; (8005694 <xTimerGenericCommand+0x98>)
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	f107 0110 	add.w	r1, r7, #16
 800567e:	2300      	movs	r3, #0
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	f7fe fd19 	bl	80040b8 <xQueueGenericSendFromISR>
 8005686:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800568a:	4618      	mov	r0, r3
 800568c:	3728      	adds	r7, #40	; 0x28
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	2000082c 	.word	0x2000082c

08005698 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af02      	add	r7, sp, #8
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a2:	4b22      	ldr	r3, [pc, #136]	; (800572c <prvProcessExpiredTimer+0x94>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fe fa9e 	bl	8003bf2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d022      	beq.n	800570a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	18d1      	adds	r1, r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	6978      	ldr	r0, [r7, #20]
 80056d2:	f000 f8d1 	bl	8005878 <prvInsertTimerInActiveList>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01f      	beq.n	800571c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056dc:	2300      	movs	r3, #0
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	2300      	movs	r3, #0
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	2100      	movs	r1, #0
 80056e6:	6978      	ldr	r0, [r7, #20]
 80056e8:	f7ff ff88 	bl	80055fc <xTimerGenericCommand>
 80056ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d113      	bne.n	800571c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	60fb      	str	r3, [r7, #12]
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005710:	f023 0301 	bic.w	r3, r3, #1
 8005714:	b2da      	uxtb	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	6978      	ldr	r0, [r7, #20]
 8005722:	4798      	blx	r3
}
 8005724:	bf00      	nop
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000824 	.word	0x20000824

08005730 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005738:	f107 0308 	add.w	r3, r7, #8
 800573c:	4618      	mov	r0, r3
 800573e:	f000 f857 	bl	80057f0 <prvGetNextExpireTime>
 8005742:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4619      	mov	r1, r3
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f803 	bl	8005754 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800574e:	f000 f8d5 	bl	80058fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005752:	e7f1      	b.n	8005738 <prvTimerTask+0x8>

08005754 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800575e:	f7ff f9c3 	bl	8004ae8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005762:	f107 0308 	add.w	r3, r7, #8
 8005766:	4618      	mov	r0, r3
 8005768:	f000 f866 	bl	8005838 <prvSampleTimeNow>
 800576c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d130      	bne.n	80057d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <prvProcessTimerOrBlockTask+0x3c>
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	429a      	cmp	r2, r3
 8005780:	d806      	bhi.n	8005790 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005782:	f7ff f9bf 	bl	8004b04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff ff85 	bl	8005698 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800578e:	e024      	b.n	80057da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005796:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <prvProcessTimerOrBlockTask+0x90>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <prvProcessTimerOrBlockTask+0x50>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <prvProcessTimerOrBlockTask+0x52>
 80057a4:	2300      	movs	r3, #0
 80057a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <prvProcessTimerOrBlockTask+0x94>)
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	f7fe ff35 	bl	8004624 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80057ba:	f7ff f9a3 	bl	8004b04 <xTaskResumeAll>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80057c4:	4b09      	ldr	r3, [pc, #36]	; (80057ec <prvProcessTimerOrBlockTask+0x98>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
}
 80057d4:	e001      	b.n	80057da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80057d6:	f7ff f995 	bl	8004b04 <xTaskResumeAll>
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000828 	.word	0x20000828
 80057e8:	2000082c 	.word	0x2000082c
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057f8:	4b0e      	ldr	r3, [pc, #56]	; (8005834 <prvGetNextExpireTime+0x44>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <prvGetNextExpireTime+0x16>
 8005802:	2201      	movs	r2, #1
 8005804:	e000      	b.n	8005808 <prvGetNextExpireTime+0x18>
 8005806:	2200      	movs	r2, #0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d105      	bne.n	8005820 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005814:	4b07      	ldr	r3, [pc, #28]	; (8005834 <prvGetNextExpireTime+0x44>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	e001      	b.n	8005824 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005824:	68fb      	ldr	r3, [r7, #12]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000824 	.word	0x20000824

08005838 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005840:	f7ff f9fc 	bl	8004c3c <xTaskGetTickCount>
 8005844:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005846:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <prvSampleTimeNow+0x3c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	429a      	cmp	r2, r3
 800584e:	d205      	bcs.n	800585c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005850:	f000 f936 	bl	8005ac0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e002      	b.n	8005862 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005862:	4a04      	ldr	r2, [pc, #16]	; (8005874 <prvSampleTimeNow+0x3c>)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005868:	68fb      	ldr	r3, [r7, #12]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000834 	.word	0x20000834

08005878 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d812      	bhi.n	80058c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	1ad2      	subs	r2, r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d302      	bcc.n	80058b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e01b      	b.n	80058ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <prvInsertTimerInActiveList+0x7c>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f7fe f95f 	bl	8003b80 <vListInsert>
 80058c2:	e012      	b.n	80058ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d206      	bcs.n	80058da <prvInsertTimerInActiveList+0x62>
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e007      	b.n	80058ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058da:	4b07      	ldr	r3, [pc, #28]	; (80058f8 <prvInsertTimerInActiveList+0x80>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7fe f94b 	bl	8003b80 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058ea:	697b      	ldr	r3, [r7, #20]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20000828 	.word	0x20000828
 80058f8:	20000824 	.word	0x20000824

080058fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08e      	sub	sp, #56	; 0x38
 8005900:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005902:	e0ca      	b.n	8005a9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	da18      	bge.n	800593c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800590a:	1d3b      	adds	r3, r7, #4
 800590c:	3304      	adds	r3, #4
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	61fb      	str	r3, [r7, #28]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005932:	6850      	ldr	r0, [r2, #4]
 8005934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005936:	6892      	ldr	r2, [r2, #8]
 8005938:	4611      	mov	r1, r2
 800593a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	f2c0 80aa 	blt.w	8005a98 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d004      	beq.n	800595a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	3304      	adds	r3, #4
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe f94c 	bl	8003bf2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800595a:	463b      	mov	r3, r7
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff ff6b 	bl	8005838 <prvSampleTimeNow>
 8005962:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b09      	cmp	r3, #9
 8005968:	f200 8097 	bhi.w	8005a9a <prvProcessReceivedCommands+0x19e>
 800596c:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <prvProcessReceivedCommands+0x78>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	0800599d 	.word	0x0800599d
 8005978:	0800599d 	.word	0x0800599d
 800597c:	0800599d 	.word	0x0800599d
 8005980:	08005a11 	.word	0x08005a11
 8005984:	08005a25 	.word	0x08005a25
 8005988:	08005a6f 	.word	0x08005a6f
 800598c:	0800599d 	.word	0x0800599d
 8005990:	0800599d 	.word	0x0800599d
 8005994:	08005a11 	.word	0x08005a11
 8005998:	08005a25 	.word	0x08005a25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	18d1      	adds	r1, r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059bc:	f7ff ff5c 	bl	8005878 <prvInsertTimerInActiveList>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d069      	beq.n	8005a9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d05e      	beq.n	8005a9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	441a      	add	r2, r3
 80059e4:	2300      	movs	r3, #0
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	2300      	movs	r3, #0
 80059ea:	2100      	movs	r1, #0
 80059ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ee:	f7ff fe05 	bl	80055fc <xTimerGenericCommand>
 80059f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d14f      	bne.n	8005a9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	61bb      	str	r3, [r7, #24]
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005a22:	e03a      	b.n	8005a9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	617b      	str	r3, [r7, #20]
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	18d1      	adds	r1, r2, r3
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a68:	f7ff ff06 	bl	8005878 <prvInsertTimerInActiveList>
					break;
 8005a6c:	e015      	b.n	8005a9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d103      	bne.n	8005a84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a7e:	f000 fbdf 	bl	8006240 <vPortFree>
 8005a82:	e00a      	b.n	8005a9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a96:	e000      	b.n	8005a9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a9a:	4b08      	ldr	r3, [pc, #32]	; (8005abc <prvProcessReceivedCommands+0x1c0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	1d39      	adds	r1, r7, #4
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe fba4 	bl	80041f0 <xQueueReceive>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f47f af2a 	bne.w	8005904 <prvProcessReceivedCommands+0x8>
	}
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	3730      	adds	r7, #48	; 0x30
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	2000082c 	.word	0x2000082c

08005ac0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ac6:	e048      	b.n	8005b5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	; (8005b80 <prvSwitchTimerLists+0xc0>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad2:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <prvSwitchTimerLists+0xc0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fe f886 	bl	8003bf2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02e      	beq.n	8005b5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4413      	add	r3, r2
 8005b04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d90e      	bls.n	8005b2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b1a:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <prvSwitchTimerLists+0xc0>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f7fe f82b 	bl	8003b80 <vListInsert>
 8005b2a:	e016      	b.n	8005b5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	2300      	movs	r3, #0
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	2100      	movs	r1, #0
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7ff fd60 	bl	80055fc <xTimerGenericCommand>
 8005b3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	603b      	str	r3, [r7, #0]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <prvSwitchTimerLists+0xc0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1b1      	bne.n	8005ac8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <prvSwitchTimerLists+0xc0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <prvSwitchTimerLists+0xc4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <prvSwitchTimerLists+0xc0>)
 8005b70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b72:	4a04      	ldr	r2, [pc, #16]	; (8005b84 <prvSwitchTimerLists+0xc4>)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	6013      	str	r3, [r2, #0]
}
 8005b78:	bf00      	nop
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000824 	.word	0x20000824
 8005b84:	20000828 	.word	0x20000828

08005b88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b8e:	f000 f969 	bl	8005e64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b92:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <prvCheckForValidListAndQueue+0x60>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d120      	bne.n	8005bdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b9a:	4814      	ldr	r0, [pc, #80]	; (8005bec <prvCheckForValidListAndQueue+0x64>)
 8005b9c:	f7fd ff9f 	bl	8003ade <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ba0:	4813      	ldr	r0, [pc, #76]	; (8005bf0 <prvCheckForValidListAndQueue+0x68>)
 8005ba2:	f7fd ff9c 	bl	8003ade <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <prvCheckForValidListAndQueue+0x6c>)
 8005ba8:	4a10      	ldr	r2, [pc, #64]	; (8005bec <prvCheckForValidListAndQueue+0x64>)
 8005baa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005bac:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <prvCheckForValidListAndQueue+0x70>)
 8005bae:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <prvCheckForValidListAndQueue+0x68>)
 8005bb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <prvCheckForValidListAndQueue+0x74>)
 8005bb8:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <prvCheckForValidListAndQueue+0x78>)
 8005bba:	2110      	movs	r1, #16
 8005bbc:	200a      	movs	r0, #10
 8005bbe:	f7fe f8ab 	bl	8003d18 <xQueueGenericCreateStatic>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <prvCheckForValidListAndQueue+0x60>)
 8005bc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005bc8:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <prvCheckForValidListAndQueue+0x60>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <prvCheckForValidListAndQueue+0x60>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	490b      	ldr	r1, [pc, #44]	; (8005c04 <prvCheckForValidListAndQueue+0x7c>)
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fcfa 	bl	80045d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bdc:	f000 f972 	bl	8005ec4 <vPortExitCritical>
}
 8005be0:	bf00      	nop
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	2000082c 	.word	0x2000082c
 8005bec:	200007fc 	.word	0x200007fc
 8005bf0:	20000810 	.word	0x20000810
 8005bf4:	20000824 	.word	0x20000824
 8005bf8:	20000828 	.word	0x20000828
 8005bfc:	200008d8 	.word	0x200008d8
 8005c00:	20000838 	.word	0x20000838
 8005c04:	08006f00 	.word	0x08006f00

08005c08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3b04      	subs	r3, #4
 8005c18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3b04      	subs	r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3b04      	subs	r3, #4
 8005c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c38:	4a0c      	ldr	r2, [pc, #48]	; (8005c6c <pxPortInitialiseStack+0x64>)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3b14      	subs	r3, #20
 8005c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3b04      	subs	r3, #4
 8005c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f06f 0202 	mvn.w	r2, #2
 8005c56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3b20      	subs	r3, #32
 8005c5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	08005c71 	.word	0x08005c71

08005c70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c7a:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <prvTaskExitError+0x54>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d00a      	beq.n	8005c9a <prvTaskExitError+0x2a>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60fb      	str	r3, [r7, #12]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <prvTaskExitError+0x28>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	60bb      	str	r3, [r7, #8]
}
 8005cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cae:	bf00      	nop
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0fc      	beq.n	8005cb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	2000000c 	.word	0x2000000c
	...

08005cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005cd0:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <pxCurrentTCBConst2>)
 8005cd2:	6819      	ldr	r1, [r3, #0]
 8005cd4:	6808      	ldr	r0, [r1, #0]
 8005cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cda:	f380 8809 	msr	PSP, r0
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f04f 0000 	mov.w	r0, #0
 8005ce6:	f380 8811 	msr	BASEPRI, r0
 8005cea:	4770      	bx	lr
 8005cec:	f3af 8000 	nop.w

08005cf0 <pxCurrentTCBConst2>:
 8005cf0:	200006d0 	.word	0x200006d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop

08005cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cf8:	4808      	ldr	r0, [pc, #32]	; (8005d1c <prvPortStartFirstTask+0x24>)
 8005cfa:	6800      	ldr	r0, [r0, #0]
 8005cfc:	6800      	ldr	r0, [r0, #0]
 8005cfe:	f380 8808 	msr	MSP, r0
 8005d02:	f04f 0000 	mov.w	r0, #0
 8005d06:	f380 8814 	msr	CONTROL, r0
 8005d0a:	b662      	cpsie	i
 8005d0c:	b661      	cpsie	f
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	df00      	svc	0
 8005d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d1a:	bf00      	nop
 8005d1c:	e000ed08 	.word	0xe000ed08

08005d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d26:	4b46      	ldr	r3, [pc, #280]	; (8005e40 <xPortStartScheduler+0x120>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a46      	ldr	r2, [pc, #280]	; (8005e44 <xPortStartScheduler+0x124>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d10a      	bne.n	8005d46 <xPortStartScheduler+0x26>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	613b      	str	r3, [r7, #16]
}
 8005d42:	bf00      	nop
 8005d44:	e7fe      	b.n	8005d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d46:	4b3e      	ldr	r3, [pc, #248]	; (8005e40 <xPortStartScheduler+0x120>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a3f      	ldr	r2, [pc, #252]	; (8005e48 <xPortStartScheduler+0x128>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d10a      	bne.n	8005d66 <xPortStartScheduler+0x46>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
}
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d66:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <xPortStartScheduler+0x12c>)
 8005d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	22ff      	movs	r2, #255	; 0xff
 8005d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	4b31      	ldr	r3, [pc, #196]	; (8005e50 <xPortStartScheduler+0x130>)
 8005d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d8e:	4b31      	ldr	r3, [pc, #196]	; (8005e54 <xPortStartScheduler+0x134>)
 8005d90:	2207      	movs	r2, #7
 8005d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d94:	e009      	b.n	8005daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d96:	4b2f      	ldr	r3, [pc, #188]	; (8005e54 <xPortStartScheduler+0x134>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	4a2d      	ldr	r2, [pc, #180]	; (8005e54 <xPortStartScheduler+0x134>)
 8005d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b80      	cmp	r3, #128	; 0x80
 8005db4:	d0ef      	beq.n	8005d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005db6:	4b27      	ldr	r3, [pc, #156]	; (8005e54 <xPortStartScheduler+0x134>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f1c3 0307 	rsb	r3, r3, #7
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d00a      	beq.n	8005dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	60bb      	str	r3, [r7, #8]
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dd8:	4b1e      	ldr	r3, [pc, #120]	; (8005e54 <xPortStartScheduler+0x134>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <xPortStartScheduler+0x134>)
 8005de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005de2:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <xPortStartScheduler+0x134>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dea:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <xPortStartScheduler+0x134>)
 8005dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005df6:	4b18      	ldr	r3, [pc, #96]	; (8005e58 <xPortStartScheduler+0x138>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a17      	ldr	r2, [pc, #92]	; (8005e58 <xPortStartScheduler+0x138>)
 8005dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e02:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <xPortStartScheduler+0x138>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a14      	ldr	r2, [pc, #80]	; (8005e58 <xPortStartScheduler+0x138>)
 8005e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e0e:	f000 f8dd 	bl	8005fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <xPortStartScheduler+0x13c>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e18:	f000 f8fc 	bl	8006014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <xPortStartScheduler+0x140>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a0f      	ldr	r2, [pc, #60]	; (8005e60 <xPortStartScheduler+0x140>)
 8005e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e28:	f7ff ff66 	bl	8005cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e2c:	f7fe ffce 	bl	8004dcc <vTaskSwitchContext>
	prvTaskExitError();
 8005e30:	f7ff ff1e 	bl	8005c70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	e000ed00 	.word	0xe000ed00
 8005e44:	410fc271 	.word	0x410fc271
 8005e48:	410fc270 	.word	0x410fc270
 8005e4c:	e000e400 	.word	0xe000e400
 8005e50:	20000920 	.word	0x20000920
 8005e54:	20000924 	.word	0x20000924
 8005e58:	e000ed20 	.word	0xe000ed20
 8005e5c:	2000000c 	.word	0x2000000c
 8005e60:	e000ef34 	.word	0xe000ef34

08005e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	607b      	str	r3, [r7, #4]
}
 8005e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <vPortEnterCritical+0x58>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <vPortEnterCritical+0x58>)
 8005e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e88:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <vPortEnterCritical+0x58>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d10f      	bne.n	8005eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <vPortEnterCritical+0x5c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	603b      	str	r3, [r7, #0]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <vPortEnterCritical+0x4a>
	}
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	2000000c 	.word	0x2000000c
 8005ec0:	e000ed04 	.word	0xe000ed04

08005ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005eca:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <vPortExitCritical+0x50>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <vPortExitCritical+0x24>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	607b      	str	r3, [r7, #4]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <vPortExitCritical+0x50>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	4a09      	ldr	r2, [pc, #36]	; (8005f14 <vPortExitCritical+0x50>)
 8005ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ef2:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <vPortExitCritical+0x50>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d105      	bne.n	8005f06 <vPortExitCritical+0x42>
 8005efa:	2300      	movs	r3, #0
 8005efc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	f383 8811 	msr	BASEPRI, r3
}
 8005f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	2000000c 	.word	0x2000000c
	...

08005f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f20:	f3ef 8009 	mrs	r0, PSP
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	4b15      	ldr	r3, [pc, #84]	; (8005f80 <pxCurrentTCBConst>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	f01e 0f10 	tst.w	lr, #16
 8005f30:	bf08      	it	eq
 8005f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3a:	6010      	str	r0, [r2, #0]
 8005f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f44:	f380 8811 	msr	BASEPRI, r0
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f7fe ff3c 	bl	8004dcc <vTaskSwitchContext>
 8005f54:	f04f 0000 	mov.w	r0, #0
 8005f58:	f380 8811 	msr	BASEPRI, r0
 8005f5c:	bc09      	pop	{r0, r3}
 8005f5e:	6819      	ldr	r1, [r3, #0]
 8005f60:	6808      	ldr	r0, [r1, #0]
 8005f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f66:	f01e 0f10 	tst.w	lr, #16
 8005f6a:	bf08      	it	eq
 8005f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f70:	f380 8809 	msr	PSP, r0
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	f3af 8000 	nop.w

08005f80 <pxCurrentTCBConst>:
 8005f80:	200006d0 	.word	0x200006d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop

08005f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	607b      	str	r3, [r7, #4]
}
 8005fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fa2:	f7fe fe5b 	bl	8004c5c <xTaskIncrementTick>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <SysTick_Handler+0x40>)
 8005fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	f383 8811 	msr	BASEPRI, r3
}
 8005fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fc0:	bf00      	nop
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <vPortSetupTimerInterrupt+0x34>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <vPortSetupTimerInterrupt+0x38>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <vPortSetupTimerInterrupt+0x3c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a0a      	ldr	r2, [pc, #40]	; (800600c <vPortSetupTimerInterrupt+0x40>)
 8005fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe6:	099b      	lsrs	r3, r3, #6
 8005fe8:	4a09      	ldr	r2, [pc, #36]	; (8006010 <vPortSetupTimerInterrupt+0x44>)
 8005fea:	3b01      	subs	r3, #1
 8005fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fee:	4b04      	ldr	r3, [pc, #16]	; (8006000 <vPortSetupTimerInterrupt+0x34>)
 8005ff0:	2207      	movs	r2, #7
 8005ff2:	601a      	str	r2, [r3, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	e000e010 	.word	0xe000e010
 8006004:	e000e018 	.word	0xe000e018
 8006008:	20000000 	.word	0x20000000
 800600c:	10624dd3 	.word	0x10624dd3
 8006010:	e000e014 	.word	0xe000e014

08006014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006024 <vPortEnableVFP+0x10>
 8006018:	6801      	ldr	r1, [r0, #0]
 800601a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800601e:	6001      	str	r1, [r0, #0]
 8006020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006022:	bf00      	nop
 8006024:	e000ed88 	.word	0xe000ed88

08006028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800602e:	f3ef 8305 	mrs	r3, IPSR
 8006032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b0f      	cmp	r3, #15
 8006038:	d914      	bls.n	8006064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800603a:	4a17      	ldr	r2, [pc, #92]	; (8006098 <vPortValidateInterruptPriority+0x70>)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006044:	4b15      	ldr	r3, [pc, #84]	; (800609c <vPortValidateInterruptPriority+0x74>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	7afa      	ldrb	r2, [r7, #11]
 800604a:	429a      	cmp	r2, r3
 800604c:	d20a      	bcs.n	8006064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
}
 8006060:	bf00      	nop
 8006062:	e7fe      	b.n	8006062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006064:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <vPortValidateInterruptPriority+0x78>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800606c:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <vPortValidateInterruptPriority+0x7c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d90a      	bls.n	800608a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	603b      	str	r3, [r7, #0]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <vPortValidateInterruptPriority+0x60>
	}
 800608a:	bf00      	nop
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	e000e3f0 	.word	0xe000e3f0
 800609c:	20000920 	.word	0x20000920
 80060a0:	e000ed0c 	.word	0xe000ed0c
 80060a4:	20000924 	.word	0x20000924

080060a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060b4:	f7fe fd18 	bl	8004ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060b8:	4b5b      	ldr	r3, [pc, #364]	; (8006228 <pvPortMalloc+0x180>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060c0:	f000 f920 	bl	8006304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060c4:	4b59      	ldr	r3, [pc, #356]	; (800622c <pvPortMalloc+0x184>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f040 8093 	bne.w	80061f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01d      	beq.n	8006114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80060d8:	2208      	movs	r2, #8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4413      	add	r3, r2
 80060de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d014      	beq.n	8006114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f023 0307 	bic.w	r3, r3, #7
 80060f0:	3308      	adds	r3, #8
 80060f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <pvPortMalloc+0x6c>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	617b      	str	r3, [r7, #20]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d06e      	beq.n	80061f8 <pvPortMalloc+0x150>
 800611a:	4b45      	ldr	r3, [pc, #276]	; (8006230 <pvPortMalloc+0x188>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d869      	bhi.n	80061f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006124:	4b43      	ldr	r3, [pc, #268]	; (8006234 <pvPortMalloc+0x18c>)
 8006126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006128:	4b42      	ldr	r3, [pc, #264]	; (8006234 <pvPortMalloc+0x18c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800612e:	e004      	b.n	800613a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d903      	bls.n	800614c <pvPortMalloc+0xa4>
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1f1      	bne.n	8006130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800614c:	4b36      	ldr	r3, [pc, #216]	; (8006228 <pvPortMalloc+0x180>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006152:	429a      	cmp	r2, r3
 8006154:	d050      	beq.n	80061f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2208      	movs	r2, #8
 800615c:	4413      	add	r3, r2
 800615e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	2308      	movs	r3, #8
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	429a      	cmp	r2, r3
 8006176:	d91f      	bls.n	80061b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <pvPortMalloc+0xf8>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	613b      	str	r3, [r7, #16]
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	1ad2      	subs	r2, r2, r3
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061b2:	69b8      	ldr	r0, [r7, #24]
 80061b4:	f000 f908 	bl	80063c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061b8:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <pvPortMalloc+0x188>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <pvPortMalloc+0x188>)
 80061c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061c6:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <pvPortMalloc+0x188>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b1b      	ldr	r3, [pc, #108]	; (8006238 <pvPortMalloc+0x190>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d203      	bcs.n	80061da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061d2:	4b17      	ldr	r3, [pc, #92]	; (8006230 <pvPortMalloc+0x188>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a18      	ldr	r2, [pc, #96]	; (8006238 <pvPortMalloc+0x190>)
 80061d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	4b13      	ldr	r3, [pc, #76]	; (800622c <pvPortMalloc+0x184>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061ee:	4b13      	ldr	r3, [pc, #76]	; (800623c <pvPortMalloc+0x194>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	4a11      	ldr	r2, [pc, #68]	; (800623c <pvPortMalloc+0x194>)
 80061f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061f8:	f7fe fc84 	bl	8004b04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <pvPortMalloc+0x174>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60fb      	str	r3, [r7, #12]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <pvPortMalloc+0x172>
	return pvReturn;
 800621c:	69fb      	ldr	r3, [r7, #28]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3728      	adds	r7, #40	; 0x28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20003810 	.word	0x20003810
 800622c:	20003824 	.word	0x20003824
 8006230:	20003814 	.word	0x20003814
 8006234:	20003808 	.word	0x20003808
 8006238:	20003818 	.word	0x20003818
 800623c:	2000381c 	.word	0x2000381c

08006240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d04d      	beq.n	80062ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006252:	2308      	movs	r3, #8
 8006254:	425b      	negs	r3, r3
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4413      	add	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <vPortFree+0xb8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <vPortFree+0x44>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	60fb      	str	r3, [r7, #12]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <vPortFree+0x62>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	60bb      	str	r3, [r7, #8]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <vPortFree+0xb8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01e      	beq.n	80062ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d11a      	bne.n	80062ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	4b0e      	ldr	r3, [pc, #56]	; (80062f8 <vPortFree+0xb8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	401a      	ands	r2, r3
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062c8:	f7fe fc0e 	bl	8004ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <vPortFree+0xbc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4413      	add	r3, r2
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <vPortFree+0xbc>)
 80062d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062da:	6938      	ldr	r0, [r7, #16]
 80062dc:	f000 f874 	bl	80063c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062e0:	4b07      	ldr	r3, [pc, #28]	; (8006300 <vPortFree+0xc0>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3301      	adds	r3, #1
 80062e6:	4a06      	ldr	r2, [pc, #24]	; (8006300 <vPortFree+0xc0>)
 80062e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062ea:	f7fe fc0b 	bl	8004b04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062ee:	bf00      	nop
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20003824 	.word	0x20003824
 80062fc:	20003814 	.word	0x20003814
 8006300:	20003820 	.word	0x20003820

08006304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800630a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800630e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006310:	4b27      	ldr	r3, [pc, #156]	; (80063b0 <prvHeapInit+0xac>)
 8006312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3307      	adds	r3, #7
 8006322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0307 	bic.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	4a1f      	ldr	r2, [pc, #124]	; (80063b0 <prvHeapInit+0xac>)
 8006334:	4413      	add	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800633c:	4a1d      	ldr	r2, [pc, #116]	; (80063b4 <prvHeapInit+0xb0>)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006342:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <prvHeapInit+0xb0>)
 8006344:	2200      	movs	r2, #0
 8006346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4413      	add	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006350:	2208      	movs	r2, #8
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0307 	bic.w	r3, r3, #7
 800635e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <prvHeapInit+0xb4>)
 8006364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <prvHeapInit+0xb4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2200      	movs	r2, #0
 800636c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <prvHeapInit+0xb4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	1ad2      	subs	r2, r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <prvHeapInit+0xb4>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <prvHeapInit+0xb8>)
 8006392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <prvHeapInit+0xbc>)
 800639a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <prvHeapInit+0xc0>)
 800639e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063a2:	601a      	str	r2, [r3, #0]
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	20000928 	.word	0x20000928
 80063b4:	20003808 	.word	0x20003808
 80063b8:	20003810 	.word	0x20003810
 80063bc:	20003818 	.word	0x20003818
 80063c0:	20003814 	.word	0x20003814
 80063c4:	20003824 	.word	0x20003824

080063c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063d0:	4b28      	ldr	r3, [pc, #160]	; (8006474 <prvInsertBlockIntoFreeList+0xac>)
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e002      	b.n	80063dc <prvInsertBlockIntoFreeList+0x14>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d8f7      	bhi.n	80063d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d108      	bne.n	800640a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	441a      	add	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	441a      	add	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d118      	bne.n	8006450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b15      	ldr	r3, [pc, #84]	; (8006478 <prvInsertBlockIntoFreeList+0xb0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d00d      	beq.n	8006446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	441a      	add	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	e008      	b.n	8006458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006446:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <prvInsertBlockIntoFreeList+0xb0>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e003      	b.n	8006458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	429a      	cmp	r2, r3
 800645e:	d002      	beq.n	8006466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20003808 	.word	0x20003808
 8006478:	20003810 	.word	0x20003810

0800647c <__errno>:
 800647c:	4b01      	ldr	r3, [pc, #4]	; (8006484 <__errno+0x8>)
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000010 	.word	0x20000010

08006488 <__libc_init_array>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4d0d      	ldr	r5, [pc, #52]	; (80064c0 <__libc_init_array+0x38>)
 800648c:	4c0d      	ldr	r4, [pc, #52]	; (80064c4 <__libc_init_array+0x3c>)
 800648e:	1b64      	subs	r4, r4, r5
 8006490:	10a4      	asrs	r4, r4, #2
 8006492:	2600      	movs	r6, #0
 8006494:	42a6      	cmp	r6, r4
 8006496:	d109      	bne.n	80064ac <__libc_init_array+0x24>
 8006498:	4d0b      	ldr	r5, [pc, #44]	; (80064c8 <__libc_init_array+0x40>)
 800649a:	4c0c      	ldr	r4, [pc, #48]	; (80064cc <__libc_init_array+0x44>)
 800649c:	f000 fc8e 	bl	8006dbc <_init>
 80064a0:	1b64      	subs	r4, r4, r5
 80064a2:	10a4      	asrs	r4, r4, #2
 80064a4:	2600      	movs	r6, #0
 80064a6:	42a6      	cmp	r6, r4
 80064a8:	d105      	bne.n	80064b6 <__libc_init_array+0x2e>
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b0:	4798      	blx	r3
 80064b2:	3601      	adds	r6, #1
 80064b4:	e7ee      	b.n	8006494 <__libc_init_array+0xc>
 80064b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ba:	4798      	blx	r3
 80064bc:	3601      	adds	r6, #1
 80064be:	e7f2      	b.n	80064a6 <__libc_init_array+0x1e>
 80064c0:	08006f5c 	.word	0x08006f5c
 80064c4:	08006f5c 	.word	0x08006f5c
 80064c8:	08006f5c 	.word	0x08006f5c
 80064cc:	08006f60 	.word	0x08006f60

080064d0 <memcpy>:
 80064d0:	440a      	add	r2, r1
 80064d2:	4291      	cmp	r1, r2
 80064d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064d8:	d100      	bne.n	80064dc <memcpy+0xc>
 80064da:	4770      	bx	lr
 80064dc:	b510      	push	{r4, lr}
 80064de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064e6:	4291      	cmp	r1, r2
 80064e8:	d1f9      	bne.n	80064de <memcpy+0xe>
 80064ea:	bd10      	pop	{r4, pc}

080064ec <memset>:
 80064ec:	4402      	add	r2, r0
 80064ee:	4603      	mov	r3, r0
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d100      	bne.n	80064f6 <memset+0xa>
 80064f4:	4770      	bx	lr
 80064f6:	f803 1b01 	strb.w	r1, [r3], #1
 80064fa:	e7f9      	b.n	80064f0 <memset+0x4>

080064fc <siprintf>:
 80064fc:	b40e      	push	{r1, r2, r3}
 80064fe:	b500      	push	{lr}
 8006500:	b09c      	sub	sp, #112	; 0x70
 8006502:	ab1d      	add	r3, sp, #116	; 0x74
 8006504:	9002      	str	r0, [sp, #8]
 8006506:	9006      	str	r0, [sp, #24]
 8006508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800650c:	4809      	ldr	r0, [pc, #36]	; (8006534 <siprintf+0x38>)
 800650e:	9107      	str	r1, [sp, #28]
 8006510:	9104      	str	r1, [sp, #16]
 8006512:	4909      	ldr	r1, [pc, #36]	; (8006538 <siprintf+0x3c>)
 8006514:	f853 2b04 	ldr.w	r2, [r3], #4
 8006518:	9105      	str	r1, [sp, #20]
 800651a:	6800      	ldr	r0, [r0, #0]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	a902      	add	r1, sp, #8
 8006520:	f000 f868 	bl	80065f4 <_svfiprintf_r>
 8006524:	9b02      	ldr	r3, [sp, #8]
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	b01c      	add	sp, #112	; 0x70
 800652c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006530:	b003      	add	sp, #12
 8006532:	4770      	bx	lr
 8006534:	20000010 	.word	0x20000010
 8006538:	ffff0208 	.word	0xffff0208

0800653c <__ssputs_r>:
 800653c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006540:	688e      	ldr	r6, [r1, #8]
 8006542:	429e      	cmp	r6, r3
 8006544:	4682      	mov	sl, r0
 8006546:	460c      	mov	r4, r1
 8006548:	4690      	mov	r8, r2
 800654a:	461f      	mov	r7, r3
 800654c:	d838      	bhi.n	80065c0 <__ssputs_r+0x84>
 800654e:	898a      	ldrh	r2, [r1, #12]
 8006550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006554:	d032      	beq.n	80065bc <__ssputs_r+0x80>
 8006556:	6825      	ldr	r5, [r4, #0]
 8006558:	6909      	ldr	r1, [r1, #16]
 800655a:	eba5 0901 	sub.w	r9, r5, r1
 800655e:	6965      	ldr	r5, [r4, #20]
 8006560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006568:	3301      	adds	r3, #1
 800656a:	444b      	add	r3, r9
 800656c:	106d      	asrs	r5, r5, #1
 800656e:	429d      	cmp	r5, r3
 8006570:	bf38      	it	cc
 8006572:	461d      	movcc	r5, r3
 8006574:	0553      	lsls	r3, r2, #21
 8006576:	d531      	bpl.n	80065dc <__ssputs_r+0xa0>
 8006578:	4629      	mov	r1, r5
 800657a:	f000 fb55 	bl	8006c28 <_malloc_r>
 800657e:	4606      	mov	r6, r0
 8006580:	b950      	cbnz	r0, 8006598 <__ssputs_r+0x5c>
 8006582:	230c      	movs	r3, #12
 8006584:	f8ca 3000 	str.w	r3, [sl]
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006598:	6921      	ldr	r1, [r4, #16]
 800659a:	464a      	mov	r2, r9
 800659c:	f7ff ff98 	bl	80064d0 <memcpy>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065aa:	81a3      	strh	r3, [r4, #12]
 80065ac:	6126      	str	r6, [r4, #16]
 80065ae:	6165      	str	r5, [r4, #20]
 80065b0:	444e      	add	r6, r9
 80065b2:	eba5 0509 	sub.w	r5, r5, r9
 80065b6:	6026      	str	r6, [r4, #0]
 80065b8:	60a5      	str	r5, [r4, #8]
 80065ba:	463e      	mov	r6, r7
 80065bc:	42be      	cmp	r6, r7
 80065be:	d900      	bls.n	80065c2 <__ssputs_r+0x86>
 80065c0:	463e      	mov	r6, r7
 80065c2:	6820      	ldr	r0, [r4, #0]
 80065c4:	4632      	mov	r2, r6
 80065c6:	4641      	mov	r1, r8
 80065c8:	f000 faa8 	bl	8006b1c <memmove>
 80065cc:	68a3      	ldr	r3, [r4, #8]
 80065ce:	1b9b      	subs	r3, r3, r6
 80065d0:	60a3      	str	r3, [r4, #8]
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	4433      	add	r3, r6
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	2000      	movs	r0, #0
 80065da:	e7db      	b.n	8006594 <__ssputs_r+0x58>
 80065dc:	462a      	mov	r2, r5
 80065de:	f000 fb97 	bl	8006d10 <_realloc_r>
 80065e2:	4606      	mov	r6, r0
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d1e1      	bne.n	80065ac <__ssputs_r+0x70>
 80065e8:	6921      	ldr	r1, [r4, #16]
 80065ea:	4650      	mov	r0, sl
 80065ec:	f000 fab0 	bl	8006b50 <_free_r>
 80065f0:	e7c7      	b.n	8006582 <__ssputs_r+0x46>
	...

080065f4 <_svfiprintf_r>:
 80065f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f8:	4698      	mov	r8, r3
 80065fa:	898b      	ldrh	r3, [r1, #12]
 80065fc:	061b      	lsls	r3, r3, #24
 80065fe:	b09d      	sub	sp, #116	; 0x74
 8006600:	4607      	mov	r7, r0
 8006602:	460d      	mov	r5, r1
 8006604:	4614      	mov	r4, r2
 8006606:	d50e      	bpl.n	8006626 <_svfiprintf_r+0x32>
 8006608:	690b      	ldr	r3, [r1, #16]
 800660a:	b963      	cbnz	r3, 8006626 <_svfiprintf_r+0x32>
 800660c:	2140      	movs	r1, #64	; 0x40
 800660e:	f000 fb0b 	bl	8006c28 <_malloc_r>
 8006612:	6028      	str	r0, [r5, #0]
 8006614:	6128      	str	r0, [r5, #16]
 8006616:	b920      	cbnz	r0, 8006622 <_svfiprintf_r+0x2e>
 8006618:	230c      	movs	r3, #12
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	e0d1      	b.n	80067c6 <_svfiprintf_r+0x1d2>
 8006622:	2340      	movs	r3, #64	; 0x40
 8006624:	616b      	str	r3, [r5, #20]
 8006626:	2300      	movs	r3, #0
 8006628:	9309      	str	r3, [sp, #36]	; 0x24
 800662a:	2320      	movs	r3, #32
 800662c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006630:	f8cd 800c 	str.w	r8, [sp, #12]
 8006634:	2330      	movs	r3, #48	; 0x30
 8006636:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067e0 <_svfiprintf_r+0x1ec>
 800663a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800663e:	f04f 0901 	mov.w	r9, #1
 8006642:	4623      	mov	r3, r4
 8006644:	469a      	mov	sl, r3
 8006646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800664a:	b10a      	cbz	r2, 8006650 <_svfiprintf_r+0x5c>
 800664c:	2a25      	cmp	r2, #37	; 0x25
 800664e:	d1f9      	bne.n	8006644 <_svfiprintf_r+0x50>
 8006650:	ebba 0b04 	subs.w	fp, sl, r4
 8006654:	d00b      	beq.n	800666e <_svfiprintf_r+0x7a>
 8006656:	465b      	mov	r3, fp
 8006658:	4622      	mov	r2, r4
 800665a:	4629      	mov	r1, r5
 800665c:	4638      	mov	r0, r7
 800665e:	f7ff ff6d 	bl	800653c <__ssputs_r>
 8006662:	3001      	adds	r0, #1
 8006664:	f000 80aa 	beq.w	80067bc <_svfiprintf_r+0x1c8>
 8006668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800666a:	445a      	add	r2, fp
 800666c:	9209      	str	r2, [sp, #36]	; 0x24
 800666e:	f89a 3000 	ldrb.w	r3, [sl]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80a2 	beq.w	80067bc <_svfiprintf_r+0x1c8>
 8006678:	2300      	movs	r3, #0
 800667a:	f04f 32ff 	mov.w	r2, #4294967295
 800667e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006682:	f10a 0a01 	add.w	sl, sl, #1
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	9307      	str	r3, [sp, #28]
 800668a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800668e:	931a      	str	r3, [sp, #104]	; 0x68
 8006690:	4654      	mov	r4, sl
 8006692:	2205      	movs	r2, #5
 8006694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006698:	4851      	ldr	r0, [pc, #324]	; (80067e0 <_svfiprintf_r+0x1ec>)
 800669a:	f7f9 fda1 	bl	80001e0 <memchr>
 800669e:	9a04      	ldr	r2, [sp, #16]
 80066a0:	b9d8      	cbnz	r0, 80066da <_svfiprintf_r+0xe6>
 80066a2:	06d0      	lsls	r0, r2, #27
 80066a4:	bf44      	itt	mi
 80066a6:	2320      	movmi	r3, #32
 80066a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066ac:	0711      	lsls	r1, r2, #28
 80066ae:	bf44      	itt	mi
 80066b0:	232b      	movmi	r3, #43	; 0x2b
 80066b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066b6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ba:	2b2a      	cmp	r3, #42	; 0x2a
 80066bc:	d015      	beq.n	80066ea <_svfiprintf_r+0xf6>
 80066be:	9a07      	ldr	r2, [sp, #28]
 80066c0:	4654      	mov	r4, sl
 80066c2:	2000      	movs	r0, #0
 80066c4:	f04f 0c0a 	mov.w	ip, #10
 80066c8:	4621      	mov	r1, r4
 80066ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ce:	3b30      	subs	r3, #48	; 0x30
 80066d0:	2b09      	cmp	r3, #9
 80066d2:	d94e      	bls.n	8006772 <_svfiprintf_r+0x17e>
 80066d4:	b1b0      	cbz	r0, 8006704 <_svfiprintf_r+0x110>
 80066d6:	9207      	str	r2, [sp, #28]
 80066d8:	e014      	b.n	8006704 <_svfiprintf_r+0x110>
 80066da:	eba0 0308 	sub.w	r3, r0, r8
 80066de:	fa09 f303 	lsl.w	r3, r9, r3
 80066e2:	4313      	orrs	r3, r2
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	46a2      	mov	sl, r4
 80066e8:	e7d2      	b.n	8006690 <_svfiprintf_r+0x9c>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	1d19      	adds	r1, r3, #4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	9103      	str	r1, [sp, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bfbb      	ittet	lt
 80066f6:	425b      	neglt	r3, r3
 80066f8:	f042 0202 	orrlt.w	r2, r2, #2
 80066fc:	9307      	strge	r3, [sp, #28]
 80066fe:	9307      	strlt	r3, [sp, #28]
 8006700:	bfb8      	it	lt
 8006702:	9204      	strlt	r2, [sp, #16]
 8006704:	7823      	ldrb	r3, [r4, #0]
 8006706:	2b2e      	cmp	r3, #46	; 0x2e
 8006708:	d10c      	bne.n	8006724 <_svfiprintf_r+0x130>
 800670a:	7863      	ldrb	r3, [r4, #1]
 800670c:	2b2a      	cmp	r3, #42	; 0x2a
 800670e:	d135      	bne.n	800677c <_svfiprintf_r+0x188>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	1d1a      	adds	r2, r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	9203      	str	r2, [sp, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	bfb8      	it	lt
 800671c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006720:	3402      	adds	r4, #2
 8006722:	9305      	str	r3, [sp, #20]
 8006724:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067f0 <_svfiprintf_r+0x1fc>
 8006728:	7821      	ldrb	r1, [r4, #0]
 800672a:	2203      	movs	r2, #3
 800672c:	4650      	mov	r0, sl
 800672e:	f7f9 fd57 	bl	80001e0 <memchr>
 8006732:	b140      	cbz	r0, 8006746 <_svfiprintf_r+0x152>
 8006734:	2340      	movs	r3, #64	; 0x40
 8006736:	eba0 000a 	sub.w	r0, r0, sl
 800673a:	fa03 f000 	lsl.w	r0, r3, r0
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	4303      	orrs	r3, r0
 8006742:	3401      	adds	r4, #1
 8006744:	9304      	str	r3, [sp, #16]
 8006746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800674a:	4826      	ldr	r0, [pc, #152]	; (80067e4 <_svfiprintf_r+0x1f0>)
 800674c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006750:	2206      	movs	r2, #6
 8006752:	f7f9 fd45 	bl	80001e0 <memchr>
 8006756:	2800      	cmp	r0, #0
 8006758:	d038      	beq.n	80067cc <_svfiprintf_r+0x1d8>
 800675a:	4b23      	ldr	r3, [pc, #140]	; (80067e8 <_svfiprintf_r+0x1f4>)
 800675c:	bb1b      	cbnz	r3, 80067a6 <_svfiprintf_r+0x1b2>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	3307      	adds	r3, #7
 8006762:	f023 0307 	bic.w	r3, r3, #7
 8006766:	3308      	adds	r3, #8
 8006768:	9303      	str	r3, [sp, #12]
 800676a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676c:	4433      	add	r3, r6
 800676e:	9309      	str	r3, [sp, #36]	; 0x24
 8006770:	e767      	b.n	8006642 <_svfiprintf_r+0x4e>
 8006772:	fb0c 3202 	mla	r2, ip, r2, r3
 8006776:	460c      	mov	r4, r1
 8006778:	2001      	movs	r0, #1
 800677a:	e7a5      	b.n	80066c8 <_svfiprintf_r+0xd4>
 800677c:	2300      	movs	r3, #0
 800677e:	3401      	adds	r4, #1
 8006780:	9305      	str	r3, [sp, #20]
 8006782:	4619      	mov	r1, r3
 8006784:	f04f 0c0a 	mov.w	ip, #10
 8006788:	4620      	mov	r0, r4
 800678a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800678e:	3a30      	subs	r2, #48	; 0x30
 8006790:	2a09      	cmp	r2, #9
 8006792:	d903      	bls.n	800679c <_svfiprintf_r+0x1a8>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0c5      	beq.n	8006724 <_svfiprintf_r+0x130>
 8006798:	9105      	str	r1, [sp, #20]
 800679a:	e7c3      	b.n	8006724 <_svfiprintf_r+0x130>
 800679c:	fb0c 2101 	mla	r1, ip, r1, r2
 80067a0:	4604      	mov	r4, r0
 80067a2:	2301      	movs	r3, #1
 80067a4:	e7f0      	b.n	8006788 <_svfiprintf_r+0x194>
 80067a6:	ab03      	add	r3, sp, #12
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	462a      	mov	r2, r5
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <_svfiprintf_r+0x1f8>)
 80067ae:	a904      	add	r1, sp, #16
 80067b0:	4638      	mov	r0, r7
 80067b2:	f3af 8000 	nop.w
 80067b6:	1c42      	adds	r2, r0, #1
 80067b8:	4606      	mov	r6, r0
 80067ba:	d1d6      	bne.n	800676a <_svfiprintf_r+0x176>
 80067bc:	89ab      	ldrh	r3, [r5, #12]
 80067be:	065b      	lsls	r3, r3, #25
 80067c0:	f53f af2c 	bmi.w	800661c <_svfiprintf_r+0x28>
 80067c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067c6:	b01d      	add	sp, #116	; 0x74
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	ab03      	add	r3, sp, #12
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4b06      	ldr	r3, [pc, #24]	; (80067ec <_svfiprintf_r+0x1f8>)
 80067d4:	a904      	add	r1, sp, #16
 80067d6:	4638      	mov	r0, r7
 80067d8:	f000 f87a 	bl	80068d0 <_printf_i>
 80067dc:	e7eb      	b.n	80067b6 <_svfiprintf_r+0x1c2>
 80067de:	bf00      	nop
 80067e0:	08006f20 	.word	0x08006f20
 80067e4:	08006f2a 	.word	0x08006f2a
 80067e8:	00000000 	.word	0x00000000
 80067ec:	0800653d 	.word	0x0800653d
 80067f0:	08006f26 	.word	0x08006f26

080067f4 <_printf_common>:
 80067f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f8:	4616      	mov	r6, r2
 80067fa:	4699      	mov	r9, r3
 80067fc:	688a      	ldr	r2, [r1, #8]
 80067fe:	690b      	ldr	r3, [r1, #16]
 8006800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006804:	4293      	cmp	r3, r2
 8006806:	bfb8      	it	lt
 8006808:	4613      	movlt	r3, r2
 800680a:	6033      	str	r3, [r6, #0]
 800680c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006810:	4607      	mov	r7, r0
 8006812:	460c      	mov	r4, r1
 8006814:	b10a      	cbz	r2, 800681a <_printf_common+0x26>
 8006816:	3301      	adds	r3, #1
 8006818:	6033      	str	r3, [r6, #0]
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	0699      	lsls	r1, r3, #26
 800681e:	bf42      	ittt	mi
 8006820:	6833      	ldrmi	r3, [r6, #0]
 8006822:	3302      	addmi	r3, #2
 8006824:	6033      	strmi	r3, [r6, #0]
 8006826:	6825      	ldr	r5, [r4, #0]
 8006828:	f015 0506 	ands.w	r5, r5, #6
 800682c:	d106      	bne.n	800683c <_printf_common+0x48>
 800682e:	f104 0a19 	add.w	sl, r4, #25
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	6832      	ldr	r2, [r6, #0]
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	42ab      	cmp	r3, r5
 800683a:	dc26      	bgt.n	800688a <_printf_common+0x96>
 800683c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006840:	1e13      	subs	r3, r2, #0
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	bf18      	it	ne
 8006846:	2301      	movne	r3, #1
 8006848:	0692      	lsls	r2, r2, #26
 800684a:	d42b      	bmi.n	80068a4 <_printf_common+0xb0>
 800684c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006850:	4649      	mov	r1, r9
 8006852:	4638      	mov	r0, r7
 8006854:	47c0      	blx	r8
 8006856:	3001      	adds	r0, #1
 8006858:	d01e      	beq.n	8006898 <_printf_common+0xa4>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	68e5      	ldr	r5, [r4, #12]
 800685e:	6832      	ldr	r2, [r6, #0]
 8006860:	f003 0306 	and.w	r3, r3, #6
 8006864:	2b04      	cmp	r3, #4
 8006866:	bf08      	it	eq
 8006868:	1aad      	subeq	r5, r5, r2
 800686a:	68a3      	ldr	r3, [r4, #8]
 800686c:	6922      	ldr	r2, [r4, #16]
 800686e:	bf0c      	ite	eq
 8006870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006874:	2500      	movne	r5, #0
 8006876:	4293      	cmp	r3, r2
 8006878:	bfc4      	itt	gt
 800687a:	1a9b      	subgt	r3, r3, r2
 800687c:	18ed      	addgt	r5, r5, r3
 800687e:	2600      	movs	r6, #0
 8006880:	341a      	adds	r4, #26
 8006882:	42b5      	cmp	r5, r6
 8006884:	d11a      	bne.n	80068bc <_printf_common+0xc8>
 8006886:	2000      	movs	r0, #0
 8006888:	e008      	b.n	800689c <_printf_common+0xa8>
 800688a:	2301      	movs	r3, #1
 800688c:	4652      	mov	r2, sl
 800688e:	4649      	mov	r1, r9
 8006890:	4638      	mov	r0, r7
 8006892:	47c0      	blx	r8
 8006894:	3001      	adds	r0, #1
 8006896:	d103      	bne.n	80068a0 <_printf_common+0xac>
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a0:	3501      	adds	r5, #1
 80068a2:	e7c6      	b.n	8006832 <_printf_common+0x3e>
 80068a4:	18e1      	adds	r1, r4, r3
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	2030      	movs	r0, #48	; 0x30
 80068aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ae:	4422      	add	r2, r4
 80068b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068b8:	3302      	adds	r3, #2
 80068ba:	e7c7      	b.n	800684c <_printf_common+0x58>
 80068bc:	2301      	movs	r3, #1
 80068be:	4622      	mov	r2, r4
 80068c0:	4649      	mov	r1, r9
 80068c2:	4638      	mov	r0, r7
 80068c4:	47c0      	blx	r8
 80068c6:	3001      	adds	r0, #1
 80068c8:	d0e6      	beq.n	8006898 <_printf_common+0xa4>
 80068ca:	3601      	adds	r6, #1
 80068cc:	e7d9      	b.n	8006882 <_printf_common+0x8e>
	...

080068d0 <_printf_i>:
 80068d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068d4:	7e0f      	ldrb	r7, [r1, #24]
 80068d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068d8:	2f78      	cmp	r7, #120	; 0x78
 80068da:	4691      	mov	r9, r2
 80068dc:	4680      	mov	r8, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	469a      	mov	sl, r3
 80068e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068e6:	d807      	bhi.n	80068f8 <_printf_i+0x28>
 80068e8:	2f62      	cmp	r7, #98	; 0x62
 80068ea:	d80a      	bhi.n	8006902 <_printf_i+0x32>
 80068ec:	2f00      	cmp	r7, #0
 80068ee:	f000 80d8 	beq.w	8006aa2 <_printf_i+0x1d2>
 80068f2:	2f58      	cmp	r7, #88	; 0x58
 80068f4:	f000 80a3 	beq.w	8006a3e <_printf_i+0x16e>
 80068f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006900:	e03a      	b.n	8006978 <_printf_i+0xa8>
 8006902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006906:	2b15      	cmp	r3, #21
 8006908:	d8f6      	bhi.n	80068f8 <_printf_i+0x28>
 800690a:	a101      	add	r1, pc, #4	; (adr r1, 8006910 <_printf_i+0x40>)
 800690c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006910:	08006969 	.word	0x08006969
 8006914:	0800697d 	.word	0x0800697d
 8006918:	080068f9 	.word	0x080068f9
 800691c:	080068f9 	.word	0x080068f9
 8006920:	080068f9 	.word	0x080068f9
 8006924:	080068f9 	.word	0x080068f9
 8006928:	0800697d 	.word	0x0800697d
 800692c:	080068f9 	.word	0x080068f9
 8006930:	080068f9 	.word	0x080068f9
 8006934:	080068f9 	.word	0x080068f9
 8006938:	080068f9 	.word	0x080068f9
 800693c:	08006a89 	.word	0x08006a89
 8006940:	080069ad 	.word	0x080069ad
 8006944:	08006a6b 	.word	0x08006a6b
 8006948:	080068f9 	.word	0x080068f9
 800694c:	080068f9 	.word	0x080068f9
 8006950:	08006aab 	.word	0x08006aab
 8006954:	080068f9 	.word	0x080068f9
 8006958:	080069ad 	.word	0x080069ad
 800695c:	080068f9 	.word	0x080068f9
 8006960:	080068f9 	.word	0x080068f9
 8006964:	08006a73 	.word	0x08006a73
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	1d1a      	adds	r2, r3, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	602a      	str	r2, [r5, #0]
 8006970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006978:	2301      	movs	r3, #1
 800697a:	e0a3      	b.n	8006ac4 <_printf_i+0x1f4>
 800697c:	6820      	ldr	r0, [r4, #0]
 800697e:	6829      	ldr	r1, [r5, #0]
 8006980:	0606      	lsls	r6, r0, #24
 8006982:	f101 0304 	add.w	r3, r1, #4
 8006986:	d50a      	bpl.n	800699e <_printf_i+0xce>
 8006988:	680e      	ldr	r6, [r1, #0]
 800698a:	602b      	str	r3, [r5, #0]
 800698c:	2e00      	cmp	r6, #0
 800698e:	da03      	bge.n	8006998 <_printf_i+0xc8>
 8006990:	232d      	movs	r3, #45	; 0x2d
 8006992:	4276      	negs	r6, r6
 8006994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006998:	485e      	ldr	r0, [pc, #376]	; (8006b14 <_printf_i+0x244>)
 800699a:	230a      	movs	r3, #10
 800699c:	e019      	b.n	80069d2 <_printf_i+0x102>
 800699e:	680e      	ldr	r6, [r1, #0]
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069a6:	bf18      	it	ne
 80069a8:	b236      	sxthne	r6, r6
 80069aa:	e7ef      	b.n	800698c <_printf_i+0xbc>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	6820      	ldr	r0, [r4, #0]
 80069b0:	1d19      	adds	r1, r3, #4
 80069b2:	6029      	str	r1, [r5, #0]
 80069b4:	0601      	lsls	r1, r0, #24
 80069b6:	d501      	bpl.n	80069bc <_printf_i+0xec>
 80069b8:	681e      	ldr	r6, [r3, #0]
 80069ba:	e002      	b.n	80069c2 <_printf_i+0xf2>
 80069bc:	0646      	lsls	r6, r0, #25
 80069be:	d5fb      	bpl.n	80069b8 <_printf_i+0xe8>
 80069c0:	881e      	ldrh	r6, [r3, #0]
 80069c2:	4854      	ldr	r0, [pc, #336]	; (8006b14 <_printf_i+0x244>)
 80069c4:	2f6f      	cmp	r7, #111	; 0x6f
 80069c6:	bf0c      	ite	eq
 80069c8:	2308      	moveq	r3, #8
 80069ca:	230a      	movne	r3, #10
 80069cc:	2100      	movs	r1, #0
 80069ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069d2:	6865      	ldr	r5, [r4, #4]
 80069d4:	60a5      	str	r5, [r4, #8]
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	bfa2      	ittt	ge
 80069da:	6821      	ldrge	r1, [r4, #0]
 80069dc:	f021 0104 	bicge.w	r1, r1, #4
 80069e0:	6021      	strge	r1, [r4, #0]
 80069e2:	b90e      	cbnz	r6, 80069e8 <_printf_i+0x118>
 80069e4:	2d00      	cmp	r5, #0
 80069e6:	d04d      	beq.n	8006a84 <_printf_i+0x1b4>
 80069e8:	4615      	mov	r5, r2
 80069ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80069ee:	fb03 6711 	mls	r7, r3, r1, r6
 80069f2:	5dc7      	ldrb	r7, [r0, r7]
 80069f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069f8:	4637      	mov	r7, r6
 80069fa:	42bb      	cmp	r3, r7
 80069fc:	460e      	mov	r6, r1
 80069fe:	d9f4      	bls.n	80069ea <_printf_i+0x11a>
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d10b      	bne.n	8006a1c <_printf_i+0x14c>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	07de      	lsls	r6, r3, #31
 8006a08:	d508      	bpl.n	8006a1c <_printf_i+0x14c>
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	6861      	ldr	r1, [r4, #4]
 8006a0e:	4299      	cmp	r1, r3
 8006a10:	bfde      	ittt	le
 8006a12:	2330      	movle	r3, #48	; 0x30
 8006a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a1c:	1b52      	subs	r2, r2, r5
 8006a1e:	6122      	str	r2, [r4, #16]
 8006a20:	f8cd a000 	str.w	sl, [sp]
 8006a24:	464b      	mov	r3, r9
 8006a26:	aa03      	add	r2, sp, #12
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	f7ff fee2 	bl	80067f4 <_printf_common>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d14c      	bne.n	8006ace <_printf_i+0x1fe>
 8006a34:	f04f 30ff 	mov.w	r0, #4294967295
 8006a38:	b004      	add	sp, #16
 8006a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3e:	4835      	ldr	r0, [pc, #212]	; (8006b14 <_printf_i+0x244>)
 8006a40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a44:	6829      	ldr	r1, [r5, #0]
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a4c:	6029      	str	r1, [r5, #0]
 8006a4e:	061d      	lsls	r5, r3, #24
 8006a50:	d514      	bpl.n	8006a7c <_printf_i+0x1ac>
 8006a52:	07df      	lsls	r7, r3, #31
 8006a54:	bf44      	itt	mi
 8006a56:	f043 0320 	orrmi.w	r3, r3, #32
 8006a5a:	6023      	strmi	r3, [r4, #0]
 8006a5c:	b91e      	cbnz	r6, 8006a66 <_printf_i+0x196>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	f023 0320 	bic.w	r3, r3, #32
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	2310      	movs	r3, #16
 8006a68:	e7b0      	b.n	80069cc <_printf_i+0xfc>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	f043 0320 	orr.w	r3, r3, #32
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	2378      	movs	r3, #120	; 0x78
 8006a74:	4828      	ldr	r0, [pc, #160]	; (8006b18 <_printf_i+0x248>)
 8006a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a7a:	e7e3      	b.n	8006a44 <_printf_i+0x174>
 8006a7c:	0659      	lsls	r1, r3, #25
 8006a7e:	bf48      	it	mi
 8006a80:	b2b6      	uxthmi	r6, r6
 8006a82:	e7e6      	b.n	8006a52 <_printf_i+0x182>
 8006a84:	4615      	mov	r5, r2
 8006a86:	e7bb      	b.n	8006a00 <_printf_i+0x130>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	6826      	ldr	r6, [r4, #0]
 8006a8c:	6961      	ldr	r1, [r4, #20]
 8006a8e:	1d18      	adds	r0, r3, #4
 8006a90:	6028      	str	r0, [r5, #0]
 8006a92:	0635      	lsls	r5, r6, #24
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	d501      	bpl.n	8006a9c <_printf_i+0x1cc>
 8006a98:	6019      	str	r1, [r3, #0]
 8006a9a:	e002      	b.n	8006aa2 <_printf_i+0x1d2>
 8006a9c:	0670      	lsls	r0, r6, #25
 8006a9e:	d5fb      	bpl.n	8006a98 <_printf_i+0x1c8>
 8006aa0:	8019      	strh	r1, [r3, #0]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6123      	str	r3, [r4, #16]
 8006aa6:	4615      	mov	r5, r2
 8006aa8:	e7ba      	b.n	8006a20 <_printf_i+0x150>
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	1d1a      	adds	r2, r3, #4
 8006aae:	602a      	str	r2, [r5, #0]
 8006ab0:	681d      	ldr	r5, [r3, #0]
 8006ab2:	6862      	ldr	r2, [r4, #4]
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f7f9 fb92 	bl	80001e0 <memchr>
 8006abc:	b108      	cbz	r0, 8006ac2 <_printf_i+0x1f2>
 8006abe:	1b40      	subs	r0, r0, r5
 8006ac0:	6060      	str	r0, [r4, #4]
 8006ac2:	6863      	ldr	r3, [r4, #4]
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006acc:	e7a8      	b.n	8006a20 <_printf_i+0x150>
 8006ace:	6923      	ldr	r3, [r4, #16]
 8006ad0:	462a      	mov	r2, r5
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	47d0      	blx	sl
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d0ab      	beq.n	8006a34 <_printf_i+0x164>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	079b      	lsls	r3, r3, #30
 8006ae0:	d413      	bmi.n	8006b0a <_printf_i+0x23a>
 8006ae2:	68e0      	ldr	r0, [r4, #12]
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	4298      	cmp	r0, r3
 8006ae8:	bfb8      	it	lt
 8006aea:	4618      	movlt	r0, r3
 8006aec:	e7a4      	b.n	8006a38 <_printf_i+0x168>
 8006aee:	2301      	movs	r3, #1
 8006af0:	4632      	mov	r2, r6
 8006af2:	4649      	mov	r1, r9
 8006af4:	4640      	mov	r0, r8
 8006af6:	47d0      	blx	sl
 8006af8:	3001      	adds	r0, #1
 8006afa:	d09b      	beq.n	8006a34 <_printf_i+0x164>
 8006afc:	3501      	adds	r5, #1
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	9903      	ldr	r1, [sp, #12]
 8006b02:	1a5b      	subs	r3, r3, r1
 8006b04:	42ab      	cmp	r3, r5
 8006b06:	dcf2      	bgt.n	8006aee <_printf_i+0x21e>
 8006b08:	e7eb      	b.n	8006ae2 <_printf_i+0x212>
 8006b0a:	2500      	movs	r5, #0
 8006b0c:	f104 0619 	add.w	r6, r4, #25
 8006b10:	e7f5      	b.n	8006afe <_printf_i+0x22e>
 8006b12:	bf00      	nop
 8006b14:	08006f31 	.word	0x08006f31
 8006b18:	08006f42 	.word	0x08006f42

08006b1c <memmove>:
 8006b1c:	4288      	cmp	r0, r1
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	eb01 0402 	add.w	r4, r1, r2
 8006b24:	d902      	bls.n	8006b2c <memmove+0x10>
 8006b26:	4284      	cmp	r4, r0
 8006b28:	4623      	mov	r3, r4
 8006b2a:	d807      	bhi.n	8006b3c <memmove+0x20>
 8006b2c:	1e43      	subs	r3, r0, #1
 8006b2e:	42a1      	cmp	r1, r4
 8006b30:	d008      	beq.n	8006b44 <memmove+0x28>
 8006b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b3a:	e7f8      	b.n	8006b2e <memmove+0x12>
 8006b3c:	4402      	add	r2, r0
 8006b3e:	4601      	mov	r1, r0
 8006b40:	428a      	cmp	r2, r1
 8006b42:	d100      	bne.n	8006b46 <memmove+0x2a>
 8006b44:	bd10      	pop	{r4, pc}
 8006b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b4e:	e7f7      	b.n	8006b40 <memmove+0x24>

08006b50 <_free_r>:
 8006b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b52:	2900      	cmp	r1, #0
 8006b54:	d044      	beq.n	8006be0 <_free_r+0x90>
 8006b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b5a:	9001      	str	r0, [sp, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b62:	bfb8      	it	lt
 8006b64:	18e4      	addlt	r4, r4, r3
 8006b66:	f000 f913 	bl	8006d90 <__malloc_lock>
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <_free_r+0x94>)
 8006b6c:	9801      	ldr	r0, [sp, #4]
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	b933      	cbnz	r3, 8006b80 <_free_r+0x30>
 8006b72:	6063      	str	r3, [r4, #4]
 8006b74:	6014      	str	r4, [r2, #0]
 8006b76:	b003      	add	sp, #12
 8006b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b7c:	f000 b90e 	b.w	8006d9c <__malloc_unlock>
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d908      	bls.n	8006b96 <_free_r+0x46>
 8006b84:	6825      	ldr	r5, [r4, #0]
 8006b86:	1961      	adds	r1, r4, r5
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	bf01      	itttt	eq
 8006b8c:	6819      	ldreq	r1, [r3, #0]
 8006b8e:	685b      	ldreq	r3, [r3, #4]
 8006b90:	1949      	addeq	r1, r1, r5
 8006b92:	6021      	streq	r1, [r4, #0]
 8006b94:	e7ed      	b.n	8006b72 <_free_r+0x22>
 8006b96:	461a      	mov	r2, r3
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b10b      	cbz	r3, 8006ba0 <_free_r+0x50>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d9fa      	bls.n	8006b96 <_free_r+0x46>
 8006ba0:	6811      	ldr	r1, [r2, #0]
 8006ba2:	1855      	adds	r5, r2, r1
 8006ba4:	42a5      	cmp	r5, r4
 8006ba6:	d10b      	bne.n	8006bc0 <_free_r+0x70>
 8006ba8:	6824      	ldr	r4, [r4, #0]
 8006baa:	4421      	add	r1, r4
 8006bac:	1854      	adds	r4, r2, r1
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	6011      	str	r1, [r2, #0]
 8006bb2:	d1e0      	bne.n	8006b76 <_free_r+0x26>
 8006bb4:	681c      	ldr	r4, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	6053      	str	r3, [r2, #4]
 8006bba:	4421      	add	r1, r4
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	e7da      	b.n	8006b76 <_free_r+0x26>
 8006bc0:	d902      	bls.n	8006bc8 <_free_r+0x78>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	e7d6      	b.n	8006b76 <_free_r+0x26>
 8006bc8:	6825      	ldr	r5, [r4, #0]
 8006bca:	1961      	adds	r1, r4, r5
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	bf04      	itt	eq
 8006bd0:	6819      	ldreq	r1, [r3, #0]
 8006bd2:	685b      	ldreq	r3, [r3, #4]
 8006bd4:	6063      	str	r3, [r4, #4]
 8006bd6:	bf04      	itt	eq
 8006bd8:	1949      	addeq	r1, r1, r5
 8006bda:	6021      	streq	r1, [r4, #0]
 8006bdc:	6054      	str	r4, [r2, #4]
 8006bde:	e7ca      	b.n	8006b76 <_free_r+0x26>
 8006be0:	b003      	add	sp, #12
 8006be2:	bd30      	pop	{r4, r5, pc}
 8006be4:	20003828 	.word	0x20003828

08006be8 <sbrk_aligned>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	4e0e      	ldr	r6, [pc, #56]	; (8006c24 <sbrk_aligned+0x3c>)
 8006bec:	460c      	mov	r4, r1
 8006bee:	6831      	ldr	r1, [r6, #0]
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	b911      	cbnz	r1, 8006bfa <sbrk_aligned+0x12>
 8006bf4:	f000 f8bc 	bl	8006d70 <_sbrk_r>
 8006bf8:	6030      	str	r0, [r6, #0]
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f000 f8b7 	bl	8006d70 <_sbrk_r>
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	d00a      	beq.n	8006c1c <sbrk_aligned+0x34>
 8006c06:	1cc4      	adds	r4, r0, #3
 8006c08:	f024 0403 	bic.w	r4, r4, #3
 8006c0c:	42a0      	cmp	r0, r4
 8006c0e:	d007      	beq.n	8006c20 <sbrk_aligned+0x38>
 8006c10:	1a21      	subs	r1, r4, r0
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 f8ac 	bl	8006d70 <_sbrk_r>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d101      	bne.n	8006c20 <sbrk_aligned+0x38>
 8006c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c20:	4620      	mov	r0, r4
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	2000382c 	.word	0x2000382c

08006c28 <_malloc_r>:
 8006c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2c:	1ccd      	adds	r5, r1, #3
 8006c2e:	f025 0503 	bic.w	r5, r5, #3
 8006c32:	3508      	adds	r5, #8
 8006c34:	2d0c      	cmp	r5, #12
 8006c36:	bf38      	it	cc
 8006c38:	250c      	movcc	r5, #12
 8006c3a:	2d00      	cmp	r5, #0
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	db01      	blt.n	8006c44 <_malloc_r+0x1c>
 8006c40:	42a9      	cmp	r1, r5
 8006c42:	d905      	bls.n	8006c50 <_malloc_r+0x28>
 8006c44:	230c      	movs	r3, #12
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	2600      	movs	r6, #0
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c50:	4e2e      	ldr	r6, [pc, #184]	; (8006d0c <_malloc_r+0xe4>)
 8006c52:	f000 f89d 	bl	8006d90 <__malloc_lock>
 8006c56:	6833      	ldr	r3, [r6, #0]
 8006c58:	461c      	mov	r4, r3
 8006c5a:	bb34      	cbnz	r4, 8006caa <_malloc_r+0x82>
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f7ff ffc2 	bl	8006be8 <sbrk_aligned>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	4604      	mov	r4, r0
 8006c68:	d14d      	bne.n	8006d06 <_malloc_r+0xde>
 8006c6a:	6834      	ldr	r4, [r6, #0]
 8006c6c:	4626      	mov	r6, r4
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	d140      	bne.n	8006cf4 <_malloc_r+0xcc>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	4631      	mov	r1, r6
 8006c76:	4638      	mov	r0, r7
 8006c78:	eb04 0803 	add.w	r8, r4, r3
 8006c7c:	f000 f878 	bl	8006d70 <_sbrk_r>
 8006c80:	4580      	cmp	r8, r0
 8006c82:	d13a      	bne.n	8006cfa <_malloc_r+0xd2>
 8006c84:	6821      	ldr	r1, [r4, #0]
 8006c86:	3503      	adds	r5, #3
 8006c88:	1a6d      	subs	r5, r5, r1
 8006c8a:	f025 0503 	bic.w	r5, r5, #3
 8006c8e:	3508      	adds	r5, #8
 8006c90:	2d0c      	cmp	r5, #12
 8006c92:	bf38      	it	cc
 8006c94:	250c      	movcc	r5, #12
 8006c96:	4629      	mov	r1, r5
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f7ff ffa5 	bl	8006be8 <sbrk_aligned>
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	d02b      	beq.n	8006cfa <_malloc_r+0xd2>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	442b      	add	r3, r5
 8006ca6:	6023      	str	r3, [r4, #0]
 8006ca8:	e00e      	b.n	8006cc8 <_malloc_r+0xa0>
 8006caa:	6822      	ldr	r2, [r4, #0]
 8006cac:	1b52      	subs	r2, r2, r5
 8006cae:	d41e      	bmi.n	8006cee <_malloc_r+0xc6>
 8006cb0:	2a0b      	cmp	r2, #11
 8006cb2:	d916      	bls.n	8006ce2 <_malloc_r+0xba>
 8006cb4:	1961      	adds	r1, r4, r5
 8006cb6:	42a3      	cmp	r3, r4
 8006cb8:	6025      	str	r5, [r4, #0]
 8006cba:	bf18      	it	ne
 8006cbc:	6059      	strne	r1, [r3, #4]
 8006cbe:	6863      	ldr	r3, [r4, #4]
 8006cc0:	bf08      	it	eq
 8006cc2:	6031      	streq	r1, [r6, #0]
 8006cc4:	5162      	str	r2, [r4, r5]
 8006cc6:	604b      	str	r3, [r1, #4]
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f104 060b 	add.w	r6, r4, #11
 8006cce:	f000 f865 	bl	8006d9c <__malloc_unlock>
 8006cd2:	f026 0607 	bic.w	r6, r6, #7
 8006cd6:	1d23      	adds	r3, r4, #4
 8006cd8:	1af2      	subs	r2, r6, r3
 8006cda:	d0b6      	beq.n	8006c4a <_malloc_r+0x22>
 8006cdc:	1b9b      	subs	r3, r3, r6
 8006cde:	50a3      	str	r3, [r4, r2]
 8006ce0:	e7b3      	b.n	8006c4a <_malloc_r+0x22>
 8006ce2:	6862      	ldr	r2, [r4, #4]
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	bf0c      	ite	eq
 8006ce8:	6032      	streq	r2, [r6, #0]
 8006cea:	605a      	strne	r2, [r3, #4]
 8006cec:	e7ec      	b.n	8006cc8 <_malloc_r+0xa0>
 8006cee:	4623      	mov	r3, r4
 8006cf0:	6864      	ldr	r4, [r4, #4]
 8006cf2:	e7b2      	b.n	8006c5a <_malloc_r+0x32>
 8006cf4:	4634      	mov	r4, r6
 8006cf6:	6876      	ldr	r6, [r6, #4]
 8006cf8:	e7b9      	b.n	8006c6e <_malloc_r+0x46>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	4638      	mov	r0, r7
 8006d00:	f000 f84c 	bl	8006d9c <__malloc_unlock>
 8006d04:	e7a1      	b.n	8006c4a <_malloc_r+0x22>
 8006d06:	6025      	str	r5, [r4, #0]
 8006d08:	e7de      	b.n	8006cc8 <_malloc_r+0xa0>
 8006d0a:	bf00      	nop
 8006d0c:	20003828 	.word	0x20003828

08006d10 <_realloc_r>:
 8006d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d14:	4680      	mov	r8, r0
 8006d16:	4614      	mov	r4, r2
 8006d18:	460e      	mov	r6, r1
 8006d1a:	b921      	cbnz	r1, 8006d26 <_realloc_r+0x16>
 8006d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d20:	4611      	mov	r1, r2
 8006d22:	f7ff bf81 	b.w	8006c28 <_malloc_r>
 8006d26:	b92a      	cbnz	r2, 8006d34 <_realloc_r+0x24>
 8006d28:	f7ff ff12 	bl	8006b50 <_free_r>
 8006d2c:	4625      	mov	r5, r4
 8006d2e:	4628      	mov	r0, r5
 8006d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d34:	f000 f838 	bl	8006da8 <_malloc_usable_size_r>
 8006d38:	4284      	cmp	r4, r0
 8006d3a:	4607      	mov	r7, r0
 8006d3c:	d802      	bhi.n	8006d44 <_realloc_r+0x34>
 8006d3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d42:	d812      	bhi.n	8006d6a <_realloc_r+0x5a>
 8006d44:	4621      	mov	r1, r4
 8006d46:	4640      	mov	r0, r8
 8006d48:	f7ff ff6e 	bl	8006c28 <_malloc_r>
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d0ed      	beq.n	8006d2e <_realloc_r+0x1e>
 8006d52:	42bc      	cmp	r4, r7
 8006d54:	4622      	mov	r2, r4
 8006d56:	4631      	mov	r1, r6
 8006d58:	bf28      	it	cs
 8006d5a:	463a      	movcs	r2, r7
 8006d5c:	f7ff fbb8 	bl	80064d0 <memcpy>
 8006d60:	4631      	mov	r1, r6
 8006d62:	4640      	mov	r0, r8
 8006d64:	f7ff fef4 	bl	8006b50 <_free_r>
 8006d68:	e7e1      	b.n	8006d2e <_realloc_r+0x1e>
 8006d6a:	4635      	mov	r5, r6
 8006d6c:	e7df      	b.n	8006d2e <_realloc_r+0x1e>
	...

08006d70 <_sbrk_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4d06      	ldr	r5, [pc, #24]	; (8006d8c <_sbrk_r+0x1c>)
 8006d74:	2300      	movs	r3, #0
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	f7fa f8be 	bl	8000efc <_sbrk>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_sbrk_r+0x1a>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_sbrk_r+0x1a>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	20003830 	.word	0x20003830

08006d90 <__malloc_lock>:
 8006d90:	4801      	ldr	r0, [pc, #4]	; (8006d98 <__malloc_lock+0x8>)
 8006d92:	f000 b811 	b.w	8006db8 <__retarget_lock_acquire_recursive>
 8006d96:	bf00      	nop
 8006d98:	20003834 	.word	0x20003834

08006d9c <__malloc_unlock>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	; (8006da4 <__malloc_unlock+0x8>)
 8006d9e:	f000 b80c 	b.w	8006dba <__retarget_lock_release_recursive>
 8006da2:	bf00      	nop
 8006da4:	20003834 	.word	0x20003834

08006da8 <_malloc_usable_size_r>:
 8006da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dac:	1f18      	subs	r0, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bfbc      	itt	lt
 8006db2:	580b      	ldrlt	r3, [r1, r0]
 8006db4:	18c0      	addlt	r0, r0, r3
 8006db6:	4770      	bx	lr

08006db8 <__retarget_lock_acquire_recursive>:
 8006db8:	4770      	bx	lr

08006dba <__retarget_lock_release_recursive>:
 8006dba:	4770      	bx	lr

08006dbc <_init>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_fini>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr
